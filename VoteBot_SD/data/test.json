{"tokens": ["for now i restore the range to <number> - <number> , or else exist project will break", "on sun , oct <number> , <number> at 7:04 pm , juan linietsky < reduzio@gmail", "com > write :"], "label": "0", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["get support for ngoninit in the service would help a lot , assume ngoninit be execute after the current service be do construct , and be available for di ."], "label": "1", "login": "JGH153", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["this feature would be a great add", "here be another example of how it currently work :", "as a workaround , you can catch the error in a try / catch block .", "but i could n't find a way to trigger an error on the vue instance", "i think maybe the convention of emit an <tag> event might work", "i think that or something similar could be helpful"], "label": "1", "login": "techpines", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@mlc - mlapis thank", "one more questionow to get the component declare in this dynamic module in aot mode"], "label": "0", "login": "Hx2heng", "character": "NONE", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["i be for the <tag> keyword , it wo n't even break compatibility .", "instead , make <tag> and <tag> private by use <tag> , would change thing for a few use it for other reason"], "label": "1", "login": "Toshiwoz", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["there be a repo on the other thread that show this in action , not work as it should"], "label": "1", "login": "neofuture", "character": "NONE", "reply": "Author", "beReplied": "Author"}
{"tokens": ["be it possible to $ emit from functional component"], "label": "0", "login": "robokozo", "character": "NONE", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["consider composition over inheritance .", "a component be a piece of code that interact with a view", "there be always a <number> to <number> relationship between they"], "label": "-1", "login": "dirkluijk", "character": "CONTRIBUTOR", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["you be right , i will probably just do that", "but i still actually like the function - base template", "it allow async operation in the template", "- make the bundle renderer easy to use , and more js templating  instead of <tag>", "- the documentation could be simplify", "- could potentially remove / deprecate string - base lodash template dependency", "* * with template function * *", "< html$ { context", "' ' + context", "htmlattr : '' } >", "$ { await context", "$ { result }", "< script>$ { bundle", "client } < /script >", "< /html > <tag> <tag>", "* * vs string template * *"], "label": "1", "login": "AlbertMarashi", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["@ravenscar either of these look good", "however , i would point out that <tag> be a <tag> , which apply to the compilation process , and would not necessarily , and possibly should not , apply to the process by which ts read in and process its configuration .", "there be potentially no need to worry about any conflict between the compiler 's module resolution set and that apply by ts in resolve <tag> path", "i see no problem with the latter always use node resolution strategy", "for instance , afaik tslint always use node resolution semantic for its <tag> option", "if it be consider important to have both resolution strategy available for <tag> , then i would slightly prefer a new <tag> property at the top level of <tag> instead of embed this information in the <tag> path itself with the scheme - like <tag> notation", "or , allow <tag> , with the default for <tag> hopefully be <tag>"], "label": "1", "login": "rtm", "character": "Author", "reply": "NONE", "beReplied": "Author"}
{"tokens": ["i develop mainly procedural generate game", "those can be do on gdscript on a small scale , but sometimes you need more", "but if you use any of the available option you ca n't really use gdscript together with they", "there be a lot of thing you need to translate between the two , call function from each other cost a lot and be generally hard to setup and maintain  .", "i just wanna use gdscript goddammit"], "label": "1", "login": "mateusak", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["this be not special to decorator", "you can observe the :", "the issue be in javascript name binding be hoist to the top of the scope , but they be undefined until first initialize", "this be really hard for a static analysis tool / compiler to detect correctly all the time", "as the same code can be valid if your variable be define", "consider wrap the first class in a function declaration as :", "the only possible way i can think of be to make <tag> a function instead of an array , this mean a dispatch call on every query , which can be expensive ."], "label": "-1", "login": "mhegazy", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["i be read more about it", "it seem the common case be to just remove the", "pi division to make this more artist friendly , even incorrect", "by check eevee and unreal , it seem that be the case too"], "label": "0", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["as a clarification , i would say that i be not argue against decorator , even if i have reservation about they", "i be instead propose annotation independently", "you can consider they to be sugar for a very common family of decorator use case , a way to nudge framework towards a common standard for those use case , and as a way to align with traceur / atscript .", "you could conceivably have both in the language , so long as you use a different sigil for each", "also , while you can implement annotation use decorator , the result be not as clean", "for example , you can implement they one of two way that i can think of : via an ' annotate ' decorator that take an annotation list as input :", "the drawback to this approach be that the syntax be painful", "at this point , you might as well just use a static :", "alternatively , each decorator could add the annotate field internally , so you could get roughly back to the same clean declarative syntax :", "the drawback to this approach be that each decorator would need boilerplate code for add itself to the annotate array of the constructor function , if it do n't exist , else create it", "that be somewhat brittle , as any decorator which forget to check if the array already exist would end up overwrite the exist one", "use decorator to implement member and parameter annotation , however , be troublesome :"], "label": "1", "login": "JeroMiya", "character": "Author", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["there be work plan on the gdscript compiler to bring jit compilation and performance improvement with the optional static typing", "with gdnative available  i do n't see the devs create a new language from scratch while there be so much work to do besides that", "i do n't see the need for it either with all the available option and the front - end language delegate so much work to the back - end : yes gdscript might be the same speed as interpret python right now , but if you rely on the editor , build - in node , physics , etc . , you be delegate a lot of work to the engine ."], "label": "-1", "login": "NathanLovato", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "Author"}
{"tokens": ["it be well to create a component for that and compute there only once the heavy operation you need"], "label": "-1", "login": "posva", "character": "MEMBER", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["actually i be with @simplesmiler @herringtondarkholme", "we might need a way to reuse render logic in template without mess up data context", "another parallel mechanism will definitely increase complexity but i think it be well than introduce something like <tag> to reuse template piece after all ."], "label": "-1", "login": "Justineo", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NONE"}
{"tokens": ["a v - swap for change element would be a killer feature", "so that you can trigger a \" refresh \" on something like : src if you want to trigger animation when change stuff ."], "label": "-1", "login": "daphen", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["and i understand the use - case may be rare , but this be something that can and will increase server - side adoption and would be even useful for nuxt", "this would finally allow a head management system to exist in the html / template section of sfc and would make ssr , seo and head management much easy", "if this be not possible , do you know a way to find a solution to this issue"], "label": "1", "login": "AlbertMarashi", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["from design point of view it be responsibility of di configuration to decide whether service be singleton or not , be it lazy or eager , in general you should not change your service class implementation if you want to make it eager or lazy .", "also , application will be break when you try to replace eager service with another lazy implementation and there be no way to detect it", "<tag> should have consistent behavior across all case because it be lifecycle callback", "requirement for <tag> have poor documentation :", "originally we be tell that <tag> be require for service that require injection of other service"], "label": "-1", "login": "kemsky", "character": "NONE", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["i understand that people want to customize the engine color , but first thing it can be do with texture  , and second i think that the people that be go tho change the color of the engine be minimal", "it be simply not worth it to restrict the theme to be simple box in favor to color customization that just a few people will use"], "label": "-1", "login": "djrm", "character": "MEMBER", "reply": "Author", "beReplied": "Author"}
{"tokens": ["i just make a proposal which address this issue over in # <number>", "i 'd be very interested in any feedback you might have", "specifically , it allow a service to add / remove error from a control", "because error be key to the service which add they , one service can not overwrite another 's error", "for example , this hypothetical service check the <tag> to see if the enter username already exist or not", "it use debounce time to ensure that check be n't make too frequently", "more broadly , this allow you to programmatically add error to a control however you see fit , either synchronously or asynchronously", "it would allow you to create a custom \" validation \" interval ."], "label": "1", "login": "jorroll", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["sorry , that comment be a bit rude", "you can modify the prop you pass down .", "i feel like you have n't dig enough your problem but at the same time , to i , it look like you understand more than the average user", "have you ask on the forum or discord to get further help"], "label": "-1", "login": "posva", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["dude i be not stupid ,", "if you know other application that can dock a. separate process be my guest , as neither unreal or unity do this .", "on we d , aug <number> , <number> at 10:28 pm , manson mamaril notifications@github"], "label": "-1", "login": "reduz", "character": "MEMBER", "reply": "NONE", "beReplied": "COLLABORATOR"}
{"tokens": ["and that would hold for any brdf function f which do n't start diverge at grazing angle"], "label": "1", "login": "ghost", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["iteration protocol do not ensure that iterator can be rewind  , which mean it will break when render function be call again", "also , array - like generally do n't simply read value from memory but do some extra work which should n't be repeat on each render .", "that be say i do n't think you would need to be able to iterate through array - like or custom object directly", "instead , you need array representation of underlying value  , which will always be a native array", "or possibly other build - in iterable , when they be support"], "label": "-1", "login": "mrliptontea", "character": "NONE", "reply": "NoReply", "beReplied": "CONTRIBUTOR"}
{"tokens": ["this be interesting , since patch release often have security patch in they", "in this sense , patch release be much more important than major version release to the people see they .", "to this end , i would imagine there be many user who be on ps <number> lts who do n't want a notification for ps 7", "1 or <number> , but who really need to see one for ps 7", "i believe this be exactly how the lts update channel be configure to function currently", "i think the assumption in the issue here be that big version increment mean that there be more goodness mean that you should be more likely to upgrade", "but really it be the opposite", "small version increment mean more relevant to your current installation mean you have more to gain and less to lose by upgrading", "the version update notification be n't market , it be powershell 's current solution to the update problem give that its installation be manage in different way across different platform"], "label": "-1", "login": "rjmholt", "character": "COLLABORATOR", "reply": "NoReply", "beReplied": "COLLABORATOR"}
{"tokens": ["maybe with visual script it could be acessible even ou touch screen"], "label": "0", "login": "Elmapul", "character": "NONE", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["while i do agree  with you @glassdimly , and i love the ruby programming language for follow the assume - the - dev - know - good paradigm , vue", "js do have a responsibility / goal to be minimal", "i do n't want a fix like <tag> just because it would solve my current problem", "i have rather the vue", "js team analyze the entire range of limitation and integrate a tool that solve all of they , or add a tool that eliminate the situation altogether , instead of the quick fix of tack on a <tag>", "for example , maybe it would be well for there to be a <tag> attribute that replace <tag> which let the parent control the update , or maybe there should be a <tag> where the <tag> indicate that change in the <tag> attribute wo n't cause the component to re - render", "i do n't have all of the possible situation available so i ca n't say i have the ideal solution", "however , i still would like to know how @yyx990803 or anyone else would recommend pass rapidly - change datum to a component that need to render less - rapidly"], "label": "0", "login": "jeff-hykin", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["ca n't this trivially be achieve by model your command as a plain class and have a \" factory injectable \" with some create method that create an instance , pass the dependency to it and then return it ?"], "label": "-1", "login": "Airblader", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["what metadata be you specifically refer to", "my understanding be that the ngfactories generate in - memory by the jit be equivalent to those of the aot .", "generate the same ngfactories in - memory , the aot should be able to replicate this process", "i have n't read through the aot compiler 's source , though"], "label": "1", "login": "deontologic", "character": "Author", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i have already +1 this , but want to throw a note for people who need something ow", "while modifier be way more effecient , i have be able to achieve the same effect use a transparent input / component with a compute getter / setter field .", "i can share an example if someone need it"], "label": "-1", "login": "rkingon", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["make an http request from a service constructor be not support", "if that be the case , then the doc should specify that at some point , and maybe emitt a error message if the service fail to initialize before its inject", "it be also really inconsistent as it only fail to work when the service be inject into a interceptor , and it can easily be solve by a settimeout around the http call ."], "label": "1", "login": "JGH153", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@yyx990803 , you be right this be pretty much what i be after", "however , it be interesting to note that <tag> be compile down to <tag> directive", "it would be cool if there be a way to do the same thing where something like <tag> be compile down to <tag> and you could use clean syntax like :", "btw , i really love this framework", "you 've manage to create an elegant , well document and easily comprehensible software with an economy of feature", "i previously use angular and finally realize that despite be support by google and widely recommend it be an inelegant , overcomplicated , inefficient mess", "i be also interested in mithril but ultimately be turn off by the idea of be force to template html in javascript", "i use jade and this work well with vue", "my frontend software stack currently consist of vue", "js , jquery , jade , stylus , autoprefixer , browserify and gnu make", "this setup be work really well", "js have be a breath of fresh air"], "label": "1", "login": "jcoffland", "character": "Author", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["so you ca n't rely on the ordering", "on 01/02/2017 , tamkcr < notifications@github", "com > write :"], "label": "0", "login": "CodeDoes", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["@ebelew @kilasuit thank you", "but be there a way to set a know maximum compatible version ?"], "label": "1", "login": "yuzhiqiangorg", "character": "Author", "reply": "NONE", "beReplied": "CONTRIBUTOR"}
{"tokens": ["so i remember the real reason we do n't do this originally", "right now , tagged template be consider * memberexpression*s", "those bind just a bit more tightly than a * callexpression * or * newexpression *", "since tag template will always bind more tightly , we 'll always * try * to parse tag template type argument , even when we be go to parse out a call expression .", "if you take the following :", "a naive approach would do the following :", "let i try to parse out a * memberexpression *", "i have a <tag>", "keep parse out the rest of a * memberexpression *", "let i look try parse out type argument for a tagged template", "i have type argument", "let i see if i have a template string", "i have an open paren - let i discard all the work i 've do to get those type parameter", "i be able to get <tag> as a * memberexpression *", "let i see if i can parse out a call", "i see a <tag>", "i should parse out type argument as part of a * callexpression *", "i get type argument", "now i see an open paren", "i 'll try parse out the call argument", "this approach mean that * for every call expression with generic * , we have to perform step 1", "ii , through 1", "iv even though we be go to throw away the result", "while it be rare that you have to supply type argument , it be less - than - ideal to do a re - parse every time"], "label": "1", "login": "DanielRosenwasser", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["well , i guess we still need to set what <number> mean in term of watt or lumen , because <number> correspond to * some * amount of power already , and we can add a hard - code coefficient in the glsl code such that <number> correspond to a reasonable  amount of maximum power"], "label": "0", "login": "ghost", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["in the same way , static private attribute in class must be allow too .", "r  f  rence : <url>", "already compatible in edge  , node  , chrome"], "label": "1", "login": "Binau", "character": "Author", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["also worth mention <tag>", "however it ca n't be use with inputs"], "label": "0", "login": "pauldraper", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["now everything be solve", "<tag> be too big for nashorn", "complete time : 20982", "first chunk : 1202", "complete time : 2164", "first chunk : 90", "so it be rather slow :/ but why"], "label": "0", "login": "wojtask9", "character": "NONE", "reply": "NONE", "beReplied": "Author"}
{"tokens": ["i dont perfer .local either but have it the same across all platform would be nice for powershell", "all those team be consistent across their platform , we be not"], "label": "-1", "login": "thezim", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["sorry , i do n't understand what you mean", "when i try to _ right click > > open powershell _ in windows explorer , it take quite long time and as you see , there be no text display here .", "i think affter excute command <tag> , powershell do response but it ca n't display any text"], "label": "1", "login": "TranNgocKhoa", "character": "Author", "reply": "COLLABORATOR", "beReplied": "Author"}
{"tokens": ["that be not really detrimental for this change", "i mean , most of godot contributor work on free time and work on what they want", "for @nullconstant 's case it seem be either \" do this or do nothing \"  , so do this be a good thing in general", "also , the \" there be well thing to do \" argument be the way to have nothing do imo", "of course nothing will be * merge * until we be confident that it wo n't break stuff and wo n't be do close to a release", "i agree there be more important stuff , but it do n't mean this ca n't be start", "the thing be that someone work on this will likely have to do this alone", "of course specific question can be answer by the core devs , but anymore than that wo n't happen", "that be why scon be never consider to be replace : no one so far want to get the hand dirty", "like i say about bullet before : someone have to get it to work and prove it be possible and well , otherwise we will stay with the status quo"], "label": "0", "login": "vnen", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["that difference be still there so it will introduce some break change , also the browser compatibility constraint mean we will only do it for v3 ."], "label": "-1", "login": "yyx990803", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["@reduz   it might not be that frequent , but it can happen , and be certainly possible to do", "i already have module idea in that would rely on this", "otherwise , the same issue that lead godot to support c module would be present in module again ."], "label": "-1", "login": "Zylann", "character": "CONTRIBUTOR", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["there be n't any problem with the <tag> syntax except that there seem to be some push to deprecate it ."], "label": "-1", "login": "rpkilby", "character": "Author", "reply": "NONE", "beReplied": "MEMBER"}
{"tokens": ["i honestly do n't think the physics engine would lag with only <number> entity", "can you copy - paste the code you use in the <tag>"], "label": "-1", "login": "groud", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["i do try it with class , the following do not work", "not sure if its useful , the follow work :"], "label": "0", "login": "basarat", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["this issue have be automatically lock due to inactivity", "please file a new issue if you be encounter a similar or related problem", "read more about our", "< sub>_this action have be perform automatically by a bot"], "label": "0", "login": "angular-automatic-lock-bot[bot]", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["you do n't need a special rule for union type because it be already the case that <tag> be assignable to <tag>"], "label": "-1", "login": "RyanCavanaugh", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NONE"}
{"tokens": ["the bar for servicing update be high", "we do n't take trivial fix to avoid risk of regression .   there should only be fix that be security , compliance , or customer block issue .", "this  describe the intent and design in detail and way to disable", "auto - update be something i would love to have , but be very difficult to solve whether because it require root or due to open file handle  on windows", "however a cmdlet like <tag> where we make it easy to install an update version the same way you originally instal it  seem feasible"], "label": "-1", "login": "SteveL-MSFT", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["but this may lead to the situation where the compiler emit es6 code without complaint , which will only work when you be indeed go to pull they through babel", "if you 'd use a non - dynamic - check - loader , it will fail at runtime", "but simply ' automagically re - type ' it as something else  be not the right solution either , as it only work if you be use babel", "even though the package may be generate use babel  , it be not guarantee that the user will also use babel", "what do you mean", "i think both ' proper external ' be equally applicable to cjs and es6", "i think our discussion show that there be valid use - case for it , but that it should not be the default behaviour :)", "certainly not just base on --target es6", "maybe some other switch that ' tweak ' the resolve behaviour", "i be sure there will be more of these anyway", "anyway , this be only really relevant for the algo a case", "in algo b , people would still explicitly list their reference somehow  , and can handle it there", "i 've be think about that recently as well , but i come to the conclusion that an es5 / cjs package should _ not _ provide such definition if it do n't also provide the implementation", "i think it would be a good thing that the compiler tell i \" unknown type promise \" , such that i know i need to provide a polyfill myself when i be use node 0", "or that if i be compile for 0", "12 , it will already work without complaint", "seem the ts team be already work on something to facilitate the latter in # <number> , btw"], "label": "1", "login": "poelstra", "character": "Author", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["we already have a syntax , why add { } or", "do n't break vue js please , kiss", "you guy be too smart to see it", "that would be all we want"], "label": "0", "login": "torian257x", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["i 'll close this issue since it do n't collect a sufficient number of vote and do n't align with an exist project on the roadmap ."], "label": "-1", "login": "mgechev", "character": "MEMBER", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["this sound extremely surprising and inconsistent to i", "why should i not be able to inject this in a constructor like anything else", "this will also make for surprising and therefore very error - prone behavior", "there be no good reason that the lifecycle of injectable should depend on how they be provide .", "it be possible that the lifecycle of the injectable could be attach to that of the injector", "this be n't expose publicly as an api , though , so i do n't know how this look internally in angular and how much trouble it 'd be , but it 'd be the very least i would expect the framework to handle to fulfill the current contract for injectable in some sensible way", "however , i suspect this could be a problem for what you be do", "imo this be even bad by break the responsibility", "whether a lifecycle hook run would now depend on how the caller inject it , so the injectable have no control or knowledge over whether it have a lifecycle", "any injectable should trust that its hook will get run by the framework at the appropriate time", "personally i think the downside of the factory pattern be n't nearly as big as you be make it out to be", "yes , change dependency also mean change the factory", "but that be a trivial change to make , restrict to one very specific spot , and it be entirely compile time safe", "it be not really any different from have to update unit test , too"], "label": "-1", "login": "Airblader", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "CONTRIBUTOR"}
{"tokens": ["not a very good idea", "in my mono - repo setup , the plan would be to have a config - like sub - repo , and it could end up get put at a high level , so you 'd need to do <tag> , essentially guess where <tag> would put thing , which be exactly why i suggest some way to follow the build - in node module resolution algorithm ."], "label": "1", "login": "rtm", "character": "Author", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["it be near the end of january <number> , come up on <number> year from when <url> be open", "it be still open for comment , a finalize set of change still having not be accept", "i guess we 'll keep monitor it"], "label": "0", "login": "weswigham", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["go off that example above ^ i would also like to avoid use the <tag> rule", "what if vue allow you to declare which child component 's style you want to overwrite and it inject that specific <tag> block * below * the child component style in the <tag> so it become more important because of the order ."], "label": "1", "login": "agaripian", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["^^ ok , i reopen it , for other opinion"], "label": "0", "login": "Chaosus", "character": "Author", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["my thought be as follow", "i think we should go with @volzhs solution because this way we can offer pay customer a godot version with a dark theme", "no , actually , here be my thought about the whole thing", "i mention these thing before so it be no news", "<number> ) i do n't like round corner", "i think they make godot look old , as current trend go all towards avoid they", "still , if you guy be ok with they , feel free to leave they there", "<number> ) i do n't like the lack of titlebar or separator in @djrm 's theme", "i think it be ok that this can be achieve , but i would prefer godot use a less experimental theme approach , so user know the stuff they want to use exist", "<number> ) i like @volzhs 's approach of customize the theme color", "user request this consistently , and i guess it be good they can personalize the editor as they like without have to write a theme from scratch", "<number> ) i think @djrm 's theme be more polished , so if you guy can work together , that would be good", "otherwise , i 'd prefer we go with @volzhs 's work too", "thank both for your awesome work"], "label": "0", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["@stevel - msft the behavior you be show here , to i , be way more consistent than current write - progress ' pop - up ' like behavior", "never understand why it be ' that fancy ' in first place", "* when i expect thing to pause i use write - progress - the information in write - progress be n't need afterwards", "my understanding of the purpose of write - progress be to inform the user / viewer .", "not for pause purpose per se", "with that in mind i do not get why it be perceive as a problem when info remain afterwards on the console output", "we be inform a user on the console , not write a window like interface with pop - up and all"], "label": "-1", "login": "peppekerstens", "character": "NONE", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["oki so one of the example i mention be to iterate through route and add validation", "again the only problem we have be we be not able to use di , so the request feature be to enable di pretty much , in this case a simple logger .", "this be how it currently be , and ~~it works~~  , however in this example we can not use our own logger", "now in order to be able to use the logger we would need di , and this be how we generally create it", "so again , the problem be that we be currently limit to only write code which do n't use any service", "another issue be you need to apply this manually for each individual usage , like this :", "while with the other , you register the service once in root and that s it"], "label": "1", "login": "stephenlautier", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@posva ok , thank", "by the way , we 've get the warning actually :)"], "label": "0", "login": "fullfs", "character": "NONE", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["+1 for a native solution", "even if a promise - base implementation of throttle event make sense in particular scenario , imho it be tangential to the main use case here", "it would be sufficient to add a minimal core implementation that let you asynchronously fetch datum with the absolute minimum amount of boilerplate - then see what other clever and unexpected  use people put it to", "can you provide a scenario where this be necessary - as oppose to normal vue - agnostic use of promise", "<tag> seem a good way of do this without expand the api surface", "default value + callback on resolve be good enough for the core minimal use case", "overall vue - async - compute be a step in the right direction , and core support for this would be a major step forward , see how promise and async / await be now a core part of our language workflow"], "label": "1", "login": "egasimus", "character": "NONE", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["i be disinclined to support this operator", "* c # do n't have it , so do powershell really need it", "an operator be potentially confuse - different language use different token", "* the operator be n't use all that often , especially in typical powershell script", "* <tag> be really readable"], "label": "-1", "login": "lzybkr", "character": "MEMBER", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["probably the good we can do be use the <number> - <number> range for ldr , and if set a", "specific value in the project setting , make godot use lumen instead for", "but this need to be tweakeable , so we can use both mode depend", "on sun , oct <number> , <number> at 8:17 pm , juan linietsky < reduzio@gmail", "com > write :"], "label": "0", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["for user experience , in a spa it be as simple as update the title on a route change .", "however , it be not deterministic when it may be need to update", "for example some use case could dictate open a model window be enough to change the title", "this be simple javascript , inevitably create an abstraction in vue to just change the document title be too much", "as say if use as a spa , which now day be become and   consider an anti - pattern , then your only real focus on meta data be the title for the ui experience", "which be simple to do and even a plugin would not cater for many use case , and will essentially be a wrapper to change the document title", "the real problem with dynamic meta information , fall to the server level", "at server level many tool can be use , many template engine and many other variant", "thus , suggestion and advice to a simple solution be good imho", "if vue dictate a setup or we officially stamp approval on a plugin , it will prevent choice of tooling out of scope of vue", "thus these be problem domain that be subject to what tool you use , which vue should avoid create friction with"], "label": "-1", "login": "blake-newman", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["that would add unnecessary complexity :", "it require create , maintain , shipping , document   a new executable , even though its sole purpose would be to ignore the <tag> / <tag> option .", "* user will need to know and remember that they must specify that a different executable when change their default shell to powershell with <tag> , which be far from obvious"], "label": "1", "login": "mklement0", "character": "Author", "reply": "Author", "beReplied": "COLLABORATOR"}
{"tokens": ["<tag> respond to windows key on windows / linux and command key on mac", "the same modifier be call \" super \" in electron", "<tag>  could respond to control key on windows / linux and command key on mac", "this be more common situation from the ux point of view than <tag> as windows / linux user generally use control key for the same thing that mac user use command key", "the current solution require something like this :", "with the new modifier , you could limit that to :"], "label": "1", "login": "bartkozal", "character": "Author", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["the 2nd argument differ from one impl to another , but the first be always the tag while the 3rd be an array of child"], "label": "-1", "login": "posva", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["regard material it would be nice to have some kind of legacy material that only use minimum resource , like diffuse and specular , this would be useful for 3d mobile game"], "label": "0", "login": "Janders1800", "character": "NONE", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["static var will allow to make real singleton , autoloade script and scene be not singleton and wo n't   be replace by one  , it may also help to translate quickly structure from other engine / framework ."], "label": "1", "login": "eon-s", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["i would be ok with remove hardlink by default", "a dynamic param for filesystemprovider may be an ok solution ."], "label": "1", "login": "SteveL-MSFT", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["seem to be because i be navigate use code  and try to change the queryparam dynamically", "=\"{id : myid } \"", "to repreduce click the \" navigate query param <number> \" button in the plunkr :", "i might be do something wrong , however this approach work in old version", "any way to tell routerlinkactive to ignore the queryparam"], "label": "1", "login": "farin99", "character": "Author", "reply": "NoReply", "beReplied": "CONTRIBUTOR"}
{"tokens": ["it look like this be a problem in exist _ production _ version , but not in powershell core as of v6 - beta.3  , so you should probably report this at  ."], "label": "-1", "login": "mklement0", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["this be tricky than it seem", "if you use render function , then you can not modify anymore <tag>  afterwards , because it be not a top - level component anymore ."], "label": "1", "login": "mitar", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["* * @tirithen * *", "you should consider that there be some amount of angular runtime environment  that have to be also load , so it have the logical consequence to have such a bundle only one and sharable  for a set of some component  .", "another factor be the ability to lazy - load of those component on demand and not all of they together and eagerly"], "label": "-1", "login": "mlc-mlapis", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "Author"}
{"tokens": ["yep same for i at the moment i do use a custom directive like :. <tag>"], "label": "1", "login": "SeoFood", "character": "NONE", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["tentatively put on the 3", "i 'd really like to see this implement soon than later to provide usability enhancement to the editor ."], "label": "1", "login": "akien-mga", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i like it , i do not know for the implementation behind but in the gdscript code it would look a lot clean than what it look like now .", "especially for the setget example"], "label": "1", "login": "groud", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i try it again with prebuilt \" android_editor_release_debug_2022_01_11", "apk \" and still get a black screen", "maybe it be an issue with the new mobile vulkan backend and not this pr"], "label": "0", "login": "LinuxUserGD", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["i think it have to be a generic api , the ability to attach any directive to any component ."], "label": "-1", "login": "mlc-mlapis", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@powershell / powershell - committee have reject the pr # <number>", "quote the decision here :", "i will close this issue as ' wo n't fix '"], "label": "-1", "login": "daxian-dbw", "character": "MEMBER", "reply": "COLLABORATOR", "beReplied": "NoBeReplied"}
{"tokens": ["aha , so do this mean that cancel the transition in the give example would require trigger  as well"], "label": "0", "login": "lunelson", "character": "NONE", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["perhaps i should have mention that both <tag> and <tag> be entry point .", "if you be suggest that i synchronously load it , the symbol file will be inline in both entry point and will create two different symbol"], "label": "1", "login": "privatenumber", "character": "Author", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["i think <tag> be well because all of component 's option  be json .", "if it be <tag> , there should be change to json again maybe"], "label": "-1", "login": "1045972746", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["@vicb thank you for the quick response", "be hopeful it be an oversight in the implementation of the new <tag> and not an issue of outdated documentation"], "label": "0", "login": "adamduren", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "Author"}
{"tokens": ["i agree with @dsonet -", "i be not fond of the idea of introduce special behavior directive when you can simply do <tag> - a dedicated directive may save a few keystroke , but at the cost of explicitness , and require you to backtrack for the corresponding <tag> to be sure of what it do ."], "label": "-1", "login": "yyx990803", "character": "MEMBER", "reply": "CONTRIBUTOR", "beReplied": "NONE"}
{"tokens": ["the only way to have they wait for each other be to have component - less , path - less route level where you can define each level of dependent resolve .", "but it lead to several other issue , like secondary route that do n't work because of the path - less parent , performance impact , as each level be be resolve in series , routerlinks you have to edit each time , as '", "/ ' go up one router config level , and not actually the url , like you would expect", "imho , the router , though rewrite several time , still be n't design well for big application", "it be even hard to find good example on how to use resolve in the official doc", "it be like they just put it there because ui - router have they", "resolve should be prefer over inject service into component"], "label": "1", "login": "dietergeerts", "character": "Author", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["this sound almost good for i i think , tho after some thinking , i think its not go to work for lazy load route"], "label": "1", "login": "stephenlautier", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["my argument remain that the event sheet be both easy to learn than", "blueprint and fast to set up", "moreover it be well at transition", "new people to actual scripting language", "if design well an event sheet system can be just as fast as write", "if you look at my mockup gif- it be pretty similar to just type", "code with autocompletion when use the helper menu filtering", "anyways , i be still figure out how to do this and thankfully godot", "gdscript be go to be get type scripting , which be well suitable", "for generate bbcode for my event sheet", "for example one of the nicety", "of an expression field in an event sheet system be that it give you a", "clear indication of the type of variable it expect and even light up in", "i be currently try to figure out how to do an expression field that can", "take gdscript but also use the helper menu i make", "again this be just experiment in how it could work", "this be far from be anything usable atm", "on we d , <number> may <number> 22:59 daven bigelow , < notifications@github", "com > write :"], "label": "0", "login": "blurymind", "character": "Author", "reply": "NONE", "beReplied": "MEMBER"}
{"tokens": ["now that tz name be no long support , what be the intend way to specify a timezone that adhere to daylight saving ?", "for example have a timezone set to \" america / chicago \" , it would be utc-5  or utc-6  depend on the date be format", "how should this be handle"], "label": "1", "login": "jppellerin", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["as long as that do n't break exist code , i be all for few keyword / name to remember ."], "label": "1", "login": "wmhilton", "character": "Author", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["it be a necessary feature for dry code in my opinion .", "right now i have to create <number> watcher that do the same thing for a form with a lot of input", "a custom modifier would solve everything"], "label": "1", "login": "Mushr0000m", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@fracteed yes exactly what i be say godot do not need original / obj / dae file in its project directory", "it be misleading to let the developer think he should care about they", "here be the thing : i be not ask to be able to move the", "import file elsewhere i be ask to not have it at all", "because it be mislead it make you think original file be the one that matter when really the copy be the one the engine use and it be fine , and clean to just go with it completely", "you say some original file do need to be in there lets just fix these exception", "right now you import mesh they get store and copy in the", "import folder then you have to save they again in another object to modify they in godot and not have that \" change may be lose \" thing", "so that in order to be able to import it and make change to it in the editor you need <number> layer of abstraction where if you do allow the developer to work with the copy you really need only <number>", "just because we try to make the user believe his original file be the one the engine use when it really do not", "i agree with fracteed here it be ok to have our own file format and will be less misleading to go with it even if it mean have our own blender export yeah why not i would back that idea"], "label": "0", "login": "gmarais", "character": "Author", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["@alexsandro - xpt , sorry , i be wrong , compute will be hacky as @inca say ,", "another hacky solution would be use <tag> with a method", ", here be an example"], "label": "1", "login": "nickmessing", "character": "MEMBER", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["there be 2d abstraction and you can make a visualserver that do 2d in the. cpu , but it 'll probably be very difficult to mix that with accelerate 3d.", "on <number> may <number> at 14:13 , ferenc arn < notifications@github", "com > write :"], "label": "-1", "login": "punto-", "character": "CONTRIBUTOR", "reply": "NONE", "beReplied": "CONTRIBUTOR"}
{"tokens": ["sure , fair point", "it be just sad there be n't a way to use <tag> with long string splitte on multiple line  , as it seem a very common use - case .", "anyway , thank for your feedback @petebacondarwin"], "label": "1", "login": "adrienverge", "character": "CONTRIBUTOR", "reply": "MEMBER", "beReplied": "Author"}
{"tokens": ["i kind of like what google cloud do where the style be the same for instructional versus one you can copy past directly into the terminal", "they do n't have the green / black color palette we have , however", "how do we feel about have the exist box style for both function api doc and the terminal - > same style , just remove the copy icon when it be not intend to be copy and paste", "i be big on consistency and pattern", "in my mind we either get rid of the black / green style and distinguish terminal code example with the <tag> before it , or we keep the black / green style for terminal and use that for the cli doc as well  .", "another example where they use their regular in - paragraph code styling even if it be terminal command when speak about they : <url>"], "label": "1", "login": "sjtrimble", "character": "CONTRIBUTOR", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["in general , i 'd say for low - level component lib , render function should be prefer when template be get awkward to work with .", "but i agree that the following would be valuable :", "disable the default behavior of \" auto apply binding that be not find in prop as attribute to the root element \"", "expose an easy way to \" inherit \" external binding on the component onto an inner element that be n't necessarily the root", "ideally with consistency between template and render function"], "label": "-1", "login": "yyx990803", "character": "MEMBER", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["you be right about roslyn / we use position - base input at the language service layer ; however ,  . i suspect that this be to accommodate vim 's api which only provide a line & column ."], "label": "-1", "login": "DanielRosenwasser", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["i have relate issue but not sure if it the same", "i have an angular project with this structure", "so when i m try to import smth from share into componentlevel3 it go with import project / share while i as joe to see import from"], "label": "0", "login": "Lonli-Lokli", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@mlc - mlapis    as @kewde explain here <url> ,   yes there be a destroy  method which destroy the injector  + call the register ondestroy callback on the ngmoduleref itself", "but the ngmodule instance  itself be not clear as there be still a reference to it inside the router inside a loadedrouterconfig as the _ module _ attribute", "this attribute be never clear and therefor the ngmoduleref be never gc'ed", "on the other hand , the ngcomponentoutlet do clear the reference to the ngmodule instance : <url>"], "label": "1", "login": "epieddy", "character": "NONE", "reply": "CONTRIBUTOR", "beReplied": "NONE"}
{"tokens": ["by _ legit case _ i mean a piece of code that an * * average * * programmer would write for a particular purpose", "maybe i be an optimist , but i like to believe that the average programmer have more sense than return an error instead of use the language be build in error handling mechanism", "i do n't agree that you be do newbie a favor by tolerate their mistake : eventually , designing function that behave that way will get they in trouble", "all modern language have build - in error handling mechanism for a reason : thing _ will _ fail and good code should always _ fail safe _", "technically , error can be propagate but when cross language barrier  , the propagation need to be explicit ; it be not up to any framework to do that for you unless you ask it to", "and since we be in the realm of confusion , soon or later , someone will expect regular html component to work with the true / false thing the same way i expect vue to handle boolean attribute as per the html spec :", "which would result in a checkbox that be always check", "my proposal attempt to mitigate half of the source of confusion"], "label": "1", "login": "za-creature", "character": "Author", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["@posva your example be work because you be use <tag> in the 2nd component <tag> and you be import the button into the root <tag> component", "in my example , button be import by the <tag> component so its nest inside the 2nd level component .", "here be my example :"], "label": "1", "login": "agaripian", "character": "Author", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["<tag> be a private and static field inside <tag> class and <tag> be static too .", "as you can create this kind of static field and method in nodejs , it should work in ts", "node allow this way for create singleton pattern", "i do n't understand why ts be show that error"], "label": "1", "login": "davidbayo10", "character": "NONE", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["@groud these stat be hard to come by", "how many be use the current visual script", "i be also make point of why the event sheet approach have advantage over blueprint - such as less click to get thing work , clear presentation and well learn transition to gdscript .", "the rpg maker engine be really a level editor if you ask i", "it do not have the same level of flexibility as fusion and construct2", "it be easy to explain to someone how an event sheet work , than it be to explain the same example in a blueprint - they have to learn much less concept - no need to be teach the type of connection between node , type of input and output - how to set the flow", "instead the event flow from top to bottom , leave be condition and right be action", "you have to connect nothing", "look as hard to understand as this", "sure , godot would use more event block to achieve , but it would still be clear than a node graph", "even gdscript look clear to i than that", "our current visual script system look complicated at a first glimpse", "i speak as someone who have use both system and be now compare they - both be equaly powerful , one be clearly simple to learn and get into", "give it a try please", "you can try construct3 in your web browser for free here :", "if you have a son or a young sibling , ask they to try it , then try godot 's - see what they can do and how long it take they to do it without give instruction - there be a potential market for more school to adopt godot here - make visual scripting well for learn programming concept and we will get a young demographic use the engine"], "label": "1", "login": "blurymind", "character": "Author", "reply": "MEMBER", "beReplied": "Author"}
{"tokens": ["thanks , @daxian - dbw", "i ca n't imagine much exist code breaking , but , conversely , i ca n't imagine many people run into a problem with the current behavior in real - world scenario , so , personally , i be happy to leave it at that ; perhaps @petseral feel differently"], "label": "0", "login": "mklement0", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["base on the initial feedback , i think it make sense to have the windows powershell psmodulepath add by default as many module just work ( or seem so without exhaustive testing", "-  implement in the console host instead of userprofile", "-  make configurable in startup json", "-  blacklist or whitelist windows powershell module", "this should also resolve <url>"], "label": "1", "login": "SteveL-MSFT", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["let take the <tag> example", "menu have a list of child menuitem component", "see the below code snippet", "now if you have <number> different component that use menu - item component on the page and you want to style the menu - item differently on the page", "use global style  in the menu component  will also change the style of the 2nd menu item on the page unless some other unique identifier be use to scope the style .", "nothing be stop i from use bem , but why use it when there be scoped style that can solve the problem"], "label": "1", "login": "agaripian", "character": "Author", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["@posva sorry i mean <tag> , sound like i have a bit of a freudian slip haha", "that be say and expand on what @sylvainpolletvillard say , be component override directive really something that should be widely support", "seem to i something like that would be an edge - case that should be either handle by vue 's internal logic or some kind of decorator whereas something as common as responsive framework usage should be support", "i assume there be also a good reason why the directive do n't apply a class for easy selecting , but i do n't know enough to say what that be", "perhaps you can shed a bit of light on the reasoning"], "label": "0", "login": "BrainBacon", "character": "NONE", "reply": "MEMBER", "beReplied": "NONE"}
{"tokens": ["@jbrantly would an es6 version of the package really be different from a non - es6 typing in term of how the end - user can use it", "can you give an example of such a difference", "because i think that if the typing simply follow the style of the package itself  , the user of the library can already choose to use old or new style import , and the compiler will do the ' conversion ' for you .", "so it would only really matter if you want your typing to work on e", "4 or low , but i be not sure that be worth the trouble"], "label": "1", "login": "poelstra", "character": "Author", "reply": "NONE", "beReplied": "Author"}
{"tokens": ["i think i can agree with all of that", "we should document those caveat with <tag> and/or <tag> option to avoid confusion , though", "i be sure some user will still run into it , but as long as it be clearly document i do n't see an issue with it", "it be essentially an opt - in behaviour to relax aggressiveness of quote value base on criterion or just not use quote at all , so i think it make sense to allow it and document the potential pitfall with suggestion of how to avoid they"], "label": "1", "login": "vexx32", "character": "COLLABORATOR", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["i would like to * * show to the user that a more recent version be publish * * , even if the update be not available to use  .", "< p align=\"center \" >", "< img width=\"412 \" alt=\"dowloading_update2 \" src=\"<url> - images", "com/97092/82044829 - 5acbc100 - 96ae-11ea-8629 - d3af9c44d834", "it be frustrating when you have fix a bug , and your user test again , not know that even though they reload in their browser , they still run the previous version while the new be be download", "like suggest by @kylealandavi and @bobdankert , i would like that <tag> return a promise boolean", "an alternative would be to get an observable event when we start download the update"], "label": "1", "login": "gcerquant", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["i do n't think it will help", "there be a state sync issue between <number> directive : <tag> and <tag> .", "example form <url> : <url>", "hero object be load async this be why during component render <tag> be undefined", "be not equal to <tag> and <tag> evaluate to <tag> which be ok", "then , when hero finally arrive from subscription , <tag> become <number> instead of undefined , but it be too late , active status have already be calculate  somehow )", "i think we should drop <tag> and just use <tag>", "<tag> can calculate active status itself and bind active class to its host element", "we do n't need to sync status between <number> directive", "it will be more efficient because we can implement some smart caching mechanism and not recalculate status during every change detection cycle", "it will also simplify implementation of <url>"], "label": "-1", "login": "DzmitryShylovich", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["for raw build speed of a clean clone , i doubt it 'll have any significant difference", "but it can be significant if you consider rebuild speed", "scon always rebuild a lot of stuff that be n't change when i pull a new commit", "as i say before , scon be slow to start  . if you be build the whole source that be negligible , but if you only change a line and be compile to test , it can significantly improve the workflow  .", "so 5s decrease in a 10min build be irrelevant , but 5s decrease in a 10 rebuild be a major improvement", "but i agree that any change in this regard should be test * a lot * to prove it work", "as @reduz state , scon never mess up a build , and that be something to consider"], "label": "1", "login": "vnen", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["we already have this with the requires statement which to fit your suggestion would be well if that be expand to include a -maxversion arguement", "change the ps1 to ps6 be not really a suitable idea for this as this will increment through the version and i be not sure that there be much benefit in enforce that go forward .", "i would either change the issue title to expand # require should have a -maxversion arguement or raise a new issue on this"], "label": "-1", "login": "kilasuit", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["i be look at exactly that", "for i , render function be too overwhelming and \" feel \" disjointed from the overall feel of single file component ."], "label": "1", "login": "s130059660", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["they be different in any case", "<tag> work both in 2", "2 regardless of exist of index signature", "so add index signature affect only pass a value not use it .", "sorry , do n't get it", "what do have impact"], "label": "1", "login": "evil-shrike", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "Author"}
{"tokens": ["i understand , but this be too much work for too little gain", "what we could do be configure godot so you can set a path to your godot. repository that you compile yourself , and download the addon will add a. module into godot , that you can recompile .", "on sat , mar <number> , <number> at 4:46 pm , ignacio etcheverry < notifications@github"], "label": "-1", "login": "reduz", "character": "MEMBER", "reply": "Author", "beReplied": "MEMBER"}
{"tokens": ["ca n't the tsx loader be fix instead to support array"], "label": "0", "login": "posva", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["the key issue with that approach be that it do n't recreate the dependency between test , so any state hold by the dependency can cause problem .", "the ideal option be to just compile to test module once and reuse that , since the vast majority of the time be spend compile the test module", "but i admit i be still not sure what the delay be in get angular itself to support this", "i get that use the <tag> method can interfere , but as long as the test module be define once and no override be use after it be create , this be really not all that complicated"], "label": "1", "login": "brian428", "character": "Author", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["@kvprasoon the startup time have be improve already via <url> although there be still additional work we can do to improve it , but it be not a priority for 6", "2 since we be within the \" ballpark \" now", "as for the context menu , the difference be the command line  to start pwsh", "otherwise it should be the same", "it should never take that long to start unless you have a complicated <tag> that be be run on startup"], "label": "-1", "login": "SteveL-MSFT", "character": "MEMBER", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["@the - cpu1 :", "indeed : <tag> be special in that it truly create a reference to the variable _ object _ behind the scene , not its _ present value _", "i understand the intent behind", "but the point be that the use of <tag> here create a   _ pointless wrapper _", "you can simply assign <tag>   directly to a regular variable and get the same effect :", "again , note that this only work because the value of the <tag> entry be an instance of a", "net _ reference type _", "if it be an instance of a _ value type _  , this approach _ fundamentally _ would n't work - whether or not you use the <tag> wrapper ."], "label": "1", "login": "mklement0", "character": "Author", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["i mean private instance method , private static method , private accessor property and private static accessor property --- all this feature be similar to each other and should be support all together ."], "label": "1", "login": "mellonis", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["yes , its important that all language feature compose easily", "the spread operator solution would be okay but it kinda break the abstraction barrier .", "the developer should not have to know whether the annotation they be use be composite or not", "new syntax be necessary mostly because they be not allow inside class definition in es6", "this be also why yehuda propose they when they switch ember to es6", "you be right that there would be type problem with decorator", "mutation would be tricky to model", "maybe decorator could always return new value instead mutate they , and intersection type  could be use to model augmentation", "or maybe the mixin mechanism will be able to help there", "i agree with most of the benefit of inert / passive annotation that you mention", "overall , i feel it may be too early to add annotation to ts", "the proposal be  in the strawman stage for es7 +", "angular / atscript be just now start to experiment with what annotation would mean - it may still turn out that their design be flawed"], "label": "-1", "login": "spion", "character": "NONE", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["tr  make a lot more sense for in - game content , i vote for that too .", "on fri , aug <number> , <number> at 11:01 am , ignacio etcheverry <", "com > write :"], "label": "-1", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["@morgul that sound like a good idea", "you should open a separate issue"], "label": "0", "login": "yyx990803", "character": "MEMBER", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["i would be happy to see private class member include as well", "there be a reason this exist in other language", "other consumer / team member  do not need to know how every class work", "in fact , they perhaps should n't even have the option to fool around with functionality that s suppose to be internal anyways", "i understand that the lead underscore should \" indicate \" that this be a private member , but in practice no one care if somehow modify it get the job do", "this be especially painful if you want to use some of it as a plugin and everyone can just change whatever they want", "i would like to have full control over the state of any object / script i create", "have object that can change any aspect of their state whenever someone please to do so make produce code that other can consume more than irritate", "besides all that it would be great to declutter the list of \" available \" variable / function"], "label": "0", "login": "pierresteeg", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i be little confuse", "could you elaborate on what rewrite / internal custom modification you refer to"], "label": "0", "login": "gkalpak", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["cpu can do 3d too", "but cpu be much slow do realtime rendering stuff , 2d or 3d", "also godot rendering be mostly sprite base , so gpu be the choice ."], "label": "-1", "login": "honix", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["i definitely should have run the late check on <tag> , i could have keep it close    still , i appreciate the explanation", "in this case , have you see an implementation that do a \" compose type \" or something similar"], "label": "0", "login": "blakeembrey", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["this would somehow inverse the current <tag> order that we all know .", "i be not sure have it reverse just so we can use multiple callback be the way to go", "it 'll likely confuse the user"], "label": "1", "login": "AlexandreBonneau", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@jakul : the output behavior be incidental", "what matter be whether the <tag> argument be design to uniquely identify an exist entity use a literal  name .", "as such , @stevel - msft , you be right that the case of <tag> be _ ambiguous _ :", "*  on the one hand , you could argue that its <tag> argument   identify _ multiple entity _ , if you conceive of the _ version _ of a give module as _ distinct entity in their own right _", "*  on the other hand , you can conceive of a module with a give name to be an _ abstract , yet distinct _ entity , and conceive of its _ version _ as its _ specific incarnation _", "*  as an aside : even the unambiguous case of ask for an _ exact module version _ via the <tag> key of a hashtable represent a fully qualified module module   pass <tag> currently quietly return nothing if the specific version be not find - something that should also be fix", "the  interpretation be at odd with the parameter name : if the argument be really a _ filter _ , it should n't be name <tag> , since in most cmdlet <tag> unambiguously identify a specific , exist entity", "view through the lens of  , <tag>   can still be think of unambiguously identify the module _ in the abstract _ , irrespective of which and how many of its version be load", "perhaps needless to say ,  make more sense to i in the grand scheme of thing", "overall , separate the aspect of _ retrieve _   item from  be indeed the way to go"], "label": "1", "login": "mklement0", "character": "Author", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["for future reference :", "a workaround for this issue can be have by move the <tag> to a non - compile dependency , such as  .", "big drawback of this , apart from it be confusingly non - standard , be that type wo n't get import", "that can be work around by manually import the type"], "label": "1", "login": "voxpelli", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["as i say , this be unpreceded in programming language that i know , so i be try to understand what be be propose here", "let i comment on the usage suggestion by @ace - dragon :", "how be that suppose to work", "only run the loop once", "if so it be not a loop", "if it be a loop , it wo n't run only once", "same thing apply to a <tag> loop", "this be possible with my suggestion , but require a bit of repetition :", "and how be this suppose to work too :", "do you realize that <tag> stop the loop", "if it stop always in the first iteration , it 'll have only one iteration", "if it be suppose to stop only if condition be <tag> in the first iteration , it mean that <tag> have also to keep track of an iteration counter", "actually , every <tag> will have to keep track of this and use if there be some <tag> inside eventually", "for this there be well alternative syntax , such as :", "this loop counter be much more useful than the op , but also imply a high memory allocation and usage", "while i can see a great value in thought process from non - programmer , you all   have to understand that in the end this be all an algorithm", "so if we be to add such suggestion , we do have to think of a program that solve the problem in a general fashion and use the structure provide by the underlie platform", "we need to build a basis for the high - level language use the low - level barebone , which be not always easy , viable or even possible", "also , i want to see real use case to the proposal , not \" someone might sometime need something like this perhaps \"  )", "@blurymind i can see that the code you link use an identifier , so it know what trigger to check or reset", "it indeed do need an identifier , as i say in my first post , even if it be internal", "but i personally ca n't see a way for this to actually work without an explicit identifier , which make my syntax proposal bogus", "maybe a thing like <tag> be more viable , but again this need to be properly think", "and i be pretty sure i can solve this with a gdscript singleton although in a clunkier fashion"], "label": "-1", "login": "vnen", "character": "MEMBER", "reply": "Author", "beReplied": "Author"}
{"tokens": ["@yyx990803 the package be mature enough now to merge into the core , yeah"], "label": "0", "login": "ezra-obiwale", "character": "NONE", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["should annotation be allow on interface", "if  be yes , be they apply to a class that implement the interface", "be annotation on a member of the interface apply to the corresponding member of the class that implement the interface", "if  be yes , what happen if there be two interface with different annotation , or two interface with the same member but different annotation on that member", "specifically , which order be the annotation apply in", "if  be yes , a class instance be assignable to an interface even if it do n't explicitly implement it , because of structural typing", "however the actual class emit wo n't have this annotation", "an object literal with the same member be also assignable for the same reason", "will this be a problem", "one should not expect to find interface annotation on any object that satisfy the interface , but the answer depend on the expectation of people who annotate the interface"], "label": "0", "login": "Arnavion", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["anyway , i ca n't verify that , but it be very likely that <number> % of the computational time spend to build godot be spend in the compiler", "so even if the overhead of the building software be none , this would lead to a <number> % decrease of the build time . even a <number> % decrease would not be worth , unless it allow less code and more reliability  ) ."], "label": "-1", "login": "groud", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i do n't want * any * new syntax for skip type parameter", "you should simply be able to not supply anything for unnecessary type parameter and have it work ."], "label": "1", "login": "masaeedu", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "Author"}
{"tokens": ["oh , i see", "you mean parenthesis not brace though"], "label": "0", "login": "jcoffland", "character": "Author", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["i think that @ajacobsen 's binary - ternary - else idea be pretty good actually", "php have it as the :", "in gdscript it would look like :", "finally , in javascript this be use and overuse all the time , so it might be either somewhat good or terribly bad"], "label": "0", "login": "bojidar-bg", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["thanks , @brucepay , but this issue be not about how <tag> function when it be use _ as intend _ , it be about the syntax not prevent _ nonsensical use _", "what you be demonstrate be not per se about _ data structure _  , you be demonstrate use with a _ variable _ , i", ", effectively create a variable _ alia _  to the so question )", "yes , it would have work - but it also would have be _ pointless _", "point to a piece of _ data _  only make sense with instance of _ reference type _ and  you can use a _ regular _ variable to do that - use <tag> in this scenario add nothing and only complicate matter .", "thus , my point be that use it with a  _ variable _ be the _ only _ use that make sense", "and that user can be spare confusion if the language itself prevent other use", "or be i miss other legitimate use of <tag>"], "label": "1", "login": "mklement0", "character": "Author", "reply": "COLLABORATOR", "beReplied": "COLLABORATOR"}
{"tokens": ["unity actually do not do division by pi", "on sun , oct <number> , <number> at 6:44 pm , juan linietsky < reduzio@gmail", "com > write :"], "label": "0", "login": "reduz", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["i would call it a bug , not a feature : the provide injector clearly do not behave as define by the api documentation :"], "label": "1", "login": "kpeterbauer", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["actually , do anyone know", "i think babel have some partial evaluation of expression available build - in"], "label": "0", "login": "petebacondarwin", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["another workaround would be to use parameter with explicit argument syntax :"], "label": "-1", "login": "PetSerAl", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["let 's take @jaykul 's datum and extrapolate a little from there", "if we assume that <number> % of the people write powershell script and module be use github  then that be at 1", "48 million script that will break with this change", "or to put it another way , that be 1", "48 million script that need to be rewrite before they can be use on ps v6 +", "this change may only produce a non - terminating error but how many script writer know that there be even non - terminating error ?", "how many people use script write by other be likely to know", "i 'd imagine most of they will see red text and assume a big problem have occur , because for the vast majority of user there be no difference between the error type", "personally i do n't want to have to rewrite all of my script to have <tag> on every non - wildcard <tag> call", "i 've only get a few hundred script that i 'd need to change but that be still a good week of effort to rewrite they and at least that much time again to test they all", "i 'd also definitely argue against it be a bucket <number> change , this be at least a bucket <number> change or high", "this have be document by a variety of blog post and a lot of code sample all over the internet , include \" official \" microsoft source like hey scripting guy link above , it just might not be officially document and that be a very easy fix to make"], "label": "-1", "login": "ChrisLGardner", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["do this suggestion break the vue concept that <tag> should be <tag>-able"], "label": "0", "login": "young-steveo", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["i mean why have \" normal \" <tag> anyway", "from a dev history perspective <tag> be just there before <tag> , but in retrospect the scoped slot approach be more flexible .", "but there be no need to have split approach anymore", "it be more work for the child component that have to check <tag> * and * <tag>", "just deprecate <tag> altogether , mirror its property into cloning function of <tag> and trigger deprecation when try to use <tag>", "no library author need to do anything in this case , except when make a release for the next major vue version , when the deprecate stuff get kick out"], "label": "1", "login": "backbone87", "character": "NONE", "reply": "Author", "beReplied": "NONE"}
{"tokens": ["see issue # <number> <url>", "build system be way too complex and migrate it at this point would take. week .", "also , i do n't like cmake , if i be to switch , i 'd rather use a", "build system with a real scripting language", "on sat , feb <number> , <number> at 12:37 am , marynate notifications@github"], "label": "-1", "login": "reduz", "character": "MEMBER", "reply": "CONTRIBUTOR", "beReplied": "MEMBER"}
{"tokens": ["@luwenjin <tag> be es6 only", "other than that you can make a custom method <tag> and use that :", "or , with support for es5 browser :"], "label": "-1", "login": "simplesmiler", "character": "MEMBER", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["actually it would probably make more sense for <tag> to accept an array of the currently support type since each <tag> decorator could take different option ."], "label": "-1", "login": "benstevens48", "character": "Author", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["type guard return must be a subtype because they introduce new property in their guard expression , not remove they"], "label": "1", "login": "mhegazy", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["firefox have a similar feature when right - click tab , but it only let you close tab to the right  ."], "label": "1", "login": "Calinou", "character": "MEMBER", "reply": "MEMBER", "beReplied": "Author"}
{"tokens": ["same here , how can have a service  make an http request  while have an http interceptor", "in my case use a <tag> be enough , but be there a well solution ?", "for example in a component i would do this in <tag>"], "label": "1", "login": "alex88", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i suppose that it would be hard to understand every call - like behavior ( tagged template , decorator , function call , new invocation , etc ."], "label": "-1", "login": "DanielRosenwasser", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["i utilize this little helper : <url>", "take my test run in ~2min48sec all the way down to 6", "not to say it will work in every situation , but most of those <number> unit test require very little to be convert over ."], "label": "-1", "login": "ronnyek", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["it be simple to do the way godot do it , and also have some advantage such. as well remote debugging and live editing", "on we d , aug <number> , <number> at 11:37 pm , manson mamaril notifications@github"], "label": "-1", "login": "reduz", "character": "MEMBER", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["and even if you protect it , someone will find the way to bypass your protection in no time .", "not worth the effort imo"], "label": "-1", "login": "neikeq", "character": "MEMBER", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["@stevel - msft    yes i understand that , the point i be try to make be you like your shell one way and i like mine another and neither be more _ right _ or less _ right _", "try to change what exist be likely to upset as many people as it please", "i be also quite conservative with these thing , i see no need to change the colour although it turn out to make no difference", "i think the notice can go at the top , bottom or under the prompt , provide it be clean up by default", "@peppekerstens   apart from a perf issue it do n't pause thing", "it tell the user \" thing _ look _ like they have stop but i be download / expand / whatever \"", "the need for that information be _ transient _", "one example be i get information from azure devop use the rest api and this take a couple of minute", "if i be glance at my screen i want to see \" stage <number> of <number> be   <number> % do \"   but if go and get a coffee , i do n't want a screen full of \" do stage <number>", "do stage <number> etc \"", "in some case i can see the way write - progress be call it will print \" fetched work item <number> , fetched work item <number>", "fetch work item <number> \" and i have to scroll back through 10,000 line to see if there be any error", "progress message cease to be useful a few second after they appear , and that be why they  replace each other ."], "label": "1", "login": "jhoneill", "character": "NONE", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["@blurymind and it somehow seem to bother you", "wow , alternative opinion and such", "i suppose _ you _ have n't repeat anything at all correct"], "label": "0", "login": "spyres", "character": "NONE", "reply": "Author", "beReplied": "Author"}
{"tokens": ["you be make this * * way * * too complicated", "there be no need for any functionality to be add in order to remove the default alias -- even a set to say which module to import would be overkill when we have profile script", "i be not try to get the alia _ feature _ remove", "i use alias , and i want to keep use they", "i do n't want to loose the ability to change the name of command", "i just want to clean out the default and give _ exist user _ an easy way to load the alias they be use to", "in an ideal world , i want to do all of that without break anything more , although obviously we 'll need user to add the <tag> line to their profile", "the main point be to ensure we never _ again _ break people 's experience by such a silly trivial change as remove a build - in alia .", "i honestly do n't think you can get a new set add to module manifest", "we still do n't have a set to indicate the support * * edition * * or * * operating system * * , nevermind something as meta as whether the author think the module should be use interactively"], "label": "1", "login": "Jaykul", "character": "Author", "reply": "COLLABORATOR", "beReplied": "Author"}
{"tokens": ["i just try a really inefficient simd version use _ mm_rsqrt_ss , and it be fast than fast_inv_sqrt on mine too", "note this be _ really _ awful as i have n't do any simd for month  but lol :", "my only question be , i be not sure how to coax the compiler into auto - produce this intrinsic without write platform specific code", ", addition , it be obvious , but not so much for rsqrt", "use <tag> do not work , presumably because the result be not exactly the same as do they individually", "this might be another alternative to use the quake version as if it be auto - produce by the compiler it be report to be fast and more accurate"], "label": "0", "login": "lawnjelly", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["powershell have more stream than stdout and stderr , but these be only understand from within powershell", "by default , i believe it be expect for the extended stream to be send to stdout from pwsh.exe as it ca n't send it anywhere else .", "try to understand the use case here", "if you do n't want the warning stream , you could just add <tag> into the script", "if you want to redirect those stream to something else , you can do it within the script as well", "be you ask for something like :"], "label": "-1", "login": "SteveL-MSFT", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["this be my first time comment", "i come over from unity and the move to gdscript have be a dream", "i pick up the language in less than a day", "i love how well the language be implement into the engine and my productivity have jump considerably", "my main concern be that with add c # support gdscript will be leave behind or see less development after a flood of unity developer .", "c # be a fine language but not my personal favorite", "also i be concerned to see godot try to be more like another engine instead of stand on its own", "unity be a fabulous success story but not the good engine i 've ever use", "it be bloated and buggy", "once it delete my entire project without confirmation", "deal with bug and thing not work like they should be a constant struggle", "i ca n't count how many time i have to completely rebuild a scene i be work on because thing be n't work right", "i once copy and paste all the content from an old buggy scene into a new scene to have it suddenly work despite both scene be identical", "i lose week hunt physics bug that would magically appear and magically disappear", "i really like that godot be lean and simple to understand", "work with godot have be like use a well tune musical instrument", "after almost a year of work in it i just know how to do anything i need to do , even if i have n't do it before", "i just hope the influx of unity user wo n't steer the direction of the engine more towards unity", "if i want unity then i 'd be use unity"], "label": "-1", "login": "ghost", "character": "Author", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["this be discuss a lot before in many issue and people agree that the new way be well  .", "if you want to be truly effective you should use keyboard shortcut"], "label": "-1", "login": "ghost", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["sadly , the conversation have not go far to implement this feature :( very much look forward to have this add"], "label": "0", "login": "igrek8", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@posva this be actually intend for one off computation you wo n't need anywhere else", "it be simple , quick , and offer more readability .", "for more complex and reusable computation and functionality , i always use the approach you mention"], "label": "1", "login": "rhyek", "character": "Author", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["yep , we di on module", "but i be still think about the real use case with <tag> when new instance be not create and when try to use it you get an error ."], "label": "-1", "login": "mlc-mlapis", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@stevel - msft , @isazonov : i be glad that * * we agree that the doc need update * *", "for the sake of update the doc , * * let 's see if we agree what the _ current _ behavior be * * :", "again , use the term \" command \" in this abstract way be invite confusion , give the fundamental distinction between a command proper  and an expression", "when i use the term \" command \" an \" expression \" below , i be refer to their _ specific _ definition , and by \" operation \" i mean the _ abstraction _ over the two , _ exclude _ multi - command pipeline", "i be not cover the case where _ terminate _ error be treat as non - terminating one", "also note that the behavior describe be arrive at by trial and error , not source - code analysis", "* * current behavior * * :", "* if a command be execute by itself , boolean variable <tag> reflect whether it run successfully ; success / failure be determine by  if a cmdlet / script / function generate at least one non - terminating error , or  in the case of call an external utility , if its exit code be zero", "* inside a conditional , _ command _ success be by design _ not _ reflect in <tag>", "if a command be embed in an expression - whether via <tag> , <tag> , or <tag> - its <tag> status be lose , because the success of the expression _ itself _ be reflect in <tag>", "* reason why expression   may fail include : invalid operand  <tag> $", "<tag> $ false <tag> $", "<tag> try / catch <tag> try / catch ` to catch they - something you can not do with non - terminate _ command _ error", "i be happy to create a new issue focus on just that"], "label": "1", "login": "mklement0", "character": "Author", "reply": "COLLABORATOR", "beReplied": "COLLABORATOR"}
{"tokens": ["i would like to know if tsserver could give the option to use position instead of use line / column", "i be integrate tsserver inside eclipse which use position instead of use line / column", "i can convert position to line / column for completion , etc but now i have a big problem with \" change \" command", "for the moment , i use \" reload \" command  to synchronize editor content with tsserver , but i would like to use \" change \" command  provide i just position and iit 's impossible to retrieve the end line / column", "imho , i think tsserver should provide position option :", "to avoid convert every time on tsserver side line / column - > position for client editor which already support position", "- to use \" change \" for client editor which can support th eretrieve of end line / column when editor change"], "label": "1", "login": "angelozerr", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["what be the idea to destroy already load module", "because the effect would be", "load it once again from a server", "angular have no public api for destroy already load module .", "javascript have gc and it clean any memory object which be not already reference", "you ca n't access private method and property from angular internal api"], "label": "-1", "login": "mlc-mlapis", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "Author"}
{"tokens": ["my most problem that i can not do local \" find all reference \" .", "it produce a bunch of reference in the whole project", "i suggest it to fix this issue", "i think all of the user would be greatful if you implement this", "because it be correct behaviour and very much expect"], "label": "1", "login": "BBGONE", "character": "Author", "reply": "Author", "beReplied": "CONTRIBUTOR"}
{"tokens": ["i do not try , but compile godot editor for arm linux would be well !", "due to chromebook release with arm processor"], "label": "1", "login": "amagnoni", "character": "NONE", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["no sort be not a valid verb", "if we use it in an own module and import it , we get :", "i think there be no comprehensible reason to not allow sort as an approve verb .", "kind regard , thomas"], "label": "1", "login": "schittli", "character": "Author", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["i personally like this idea , but what i be really after be consistence mostly ."], "label": "1", "login": "alan-agius4", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["@powershell / powershell - committee close on shipping either an <tag> or <tag> on the gallery", "we do n't want to expose a bunch of module that do n't work yet", "* in the future , we * can * expose module that be know to work within ps 6", "* this feel like a bit of a hack , and we do n't want to be tie to keep it forever", "* there be still value in easily add your windows psmodulepath"], "label": "-1", "login": "joeyaiello", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["@kilasuit i agree with you , but the alia issue be just an example", "if we can let powershell * * know the version a script be create for * * , we will be able to introduce \" break change \" to powershell itself in the future by provide compatibility mode for legacy script  ."], "label": "1", "login": "yuzhiqiangorg", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["lead slash refer to the root directory , so this be an absolute path", "path mapping do not work on absolute or relative path ."], "label": "-1", "login": "mhegazy", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["@mhegazy , @kitsonk typescript be widely use by angular <number> developer", "the only compiler that can treeshake angular <number> module be google closure  )", "it be a huge difference for google closure between { ' a ' :", "} and { a :", "} , x and x", "so provide an option to disallow dot access for type with index signature and quote access for type w / out index signature could be really beneficial , the way i see it ."], "label": "1", "login": "dmitrysteblyuk", "character": "NONE", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["this proposal be just wrong", "i put up with this bad behavior where it already exist for backwards compatibility , but spread it across the ecosystem in the name of consistency be not appropriate .", "find nothing when there be nothing to find be not an error", "it be the correct answer", "it be the correct result"], "label": "-1", "login": "TimCurwick", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "COLLABORATOR"}
{"tokens": ["you be right : we should take a step back :", "let 's revisit at what i propose in the op :", "i still think this be by far the good choice , but it be technically a break change", "while i 'd say this fall into bucket <number> and therefore make it an acceptable break change , if that be n't the consensus then have it as an opt - in , via <tag> be the next good choice - and user can decide whether they want ets member or not", "if we deem the break change acceptable , and someone really want to serialize <tag> _ with _ the - relevant - for - display - formatting - only - ets property - which strike i as unlikely - they can do :", "note that to - json serialization in the vast majority of case fall into the category of serialization of \" property bag \" type : dtos  that be implement as <tag> instance , hashtable , or   custom  class design specifically for that purpose", "such  type be ultimately solely compose of data type that serialize as json primitive : string , number , booleans , and date", "all other type be n't really suit for json serialization", "in short , my vote be for :", "all type that serialize to json primitive , include <tag> and <tag> , should _ always ignore _ ets property .", "* <tag> be the only type where powershell itself add such property , via <tag> , and _ solely for output format _ , which have nothing to do with serialization", "* all such type - comprise string and", "net primitive type that be _ value type _ - all of which conceptually be and present as as a _ single value _ , be poor candidate for have ets property attach to in general", "* in the rare event that someone still want such ets property serialize , they can use the <tag> solution show above", "* the above alone will cover the vast majority of use case", "separately , even though my sense be that it will be rarely , if ever , need : there be no harm in also give user a <tag> option to opt - out of ets property"], "label": "1", "login": "mklement0", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["with name script , static var may be finally useful ."], "label": "1", "login": "eon-s", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["seem like a legit bug , but as a side note , a little strange to resolve a promise from a promise executor callback .", "promise executor should basically be reduce down to the low level that be n't already promisifie", "if you already have a promise in the executor , then you could just make that your promise call , instead of create a wrapper promise around a promise"], "label": "-1", "login": "the1mills", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["would there be a way to subscribe to notification event and signal", "or   that would be possible already use the <tag> function"], "label": "0", "login": "jeremyjh", "character": "NONE", "reply": "MEMBER", "beReplied": "NoBeReplied"}
{"tokens": ["i believe i should also move my example here from related issue :", "here , property <tag> actually * * can * * have a setter but it * * should not be accessable * * outside of   <tag>", "moreover this setter contain complex logic and a simple readonly or an absence of a setter be not enough", "i agree that private setter be just a syntax sugar for private method with additional logic  but i think it be inconsistent when part of logic relate to a field be in a property  and another in a method  .", "this way getter / setter be implement in <tag> , i think it would be usefull to allow different visibility at compile time , though this contract will be lose in runtime"], "label": "-1", "login": "raveclassic", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["i think wrap <tag> be need since it simply use <tag> on merge mixin .", "afaik , most of vue component decorator be use <tag>"], "label": "1", "login": "ktsn", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["the whole point of it be not to have to start and stop it via boolean - that weight be take away by this feature .", "a trigger mean that whatever be inside it trigger one time and switch itself off", "but it keep track of the if case that s you give to the trigger - whether if be true or false and decide when to trigger once again", "if it keep track then no - you do not have to make the programmer reset their trigger", "the trigger will know when to reset itself because it keep track when what s parse to it have become false again"], "label": "1", "login": "blurymind", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["since all the   s be not do much i 'd just spam with one more    comment"], "label": "0", "login": "Zodiase", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@yyx990803 , what about use <tag> for <tag> and <tag>", "i 've see people ask that once in a while", "if support of old browser be go then <tag> with <tag> be available everywhere", "that solve this issue too"], "label": "0", "login": "nickmessing", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["i be actually surprised this have n't be implement", "if you look at other template language it be a common feature ."], "label": "1", "login": "Sarke", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["why be space not possible", "be that a limitation from the parser or from html perhaps", "if it be the former case , could it be possible to modify the parser so it accept those space in that particular case", "i really do not like that version :", "since it be really hard to read", "perhaps with a character that be more visible", "i think i would prefer the <tag> character since it be unlikely to be use in a custom event name , whereas <tag> could more likely be .", "indeed , it be already possible but more verbose and less legible in my opinion", "my solution would be a bit like use <tag> instead of <tag> ;)", "anyway , thank for take the time to review this"], "label": "1", "login": "AlexandreBonneau", "character": "Author", "reply": "MEMBER", "beReplied": "Author"}
{"tokens": ["come'on that be not that hard to understand , once again we be not target kid", "and regard the code organization , the problem be the same for event sheet", "if you do n't bother grouping node and organize your code you end up with unreadable code , whether it be due to lengthy event sheet or huge node graph ."], "label": "-1", "login": "groud", "character": "MEMBER", "reply": "Author", "beReplied": "Author"}
{"tokens": ["i think @johlju have the right idea about add an \" -allowcomments \" switch", "that way the cmdlet default to rfc - compliant behavior", "unless someone want to write a new rfc", "one very important argument in favor of support comment be the visual studio \" azure resource group \" sample project .", "the powershell wrapper that upload the artifact to azure storage and execute the deployment fail to run when one of the template or parameter have a comment in it", "i strip out all the comment from the file manually and everything be fine -- with they there , the error that @chriskuech receive be what stop the deployment", "if i have an \" -allowcomments \" switch , i could just modify the wrapper script and there would be no problem", "arm template can become very confuse and stretch to thousand of line , and not everyone be <number> % dedicate to automate pipeline - base deployment yet", "put a set of comment in to clearly mark what need to be modify by a human reduce the chance for error"], "label": "1", "login": "erictorbenson", "character": "NONE", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@atscott @pkozlowski - opensource would you consider a pr for this feature if i make one", "if so , i see <number> option :", "a <tag> emitter that emit when <tag> become <tag>", "a <tag> emitter that emit when <tag> change", "a <tag> emitter that emit <tag> when it change", "which of these do you think work well"], "label": "0", "login": "waterplea", "character": "Author", "reply": "CONTRIBUTOR", "beReplied": "CONTRIBUTOR"}
{"tokens": ["@craigkovatch i do n't think use <tag> be good practice", "there be basically no benefit to use it , and a number of downside that you might run into .", "i do n't want to tangent this thread on the point ; but i 've describe in detail some of the downside here : <url>"], "label": "-1", "login": "Retsam", "character": "NONE", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["this be the physics iteration per second step right", "if so this defeat the purpose which be to let you have a fix step iteration , interpolate / extrapolate the node 's physics state to obtain a visual position in frame update or move your stuff there manually ."], "label": "-1", "login": "tamkcr", "character": "NONE", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["@andreacatania i still do n't get how my problem would be easily solve by use an <tag> node , and that be what @mateusak have be say in this thread mostly", "anyway , i think i already know how to construct a ragdoll which be more or less the same in both godot and unity", "my main point , however , be in unity the ragdoll creation process make each bone an actual rigid body with a collider , so <number> ) it can easily detect a collision on itself and <number> ) we can easily apply an arbitrary impulse on it , and both of those thing be provide out - of - the box .", "with godot 's current <tag> implementation , however , there be no easy way for a <tag> to detect a collision  , and it also lack an api to apply an arbitrary force to it , like <tag>", "i do n't see how such limitation could be easily solve by use any exist node type godot provide , include <tag>"], "label": "1", "login": "mysticfall", "character": "CONTRIBUTOR", "reply": "MEMBER", "beReplied": "CONTRIBUTOR"}
{"tokens": ["several quick thought on this :", "how can user declare a default value when promise be not resolve", "should vue support a builtin throttle promise to handle event like keychange , mousemove", "should vue support a builtin callback when certain promise be resolve", "how to inspect whether the async property be resolve or resolve", "it might need a proposal for this"], "label": "0", "login": "HerringtonDarkholme", "character": "MEMBER", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["discussion about change to the progress api and behavior should be a separate issue", "this be really only about the rendering  of progress", "at this point , i think it might be good to add support for <tag> and have this in as an experimental feature to get some real world usage feedback", "for now , i 'll retain current behavior to clear the screen", "the downside be there be a perf impact as the current code  be clear the draw buffer often", "so there be perf impact for long running operation where more cpu be use to render progress"], "label": "0", "login": "SteveL-MSFT", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["follow \" the law of least surprise \" for how thing generally should work , if you be get plain text output , it should not be pad to some arbitrary width that depend on the size of your terminal window .", "if it be pad  it would possibly be well to be pad to a fix width , dependent on the width of the output table", "or , if you be not recoloure the output , it should n't be pad at all", "or somehow have the trail space trim when copy to the clipboard , however this may be out of your control and depend more on the terminal app in use"], "label": "-1", "login": "kai-h", "character": "Author", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["so this be visual studio <number>", "can you find out the version of the compiler", "run \" cl \" and \" link \" on the visual studio command prompt", "on sat , feb <number> , <number> at 2:10 am , joshua reisenauer < notifications@github"], "label": "0", "login": "punto-", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "CONTRIBUTOR"}
{"tokens": ["close , per <url>", "this be also available through several avenue : <url> , <url> and through  )"], "label": "0", "login": "atscott", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["this be not c , care to explain what they would have that a normal global scope var would n't have ?"], "label": "-1", "login": "akien-mga", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["imo , an <tag> should be the default , despite the fact that it would probably be a bit of a break in behaviour from what it be previously ."], "label": "-1", "login": "vexx32", "character": "COLLABORATOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["i do n't think it be that weird", "in my case i have some radio button and select a different one require some other part of the view to be update", "it happen that there be two part of the view that need updating and i already have two separate function to update each part of the view", "as i say above , i be use decorator , so think i 'd just add a <tag> decorator before both of those function , but at the moment only the second one get call because it overwrite the first one", "it be probably possible to change the definition of the decorator so that this work without allow an array  , although this seem a bit hackish and it would n't support different watch option .", "if <tag> accept an array as i suggest in my comment it would be very easy to design the <tag> decorator to support this scenario"], "label": "1", "login": "benstevens48", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["the big issue be probably replace the python build script for autogenerate code like the shader , it do n't seem like meson have a feature like that ."], "label": "-1", "login": "Zephilinox", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["cc @chuckjaz as we have a chat with about this issue", "so why do you use <tag> to do the load", "i would expect you just use <tag> all the time , give that there be no language service operation need here ."], "label": "-1", "login": "mhegazy", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["@lzybkr your previous comment be from almost a year ago", "since then it seem like there be plenty of break change go from windows powershell to   powershell core", "this seem like the right time if there ever be one to fix the parser ."], "label": "1", "login": "briantist", "character": "NONE", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["it be only build on editor and i be not sure for what be we use that , and if it be an editor thing i do n't want the android port to be any different from other platform"], "label": "0", "login": "thebestnom", "character": "Author", "reply": "Author", "beReplied": "Author"}
{"tokens": ["well that good to know , i be about to do my own module but guess i might as well for godot 2"], "label": "0", "login": "RameshRavone", "character": "CONTRIBUTOR", "reply": "CONTRIBUTOR", "beReplied": "NoBeReplied"}
{"tokens": ["this be a workaround for get hold of a child component nativeelement base on some property of the component itself :"], "label": "0", "login": "nickshoe", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["i have a similar requirement as @bobdankert   , i need to know if an update be available or not .", "any update / workaround on this issue"], "label": "1", "login": "souravs-2pirad", "character": "NONE", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["@nickmesse currently the only plan change in v3 be the reactivity system and browser compatibility", "the break change would be minimal  and the api will remain the same ."], "label": "-1", "login": "yyx990803", "character": "MEMBER", "reply": "MEMBER", "beReplied": "MEMBER"}
{"tokens": ["that would still be a break change ."], "label": "-1", "login": "Airblader", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@brian428 a question , that be basically this issue , be raise during the qa session of the last angular connect", "it be at 2:34:56 in this", "basically igor minar answer that incremental compilation be introduce in version <number> and that they know there be some more thing they can do with the test bed and that this will be work on in version <number> and <number> .", "so interpret that as we can expect it some time next year and this issue be in fact on their radar and current plan"], "label": "1", "login": "Koslun", "character": "NONE", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["sorry for not be clear", "what i mean to say be powershell already respect xdg spec for linux and macos . we should extend that to windows as well .", "module when then go in <tag> which would address the issue"], "label": "-1", "login": "thezim", "character": "CONTRIBUTOR", "reply": "Author", "beReplied": "NoBeReplied"}
{"tokens": ["@tjysdsg the discussion above sum that up very well : slightly_smiling_face :"], "label": "0", "login": "Calinou", "character": "MEMBER", "reply": "NONE", "beReplied": "NoBeReplied"}
{"tokens": ["afaik you can provide your custom <tag> implementation"], "label": "0", "login": "zoechi", "character": "CONTRIBUTOR", "reply": "NoReply", "beReplied": "Author"}
{"tokens": ["here be another use - case for this feature request", "a model entity with many field ,  a crud form and component to view / edit all field ,  a search form and component with a subset of the same field", "there be a lot of overlap , but not an exact match , between  and", "a few field be not appropriate for search , some need a slightly different data entry method , and some field grouping have a different precedence in  vs  per user requirement", "the feature request here would be a useful tool in solve this problem in the clean possible manner", "so for example , consider that component  have field that could be contain in multiple html file a - b - c - d - e", "and component  have field contain in those same html file but need the field like this , a - c - e - d", "contrary to some of the thought above , join template file to accomplish this be actually a very good example of composition .", "the composition of component on the page be very important , but there be also a composition of element within each component 's space", "the feature request would provide a lot of flexibility with this low level of composition"], "label": "1", "login": "betterbuiltcows", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["@billti   the problem that the global renaming prevent to find reference locally to import part", "because renaming rely on \" find all reference \" behaviour", "the question be it useful in a current module to click on import part to find all reference and obtain the reference for the import type in the whole project instead of only in the current module .", "to find local reference be very frequently use operation , but i can not do it with current behavior and i be stick with the \" find and replace \" dialog to look for the text", "and implement my suggestion the bug # <number>"], "label": "1", "login": "BBGONE", "character": "Author", "reply": "MEMBER", "beReplied": "Author"}
{"tokens": ["its sad but until the team add this we might have to use alternate datum structure"], "label": "0", "login": "pkanane", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["maybe a keyword like <tag>", "though other name like trait , mixin , have , etc", "be surely fine too", "i do like the idea too of have some option to exclude class_name type from the add menu", "it can get very cluttered with small type that do n't function on their own as node .", "it may even be just a feature topic of its own"], "label": "-1", "login": "ghost", "character": "NONE", "reply": "NoReply", "beReplied": "NONE"}
{"tokens": ["some interesting workaround be list here : <url>", "but they be not pretty"], "label": "0", "login": "alamothe", "character": "NONE", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["send json today should be easy and i think we should keep json to the json cmdlet and not have it marry to the web cmdlet ."], "label": "-1", "login": "SteveL-MSFT", "character": "MEMBER", "reply": "NoReply", "beReplied": "NoBeReplied"}
{"tokens": ["~~i have create a c # implementation of this", "not only be they more precise for integer , and useful with dictionary and other integer coordinate / grid , but we can also perform more optimization with they , such as bitwise operation for modulus .", "~~however , i believe that <tag> and <tag> be well name", "we be already create a new name , <tag> instead of <tag> , so why include <tag>", "while it could be useful to have other variant , such as <tag> , <tag> , and <tag> , it would make the most since to start with <tag> and make it the default"], "label": "1", "login": "aaronfranke", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["the usage of typescript as source language as its decorator and type annotation be a natural way to express angular 's feature , which would not be available in js", "support a different language would therefore affect the syntax of how to write angular application , which move it away from what angular be today .", "additionally , angular be about provide a consistent developer experience : we would n't want to split the ecosystem with a different source language", "the js example i have see in this thread be also not as recognizable , make it far more difficult to analyze statically for aot compilation", "as a side note : although angular 's current tooling be build on top of the typescript compiler , that do n't have to be the case", "there be proposal like # <number> to achieve compilation with other tooling , but the source language and syntax would remain the same"], "label": "1", "login": "JoostK", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["as there be load to unpack here , and i do not want to spam this issue , so i 've write a post with my opinion here : <url>", "tl , dr :", "i be excited and i think it be the right move", "although potentially risky , go all - in class resource for ps7 be a good move because it help focus the effort  . also , that do not mean it ca n't change later .", "json & mof exist because of the lack of metadata in function , i 'd prefer have metadata and be able to use ast", "it also avoid different move part and simplify some of the tooling", "support json in an exist dsc resource would often be break and not backward compatible , while class be", "a fair few explanation about testing , why we be not use class in dsc community resources", "it be long , but i try to provide context", "feel free to reach out  for question and comment"], "label": "1", "login": "gaelcolas", "character": "NONE", "reply": "NONE", "beReplied": "NONE"}
{"tokens": ["i do n't get the fr", "you can already programmatically create vue instance  . share an object as the state  will allow you to reuse the same datum in multiple instance if need .. to trigger function when thing change , use watcher ."], "label": "-1", "login": "posva", "character": "MEMBER", "reply": "NoReply", "beReplied": "MEMBER"}
{"tokens": ["@fian46 well , if someone have implement websocket as a downloadable gdnative plugin , then yeah , what you describe * would * be the workflow", "instead , they opt to make it an integrate feature available in the vanilla engine .", "there be nothing stop people from create feature that way , so your point be really unrelated to the topic of this issue"], "label": "1", "login": "willnationsdev", "character": "Author", "reply": "NONE", "beReplied": "NONE"}
