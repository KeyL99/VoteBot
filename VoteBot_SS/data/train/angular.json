{"dataset": [{"target": [11], "doc": ["i dig in the code a bit", "when the lazy route be visit for the first time , it will take the string or callback of loadchildren and load the lazy module", "once the lazy module be load , it will append an instance of loadedrouterconfig , name _ loadedconfig to that lazy route", "if the _ loadedconfig be present , it assume the module be load and will retrieve it", "delete the _ loadedconfig will cause it to re - initialize the module", "so i be scout for a work around and i have one problem and one blank :", "* i ca n't access the _ loadedconfig , it seem like the route get load into an injectiontoken route with usevalue , but the route in my own application , which i insert do n't show the internal object", "do usevalue clone they", "* i wonder that when you run", "get  on an injector if it prefer non - destroy provider / module over destroy one", "it seem to not care , because i destroy my module and it be still return service that be  functional", "i find it really weird that the instance be n't get truly destroy , they be set in a destroy state and destroy  be call on the underlie provider but my application seem mostly unaffected  ."], "issue_sim": [0.08031556010246277, 0.5702450275421143, 0.5585834980010986, 0.3624168634414673, 0.47221261262893677, 0.026011420413851738, 0.28338438272476196, 0.09002919495105743, 0.06911341845989227, 0.572193443775177, 0.44712650775909424, 0.4342663884162903], "prob": [4.8476144002052024e-05, 0.04844043403863907, 0.05629834532737732, 0.0009158174507319927, 0.0005756932077929378, 0.00024662597570568323, 0.04801652207970619, 5.651917490467895e-06, 7.00104328643647e-06, 0.007144283503293991, 0.0007126433774828911, 0.4587887227535248]}, {"target": [3], "doc": ["what be the idea to destroy already load module", "because the effect would be", "load it once again from a server", "angular have no public api for destroy already load module .", "javascript have gc and it clean any memory object which be not already reference", "you ca n't access private method and property from angular internal api"], "issue_sim": [0.44288358092308044, 0.0472383014857769, 0.1444956660270691, 0.4744223356246948, 0.31422120332717896, 0.28520604968070984], "prob": [0.0016297957627102733, 0.020186781883239746, 0.006769504398107529, 0.9436168074607849, 0.01735212653875351, 0.0007149397861212492]}, {"target": [0], "doc": ["it would n't destroy the module as in require a reload , but it would destroy the instance and all the datum in it .", "angular do have a public api for destroy ngmoduleref 's", "i expect that if i get a reference to the lazy load ngmodule and destroy it , it would recreate a new instance when revisit the route", "with no datum leave from the previous session", "\" you ca n't access private method and property from angular internal api", "heh , it be js , we all know that be not really true at runtime ;)"], "issue_sim": [0.5187678933143616, 0.3399255573749542, 0.5686004161834717, -0.022142592817544937, 0.28520604968070984, 0.2211466133594513], "prob": [0.6208148002624512, 0.0008872488397173584, 0.25427407026290894, 0.0016111057484522462, 0.00022852799156680703, 0.408321350812912]}, {"target": [0], "doc": ["the route be n't aware that the ngmodule be destroy  , so the di be always return that module and its provider  .", "the data structure be completely wipe though", "i have some custom initialization logic in the constructor of my lazy module , but that constructor be n't be call anymore because no new instance be be make"], "issue_sim": [0.49855107069015503, 0.10452206432819366, 0.4366905391216278], "prob": [0.8323458433151245, 0.011410328559577465, 0.3726585805416107]}, {"target": [0], "doc": ["ah i see now , so the behavior be somehow similar to use <tag> on a component level when you use <tag> route", "and when the component instance be keep when you route between <tag> and <tag>", "and when it be also not a good idea to call <tag> hook manually", "i do n't know that it be also possible to use <tag> on a module level", "by the same way as on a component"], "issue_sim": [0.33235061168670654, 0.2628905177116394, 0.21519701182842255, 0.3381892740726471, 0.04389653354883194], "prob": [0.2880556881427765, 0.10736937820911407, 0.05775635316967964, 0.1167306900024414, 0.006487899459898472]}, {"target": [0], "doc": ["the activatedroute trick do n't actually work , but listen to router.events do work : +1 :", "but yes , even on the module level you get to enjoy di"], "issue_sim": [0.08584621548652649, 0.22234298288822174], "prob": [0.6966599822044373, 0.057869188487529755]}, {"target": [1], "doc": ["yep , we di on module", "but i be still think about the real use case with <tag> when new instance be not create and when try to use it you get an error ."], "issue_sim": [0.2487148940563202, 0.3095541000366211], "prob": [0.22476181387901306, 0.7216686606407166]}, {"target": [0], "doc": ["+1 would love to be able to completely destroy the lazy loaded module , we do run some initialization logic and \" reprovide \" or \" shadow \" some service in the lazy loaded module injector via usefactory , but seem like all these factory function be memoize and never call again , try to destroy lazy loaded module with the api route mention above , but no luck ."], "issue_sim": [0.6888185739517212], "prob": [0.9998462200164795]}, {"target": [3], "doc": ["look into this at the moment", "i be currently lazy load a complete map module which i would like to clear once log out", "the reason behind this be because if the user re - log in i d like the mapmodule can re - initialise all it 's service etc without a page load", "unless there be a way to force some sort of re - initialization of a lazy module but not have it as it be the default action on every route change ."], "issue_sim": [0.02075337991118431, 0.4993589520454407, 0.31163638830184937, 0.43905866146087646], "prob": [0.00399578595533967, 0.023616928607225418, 0.5575358271598816, 0.29523518681526184]}, {"target": [0], "doc": ["we would like to re - initialize service provide in lazy module too .", "# <number> look like what we need", "be the fix be plan"], "issue_sim": [0.49583953619003296, -0.014921559020876884, 0.09569446742534637], "prob": [0.9765636920928955, 0.005931177642196417, 0.060012511909008026]}, {"target": [8], "doc": ["when you have a hammer , everything be a nail", "lazy load be not for cache service datum .", "lazy load be for load code in small bundle", "you should be use design pattern like memo , visitor , command or a dictionary pattern in a service to store your datum", "alternatively , you should use sessionstorage , or localstorage", "you just need a singleton service that control", "if you need different level of access , you should partition the datum into subobject", "js / ts do actually destroy object when you use they properly", "if you like , you can even add an interface to access the subobject from secondary service so it seem like the datum be partition separately", "the trick to solve these thing be to use the hammer that need the simple nail", "and if you feel you be go in circle from try to use the hammer at hand , you should at least try to ask yourself if you have the right tool for the job", "lastly , if you truly must reload the service , use a window", "href to reload the application", "that will dump the entire content and start over", "the only reason i would want to dump a lazy loaded module be to remove the unused code", "datum should not be control by module for a single session unless extenuate circumstance require it", "and even then , it be well to store that kind of datum in an offline datum store and retrieve it when need"], "issue_sim": [0.04169178009033203, 0.3748607337474823, 0.32901063561439514, 0.3207862675189972, 0.24211806058883667, 0.22666001319885254, 0.03464895859360695, 0.28047770261764526, 0.2843545377254486, 0.028444137424230576, 0.04738099128007889, 0.2468840479850769, 0.17838002741336823, 0.18372772634029388, 0.578106164932251, 0.3249737322330475, 0.1686575710773468], "prob": [0.0013459777692332864, 0.014511344954371452, 0.006395227275788784, 0.03441835194826126, 0.007911513559520245, 0.0020823541563004255, 0.00991716980934143, 0.0015304414555430412, 0.05922851711511612, 0.0009395874803885818, 0.06513179838657379, 0.0012956878636032343, 9.594958100933582e-05, 0.0003962692862842232, 0.014271188527345657, 0.011865753680467606, 0.011402753181755543]}, {"target": [0], "doc": ["the point here be to be able to control the lifecycle of module  , angular do not yet offer this ability .", "the op give here one use case , but i have another one that cause i issue too , i have to manually reset some service provide by a lazy module because they be not destroy once load", "we should be able to control this as in dagger or other di system"], "issue_sim": [0.3339555561542511, 0.5616956949234009, 0.03405243158340454], "prob": [0.42272165417671204, 0.518692135810852, 0.00040750077459961176]}, {"target": [6], "doc": ["@shamimislam i globally agree with you about : \" if you need to destroy a lazy loaded module to clear your datum / avoid memory leak , your problem be elsewhere \"", "but i still want this feature because i have the follow use case :", "i have a huge \" macro app \" which assemble different tool for all the different job in the same company", "each employee be allow to use some of the tool", "i have a kind of plugin system    where each tool be a plugin / ngmodule and each time a user log in , base on the user permission , i be load only the allow tool", "but when the user logout , i specifically need to unload all the tool because the next user to login might not have the same permission and therefor will not load the same tool", "in my case , it be not about clearing datum ,   it be about \" clear / unload code or destroy instance \" the next user will not be allow to use ."], "issue_sim": [0.5295379161834717, 0.12374302744865417, 0.036676082760095596, -0.015168866142630577, 0.3344798982143402, 0.31922924518585205, 0.4146047830581665], "prob": [0.00018886529142037034, 0.00013658466923516244, 0.015014010481536388, 0.0008821436786092818, 0.6401380896568298, 0.3161495327949524, 0.4187542498111725]}, {"target": [0], "doc": ["there be the destroy  method that can be use for it .", "abstract class ngmoduleref < t > {", "abstract injector : injector", "abstract componentfactoryresolver : componentfactoryresolver", "abstract instance : t", "abstract destroy : void", "abstract ondestroy = > void ): void"], "issue_sim": [0.1934506893157959, 0.19586890935897827, 0.19940096139907837, 0.049801647663116455, 0.14323167502880096, 0.24087941646575928, 0.2880043685436249], "prob": [0.6959969997406006, 0.00014300398470368236, 0.011155453510582447, 0.6836028695106506, 0.00043541050399653614, 0.0011403895914554596, 0.5363614559173584]}, {"target": [1], "doc": ["@mlc - mlapis    as @kewde explain here <url> ,   yes there be a destroy  method which destroy the injector  + call the register ondestroy callback on the ngmoduleref itself", "but the ngmodule instance  itself be not clear as there be still a reference to it inside the router inside a loadedrouterconfig as the _ module _ attribute", "this attribute be never clear and therefor the ngmoduleref be never gc'ed", "on the other hand , the ngcomponentoutlet do clear the reference to the ngmodule instance : <url>"], "issue_sim": [0.4139925539493561, 0.4114762544631958, 0.1315588355064392, 0.2041264921426773], "prob": [0.07835110276937485, 0.6513664722442627, 0.007733386009931564, 0.1070626899600029]}, {"target": [1], "doc": ["to work around that , i be currently use an ugly hack :", "by reset the router config ,   i be effectively destroy the reference to the ngmodule instance"], "issue_sim": [0.08178001642227173, 0.41369593143463135], "prob": [0.24592220783233643, 0.5123082995414734]}, {"target": [0], "doc": ["ok - so if the user be log out , after the session be clear , why ca n't. you force the window to reload ?", "do n't that solve the problem", "href = restartlocation;},1 )", "on thu , jun <number> , <number> at 3:44 am eddy * * * @ * * *", "* * * > write :"], "issue_sim": [0.3374650478363037, 0.03658875823020935, 0.03354727476835251, -0.012549132108688354, -0.07576793432235718], "prob": [0.9145604372024536, 0.010682359337806702, 0.009796625934541225, 0.10234996676445007, 0.00047121444367803633]}, {"target": [0], "doc": ["just because a solution work do n't mean it be a good solution", "- in the context of a webapp , reload the window mean load and parse once again all the init chunk of your app plus lazy load all the remain chunk", "and the user have to wait for the app to start again", "also , you might have some context that you wish to preserve between user login and logout", "- in my context , the angular be package with electron as a \" native desktop app \" and launch in full screen", "the point be that the user feel like they be use a native application as much as possible", "if i have to reload the browserwindow every time a user log out , it kind of kill the native app feel", "- still in my context , i do indeed need to preserve some context between user session and i think that save this context somehow  be an ugly hack than the one i 've explain early"], "issue_sim": [0.051242999732494354, 0.4727640748023987, 0.12680113315582275, 0.1234479621052742, 0.2103099226951599, 0.08571908622980118, 0.40763798356056213, 0.20951204001903534], "prob": [0.003318093717098236, 0.5068349242210388, 0.00041097551002167165, 0.0008567547192797065, 0.0017533153295516968, 0.000777972920332104, 0.0032085306011140347, 0.28821197152137756]}, {"target": [0], "doc": ["i think you should focus on reuse component , not template .", "not template , but component be first - class citizen in angular"], "issue_sim": [0.5069925785064697, 0.4554002583026886], "prob": [0.9892483949661255, 0.0018624449148774147]}, {"target": [0], "doc": ["in the case of extend a component , the child * * must * * provide a complete template .", "in this case it would be useful to reuse part of the parent template"], "issue_sim": [0.3381447196006775, 0.4400678873062134], "prob": [0.8231796622276306, 0.04026477038860321]}, {"target": [1], "doc": ["style do not need any aot  , but the angular do need to template for aot compilation", "if you understand the component architecture , you should be able to reuse the code between two different component .", "you need to create an extra component , in your case <tag> , and then include that in accounts-entity"], "issue_sim": [0.4851587116718292, 0.5846319198608398, 0.5179688930511475], "prob": [0.05131141468882561, 0.8738977313041687, 0.018872635439038277]}, {"target": [0], "doc": ["consider composition over inheritance .", "a component be a piece of code that interact with a view", "there be always a <number> to <number> relationship between they"], "issue_sim": [0.15434810519218445, 0.43456679582595825, 0.07021533697843552], "prob": [0.9929763078689575, 0.03475373238325119, 0.00329679436981678]}, {"target": [2], "doc": ["@mohammedzamakhan thank you   for your recommendation of component composition instead of inheretiency", "however for my usecase , inheritance be ideal and allow i reuse code", "i can change something in base template and let all derive component take advantage of it .", "we have <number> + table view with same crud style user interaction", "but we have to customize some table view without edit option  , have   some custom column render requirement and much more", "my ask be to allow build - time join   of <number> + template as @manklu suggest but natively", "please see my sample repo provide above :", "in derive   component , i can overwrite <tag> and <tag> method   for usecase", "how can we accomplish similar behavior with composition"], "issue_sim": [0.15922415256500244, 0.3613126277923584, 0.4370003044605255, 0.34014570713043213, 0.32464954257011414, 0.3735017776489258, 0.27228689193725586, 0.48545151948928833, 0.2891782820224762], "prob": [0.005380060523748398, 0.15039728581905365, 0.25953155755996704, 0.007534199859946966, 0.15780231356620789, 0.034304000437259674, 0.002936652395874262, 0.029422949999570847, 0.003866662969812751]}, {"target": [0], "doc": ["it would work just great when deal with multiply <tag>s .", "some component may have many ng - template define in a component 's template", "it would be nice to be able to spread these to separate file", "one of the use case :", "some of our component have the template \" to look like and work \" somehow + a couple of <tag>s to list small ui tool , like button / input / dropdown", "we then insert they to the require toolbar outside of the component with the cdk portals feature", "every component bring its own tool with it", "those do not deserve to be separate component"], "issue_sim": [0.08093652129173279, 0.502692461013794, 0.1904177963733673, 0.23816649615764618, 0.3979043662548065, 0.32578977942466736, 0.1809941530227661, 0.14209188520908356], "prob": [0.9499985575675964, 0.0017700840253382921, 0.0004989135195501149, 0.0001684266608208418, 0.20316533744335175, 0.001805686391890049, 0.001589879859238863, 0.001213638810440898]}, {"target": [7], "doc": ["here be another use - case for this feature request", "a model entity with many field ,  a crud form and component to view / edit all field ,  a search form and component with a subset of the same field", "there be a lot of overlap , but not an exact match , between  and", "a few field be not appropriate for search , some need a slightly different data entry method , and some field grouping have a different precedence in  vs  per user requirement", "the feature request here would be a useful tool in solve this problem in the clean possible manner", "so for example , consider that component  have field that could be contain in multiple html file a - b - c - d - e", "and component  have field contain in those same html file but need the field like this , a - c - e - d", "contrary to some of the thought above , join template file to accomplish this be actually a very good example of composition .", "the composition of component on the page be very important , but there be also a composition of element within each component 's space", "the feature request would provide a lot of flexibility with this low level of composition"], "issue_sim": [0.35720086097717285, 0.3612739145755768, 0.04168219119310379, 0.12996576726436615, 0.213265061378479, 0.4386661648750305, 0.34236177802085876, 0.253387987613678, 0.23688779771327972, 0.21444624662399292], "prob": [0.00014535445370711386, 0.09509006887674332, 0.002965769497677684, 0.09832227230072021, 0.00027427379973232746, 0.005236825905740261, 0.0008425423293374479, 0.18165969848632812, 0.001969971228390932, 0.00037408509524539113]}, {"target": [0], "doc": ["close as wo n't fix - the complexity here be far too great for the limited utility ."], "issue_sim": [0.0810043215751648], "prob": [0.9999370574951172]}, {"target": [1], "doc": ["i think you should consider it in next version", "i have few complex situation that will be easily fix with this thing", "it can make angular to the good framework ever", "however ' componentfactoryresolver ' if i can change the template with this service or an outer please let i know"], "issue_sim": [0.08314640820026398, 0.08827702701091766, 0.31988054513931274, 0.2701990604400635], "prob": [0.024721264839172363, 0.2570130527019501, 0.011887863278388977, 0.8554641008377075]}, {"target": [0], "doc": ["correct i if i be wrong , but be n't the problem with plain js that it ca n't be statically analyze ?", "afaik there be now way the aot compiler can do it be work without the metadata provide by typescript"], "issue_sim": [0.3498043417930603, 0.6368486285209656], "prob": [0.756415605545044, 0.39690250158309937]}, {"target": [1], "doc": ["what metadata be you specifically refer to", "my understanding be that the ngfactories generate in - memory by the jit be equivalent to those of the aot .", "generate the same ngfactories in - memory , the aot should be able to replicate this process", "i have n't read through the aot compiler 's source , though"], "issue_sim": [0.08858079463243484, 0.3973466455936432, 0.38081294298171997, 0.34155988693237305], "prob": [0.0034204015973955393, 0.8335714340209961, 0.002772764302790165, 0.013033650815486908]}, {"target": [0], "doc": ["aot require typescript , but you can at least do the tree shake part since it target es2015 js module and not typescript .", "rollup be a tree shaker that will work for plain js as long as you give it es2015 js", "the tree shake section in the doc : <url>", "should work for a plain js project as well", "notice how the input to rollup be js and not ts", "obviously this be not as nice as be able to do both aot and tree shake , but it be at least well than nothing :-)"], "issue_sim": [0.6920115947723389, 0.37579599022865295, 0.11829207837581635, 0.42229586839675903, 0.3906667232513428, 0.234699085354805], "prob": [0.8261388540267944, 0.1256427764892578, 0.0014910944737493992, 0.002071633003652096, 0.0028048844542354345, 0.44909659028053284]}, {"target": [0], "doc": ["my understanding be that the ngc compiler be a wrapper / enhancement of the regular tsc compiler and therefore assume typescript .", "i still think it should be possible support aot with js though", "it do n't seem like the concept of aot be tie to typescript for other reason than current tooling", "we will have to wait for feedback from the angular team about how feasible this be though"], "issue_sim": [0.6070929765701294, 0.43777140974998474, 0.5026601552963257, 0.3417755365371704], "prob": [0.6302796602249146, 0.02043907344341278, 0.5461079478263855, 0.046339474618434906]}, {"target": [0], "doc": ["if decouple ngc from tsc require a huge effort / rewrite , my use - case definitely do n't merit it :)"], "issue_sim": [0.3263483941555023], "prob": [0.999970555305481]}, {"target": [2], "doc": ["i have a use case for this", "i 'd like to make a kotlin wrapper for angular that use aot", "kotlin compile down to es5 so it would have to use an aot compiler for js", "be this in the work or be it something that wo n't be add"], "issue_sim": [0.16427592933177948, 0.6420356631278992, 0.5480068922042847, 0.055457137525081635], "prob": [0.00855117104947567, 0.2511660158634186, 0.40607166290283203, 0.01609199494123459]}, {"target": [3], "doc": ["i would also be interested if there be any update on this ticket", "kotlin be a much well language compare to typescript", "it be my current understanding that the ng compiler be tie to typescript .", "i would love for the angular team to provide the support that the community need to come up with an angular - kotlin integration"], "issue_sim": [0.1023760586977005, 0.49736955761909485, 0.5135606527328491, 0.5493429899215698], "prob": [0.00016692224016878754, 0.006275922060012817, 0.2728691101074219, 0.27265316247940063]}, {"target": [1], "doc": ["@cristian - mocanu - mob what be the meaning for angular compiler to generate non - typescript / javascript code", "angular itself be write in typescript  , and the template can not work without angular runtime part ."], "issue_sim": [0.610485315322876, 0.6671815514564514], "prob": [0.058667492121458054, 0.8617489337921143]}, {"target": [2], "doc": ["@trotyl : i think you miss my point", "of course the * * output * * should be javascript  because that be what the browser run", "my point be about the * * input * * : use kotlin as an input to the angular compiler , instead of typescript ."], "issue_sim": [-0.04135659337043762, 0.28211718797683716, 0.6529629230499268], "prob": [0.0033602281473577023, 0.03177989646792412, 0.9706699252128601]}, {"target": [2], "doc": ["@cristian - mocanu - mob sound like a great hobby project on the side :)", "i be sure there be more important stuff in the pipeline than rewrite the entire compiler", "i agree that in an ideal world , compiler for other language would be nice - but what about 3rd party lib ?", "would those not need to be rewrite in kotlin", "or would the compiler have to compile both at the same time", "i think there be practical implication in this that at least i do n't quite grasp", "the idea be great , just do n't think it be feasible imho"], "issue_sim": [0.11139385402202606, 0.2765449583530426, 0.3038054406642914, 0.39964234828948975, 0.21324566006660461, 0.1295160949230194, 0.08147341012954712], "prob": [0.005907401908189058, 0.470846027135849, 0.406991571187973, 0.013506509363651276, 0.08597444742918015, 0.12609292566776276, 0.013991975225508213]}, {"target": [6], "doc": ["@cristian - mocanu - mob angular compiler will only compiler html template while collect metadata in typescript", "it wo n't change any typescript code except the special handling for metadata part", "even if it could extract metadata from kotlin and then compile the html template , you 'll still get logic code in kotlin and generate code in javascript / typescript", "so what you need be :", "bridge for extracting metadata from kotlin  ;", "compile kotlin to javascript * * per file * *  ;", "the real problem be the second , how can you perform the single file compilation from kotlin to javascript without bundle ?", "that be a general problem for to - javascript compilation itself , not relate to typescript", "* * if this problem not exist , like use coffeescript , then it be quite possible to support it by just wrap the compiler"], "issue_sim": [0.6356134414672852, 0.3999703526496887, 0.5707255601882935, -0.06737208366394043, 0.27403682470321655, 0.47301939129829407, 0.5595855712890625, 0.6311931610107422, 0.5732654333114624], "prob": [0.00013876661250833422, 0.012099568732082844, 0.5281708240509033, 2.1101184302096954e-06, 0.33149948716163635, 1.1231043572479393e-05, 0.14632399380207062, 0.03727405518293381, 0.002369544468820095]}, {"target": [5], "doc": ["@spock123 : let i start by say that i have no idea how the angular compiler work", "that say , the request be not for angular compiler to support kotlin directly , but rather to step aside and not be so tightly couple to typescript", "this would allow any language that compile to javascript to be support", "some time ago , i find some information about how to use angular with plain javascript", "i ca n't tell if the info apply to angularjs or angular , because of the very bad decision to keep the same name , even though it be a totally different framework", "to reiterate , angular should work with plain javascript .", "when that be possible , then angular will be able to work with any language that compile to javascript , include kotlin", "someone more knowledgeable than i please add a comment state :", "- whether angular support plain javascript * * instead of * * typescript", "- if so , how to do it", "- it not , what need to change in angular to support this"], "issue_sim": [0.5686771869659424, 0.6941351890563965, 0.4531101584434509, 0.5751364827156067, 0.48980912566185, 0.5751240253448486, 0.6268637180328369, 0.01626000367105007, 0.6868167519569397, -0.01846458949148655, 0.48586031794548035], "prob": [6.753309571649879e-05, 0.5306295156478882, 0.007862486876547337, 1.4757139069843106e-05, 0.2239704579114914, 0.13381201028823853, 0.001248253509402275, 0.000446612189989537, 5.930129418629804e-07, 1.166482161352178e-05, 0.0011103006545454264]}, {"target": [1], "doc": ["@trotyl : because i be not familiar with how the angular compiler work , i do n't fully understand your comment", "it seem to i that if the angular compiler could be use with plain javascript  , than any language compile to javascript could be support :", "- step <number> : compile language x to javascript", "- step <number> : invoke angular compiler", "be this possible today", "if not , would it be a big effort to make this possible", "in the mean time , i guess i need to do some reading about the angular compiler"], "issue_sim": [0.46518880128860474, 0.6316273212432861, 0.3663403391838074, 0.4964311718940735, 0.07780160009860992, 0.057896386831998825, 0.5364120006561279], "prob": [0.14398136734962463, 0.7247307300567627, 0.009883718565106392, 0.015328997746109962, 0.001320046023465693, 0.21359066665172577, 0.045851536095142365]}, {"target": [1], "doc": ["@cristian - mocanu - mob", "angular compiler do support plain javascript as source code , but require companion <tag> for signature and <tag> for annotation .", "all angular library be ship in javascript without typescript source code , clearly they be also support", "so if you can generate <tag> and <tag> from your own source code  , it will be possible to use it with angular compiler"], "issue_sim": [0.099428690969944, 0.6861487627029419, 0.6120432615280151, 0.6199204921722412], "prob": [0.011714399792253971, 0.7096032500267029, 0.3051770329475403, 0.10065371543169022]}, {"target": [0], "doc": ["do i understand correctly that <tag> be kind of replacement of support decorator and if we generate it we should not generate code for decorator in the js code ?"], "issue_sim": [0.5193110704421997], "prob": [0.9999480247497559]}, {"target": [1], "doc": ["@bashor only true if you be genrate aot - only library", "you should keep the decorator  if you want to support jit usage ."], "issue_sim": [0.315138578414917, 0.32798996567726135], "prob": [0.08929405361413956, 0.9445263743400574]}, {"target": [1], "doc": ["the usage of typescript as source language as its decorator and type annotation be a natural way to express angular 's feature , which would not be available in js", "support a different language would therefore affect the syntax of how to write angular application , which move it away from what angular be today .", "additionally , angular be about provide a consistent developer experience : we would n't want to split the ecosystem with a different source language", "the js example i have see in this thread be also not as recognizable , make it far more difficult to analyze statically for aot compilation", "as a side note : although angular 's current tooling be build on top of the typescript compiler , that do n't have to be the case", "there be proposal like # <number> to achieve compilation with other tooling , but the source language and syntax would remain the same"], "issue_sim": [0.7069193124771118, 0.5481030344963074, 0.3918227553367615, 0.496237576007843, 0.694180965423584, 0.4200040102005005], "prob": [0.2124575972557068, 0.5356277227401733, 0.025720344856381416, 0.004197616130113602, 0.020296229049563408, 0.00459013506770134]}, {"target": [1], "doc": ["so i be afraid this be totally the expect behaviour", "javascript template literal string always include all the character between the two back - tick .", "as i see it you have a few option", "the first be to accept that the string be go to be long on a single line and replace the actual newline with <tag> character string :", "<tag> <tag>long long long long long long long long long long long long\\n                     multi - line string <tag> <tag>", "obviously this mean that you have really long line for some message but at least you have full control over the character that appear", "the other option be to use custom id for your message , which would ensure they receive the same translate string :", "<tag> <tag>:@@long - message - id : long long long long long long long long long long long long", "multi - line string <tag>:@@long - message - id : long long long long long long long long long long long long", "multi - line string <tag> <tag>", "in this case the actual string will be ignore for translation purpose"], "issue_sim": [0.02737383171916008, 0.46328213810920715, -0.04529848322272301, 0.5633954405784607, 0.3581225872039795, 0.21336106956005096, 0.4477158188819885, 0.21832549571990967, 0.33817046880722046, 0.4470962882041931, 0.3471093475818634], "prob": [0.004241407383233309, 0.29124629497528076, 0.01680273562669754, 0.22730658948421478, 0.0855007916688919, 0.12666618824005127, 0.06677085161209106, 0.015834126621484756, 0.005836616735905409, 0.0048859636299312115, 0.022965263575315475]}, {"target": [10], "doc": ["hello , i take the liberty of intervene because i share the same problem", "it be desirable to avoid many extra space , like <number>  <tag> in :", "<tag> <tag>long long long paragraph", "that do not contain new line", "but actually be <number> char long", "and would hardly fit in one line <tag> <tag>", "for various reason :", "- the one describe by @bravier ,", "- it confuse human  translator ,", "- indent or deintende the surround code block cause problem too", "be there a way to use <tag> differently  ` ? ) to allow break string on multiple line ?", "for instance , in many language it be usual to write :"], "issue_sim": [0.06023571267724037, 0.14372754096984863, 0.21309389173984528, 0.19443245232105255, 0.18127380311489105, 0.21165822446346283, -0.041027940809726715, 0.06535180658102036, 0.0893818661570549, 0.2721289098262787, 0.5490899085998535, 0.07167400419712067], "prob": [0.060466594994068146, 0.3651300072669983, 0.02011297084391117, 0.006235272157937288, 0.004156805109232664, 0.005444954615086317, 0.004309814423322678, 0.007864933460950851, 0.015523958019912243, 0.05880764499306679, 0.13708628714084625, 0.004625869449228048]}, {"target": [1], "doc": ["the actual syntax of <tag> as a function be :", "so if you really want you could do define a function that create <tag> object :", "and then you could do something like :", "and the <tag> translation tooling will pick this up ok"], "issue_sim": [0.17643868923187256, 0.26210737228393555, -0.04917692393064499, 0.17038768529891968], "prob": [0.8093770742416382, 0.40803393721580505, 0.005887685343623161, 0.002854842459782958]}, {"target": [1], "doc": ["thank for your proposal , it would be a perfect compromise : +1 :", "however i try it and it do n't work as be , because at the end of compilation , when <tag> try to replace pre - build english string with french one , it seem to expect every element of the node to be <tag>s :", "<tag> <tag> $ localize <tag> <tag>", "from function <tag> :", "what be i do wrong"], "issue_sim": [0.07560808211565018, 0.4376910626888275, 0.31867456436157227, 0.07959027588367462, 0.05479278415441513], "prob": [0.23796992003917694, 0.8911821246147156, 0.005448728799819946, 0.005938295740634203, 0.0018397764069959521]}, {"target": [0], "doc": ["the <tag> and <tag> parameter must be <tag> .", "sorry , i mislead you by my example", "it should be :"], "issue_sim": [0.08251847326755524, -0.013623330742120743, 0.047720663249492645], "prob": [0.8960261940956116, 0.018685713410377502, 0.02391212061047554]}, {"target": [0], "doc": ["or if you be sure that you would never need to provide interpolation in your string then you could have a simplify version of <tag> which look like :"], "issue_sim": [0.3573748469352722], "prob": [0.9999557733535767]}, {"target": [2], "doc": ["thank for the quick answer pete", "i 've try your last proposition as i wo n't provide interpolation in my string", "unfortunately , i still have the same error :. <tag> <tag> $ localize <tag> <tag>", "when look at the array the function <tag> receive when use the simple form of <tag>  , i see something like :", "but when use concatenated string like i be try to do , it receive :", "the code i use be update on : <url>", "be there anything else i can try"], "issue_sim": [-0.030872050672769547, 0.205776646733284, 0.3912496268749237, 0.21990805864334106, 0.33425796031951904, 0.23740063607692719, 0.025978542864322662], "prob": [0.03647100180387497, 0.4286304712295532, 0.007387523073703051, 0.071034736931324, 0.0248455461114645, 0.018995177000761032, 0.022236231714487076]}, {"target": [0], "doc": ["the concatenated string be pass to the translation tooling as binaryexpression", "we could probably make that bit of the translation code more lenient", "improve <tag> to be able to handle array of binary expression where the binary expression be a concatenation of string", "but at some point we be venture into partial evaluation of the code , which i 'd like to avoid"], "issue_sim": [0.39627623558044434, 0.24173569679260254, 0.29441165924072266, 0.13138338923454285], "prob": [0.02284863032400608, 0.03456493839621544, 0.23597723245620728, 0.10891386866569519]}, {"target": [1], "doc": ["sure , fair point", "it be just sad there be n't a way to use <tag> with long string splitte on multiple line  , as it seem a very common use - case .", "anyway , thank for your feedback @petebacondarwin"], "issue_sim": [-0.05029839277267456, 0.5175130367279053, -0.03798848018050194], "prob": [0.022627074271440506, 0.9535224437713623, 0.02894926629960537]}, {"target": [0], "doc": ["i understand your argument and as @adrienverge say , it be sad this use - case be not support yet .", "but thank for the help and support you provide with this issue , very appreciated : +1 :"], "issue_sim": [0.19409240782260895, 0.022338971495628357], "prob": [0.7788232564926147, 0.3153054714202881]}, {"target": [1], "doc": ["that be to be expect", "the icu expression get a translation  and the contain message , <tag> get a translation too  ."], "issue_sim": [0.04073936492204666, 0.21765416860580444], "prob": [0.022457467392086983, 0.9735773205757141]}, {"target": [0], "doc": ["we discuss this in our triage meeting and have decide that since this have very little community support and would open up the localization tooling to more complexity we will not implement this ."], "issue_sim": [0.1868390142917633], "prob": [0.9999740123748779]}, {"target": [1], "doc": ["you have a problem with the creation order of the service and the interceptor", "the service creation have to be finish before the interceptor be create .", "if you call the http request in the service constructor , the interceptor instance be create during the service creation", "extract the http request in a method and make the call in the component"], "issue_sim": [0.30019819736480713, 0.3897193670272827, 0.662404477596283, 0.3412463068962097], "prob": [0.014247631654143333, 0.9827019572257996, 0.011707663536071777, 0.0008527667378075421]}, {"target": [1], "doc": ["the constructor in the service only initiate an async task that do not need to be complete for the the service to be ready", "it would be really great to not have to move that http call to a component oninit , or at least have the choice as it work for all case except when use in an httpinterceptor .", "wrap the http call in the service in a settimeout also solve the problem , but would still prefer to avoid any workaround"], "issue_sim": [0.509401798248291, 0.4147226810455322, 0.5207018852233887], "prob": [0.142719104886055, 0.6999470591545105, 0.04222636669874191]}, {"target": [1], "doc": ["the behavior change if i switch back to the old way of provide the service", "the old way cause an infinite loop where a new instance of the service be create each time the interceptor intercept a new request , and each new instance of the service fire a new http request .", "it never stabilise before exceed max call stack size", "stackblitz example : <url>"], "issue_sim": [0.1977766901254654, 0.47003743052482605, 0.08766891807317734, 0.1292368769645691], "prob": [0.10078459233045578, 0.8863027095794678, 0.010878185741603374, 0.0056688543409109116]}, {"target": [2], "doc": ["make an http request from a service constructor be not support", "if that be the case , then the doc should specify that at some point , and maybe emitt a error message if the service fail to initialize before its inject", "it be also really inconsistent as it only fail to work when the service be inject into a interceptor , and it can easily be solve by a settimeout around the http call ."], "issue_sim": [0.6593358516693115, 0.577785849571228, 0.6193552017211914], "prob": [0.0038904095999896526, 0.3942871689796448, 0.7314162254333496]}, {"target": [0], "doc": ["make circular dependency in di be not support .", "nothing to do with http"], "issue_sim": [0.39140647649765015, 0.10463956743478775], "prob": [0.8198463320732117, 0.04133939370512962]}, {"target": [1], "doc": ["same here , how can have a service  make an http request  while have an http interceptor", "in my case use a <tag> be enough , but be there a well solution ?", "for example in a component i would do this in <tag>"], "issue_sim": [0.43684592843055725, 0.20873570442199707, 0.2689315676689148], "prob": [0.10666697472333908, 0.5949621200561523, 0.027133997529745102]}, {"target": [1], "doc": ["as long as this bug be still present , and we do n't have ngoninit in service i see two solution :", "use a settimeout in the service constructor  <tag> ngoninit <tag>"], "issue_sim": [0.28716132044792175, 0.6279504299163818], "prob": [0.6643704175949097, 0.07420596480369568]}, {"target": [7], "doc": ["do n't know if it help to another one", "but i consider the problem while use <number> service inside a interceptor", "after a debugging and trial and error session i figure out , that the constructor be use in well order", "so before the function \" intercept  \" it use the constructor", "at the constructor time , both service be inject right and i get an instance", "but while the intercept function , they where undefined", "so i try another way", "instead of have two local variable for the service i just use static variable .", "in the constructor i reference the inject service to my static variable", "after that i could get the right instance of the service", "the example below use the translate service and another notification service for a notification to the user , right after a http call go wrong", "for simplicity i remove the notification part and keep the translate service part", "so here be a code snippet for that solution :", "for i it seem that the intercept function be somehow always static and never use an istance of itself", "but i ca n't find any documentation about this behaviour", "i make a quick try with the httpclient and get an instance the same way as well :"], "issue_sim": [0.07498817145824432, 0.33569109439849854, 0.36255139112472534, 0.47735270857810974, 0.6856858730316162, 0.13264471292495728, -0.011139782145619392, 0.3244003653526306, 0.6199085712432861, 0.25291210412979126, 0.34222984313964844, 0.1406324803829193, 0.14613424241542816, 0.2775147557258606, 0.1407020390033722, 0.3322247266769409], "prob": [0.01772630214691162, 0.010742523707449436, 0.13157948851585388, 0.0037505123764276505, 0.006174503825604916, 0.0012522253673523664, 0.0002579067077022046, 0.017123054713010788, 0.003883717581629753, 0.026357145980000496, 0.08045284450054169, 0.013910443522036076, 0.07245660573244095, 0.030598146840929985, 0.017040876671671867, 0.026312891393899918]}, {"target": [0], "doc": ["put the asyncrhronous code aside from the constructor be not enough as the result datum will not be accessible when the httpinterceptor first execute", "my solution , even if it feel dirty to i , be to give access to the asynchronous datum  in an observable and to use that observable inside the httpinterceptor .", "this same use case be describe by daniel crisp on this blog post : <url>"], "issue_sim": [0.5305531024932861, 0.4425838589668274, 0.1355578899383545], "prob": [0.6966279745101929, 0.7818601727485657, 9.620645141694695e-05]}, {"target": [2], "doc": ["i be encounter the same problem : <url>", "my use case be also to validate a store token", "i be use the <tag> workaround for now ."], "issue_sim": [0.07802359759807587, 0.2663629651069641, 0.1479026973247528], "prob": [0.15827421844005585, 0.060266848653554916, 0.35690033435821533]}, {"target": [0], "doc": ["you be problem be more related to the fact , that you be call the myservice too early .", "i just move your httpclient call away from the constructor to a new function", "inside the functio you then call the api behind", "then everything be work fine", "be carefull with call thing directly in the constructor", "in angular some part of the app be not yet there due to the boostrapping"], "issue_sim": [0.10465232282876968, 0.567309558391571, 0.25586891174316406, -0.06392967700958252, 0.4213419556617737, 0.37748831510543823], "prob": [0.886970043182373, 0.021355193108320236, 0.004662318620830774, 0.0014666201313957572, 0.03660208731889725, 0.014128013513982296]}, {"target": [1], "doc": ["that be the expect usage , not a workaround", "one can never have eager circular dependency ."], "issue_sim": [0.15191280841827393, 0.2599860429763794], "prob": [0.30091193318367004, 0.6157620549201965]}, {"target": [0], "doc": ["get support for ngoninit in the service would help a lot , assume ngoninit be execute after the current service be do construct , and be available for di ."], "issue_sim": [0.4644453525543213], "prob": [0.9999628067016602]}, {"target": [0], "doc": ["fwiw , i bump into this issue and find that add the service as a dep seem to work for i .", "so in your module , set up your provider like so :", "then , in my constructor i can import it", "i have n't dig deep yet , but it be work , though if you have multiple dep , the order seem to matter", "that be unconfirmed , though"], "issue_sim": [0.2954769730567932, 0.2822139263153076, 0.3703387379646301, -0.01500820554792881, 0.07066012173891068], "prob": [0.8045623302459717, 0.041861966252326965, 0.019382357597351074, 0.428420752286911, 0.007091926410794258]}, {"target": [1], "doc": ["in angular <number> you now get a clear error message due to the circular dependency", "since circular dependency be an invalid di setup in angular , there be a clear message now , and this issue do not get much community support as a feature , i be go to close it ."], "issue_sim": [0.45038414001464844, 0.5318642854690552], "prob": [0.2952573001384735, 0.6159746050834656]}, {"target": [0], "doc": ["you be right , tz name be no more support any more in 5.0 .", "you can check the changelog for detail", "tldr be we switch from an intl", "js base implementation to a custom implementation to fix a great deal of bug", "@ocombe could you please follow up to make sure the doc be up to date and may be give some pointer on how this could be implement in <number>"], "issue_sim": [0.28671473264694214, 0.06876172125339508, 0.14666959643363953, 0.11912912130355835, 0.21847710013389587], "prob": [0.5063149333000183, 0.031450849026441574, 0.024237480014562607, 0.04620043933391571, 0.4040137529373169]}, {"target": [0], "doc": ["yes sorry , when we switch from intl to our own api we have to remove timezone name because it represent too many datum for each locale .", "be this something that you absolutely need"], "issue_sim": [0.5656548738479614, -0.050622738897800446], "prob": [0.9264603853225708, 0.027456920593976974]}, {"target": [0], "doc": ["i already had<tag> in my project so i pull in <tag> to. create a valid offset to pass .", "in the future i be consider use date - fns", "along with another library to represent the subset of zone info i need to", "on fri , nov <number> , <number> , 3:33 be olivier combe < notifications@github", "phone : <number> - <number> - <number>"], "issue_sim": [0.3374057114124298, 0.29717469215393066, 0.1377091258764267, -0.016564866527915, 0.024623742327094078], "prob": [0.9716471433639526, 0.006647306028753519, 0.10788513720035553, 0.004117008298635483, 0.0012189673725515604]}, {"target": [0], "doc": ["no , it should work , z will output the iso8601 basic format in this case"], "issue_sim": [0.3080643117427826], "prob": [0.9987708926200867]}, {"target": [0], "doc": ["now that tz name be no long support , what be the intend way to specify a timezone that adhere to daylight saving ?", "for example have a timezone set to \" america / chicago \" , it would be utc-5  or utc-6  depend on the date be format", "how should this be handle"], "issue_sim": [0.6240928173065186, 0.3661554455757141, 0.05521717667579651], "prob": [0.9084102511405945, 0.6536247134208679, 0.00014062858826946467]}, {"target": [0], "doc": ["i do n't think there be a way to do that for now", "@voidale if you be use angular <number> , you can use  directly  when you write your own pipe"], "issue_sim": [0.07839825004339218, 0.32346561551094055], "prob": [0.5751582980155945, 0.0966266319155693]}, {"target": [0], "doc": ["a time zone and an utc - offset be not the same !", "that mean actually you would have to calculate the offset for every date you be display"], "issue_sim": [0.4577925205230713, 0.25784194469451904], "prob": [0.3968338966369629, 0.45574456453323364]}, {"target": [1], "doc": ["this seem like a huge step back to i", "if the new pipe expect you to know what the offset be for a particular date then you might as well process that on the server  .", "i just do n't get the point of have a date pipe that only use the offset", "we do everything in our backend in utc , then rely on front - end tool like angular to take care of convert that to local time for the user"], "issue_sim": [-0.06071031838655472, 0.3463347256183624, 0.3671056628227234, 0.4235725402832031], "prob": [0.0013302352745085955, 0.9891126751899719, 0.007984058931469917, 0.26644444465637207]}, {"target": [0], "doc": ["this feature can be achieve by extend the current <tag> as show in the blog post link in <url> .", "such an implementation require add a dependency on <tag> , which be about <number> kb", "support this would require add to the size of the common package or at least the locale data file", "moreover the data change year on year depend upon each city 's daylight saving plan", "so there be a considerable maintenance cost involve in support this", "since the moment - timezone project be already handle this , and create a custom date pipe be fairly straightforward , we have decide not to implement this in the framework itself"], "issue_sim": [0.1791691929101944, 0.09636886417865753, 0.23062580823898315, 0.1107308566570282, -0.01426791399717331, 0.5115478038787842], "prob": [0.31011396646499634, 0.015365377068519592, 0.032763972878456116, 0.013364732265472412, 0.01209031231701374, 0.4890749752521515]}, {"target": [0], "doc": ["what you describe it be exactly before stable angular ."], "issue_sim": [0.22400403022766113], "prob": [0.9999042749404907]}, {"target": [0], "doc": ["i think most devs also prefer to use a more declarative and visually straightforward approach to wire thing up in order .", "it be easy to see how thing be work this way", "then once everything be stable start improve developer efficiency by remove boilerplate and improve the container design", "spring framework use to have massive xml configuration file , and now it be down to almost <number> boilerplate"], "issue_sim": [0.20919954776763916, 0.05447999760508537, 0.186300128698349, 0.3551817536354065], "prob": [0.5835776925086975, 0.00048336980398744345, 0.3132382035255432, 0.007768849842250347]}, {"target": [1], "doc": ["it happen that for i - using of ngmodule * * be * * less boilerplate", "it look easy to wire - up component directly when you build application from the scratch , but do not play well when you refactor exist application , remove unused code , or copy - paste code from <number> project to another .", "i be try to make module as small as possible , ideally for each small feature that can be re - used or can be delete completely"], "issue_sim": [0.35965561866760254, 0.3986981511116028, 0.24755524098873138], "prob": [0.019893787801265717, 0.5745182633399963, 0.11623283475637436]}, {"target": [0], "doc": ["a zero boilerplate , zero repetition ,  design be doable .", "we just have to look at it carefully", "there be still <number> open issue on the issue log", "the simple angular get the small the issue stack get and the more time we can spend build meaningful thing"], "issue_sim": [0.06712786853313446, 0.13597418367862701, 0.1399361789226532, 0.2876545786857605], "prob": [0.7636696100234985, 0.0014432959724217653, 0.003261180128902197, 0.10430146008729935]}, {"target": [1], "doc": ["consider example : you have a module for custom datepicker component - it contain only <number> component , nothing more", "then to use it in a new project - just copy the module and connect it to the share module .", "no need to connect it to every component where you want to use it", "i recommend you to check this one : <url>"], "issue_sim": [0.5277729034423828, 0.20688122510910034, 0.2670525312423706, -0.029666448011994362], "prob": [0.05581936612725258, 0.6541659832000732, 0.020122326910495758, 2.4191669581341557e-05]}, {"target": [0], "doc": ["we can still do exactly what you be say and eliminate boilerplate .", "here be what i be suggest :", "<number> ) declare that the component use the date picker and import the date picker into that component", "<number> ) do nothing because angular generate the necessary meta datum to include the date picker from now on", "so for the people that only wish to declare the date picker in one place within the app , they can just declare it in the main app shell , and they be good to go", "the only difference then be that all the need to do be :", "<tag> <tag> declaration <tag> calendar card <tag> date picker <tag> date picker <tag> date picker <tag> app shell `", "angular can read the package", "json file and inject the date picker that the calendar component need , and this can all be automate", "angular can also generate a nice dependency graph show you exactly what the ngmodule current provide and use this type of feature to warn you of thing that might be silly", "more live la vida loca"], "issue_sim": [0.17517441511154175, -0.009145074523985386, 0.4331734776496887, 0.28439074754714966, 0.35231414437294006, 0.0297372005879879, 0.23758216202259064, 0.32752954959869385, 0.3599039912223816, 0.4017319083213806, -0.05754765123128891], "prob": [0.512825071811676, 0.00025507391546852887, 0.03740343451499939, 0.019537145271897316, 0.15010981261730194, 9.680443326942623e-05, 0.0070796445943415165, 9.044058242579922e-05, 0.010992353782057762, 0.21082191169261932, 5.268599488772452e-05]}, {"target": [0], "doc": ["the other benefit to direct import of <tag> where it be need be refactore .", "if the data picker component import declaration be at the top of every file that need this component  then that file become self descriptive and can be move around , possibly to a completely different project module , more easily"], "issue_sim": [0.28470176458358765, 0.6160314083099365], "prob": [0.8424743413925171, 0.4473104476928711]}, {"target": [3], "doc": ["take a look at this axis module from ngx - chart :", "the designer have to repeat the name of every single component <number> time", "i imagine that be because all of the component should have access to the common , but which one", "if want to move the <tag> to a completely different project do i actually need the <tag> or be this just something that be throw in here for the sake of development flow ?", "i also do n't think this module format follow the current recommendation for angular"], "issue_sim": [0.23539134860038757, 0.203415185213089, 0.2800132632255554, 0.3944263160228729, 0.3274741768836975], "prob": [0.017977388575673103, 0.016784943640232086, 0.08245231211185455, 0.6350036859512329, 0.010268372483551502]}, {"target": [0], "doc": ["the <tag> be only need when declare component use <tag> , <tag> , build in pipe .", "i have module in my app where i do not import <tag> this be normal situation", "i think in general you want angular to be more than framework - you want it to be complete development platform", "but it be framework , it do not invent new platform or language , it use what already exist", "you maybe would like to check angulardart <url> - they propose api you like : no module , routing define per component", "plus dart be the complete development platform"], "issue_sim": [0.4755404591560364, 0.3754551112651825, 0.37413161993026733, 0.17150987684726715, 0.47003012895584106, 0.13972362875938416], "prob": [0.9661927223205566, 0.0012424729065969586, 0.20619985461235046, 0.061305802315473557, 0.0012244426179677248, 7.986087439348921e-05]}, {"target": [7], "doc": ["i have module in my app where i do not import commonmodule this be normal situation", "i do not write the  library / component set", "some obviously very intelligent people do though , yet you see how the module be be author", "even with the rewrite a lot of people would look at that and go \" ok - what do we really gain from this", "and maybe we gain something , but could that have be simple", "you be also miss my point", "which one of the chart file depend on common and which do n't", "it be not clear from the current module format , therefore this code can not be easily refactore .", "i do n't really want it to be a framework or a development platform", "say that someone be look for a certain label do not help reduce the issue stack", "when code be simple and easy to read the end result of what we build with it will be easy to maintain and refactor", "i be try to show you that this be not the case atm", "it be not complicated , but not as simple as possible either", "we should be focus on whether it can be make more simple", "right now i be tell you that if you chop the carrot this way you can chop they in one minute , instead of two , and you be tell i that \" if i want a vegetable stew , then maybe i should consider this restaurant \""], "issue_sim": [0.36644065380096436, 0.1833065152168274, 0.01763102039694786, 0.12919552624225616, 0.18924480676651, -0.03294186294078827, 0.04296206682920456, 0.21532785892486572, 0.21337662637233734, 0.13481736183166504, 0.35690706968307495, -0.027859095484018326, 0.12980088591575623, 0.20279382169246674, 0.1379939168691635], "prob": [0.0013947439147159457, 0.0029214995447546244, 0.0025624139234423637, 0.0013752530794590712, 0.001955207670107484, 3.514064155751839e-05, 0.000499923131428659, 0.2261139452457428, 0.0010388897499069571, 0.00012779294047504663, 0.003071725135669112, 2.4364597265957855e-05, 0.0007630278705619276, 0.00020056695211678743, 0.6342028975486755]}, {"target": [3], "doc": ["i have module in my app where i do not import commonmodule this be normal situation", "one more point about this", "right now i suspect that the above explanation will be one of many explanation ng module related explanation that will be give over and over and over", "that be because it be not clear what common - module provide and the library do not explicity give we an option to get a grasp on it .", "this be go to lead to a lot of developer attempt to follow along with example and cut and paste stuff", "on the flip side if they explicitly have to import what they use within the component , even directive within template , then the code become clear and easy to follow", "the suggestion here would allow for both approach", "for example if the developer could turn on tooling that tell the to import <tag> from the common module , if they wish to follow the more explicit approach", "if they do this then it become obvious what part of the library the component depend on", "also with the alternate approach it become very easy to leave ngmodule configuration dependency that be no long need intact , because there be nothing that directly link the module to the correspond component , so tooling warn about this can not be develop", "well i should never say never", "but without explicit import it be much more complicated"], "issue_sim": [0.36644065380096436, -0.015490485355257988, 0.19054879248142242, 0.2967461943626404, 0.15879513323307037, 0.5060455799102783, 0.05889587104320526, 0.46945682168006897, 0.25621938705444336, 0.49155932664871216, 0.07317934930324554, 0.33186209201812744], "prob": [0.0016168217407539487, 0.00107568281237036, 0.23213808238506317, 0.06218812242150307, 0.013316496275365353, 0.13792738318443298, 0.001111033488996327, 0.04423440247774124, 0.006757528055459261, 0.37322798371315, 0.0003480478480923921, 0.0019094642484560609]}, {"target": [1], "doc": ["another question be suppose we depend on <tag> only from the <tag>", "can we tree shake the rest of that module , since we be not use any of the other directive ?"], "issue_sim": [0.17222842574119568, 0.3232044577598572], "prob": [0.1082453578710556, 0.9041251540184021]}, {"target": [0], "doc": ["so if we can make ngmodules simple and more  that should be a big win or everyone ."], "issue_sim": [0.13646870851516724], "prob": [0.9999538660049438]}, {"target": [1], "doc": ["this would solve # <number>", "this feature would be able to generate minimal dependency graph at compile time for module without any configuration , and thus ngc could inject those declaration into the module , and bundle any share dependency intelligently into generate share module as it build the dependency graph of multiple root module .", "and , it be natural to import the component use in a template", "i be strongly in favor of this", "it would eliminate a confuse class of module that do n't need to exist  , and promote module as a way to define the expose component of your public module"], "issue_sim": [0.11602269113063812, 0.49195563793182373, 0.4135882258415222, 0.07770650833845139, 0.3814219832420349], "prob": [0.0010083161760121584, 0.6232409477233887, 0.009733105078339577, 0.0014824633253738284, 0.28455042839050293]}, {"target": [0], "doc": ["ow , i just find out that we ca n't get resolve datum in guard , even from the parent ... that s really bad !"], "issue_sim": [0.2803114056587219], "prob": [0.9998770952224731]}, {"target": [1], "doc": ["@dzmitryshylovich , what it come to be the follow :", "bresolve need a to process , so inside the resolve function of bresolve , i want to wait for the resolve of aresolve , but right now , we can only get the resolve datum from parent .", "if i be overlook the obvious , and bresolve can get the resolve value a , then please tell i how"], "issue_sim": [0.03213845193386078, 0.6192976236343384, 0.2442878782749176], "prob": [0.02629581280052662, 0.7728542685508728, 0.209049791097641]}, {"target": [1], "doc": ["so you want to access datum from <tag> inside <tag> , correct", "if yes , why would n't you combine they into a single resolver ?", "it would simplify thing"], "issue_sim": [0.07675193250179291, 0.08298017829656601, 0.1711036115884781], "prob": [0.19286471605300903, 0.8715524077415466, 0.011618147604167461]}, {"target": [0], "doc": ["there be another issue <url> where people want to run resolver concurrently so we need to make this configurable"], "issue_sim": [0.3768792152404785], "prob": [0.9995601773262024]}, {"target": [1], "doc": ["@dzmitryshylovich , nope , it need to be two resolve , as on other route , i have they in different level + they resolve to two separate observable", "put they together will just end up in code duplication , which be very bad , as you have to make sure you edit it in all place ....", "i use resolve to construct the app state , where some state depend on other , but the level they be on be n't always know"], "issue_sim": [0.4456250071525574, 0.2722465395927429, 0.2516363859176636], "prob": [0.0006917190039530396, 0.9348711371421814, 0.43090638518333435]}, {"target": [3], "doc": ["@dietergeerts i be at the same brick wall", "i actually go as far as to step through all the code for resolver to make sure i be n't crazy", "what be even more confuse be i figure if i simply make a", "this.router.events.subscribe  in the resolver and have it wait for other one to be do or even loop until it resolve the correct   none undefined datum that it would work .", "sadly that do n't even work"], "issue_sim": [0.006846223026514053, 0.1881897747516632, 0.1396748125553131, 0.46782422065734863, 0.09243078529834747], "prob": [1.9072032955591567e-05, 0.04713088646531105, 0.005221101455390453, 0.7801951169967651, 2.7214144211029634e-05]}, {"target": [0], "doc": ["the only way to have they wait for each other be to have component - less , path - less route level where you can define each level of dependent resolve .", "but it lead to several other issue , like secondary route that do n't work because of the path - less parent , performance impact , as each level be be resolve in series , routerlinks you have to edit each time , as '", "/ ' go up one router config level , and not actually the url , like you would expect", "imho , the router , though rewrite several time , still be n't design well for big application", "it be even hard to find good example on how to use resolve in the official doc", "it be like they just put it there because ui - router have they", "resolve should be prefer over inject service into component"], "issue_sim": [0.47806695103645325, 0.37244388461112976, 0.2522866427898407, 0.22687843441963196, 0.3408140540122986, 0.06024404615163803, 0.368106484413147], "prob": [0.536549985408783, 0.6967148184776306, 0.052565157413482666, 0.04340400546789169, 0.0017800817731767893, 0.010858666151762009, 0.0003747265145648271]}, {"target": [0], "doc": ["i think it can simply be resolve by add an order to same level resolve .", "the router have the context of every resolver in the same level so if it just check for an order it can allow resolver on the same level to get each datum", "the real issue be for some reason it be make to not add the resolve datum until all resolver finish which make sense in context just do n't hit our use case"], "issue_sim": [0.5483365058898926, 0.3755657374858856, 0.44492045044898987], "prob": [0.7154147624969482, 0.24229557812213898, 0.16662730276584625]}, {"target": [0], "doc": ["they should make the all available in the resolve , so you can subscribe to other , even if they be on the same level or not .", "it should not matter , as it can be that you move one later on , and then you do n't want to rewrite resolve that depend on that one"], "issue_sim": [0.21207518875598907, 0.2826051115989685], "prob": [0.6567044258117676, 0.4780404567718506]}, {"target": [0], "doc": ["the only reason i disagree with that be the whole mantra of angular be unidirectional datum .", "if an early resolve could change base off a later resolve that would spell bad news bear for that mantra", "now as for the same level it would make sense for you to at the very least say make this one run last or something"], "issue_sim": [0.1473185122013092, 0.3604370653629303, 0.19557391107082367], "prob": [0.3927384316921234, 0.04638417810201645, 0.4117391109466553]}, {"target": [2], "doc": ["@kenisteward , well , it be not the actual resolve that will change", "i return observable  with those resolve , and the result of these observable be part of the application state", "but when something happen , for example , the detail view be update , then the list have to be update too , so an event be throw , the list observable pick it up , and the view be update , no resolve be change , just the datum of the observable that be give by the resolve .", "i hope this make sense", "so basically , resolve be there , for i , to build up the application state tree"], "issue_sim": [0.29466941952705383, 0.28203684091567993, 0.34910720586776733, 0.04440337046980858, 0.16812336444854736], "prob": [0.004295479040592909, 0.07314209640026093, 0.9452844262123108, 0.004138454329222441, 0.0031499990727752447]}, {"target": [0], "doc": ["there <number> possibility how angular work with style on component level", "and work with they depend on it"], "issue_sim": [0.4942247271537781, 0.008889468386769295], "prob": [0.24031445384025574, 0.3104785084724426]}, {"target": [1], "doc": ["@mlc - mlapis thank you , i already know what viewencapsulation do", "i want to translate style file  to normal css file .", "which include <tag> and <tag> attribute to style that only editing component", "and i want to do this inside my vs code extension"], "issue_sim": [0.09740552306175232, 0.48066169023513794, 0.37838655710220337, 0.3193575143814087], "prob": [0.00010402352927485481, 0.8379420638084412, 0.3355644941329956, 0.0014233997790142894]}, {"target": [11], "doc": ["@trotyl your suggest be just not suitable", "i already try this", "the hmr solution be not resolve this problem", "event though , i try hmr enable", "the reload time be reduce from 45 to 10s", "if i be use my solution :", "step <number> ) vscode extension will record your new style code in vs code", "step <number> )   vscode extension will complie it in css", "step <number> ) vscode extension will host a server and use socket", "io to send datum to chrome extension", "chrome extension will add new style to your website", "<number> step above be just take <number> second , and it will update every second i make change without save that file .", "it be not some kind of watch file update", "it be realtime coding"], "issue_sim": [-0.04611418768763542, 0.022344637662172318, 0.1613428145647049, 0.10583783686161041, 0.20205983519554138, 0.02178928256034851, 0.4087666869163513, 0.4344537854194641, 0.23969611525535583, 0.2879093587398529, 0.40226680040359497, 0.5076927542686462, 0.1513390690088272, 0.12996283173561096], "prob": [0.0034502267371863127, 0.0024121557362377644, 0.0005968133336864412, 0.0005594635149464011, 0.001323638716712594, 0.00030726593104191124, 0.00041290963417850435, 9.1870067990385e-05, 0.0003957277804147452, 4.2549036152195185e-05, 0.0006136022275313735, 0.2815881073474884, 0.002869488438591361, 0.0015095077687874436]}, {"target": [1], "doc": ["it look nice but there be one serious thing", "the angular compiler create js code to apply those style .", "so be you think that it could be possible to just compile the style part of a component and exchange that code", "or do you think that you would hack that styling directly in dom", "the <tag> mode can be certainly realize by that way but i be not sure for the rest mode"], "issue_sim": [0.10533344745635986, 0.49127909541130066, 0.31488722562789917, 0.2920781373977661, 0.16611376404762268], "prob": [0.005660605151206255, 0.5881224274635315, 0.08925312757492065, 0.041323743760585785, 0.08635315299034119]}, {"target": [3], "doc": ["@mlc - mlapis   thank you", "yes , i be patch directly in to dom", "i be add your unsave code to dom  everytime you type in vscode", "i be not touch anything to angular , i just borrow it be compiler to complie it directly in my plugin ."], "issue_sim": [0.042093805968761444, 0.240450918674469, 0.38570278882980347, 0.39376676082611084], "prob": [0.004134184680879116, 0.038719385862350464, 0.06458494067192078, 0.6076017618179321]}, {"target": [0], "doc": ["so , you need to have a relation between the part in ts code and identity of compile style place in the head tag .", "and because of those identity be generate on the random base , you be look for some fix rule , how to interconnect they together , right", "for <tag> mode it be theoretically possible , but what about <tag>"], "issue_sim": [0.24484944343566895, 0.07399214804172516, 0.1799941509962082], "prob": [0.6005991697311401, 0.4283224642276764, 0.05730854347348213]}, {"target": [3], "doc": ["@mlc - mlapis thank you to help i recognize this case", "i belive that i can insert component style directly to shadow dom like this image :", "base on this  from this", "we can easily style directly shadow dom since we just only template add it to see the reflection of new template style we style .", "after we save file change , all that template code will be remove by chrome extension"], "issue_sim": [-0.02220255136489868, 0.418989360332489, -0.0630473643541336, 0.37130460143089294, 0.42859846353530884], "prob": [0.004097448196262121, 0.47486305236816406, 0.00046518538147211075, 0.7342139482498169, 0.005895713809877634]}, {"target": [1], "doc": ["stumble on this after think about it for some time", "my idea be basically the same but i be think about how prepros inject your style immediately exactly as you describe , where its not the compile stylesheet that change the dom , it be only inject style into the proxied webpage .", "any page refresh could then load the entire compile stylesheet and component", "i be here due to wonder why we can not inject a style update immediately with the appropriate <tag>", "at least then we can preview the style and only rely on full recompile / page load to get the real thing", "@hiepxanh how can i help"], "issue_sim": [-0.041225582361221313, 0.4947512149810791, 0.4643014073371887, 0.2760818898677826, 0.34586015343666077, 0.09995335340499878], "prob": [0.0005385035183280706, 0.6851982474327087, 0.3120177686214447, 0.00716654397547245, 0.05222884565591812, 1.0797110007843003e-05]}, {"target": [1], "doc": ["i already have this sir @benelliott", "i create websocket that listen to the chrome extension , the chrome seek <tag> then send it to <tag> .", "after that , vscode mix it that component variable with style and send it to chrome extension", "then it will update it"], "issue_sim": [0.06530099362134933, 0.4112726151943207, 0.38870668411254883, -0.021829742938280106], "prob": [0.00985424593091011, 0.9479791522026062, 0.38850662112236023, 0.014998439699411392]}, {"target": [0], "doc": ["hope that we can implement this in angular since next and react have it .", "also , it be not a complicated addition", "what step can we take to build this into compilation"], "issue_sim": [0.47028204798698425, 0.0014044959098100662, 0.2446836531162262], "prob": [0.8573278188705444, 0.023292092606425285, 0.32511457800865173]}, {"target": [0], "doc": ["you can use dynamic <tag> to load a lazily - load module and during instantiate of that module , you can pass an injector , which you can modify before  , so you have those injection available in constructor of any part of such a lazily - load module ."], "issue_sim": [0.4972984790802002], "prob": [0.9996094107627869]}, {"target": [3], "doc": ["@mlc - mlapis i find that issue before i file this one", "but that thread focus on load module outside the router , it mimic the behavior of what the router do with the advantage you can also inject provider", "what i be look for be a solution with the router", "i just want a decoupling between my feature libs and my applications , but those feature lib need to run inside a context of an application , and that context need to deliver some configuration to my feature library ."], "issue_sim": [0.057851314544677734, 0.2985530495643616, 0.2179286777973175, 0.5744420289993286], "prob": [0.00014417032070923597, 0.7539851665496826, 0.0009478587890043855, 0.9489841461181641]}, {"target": [1], "doc": ["@kristofdegrave ok , use only the router way be a problem", "theoretically , you can nest the one into the other , but it be a question if it be not too complicated ."], "issue_sim": [0.08611784875392914, 0.09550434350967407], "prob": [0.0010863710194826126, 0.9988582134246826]}, {"target": [1], "doc": ["i think i find a possible solution on how to handle this", "i have see that the <tag>  in the router accept an instance of thar <tag> .", "* * <url> * *", "with that in my mind i implement an own implementation of the <tag> which accept a modulewithprovider", "use this implementation i can do the following in my route :", "some feedback on the solution would be nice , since my knowledge about the injector and compiler be limited , i do n't know if i be do thing i should n't"], "issue_sim": [0.19782795011997223, 0.21186570823192596, -0.019595470279455185, 0.32798779010772705, 0.37168896198272705, 0.3153160810470581], "prob": [0.09472331404685974, 0.5214598774909973, 0.0016332842642441392, 0.025960417464375496, 0.0006378130055963993, 0.3367120027542114]}, {"target": [1], "doc": ["would also be nice for other end up here look for a similar solution", "i have parent module lazy load some feature module and depend on the parent some thing need to be configure differently , would be great to see some feedback on what @kristofdegrave propose here ."], "issue_sim": [0.22921332716941833, 0.446904718875885], "prob": [0.08289767056703568, 0.9090422987937927]}, {"target": [0], "doc": ["no feedback receive , but the propose solution with the <tag> be something that work .", "i also add a pr for this behavior , but it have be reject : <url>"], "issue_sim": [0.18622168898582458, 0.2335030436515808], "prob": [0.7573329210281372, 0.33673349022865295]}, {"target": [2], "doc": ["@the - ult never try", "it be normally a static method declare inside that module", "if you try it and it do n't work , it would mean that it be not invoke in the case of <tag> , but it be invoke and process correctly during import  ."], "issue_sim": [-0.08666518330574036, 0.22321631014347076, 0.19087721407413483], "prob": [0.019894924014806747, 0.04190786927938461, 0.971504807472229]}, {"target": [1], "doc": ["which seem to be work", "but since it be so difficult to get it do and there be hardly anything find about provide config to a lazy loaded feature module", "i be still wonder what would be a well way to provide <tag> to a feature module      = > or should n't we do that at all", "@mgechev , or @igorminar do you have any solution / idea / insight"], "issue_sim": [0.018655722960829735, 0.3905683159828186, 0.37897008657455444, 0.21004080772399902], "prob": [0.03434661030769348, 0.4103778600692749, 0.6291477084159851, 0.0018893249798566103]}, {"target": [0], "doc": ["that example should be improve a bit to work also in aot mode and not only in jit because this code <tag> ."], "issue_sim": [0.30228525400161743], "prob": [0.9999946355819702]}, {"target": [0], "doc": ["i 'll close this issue since it do n't collect a sufficient number of vote and do n't align with an exist project on the roadmap ."], "issue_sim": [0.19732990860939026], "prob": [0.9999692440032959]}, {"target": [0], "doc": ["yeah , that have weak clickability indicator for sure .", "a recognizable button would provide a well ux"], "issue_sim": [0.24724698066711426, 0.2706248164176941], "prob": [0.7085186839103699, 0.17283034324645996]}, {"target": [1], "doc": ["while we be at it", "i think the on the resource page , the box contain each resource have weak clickability too .", "perhaps we could solve that too"], "issue_sim": [0.009586961008608341, 0.27190524339675903, 0.008993259631097317], "prob": [0.06708331406116486, 0.9192982912063599, 0.029562318697571754]}, {"target": [3], "doc": ["i like the direction that this be go", "i wonder if we should have the \" try it now \" button on the landing page far up", "\" why do you have to scroll all the way to the bottom to get to that link", "i also like the try it now button at the top of the page .", "@bampakoa thank for put some thought into this", "what would be the next step if we move forward"], "issue_sim": [0.1321244239807129, 0.43515175580978394, 0.23357218503952026, 0.351659893989563, -0.005153311416506767, 0.11098083853721619], "prob": [0.026309330016374588, 0.3178078830242157, 0.5415381193161011, 0.10574863851070404, 0.00024561892496421933, 0.025005148723721504]}, {"target": [1], "doc": ["workaround be to use webpack", "webpackdeveloper need not call compilecomponent because it inline template and css as part of the automate build process that precede run the test ."], "issue_sim": [0.5138125419616699, 0.4754200577735901], "prob": [0.008690616115927696, 0.981549859046936]}, {"target": [0], "doc": ["well , thank for the comment , but \" use a different module loader \" do n't help with the underlie problem at all .", "i assume testbed could just be change to only compile once and cache the result for that suite , which would mean that subsequent call should resolve immediately", "the only thing i be not sure of be whether there be some _ reason _ why the compilation result be n't reuse"], "issue_sim": [0.2298283576965332, 0.5922331213951111, 0.2973862290382385], "prob": [0.7789387702941895, 0.10001970827579498, 0.019175659865140915]}, {"target": [1], "doc": ["any update on this", "it just seem bizarre  to _ recompile _ all the component over and over for every spec method .", "obviously , component need to be _ recreate _ between spec method", "but i see no possible reason why the component would need to be _ recompile _ more than once for a give spec"], "issue_sim": [0.05528116971254349, 0.46177244186401367, 0.3231710195541382, 0.40845683217048645], "prob": [0.007210015784949064, 0.8890494108200073, 0.01261364109814167, 0.7338101267814636]}, {"target": [6], "doc": ["thank , @tbosch , though i admit i be not totally clear on what you mean about use <tag>", "typically , even when i use <tag> , it be do at the same point everything else about the testing module be be configure", "the above seem like it be just as much a candidate for cache / reuse the compile result", "so maybe you be talk about some less common way of use the <tag> method", "if so , maybe provide a way for we to indicate that we want to cache / reuse the compile result even if <tag> be use ?", "either something like :", "basically , i think the cached compile result should still be an option even if <tag> be use , as long as the developer indicate that the test module configuration be n't change between spec run", "let i know if that make sense"], "issue_sim": [0.12341438978910446, 0.4598774015903473, 0.3777405023574829, 0.03788572922348976, 0.4811621904373169, 0.0017731981351971626, 0.5727508068084717, 0.06861786544322968], "prob": [0.0038935067132115364, 0.19039054214954376, 0.011867044493556023, 0.004740708041936159, 0.650627613067627, 0.012204742059111595, 0.5987486839294434, 0.0014100876869633794]}, {"target": [2], "doc": ["i utilize this little helper : <url>", "take my test run in ~2min48sec all the way down to 6", "not to say it will work in every situation , but most of those <number> unit test require very little to be convert over ."], "issue_sim": [-0.03247944638133049, 0.21644799411296844, 0.370654821395874], "prob": [0.016560742631554604, 0.04268709570169449, 0.9713313579559326]}, {"target": [0], "doc": ["the key issue with that approach be that it do n't recreate the dependency between test , so any state hold by the dependency can cause problem .", "the ideal option be to just compile to test module once and reuse that , since the vast majority of the time be spend compile the test module", "but i admit i be still not sure what the delay be in get angular itself to support this", "i get that use the <tag> method can interfere , but as long as the test module be define once and no override be use after it be create , this be really not all that complicated"], "issue_sim": [0.3967805802822113, 0.4059329032897949, 0.2905532121658325, 0.45976805686950684], "prob": [0.2928818166255951, 0.11671096831560135, 0.0015108147636055946, 0.6425422430038452]}, {"target": [1], "doc": ["any update on this from the angular team", "i 've hack together a compiler implementation that only compile template once , and it reduce the execution time for my test by <number> - <number> % .", "it shave <number> + minute off _ every _ full test run", "that be a huge difference when i be run <number> + test dozen of time a day", "however , the compiler api change with v5 , so now i have to try and re - hack this all over again", "can this issue be give some priority please"], "issue_sim": [0.1941317617893219, 0.45896095037460327, 0.19129344820976257, 0.16797685623168945, 0.33829501271247864, 0.13371895253658295], "prob": [0.0023915166966617107, 0.9227210283279419, 0.00014233322872314602, 0.012030309997498989, 0.05609209090471268, 1.7501844922662713e-05]}, {"target": [2], "doc": ["@brian428 a question , that be basically this issue , be raise during the qa session of the last angular connect", "it be at 2:34:56 in this", "basically igor minar answer that incremental compilation be introduce in version <number> and that they know there be some more thing they can do with the test bed and that this will be work on in version <number> and <number> .", "so interpret that as we can expect it some time next year and this issue be in fact on their radar and current plan"], "issue_sim": [0.3456655740737915, -0.02521520107984543, 0.4950101375579834, 0.12033184617757797], "prob": [0.12678271532058716, 0.002782846335321665, 0.3782871961593628, 0.133356511592865]}, {"target": [3], "doc": ["@eric - simonton - sama after spend some time on it , i be n't able to figure it out", "i may take another stab at it later", "while work on this , i also discover the <tag> arg for <tag> and <tag>", "so it seem like all of the piece be there internally to allow reuse the compile template in subsequent spec method in the same spec .", "testbed just need to provide some way to tell it to reuse the summary instead of clear everything out between spec method", "or , a less ideal option would be to provide some way to get at the current set of aotsummaries after <tag> be call , so we can pass they back in via the <tag> arg for subsequent spec method", "individual summary can be pull from the <tag> , but manually pull out every summary individually  be n't a viable option"], "issue_sim": [0.08532315492630005, -0.014921491034328938, 0.18235373497009277, 0.46402931213378906, 0.473833292722702, 0.40185537934303284, 0.1425369381904602], "prob": [0.1539204865694046, 0.0017132561188191175, 0.005947030149400234, 0.671042799949646, 0.013015728443861008, 0.19563066959381104, 0.005720726680010557]}, {"target": [3], "doc": ["@brian428 i finally spend a day focus on this issue", "i publish my result in the  function in", "so far it seem to be work well", "it work exactly as you suggest , call <tag> extract their <tag> , then pass they in to a refresh <tag> .", "the test environment be reuse between test  ` )"], "issue_sim": [0.1465960443019867, 0.06748469173908234, -0.0361153669655323, 0.2733929753303528, 0.1835852563381195], "prob": [0.06802833080291748, 0.09800335019826889, 0.0872412845492363, 0.6039908528327942, 0.015776893123984337]}, {"target": [2], "doc": ["i do n't understand how angular can pride itself on its test - drive development angle if this be still an issue year later", "it take i hour to realize why i could n't put test - suite setup code in the beforeall  method", "how can i have a sane developer tdd experience when it take several minute to run spec once for my project .", "at the very least there need to be a mention of this horrible testbed compiler side effect in the documentation because on the surface , there be no distinct error message or explanation for why test ca n't be set up in the beforeall  method"], "issue_sim": [0.27567577362060547, 0.3338336646556854, 0.432346910238266, 0.4451998472213745], "prob": [0.10297262668609619, 0.07230838388204575, 0.13027867674827576, 0.21574127674102783]}, {"target": [0], "doc": ["ivy 's <tag> only recompile component for which an override have be register , otherwise it be able to reuse prior compilation  ."], "issue_sim": [0.5325800180435181], "prob": [0.9999674558639526]}, {"target": [5], "doc": ["how should the angular compiler know what you want to export in your index", "sometimes we explicitly do n't want to export certain service  because they be n't consider to be api", "on the other hand i might want to export not just the module but also a component so that it can be use programmatically", "in other word , the premise that this be duplicate information be incorrect", "there be also no restriction on file structure right now", "i could have my ngmodules in one folder and reference component and service and other module in it which lie anywhere else in the project .", "generate the ngmodule from the file structure therefore do n't work"], "issue_sim": [0.5725307464599609, 0.18298709392547607, 0.46053627133369446, -0.039196692407131195, 0.09884542971849442, 0.26899629831314087, 0.20947422087192535], "prob": [0.07265152782201767, 0.22201336920261383, 0.16925357282161713, 0.021295862272381783, 0.00954936258494854, 0.28764647245407104, 0.006096205674111843]}, {"target": [8], "doc": ["a possibility be simply the class or function definition be mark as public or private", "not true any time any code or configuration be duplicate , it become a pattern to be refactore base on single responsibility concept of one - time , one - place", "if the pattern be the same then all of it can be refactore", "if the pattern have part , or the other then those a partial refactor", "again not true , all angular decorator be fully and uniquely discoverable base solely on the decorator @ngmodule , @component , @directive , @injector etc", "i be talk about what compiler lexing and parsing can do for we , the miss part of what be not be do here", "as i mention early", "net do n't have any of these issue", "the compiler use namespace to define content within the package use only folder structure and type and classname .", "the ngmodule system therefore do n't need to exist", "the compiler should be able to discover any component in a folder as follow :", "the namespace be :", "note : any of these component could be a model , a class or a function", "fully discoverable and fully unique"], "issue_sim": [0.19346627593040466, 0.3088972568511963, 0.11490026116371155, 0.1462453305721283, 0.5596908330917358, 0.23308858275413513, -0.004157423973083496, 0.09654631465673447, 0.4650086462497711, 0.1420716941356659, 0.3886831998825073, 0.14939439296722412, 0.23518824577331543, 0.11481598764657974], "prob": [0.2768155634403229, 0.07545697689056396, 0.0014496233779937029, 0.010119990445673466, 0.08439633995294571, 0.021877847611904144, 3.1101066269911826e-05, 0.0011921401601284742, 0.07962861657142639, 0.00048219700693152845, 0.04664228856563568, 0.00011250339593971148, 0.009433139115571976, 4.613749115378596e-05]}, {"target": [0], "doc": ["but you be assume that all project have that structure , which be simply not true .", "i can have <tag> which contain component locate in <tag>", "therefore switch to such a structure be a force breaking change"], "issue_sim": [0.1623150259256363, 0.2849198579788208, -0.018550341948866844], "prob": [0.7644617557525635, 0.16584038734436035, 0.0344955176115036]}, {"target": [0], "doc": ["this would collide with typescript ."], "issue_sim": [0.38178661465644836], "prob": [0.9999959468841553]}, {"target": [0], "doc": ["in monorepo environment you simply organize ngpackages differently for each build application , so it be not possible to fix they to the folder / file structure ."], "issue_sim": [0.3041130602359772], "prob": [0.9999721050262451]}, {"target": [0], "doc": ["be it a class or function , the file system disallow duplicate naming , so use that to ensure uniqueness we simply need to import what we want to use .", "we be not break anything use the exist import system", "i think your view point be from the ngmodule perspective", "i be say we do n't need ngmodule , or at a minimum the architecture can be improve", "the compile can and should take care of all discovery", "typescript already support public and private so there be no conflict or break change", "the only break change would be if the new compiler function do n't allow for ngmodule which by a simple scan would know if one exist or not"], "issue_sim": [0.34827661514282227, 0.11346448957920074, 0.06569439172744751, 0.17545875906944275, 0.2504802942276001, 0.3262718915939331, 0.3051198720932007], "prob": [0.5952250957489014, 0.025810709223151207, 0.005646774545311928, 0.23949289321899414, 0.005630877334624529, 0.025676583871245384, 0.5123757719993591]}, {"target": [0], "doc": ["actually it be , because we have the ability to configure different build type and folder to contain .", "it be just a configuration of a specific build name", "we be inject build behavior base on configuration"], "issue_sim": [0.2742066979408264, 0.2656650245189667, 0.25744593143463135], "prob": [0.9533369541168213, 0.0020984678994864225, 0.009298947639763355]}, {"target": [1], "doc": ["do we understand each other", "the <tag> be totally in different place than component and other element inside monorepo structure .", "edit : sorry , i mean ngmodules , of course"], "issue_sim": [0.09830155968666077, 0.2594931423664093, -0.043377477675676346], "prob": [0.017031550407409668, 0.926427960395813, 0.0062716007232666016]}, {"target": [5], "doc": ["not an issue ,   because source file ca n't have the same name , so the combination of name and type be all the compiler need to know", "what about multiple function in one file", "still there be no collision because you ca n't have duplicate function in one file ,   so the fully qualified name of an export function would be", "unique addressiblity mean that the compiler can find everything", "we would n't need ngmodule at all", "think about how easy it would be to simply import from a namespace like this only where a component , directive , class , service need it .", "typescript already use intellisense to traverse the node_module library , so it be able to rely only on npm package repository", "it be only when we compile and get error because the angular compiler expect to see ngmodule import and we 've have n't take care of that import", "angular already use decorator which be just special class know to angular", "this mean that angular have everything it need right now"], "issue_sim": [0.34067457914352417, 0.26881861686706543, 0.3114297389984131, 0.21070575714111328, 0.15849411487579346, 0.584033191204071, 0.6111342906951904, 0.6288774013519287, 0.6336488127708435, 0.383531391620636], "prob": [0.4583336412906647, 0.00038834201404824853, 0.023732539266347885, 0.00024373247288167477, 0.0003650023718364537, 0.23342061042785645, 0.005022249184548855, 0.1567188948392868, 0.0054330164566636086, 7.510569412261248e-05]}, {"target": [0], "doc": ["ahh yes , other have see the light too ."], "issue_sim": [-0.030611902475357056], "prob": [0.9998441934585571]}, {"target": [1], "doc": ["you _ can _ import thing from an index file into the es module to use in an <tag> declaration", "<tag>s be design around the idea of an explicit compilation context for component though - it be a very intentional choice to not \" auto - discover \" component in an application .", "this would be especially problematic for code publish in library - without a direct import to something in the library , the compiler wo n't even be aware of the existence of those component", "this fr be n't really actionable for we - we be not go to make any substantial change to <tag>s", "instead , our focus be on reduce the need to author <tag>s via the new standalone components functionality"], "issue_sim": [0.4168611168861389, 0.3543244004249573, 0.37211716175079346, 0.08907628804445267, 0.17561522126197815], "prob": [0.03328521177172661, 0.36072197556495667, 0.3465449810028076, 0.017353877425193787, 0.021909860894083977]}, {"target": [0], "doc": ["relate : the  call for include the command prompt , but i think that only make sense in guide where we show what user enter and what the command write back", "we be not use command prompt at all in doc command line example ."], "issue_sim": [0.5209656953811646, 0.37399035692214966], "prob": [0.6694966554641724, 0.11971710622310638]}, {"target": [0], "doc": ["we do n't use command prompt because it prevent the user from copy the command example and paste it directly into the command shell .", "that do n't apply here - it be a syntax statement , not a command example", "i like the style"], "issue_sim": [0.5479174256324768, 0.4411737322807312, 0.11709704250097275], "prob": [0.9834340810775757, 0.06138347089290619, 0.0012897311244159937]}, {"target": [3], "doc": ["i be on the fence about this one", "why do the syntax highlighting vary across <tag> and <tag>", "blue in <tag> and black in <tag>", "we lose the syntax coloring in the console view , but if it be inconsistent , then maybe that be a good thing ?"], "issue_sim": [0.011558331549167633, 0.2466631382703781, 0.004270758479833603, 0.402426540851593], "prob": [0.1410999447107315, 0.026274627074599266, 0.05696699768304825, 0.8879595398902893]}, {"target": [1], "doc": ["@gkalpak what do # <number> have to do with this", "i think we should definitely maintain the cli styling  to be consistent - and also to draw attention to that command text on the page .", "be there any reason not to do this"], "issue_sim": [-0.03179545700550079, 0.5573809146881104, 0.04970059543848038], "prob": [0.07681010663509369, 0.9651835560798645, 0.023711156100034714]}, {"target": [5], "doc": ["sorry , wrong link", "i mean # <number>", "it answer to @splaktar 's question about why the syntax highlighting vary across <tag> and <tag>", "regard the styling :", "i be a little torn", "the green on black usually indicate a command that the user can copy / paste into a terminal and run , which be not the case here .", "but the current styling hardly distinguish the command from regular text", "btw , this be also an issue with function api doc", "if we could come up with a well , more distinguishable styling  , i would prefer that", "maybe something similar to class api :"], "issue_sim": [-0.12066715210676193, 0.06225375458598137, 0.3043012320995331, 0.038111861795186996, -0.0148412324488163, 0.42259272933006287, 0.3394566774368286, 0.30267763137817383, 0.14247316122055054, 0.24037504196166992], "prob": [0.00025180738884955645, 9.670574218034744e-05, 0.004717591684311628, 0.0005026590079069138, 5.276506271911785e-05, 0.9564706087112427, 0.0018877001712098718, 0.0011171342339366674, 0.15087489783763885, 0.002586905611678958]}, {"target": [4], "doc": ["i kind of like what google cloud do where the style be the same for instructional versus one you can copy past directly into the terminal", "they do n't have the green / black color palette we have , however", "how do we feel about have the exist box style for both function api doc and the terminal - > same style , just remove the copy icon when it be not intend to be copy and paste", "i be big on consistency and pattern", "in my mind we either get rid of the black / green style and distinguish terminal code example with the <tag> before it , or we keep the black / green style for terminal and use that for the cli doc as well  .", "another example where they use their regular in - paragraph code styling even if it be terminal command when speak about they : <url>"], "issue_sim": [0.3560219705104828, 0.04777222126722336, 0.40137195587158203, 0.07937401533126831, 0.40388223528862, 0.5212359428405762], "prob": [0.22474750876426697, 0.0351029708981514, 0.2151331603527069, 0.00041625212179496884, 0.38579627871513367, 0.06815960258245468]}, {"target": [0], "doc": ["i personally like this idea , but what i be really after be consistence mostly ."], "issue_sim": [0.11580336093902588], "prob": [0.9997813105583191]}, {"target": [5], "doc": ["@sjtrimble , i do n't understand your example", "i only see command that be suppose to be type in the terminal there", "we have two different thing here :", "- show a command as it should be type in the terminal", "- show the \" call signature \" for a command", "i do n't feel these two thing should have the same style ( and i be big on consistency too btw", "if anything , the \" call signature \" be more similar in nature with show class or function signature , so i would consider make they look the same", "but , i do n't feel too strongly about it", "leave it up to you"], "issue_sim": [0.09294742345809937, 0.47896698117256165, 0.02098381333053112, 0.5232020616531372, 0.3358476161956787, 0.09301672130823135, 0.3013148903846741, -0.006551307626068592, 0.05266040191054344], "prob": [0.006509074009954929, 0.04079655557870865, 0.004668229725211859, 0.008884577080607414, 0.025543849915266037, 0.23447126150131226, 0.6305797100067139, 0.005372985266149044, 0.009746178053319454]}, {"target": [0], "doc": ["let 's just stick a box round this bit of text to make it stand out from the surround text , but not change the theming to bash style .", "sound ok @alan - agius4"], "issue_sim": [0.3963700532913208, 0.09459208697080612], "prob": [0.956640899181366, 0.01086887065321207]}, {"target": [1], "doc": ["what about provide a service that do that", "if it be not hardcode in the router it be easy to customize / extend/ ...."], "issue_sim": [0.12722653150558472, 0.23087100684642792], "prob": [0.00456429086625576, 0.9984378218650818]}, {"target": [0], "doc": ["yeah , component = service"], "issue_sim": [0.19539304077625275], "prob": [0.9997925162315369]}, {"target": [0], "doc": ["we be currently use a mix of what toddmotto suggest and make api call to fetch title , meta tag via our cms :", "would love to have default define on a route basis", "to be honest , even have the current state and it be data property on navigationend would help i :)", "also , we 'd like to localise those default title : <tag>"], "issue_sim": [0.3397938013076782, 0.15032823383808136, 0.12103539705276489, 0.17550915479660034], "prob": [0.6629307866096497, 0.07376860082149506, 0.4083489775657654, 0.02853606641292572]}, {"target": [0], "doc": ["should n't this be declarative and in keep with uni - directional datum flow", "to i an ideal implementation would allow this sort of usage :", "so that when a <tag> component get render or update it update the document head as a side effect", "that way you can just bind to any outer component class value and so on", "no need to integrate tightly with router , and you can render datum come into it naturally from route resolver , operate idiomatically with i18n and so on", "listen to event and imperatively call method like <tag> seem to undermine the angular <number> + component model", "this be similar to the <tag> api", "i be assume something like that should be possible"], "issue_sim": [0.12026849389076233, 0.0026108063757419586, 0.4214783012866974, 0.22068682312965393, 0.2510204315185547, 0.36411863565444946, 0.24100515246391296, 0.04376593232154846], "prob": [0.20597431063652039, 0.007117579225450754, 0.01030573807656765, 0.006180129945278168, 0.7463042736053467, 0.044579364359378815, 0.0004964208346791565, 0.0016697212122380733]}, {"target": [2], "doc": ["@rafa - as i whip up the following for a declarative component - base <tag> management solution", "could be extend to support more property", "i think a component be the right way to go about this , for the reason outline above , as oppose to a service ."], "issue_sim": [0.24194952845573425, 0.05358252301812172, 0.3771769404411316], "prob": [0.16566920280456543, 0.1526583582162857, 0.4645814299583435]}, {"target": [0], "doc": ["you can just use. <tag> ` ts. @viewchildren routerlinks : querylist < routerlink > ;. ngafterviewinit  {. console.log ;. }"], "issue_sim": [0.4594290554523468], "prob": [0.9996722936630249]}, {"target": [0], "doc": ["thank , that be a nice method of get they into controller , but it would still require a bit of code to pull the routerlinks out of the array and associate they with other component in the controller .", "be able to directly reference in the view seem much more elegant", "for reference , i be try to do thing like this :", "that be a nice and self contain bit of view template that require no extra logic in the controller", "your method would require involve the controller", "now , i assume it be possible to use <tag> in a custom directive , and that may be what i do", "however , it still seem fairly trivial and quite useful to be able to refer to and directive directly from the view"], "issue_sim": [0.38641929626464844, 0.31042295694351196, 0.06994065642356873, 0.23715826869010925, 0.12534505128860474, 0.5922749042510986, 0.3994167745113373], "prob": [0.9818456172943115, 0.0016796948621049523, 9.233759192284197e-05, 0.037721775472164154, 0.011911136098206043, 0.05485536903142929, 0.06448037922382355]}, {"target": [2], "doc": ["@yona - appletree it be close as there be no concrete proposal", "if you 've get one that would allow to specify which directive you be reference i would be more than willing to re - open", "btw , reference a type wo n't work since you could n't minify your code ."], "issue_sim": [0.03978746384382248, 0.44803935289382935, 0.2635757029056549], "prob": [0.005869754124432802, 0.4190080165863037, 0.6381577849388123]}, {"target": [3], "doc": ["@pkozlowski - opensource totally understand , and your point about class name be well take", "i agree with @choeller that use the selector would be easy and work well in most case", "it would also be clear in most case that it be n't a standard exportas because of the selector syntax", "consider , then , the proposal to be : if exportas be not specify for a directive , default the value to its selector ."], "issue_sim": [0.21644526720046997, 0.16485774517059326, 0.26721999049186707, 0.47575944662094116], "prob": [0.0008863250841386616, 0.0302609670907259, 0.2332872599363327, 0.7973578572273254]}, {"target": [0], "doc": ["actually , there be already dynamic import available and its syntax <tag> , which be available for angular <number> or high ."], "issue_sim": [0.5817879438400269], "prob": [0.9998562335968018]}, {"target": [3], "doc": ["the import statement as mention compile the chunk due to the give string", "if you create a library with ng generate library node ; do an ng build node and try to load the module as follow", "modules / generate / nodes", "it will not load the module as the runtime complain that node can not be find even if tibia present .", "as what i understand be that the angular ivy compiler analyze the import string to detect which module have to be build as a chunk", "i have google the universe and there be no simple way to generate a module and load it at runtime if it be compile separately"], "issue_sim": [0.28367161750793457, 0.5051052570343018, 0.27620363235473633, 0.37166106700897217, 0.5671683549880981, 0.586100697517395], "prob": [0.003730589058250189, 0.08590522408485413, 0.0004892782890237868, 0.772191047668457, 0.010560469701886177, 0.03309391811490059]}, {"target": [3], "doc": ["@kschwidder ah , separately , like plugin , right", "and you mean that it be still an angular module", "yep , it be a real problem , because there be many edge case when those separate module use something from angular core - libs", "it mean , that you either have to include all that duplicity many time or you have to include the full angular core - libs into the main bundle , so no tree - shake", "and still with the primary condition , that all part use the same angular version", "now the whole app , all module , together with all dependency package be compile in one build path to know what should be keep and what can be throw away", "<tag> be introduce to solve the problem as the web component concept", "we will see what new ivy bring on the table"], "issue_sim": [0.10855540633201599, 0.4171404540538788, 0.5401928424835205, 0.38075166940689087, 0.19434350728988647, 0.4349434971809387, 0.24550095200538635, -0.03356681391596794], "prob": [0.010309385135769844, 0.03377130255103111, 0.11542472243309021, 0.19924108684062958, 0.05935105308890343, 0.21594181656837463, 0.012111971154808998, 0.012969153001904488]}, {"target": [1], "doc": ["work with on demand / lazy module and component be still a pain", "the application and business logic get pollute by load logic  and the need to reflect the module , folder structure in your code .", "so far ivy have n't bring real improvement to this topic", "i really hope ivy fullfill some of the promise they have be make"], "issue_sim": [0.3428608179092407, 0.2876022756099701, 0.025155793875455856, 0.13369044661521912], "prob": [0.10351090133190155, 0.6898429989814758, 0.005452311132103205, 0.14198607206344604]}, {"target": [0], "doc": ["actually , i be think about force eager initialization for service without useless injection to root component .", "may it be well to extend <tag> signature with eager option"], "issue_sim": [0.38629570603370667, 0.32067593932151794], "prob": [0.8492802977561951, 0.10557391494512558]}, {"target": [1], "doc": ["do n't think it be a good idea", "<tag> be not call on service provide via <tag> , only on service provide via <tag>  .", "and service provide via <tag> must be annotate with <tag>", "only annotate service can be initialize eagerly", "so , to i , it make much more sense to use annotation"], "issue_sim": [0.14115719497203827, 0.36183154582977295, 0.2577340006828308, 0.4513833522796631, 0.35623300075531006], "prob": [0.021347085013985634, 0.8259453177452087, 0.037489570677280426, 0.014200344681739807, 0.015834441408514977]}, {"target": [0], "doc": ["from design point of view it be responsibility of di configuration to decide whether service be singleton or not , be it lazy or eager , in general you should not change your service class implementation if you want to make it eager or lazy .", "also , application will be break when you try to replace eager service with another lazy implementation and there be no way to detect it", "<tag> should have consistent behavior across all case because it be lifecycle callback", "requirement for <tag> have poor documentation :", "originally we be tell that <tag> be require for service that require injection of other service"], "issue_sim": [0.4997712969779968, 0.482785165309906, 0.24920512735843658, 0.15388242900371552, 0.34348630905151367], "prob": [0.5328583121299744, 0.3400190770626068, 0.0297890342772007, 0.0020650222431868315, 0.07219287753105164]}, {"target": [0], "doc": ["furthermore , <tag> do not work for service provide via component 's <tag> , quite disappointing , because it would much more usefull ."], "issue_sim": [0.2337285727262497], "prob": [0.9999351501464844]}, {"target": [0], "doc": ["look like it do not work with dynamically create component ."], "issue_sim": [0.2670191526412964], "prob": [0.999832034111023]}, {"target": [0], "doc": ["in fact i be observe this behavior right now in my application , so i be pretty sure it do not work in all case , however it be difficult to extract relevant part , it be somehow relate to dynamic component creation ."], "issue_sim": [0.267040491104126], "prob": [0.9999516010284424]}, {"target": [1], "doc": ["@fkolar to bind to what", "that component and its template work as pair .", "the template can bind only to the public property / method of its component class", "and html template be compile to js", "so it have the sense to talk about change a value , but not the target itself"], "issue_sim": [0.19602805376052856, 0.145300954580307, 0.34151649475097656, 0.31031155586242676, 0.1805567890405655], "prob": [0.00640547601506114, 0.7375847101211548, 0.04193707928061485, 0.03555852174758911, 0.07277517765760422]}, {"target": [11], "doc": ["@mlc - mlapis let i give example :", "when work programatically with component  , you use :", "componentfactoryresolver to create a <tag>", "you can use this one , to get hold of all the <tag> and <tag> metadata", "and then interate over each give input to set your data", "for example i have component like this", "- since its implement <tag> it support form api   which allow i to do somete like this , if i would use this component in the template directly", "to set a ngmodeldirective that act just like another binding since my component implement <tag>", "- before next step <number> which would be", "use viewcontainer to add component to the view", "you want to set this programatically", "in other word you want to have a way to set ngmodeldirective from code .", "this be what be this ticket about", "think of the system where you build whole ui on the fly from code"], "issue_sim": [0.12454305589199066, 0.3988867402076721, 0.11197212338447571, 0.30654478073120117, 0.10178966075181961, 0.26289883255958557, 0.6043693423271179, 0.40269285440444946, 0.07375065982341766, 0.4040447473526001, 0.48349428176879883, 0.36023467779159546, 0.009085550904273987, 0.23944194614887238], "prob": [4.335495759733021e-05, 0.0005763131193816662, 0.00038972171023488045, 0.0003475146950222552, 6.203602242749184e-05, 3.230247966712341e-05, 0.0665050595998764, 4.059280036017299e-05, 2.512218316041981e-06, 0.007255214266479015, 1.0032414365923614e-06, 0.0032872087322175503, 1.3023293377045775e-06, 0.0004486718971747905]}, {"target": [0], "doc": ["there be a repo on the other thread that show this in action , not work as it should"], "issue_sim": [0.29407840967178345], "prob": [0.9999184608459473]}, {"target": [1], "doc": ["yes , this why this be feature", "even i have a solution to this , i do not like it as it can break anytime since its not standard api or anything .", "i have discuss this several time with team long time ago", "but now since we have a new compiler it might be something to think about", "we can think of generic support to have api to attach directive or this might be special case to connect only form api"], "issue_sim": [0.05265290290117264, 0.363042950630188, -0.03097699210047722, 0.13161659240722656, 0.5837264060974121], "prob": [0.0063363248482346535, 0.9683181643486023, 0.0011044086422771215, 0.007226616609841585, 0.09414149820804596]}, {"target": [0], "doc": ["i think it have to be a generic api , the ability to attach any directive to any component ."], "issue_sim": [0.6270548105239868], "prob": [0.9999951124191284]}, {"target": [3], "doc": ["the issue be that that static reflector do not use the type checker of typescript", "currently , if there be an expression in the <tag> clause we ignore it", "this mean we have no idea that the base class implement <tag> nor an easy way to calculate it as it would require we to ask the type - checker", "we avoid use the type - checker because we need to be able to produce factory function before type checker or we would have to do two full type - check .", "we should consider recognize the pattern <tag> as meaning we should just ignore the <tag> and treat its parameter as the base class", "however , this would mean that we would not catch thing like ,"], "issue_sim": [0.4722060561180115, 0.10123848915100098, 0.3839178681373596, 0.3251495957374573, 0.31279075145721436, 0.049958936870098114], "prob": [0.03115442767739296, 0.007453294936567545, 0.41103118658065796, 0.3645452857017517, 0.008712894283235073, 0.0005039182142354548]}, {"target": [0], "doc": ["i guess this tracker be only for life - cycle hook problem , what i mean be the mixin pattern not generally support in aot , but some basic functionality may be able to work already .", "i 'd suggest to raise separated issue when found other concrete problem", "edit : update the original comment to make it clear"], "issue_sim": [0.4981563687324524, 0.13239498436450958, 0.09160543978214264], "prob": [0.9371230006217957, 0.11482333391904831, 0.04050667583942413]}, {"target": [1], "doc": ["any update for this", "well - support mixin would be a powerful feature ."], "issue_sim": [0.07208266109228134, 0.3952462375164032], "prob": [0.021784650161862373, 0.9754505157470703]}, {"target": [0], "doc": ["currently inheritance be break in ivy , so would not expect much ."], "issue_sim": [0.06201477348804474], "prob": [0.9999585151672363]}, {"target": [0], "doc": ["the problem be , that those be exist view to which i have no access , since they be come from a rest service .", "since we be rewrite our client we do not want to maintain both framework jquery and angular", "we want to reach an unique code base without any inconsistency", "i just do n't get the argument behind the entire \" we do n't want to support complex selector \" thing", "it be actually just a logical consequence of the angular2 core concept"], "issue_sim": [0.1909632384777069, 0.36544379591941833, 0.07354514300823212, 0.2580104172229767, 0.45381128787994385], "prob": [0.6879767775535583, 0.04998350515961647, 0.009833726100623608, 0.18956919014453888, 0.040691521018743515]}, {"target": [4], "doc": ["i have n't figure out yet how to use html fetch use rest and apply directive or component at all , even though this be an often mention feature", "do you get that part already work", "it do n't look like angular2 target this use case", "angular2 be a lot about building before deliver to the client", "in this case you need to control the view anyway and then complex selector do n't add much value ."], "issue_sim": [0.41059812903404236, 0.0036378316581249237, 0.5219927430152893, 0.4059363007545471, 0.45375919342041016], "prob": [0.7492564916610718, 0.0038884575478732586, 0.006706233602017164, 0.012015792541205883, 0.4068559408187866]}, {"target": [0], "doc": ["sure it be easy to fetch html but do you get any angular directive and component apply to the dynamically insert html in angular2 ?"], "issue_sim": [0.5999147891998291], "prob": [0.9994408488273621]}, {"target": [1], "doc": ["* * tldr ; * * parent - child selector would provide scope for custom selector and when select native element", "another reason for parent - child selector would be to allow scope of selector , especially now that ngmodules apply every declaration to every component within itself .", "for instance : before , i could override table tag with custom component by add my table directive to the component use the custom table without it bleed into other component", "now , anywhere a table tag be use in the module , my custom table directive be be apply , cause unexpected behavior", "if i could scope my selector :  i could apply one custom attribute to the table and then be assure that any tr tag which do not reside in <tag> would not be select", "normally i would just add an attribute to the child tag , but from a plugin perspective , i would rather my user only have to add one attribute to the table tag :", "rather than use :", "which become burdensome to use , especially when there be already multiple input and output directive necessary for the plugin basic function", "and since table element have specific display property set by the browser , it also do n't make sense to use custom tag selector like"], "issue_sim": [0.5726360082626343, 0.6008317470550537, 0.4711853861808777, 0.41397473216056824, 0.44417595863342285, 0.45855528116226196, 0.020796556025743484, 0.31702008843421936, 0.41629794239997864], "prob": [0.015407636761665344, 0.19032125174999237, 0.08835755288600922, 0.004074868280440569, 0.05402235686779022, 0.17312735319137573, 0.00010226589074591175, 0.005570495501160622, 0.024685218930244446]}, {"target": [0], "doc": ["ca n't this trivially be achieve by model your command as a plain class and have a \" factory injectable \" with some create method that create an instance , pass the dependency to it and then return it ?"], "issue_sim": [0.4967547059059143], "prob": [0.9999792575836182]}, {"target": [2], "doc": ["@airblader   i have check doc but i can not find how to resolve this in a simple manner", "if you be pass argument to the instance manually this be not a dependency injection anymore and you be lose part of the beauty and convenience of the pattern", "in the case of a factory , you be force to refactor the code when service inject to the command constructor  .", "so would be great to have an option just to create a new instance without manual work , , ,"], "issue_sim": [0.19175474345684052, 0.3182097375392914, 0.49063795804977417, 0.32776767015457153], "prob": [0.004066243302077055, 0.030453190207481384, 0.1695326268672943, 0.11199843883514404]}, {"target": [0], "doc": ["if you use <tag> to get an instance of your command , it be not di either .", "i do n't see how a custom - make factory would n't solve your issue", "let 's write an example to make it clear :", "this do n't need any specific support from angular , it still hide the dependency of the command from the component , it still use di to manually inject the service in the command , make they easy to test with mock , and it still use di to inject the factory in the component , allow you to inject a mock factory create mock command in test"], "issue_sim": [0.3341752886772156, 0.25123700499534607, 0.11248058080673218, 0.5913071632385254], "prob": [0.8833447098731995, 0.002622827887535095, 0.0014707533409819007, 0.5552548170089722]}, {"target": [1], "doc": ["@jnizet your assumption about the di be wrong", "di do not stop be di if you be call it with injector.get  .", "do not meter where you be resolve your dependency in a constructor or in a code", "the main benefit that argument be automatically resolve", "and this be widely use in backend framework like", "i have describe above all the problem that will come with the factory", "but i will also put comment in the code provide :", "i have a huge amount of command", "each command can have its own service reference", "problem with the factory :", "you should manually pass and refactor code on each constructor argument call", "this be not di anymore", "in the same manner , you can just instantiate your command in a code , but in this case each component will have unrequited service injection only to pass to a command", "you should refactor factory code and command call each time command code be change , with a simple di that can generate instance you can avoid that", "you be lose the maintenance convenience that default di be provide", "extra code that be not really require", "you have provide example with the factory that can create two command", "in this case you be injection huge amount of service and this will create unassigne wiring of service even if they be not use", "to make it a bit less ugly you have to create factory for each command just to solve this simple task", "what i be propose be just a one - liner argument to solve this problem"], "issue_sim": [-0.03870087116956711, 0.15761440992355347, 0.21562163531780243, 0.09998475015163422, 0.17510567605495453, 0.11437708139419556, 0.020604290068149567, 0.22230322659015656, 0.18416491150856018, 0.18943843245506287, 0.415414422750473, -0.009478103369474411, 0.48588040471076965, 0.4854763448238373, 0.09869229048490524, 0.1085866242647171, 0.34742480516433716, 0.2114020437002182, 0.3670089840888977, 0.19288161396980286], "prob": [8.973829972092062e-05, 0.0514461025595665, 0.0018350265454500914, 0.0022078927140682936, 0.018399154767394066, 0.0017062409315258265, 0.00011851912131533027, 5.0104303227271885e-05, 0.0001792322873370722, 3.055832348763943e-05, 0.012728042900562286, 2.2657788576907478e-05, 0.14186911284923553, 0.03922023996710777, 0.0001647183671593666, 0.00012629297270905226, 0.0002886902366299182, 0.0482005812227726, 0.021283458918333054, 0.0005998607375659049]}, {"target": [0], "doc": ["a practical problem would be , however , how the framework can decide at which point the ondestroy hook can be run ?", "also this come at the cost of framework bundle size which the angular team be try to prevent", "other feature that have idiomatic solution be reject because of that and i do n't really see how this would be any different", "you only pass the dependency from the factory to the constructor in a single place", "if command share dependency you can even just create an abstraction for that as well"], "issue_sim": [0.29417499899864197, 0.23588824272155762, 0.15274667739868164, 0.29863691329956055, 0.3875057101249695], "prob": [0.547837495803833, 0.04042291268706322, 0.1444517970085144, 0.021191958338022232, 0.008047303184866905]}, {"target": [6], "doc": ["this be different only in the sense that it provide a feature that give you more flexibility and support by other framework .", "i would assume that this kind of dependency can be instantiate only from injector", "get and in this case it can be exclude from the lifecycle workflow", "\" also this come at the cost of framework bundle size which the angular team be try to prevent", "all code be there , this fix can be one or two liner i guess", "might be a solution to allow a flag for injector", "get to resolve dependency for the constructor of the class , this will also mean that the create instance be exclude from the lifecycle"], "issue_sim": [0.12385086715221405, 0.3946675658226013, 0.2664886713027954, 0.23588824272155762, 0.12913654744625092, 0.26406559348106384, 0.43631941080093384], "prob": [0.2295345515012741, 0.09801287204027176, 0.03835706785321236, 0.2589362561702728, 0.060805439949035645, 0.022468512877821922, 0.17101356387138367]}, {"target": [3], "doc": ["this sound extremely surprising and inconsistent to i", "why should i not be able to inject this in a constructor like anything else", "this will also make for surprising and therefore very error - prone behavior", "there be no good reason that the lifecycle of injectable should depend on how they be provide .", "it be possible that the lifecycle of the injectable could be attach to that of the injector", "this be n't expose publicly as an api , though , so i do n't know how this look internally in angular and how much trouble it 'd be , but it 'd be the very least i would expect the framework to handle to fulfill the current contract for injectable in some sensible way", "however , i suspect this could be a problem for what you be do", "imo this be even bad by break the responsibility", "whether a lifecycle hook run would now depend on how the caller inject it , so the injectable have no control or knowledge over whether it have a lifecycle", "any injectable should trust that its hook will get run by the framework at the appropriate time", "personally i think the downside of the factory pattern be n't nearly as big as you be make it out to be", "yes , change dependency also mean change the factory", "but that be a trivial change to make , restrict to one very specific spot , and it be entirely compile time safe", "it be not really any different from have to update unit test , too"], "issue_sim": [-0.048507142812013626, 0.35845619440078735, 0.09543903172016144, 0.26154792308807373, 0.2949417233467102, 0.38904333114624023, -0.05577610433101654, 0.06763803958892822, 0.34546250104904175, 0.24274367094039917, 0.17535251379013062, 0.21652011573314667, 0.25264042615890503, 0.1817287802696228], "prob": [0.004384821746498346, 0.02136389911174774, 0.012807048857212067, 0.32300129532814026, 0.0036909873597323895, 0.04867849498987198, 0.0009317495278082788, 0.00014274225395638496, 0.044569335877895355, 0.0011504580033943057, 0.028697187080979347, 5.360070281312801e-05, 0.041307106614112854, 0.0014688200317323208]}, {"target": [0], "doc": ["i think the real issue here be the need to be able to request service from di for a class , without itself having be instantiate via di .", "a good workaround be to pass the <tag> through your factory - then the command class can be write as :", "this pattern , combine with the factory , i think , solve the problem without any new feature need from di"], "issue_sim": [0.4976768493652344, 0.4276999533176422, 0.30676209926605225], "prob": [0.538395345211029, 0.41586747765541077, 0.08026082068681717]}, {"target": [5], "doc": ["thank for suggestion it can help in some case", "the main request here be to get * * new instance * * every time injector ' * * get * * ' be call", "other di implementation , like", "net have this as * * transient * * option", "use case be describe above", "factory can not help while you have to manually pass all argument , so it be just overhead for each command ."], "issue_sim": [0.017731916159391403, 0.3807465732097626, 0.13084830343723297, 0.19460658729076385, 0.1258641630411148, 0.36861294507980347], "prob": [0.06440599262714386, 0.6836455464363098, 0.00968259572982788, 0.01058607641607523, 0.010614955797791481, 0.15609456598758698]}, {"target": [0], "doc": ["it be work when you add <tag>", "no idea if it should work without as well"], "issue_sim": [0.010863079689443111, 0.08437466621398926], "prob": [0.2716081142425537, 0.5723708868026733]}, {"target": [0], "doc": ["ah , that absolutely make sense , as the value be not necessarily the same as the possibly localize text content .", "i will check tomorrow if i miss that part also in my actual application and close the issue if that s the case"], "issue_sim": [0.17411348223686218, 0.1589673012495041], "prob": [0.9591941237449646, 0.020494649186730385]}, {"target": [1], "doc": ["it might still be a bug", "i also think it should work when then <tag> be omit and the content of the <tag> be set to the option value"], "issue_sim": [0.24808144569396973, 0.33540675044059753], "prob": [0.04256477206945419, 0.9366331100463867]}, {"target": [3], "doc": ["i try select with <number> - way bind use ngmodel", "the first option be show in select box by default in firefox 45", "1 and ie11 , even though the select value be empty", "it be work as expect in chrome and firefox 47.0.1 , the select box be empty by default - no option be select ."], "issue_sim": [0.3673701286315918, 0.5281621217727661, 0.40700966119766235, 0.5073148012161255], "prob": [0.001664213021285832, 0.08622825890779495, 0.009732840582728386, 0.9562218189239502]}, {"target": [0], "doc": ["my guess be that <tag> should be set - this be very similar to a prior issue where input event be unexpectedly happen on different input than expect when use ngfor .", "this be due to how change detection work i believe , so give that the other issue be close , i would expect this to be reject as a user error as well"], "issue_sim": [0.4457158148288727, 0.37091830372810364], "prob": [0.7026306390762329, 0.4560781717300415]}, {"target": [0], "doc": ["it be design to work with the <tag> as an input property , so include it be currently require .", "it be probably go to stay this way for a while in term of priority because of how the benefit weigh against the actual work", "i 'll keep it open for now"], "issue_sim": [0.28845107555389404, 0.08415904641151428, 0.04566378891468048], "prob": [0.9705169796943665, 0.038462165743112564, 0.0023947430308908224]}, {"target": [1], "doc": ["please * * do * * keep open as it be not obvious that one must bind to the option <tag> property when the <tag> and the display text be the same", "the spec be pretty clear that the value should be the text when not specify explicitly .", "btw , this be a pretty tough issue to find if you do n't already know that <tag> be the problem", "see this issue <url>"], "issue_sim": [0.43878668546676636, 0.35958385467529297, 0.19145382940769196, 0.21553686261177063], "prob": [0.24698546528816223, 0.8121206164360046, 0.022822709754109383, 4.458524927031249e-05]}, {"target": [0], "doc": ["you can use component wrapper with different provider , i have component for get address with different logic require in final it look like", "wrapper just have component level provider"], "issue_sim": [0.5364834666252136, 0.3949719965457916], "prob": [0.9079111814498901, 0.016979863867163658]}, {"target": [2], "doc": ["@djleonskennedy a wrapping component create dom noise and css burden , though , and make it dynamic to have something like", "do n't work since <tag> have to statically define its provider and can not reference they from an input", "so you 'd have to create different wrapper component for every injector , which then become problematic if you build your injector somewhat dynamically as well  .", "my first thought here be a structural directive like", "but this actually turn out not to really lead anywhere either", "* edit :* the above confuse injector and provider a bit , but i think it be still clear enough", "in the end these be separate issue for injector and provider since wrap component can define provider , but not injector for their content"], "issue_sim": [0.48933833837509155, 0.23005008697509766, 0.5442359447479248, 0.0952003002166748, 0.03758303448557854, 0.2886121869087219, 0.5301542282104492], "prob": [0.004387935157865286, 0.07145119458436966, 0.8827115297317505, 0.0008327412651851773, 7.730067591182888e-05, 0.0021767427679151297, 0.11886822432279587]}, {"target": [0], "doc": ["use directive - wrapping instead of component - wrapping can overcome the dom / css issue .", "yes the large issue be that the directive / component - wrap approach only work if you build enough component to enumerate all possible value", "there be a static tree of  directive / component selector  component template  inject value", "there be a dynamic tree of  inputs  inject observables  dynamically create component", "i want to increase what can be do dynamically", "for example , suppose an app have most route under :", "and that use of site id  be ubiquitous", "the router inject <tag> which have an observable with the <tag> value", "however , that mean that * every * component use <tag> must consume it as an observable", "it 'd be more convenient if i could just assume it be constant", "i think the currently good approach be <tag> , though that the mention downside", "i suppose one to solve this be to extend <tag> : support input  and ngonchange and maybe change detection strategy in ngcomponentoutlet", "it be a more awkward call convention , require entrycomponent , and ca n't use input intellisense"], "issue_sim": [0.5205204486846924, 0.5351237654685974, 0.6334236860275269, 0.6162854433059692, 0.21289122104644775, 0.03005479834973812, -0.004218602553009987, 0.42903950810432434, 0.3175206780433655, 0.05328863859176636, 0.08868163079023361, 0.28920239210128784, 0.049943119287490845], "prob": [0.36215540766716003, 0.37189117074012756, 0.009046687744557858, 0.0009865985484793782, 0.002085611689835787, 0.001339299138635397, 0.004623586777597666, 0.17221380770206451, 0.034342825412750244, 0.0015084154438227415, 0.015770940110087395, 0.06525668501853943, 0.006369267124682665]}, {"target": [0], "doc": ["for this you can access the snapshot and use a route reuse strategy that always recreate the routed component instead of reuse it .", "you could also use thing like canactivate guard or resolver to fully resolve object and make they available to all component through a service provide on the routed component"], "issue_sim": [0.44686001539230347, 0.5076216459274292], "prob": [0.6465612649917603, 0.2679230868816376]}, {"target": [1], "doc": ["i have something like this in my project , use for , basically , the same use case : i inject via directive or custom component a token that represent a styling  for the application button", "this approach work for component and directive  , but not for structural directive , as you mention .", "this be really a shame , imo , and should be fix asap , because the hierarchy of injectors be break , when talk about structural directive :", "regard the specific of this issue , i do n't think the require feature be need , except for the requirement of the aforementioned issue # <number>", "custom directive \" provide \" token seem to be  exactly what this issue be request"], "issue_sim": [0.5780131816864014, 0.3564707338809967, 0.23691698908805847, 0.15016889572143555, 0.29869234561920166], "prob": [0.5259360671043396, 0.7624847888946533, 0.16875337064266205, 0.011467504315078259, 0.0001943291281349957]}, {"target": [0], "doc": ["actually , structural directive seem to work as parent now .", "still seem a bit awkward , but fairly usable", "i can inject dynamic variable <tag> into <tag> with :", "< summary > full example</summary >", "export class appcomponent {", "readonly version = version ;", "color1 = \" blue \" ;", "color2 = \" red \" ;", "const tmp = this", "color2 = tmp ;", "export class appmodule { }"], "issue_sim": [0.21316683292388916, 0.031090036034584045, 0.48628634214401245, 0.06712222099304199, 0.35459572076797485, 0.08865781128406525, 0.022678902372717857, 0.10425359010696411, 0.22192789614200592, 0.0872517079114914, 0.3705487847328186], "prob": [0.32795625925064087, 0.10933510214090347, 0.17842598259449005, 0.036693114787340164, 0.02828093059360981, 0.06860242784023285, 0.16705945134162903, 0.037410639226436615, 0.0454598143696785, 0.02282283641397953, 0.03210167586803436]}, {"target": [0], "doc": ["please add a repro in plunkr", "ca n't reproduce <url>"], "issue_sim": [0.2771625816822052, 0.1161312386393547], "prob": [0.7249317765235901, 0.038718048483133316]}, {"target": [0], "doc": ["seem to be because i be navigate use code  and try to change the queryparam dynamically", "=\"{id : myid } \"", "to repreduce click the \" navigate query param <number> \" button in the plunkr :", "i might be do something wrong , however this approach work in old version", "any way to tell routerlinkactive to ignore the queryparam"], "issue_sim": [0.39193856716156006, 0.15228736400604248, 0.3902024030685425, 0.29131489992141724, 0.0864730030298233], "prob": [0.23529352247714996, 0.013923856429755688, 0.4825531542301178, 0.07727211713790894, 0.006393868010491133]}, {"target": [1], "doc": ["i guess it be introduce here <url>", "it work because we do n't compare query param"], "issue_sim": [-0.006852615624666214, 0.27635183930397034], "prob": [0.6559725403785706, 0.11507242918014526]}, {"target": [0], "doc": ["we will consider add a <tag> to the directive ."], "issue_sim": [0.09262366592884064], "prob": [0.9999425411224365]}, {"target": [1], "doc": ["i do n't think it will help", "there be a state sync issue between <number> directive : <tag> and <tag> .", "example form <url> : <url>", "hero object be load async this be why during component render <tag> be undefined", "be not equal to <tag> and <tag> evaluate to <tag> which be ok", "then , when hero finally arrive from subscription , <tag> become <number> instead of undefined , but it be too late , active status have already be calculate  somehow )", "i think we should drop <tag> and just use <tag>", "<tag> can calculate active status itself and bind active class to its host element", "we do n't need to sync status between <number> directive", "it will be more efficient because we can implement some smart caching mechanism and not recalculate status during every change detection cycle", "it will also simplify implementation of <url>"], "issue_sim": [0.06816823035478592, 0.26797568798065186, 0.07354611158370972, 0.31780415773391724, 0.22433626651763916, 0.25175631046295166, 0.09039382636547089, 0.2914121150970459, 0.161939799785614, 0.2442532330751419, 0.036660924553871155], "prob": [0.1287153661251068, 0.01975748874247074, 0.008215006440877914, 0.48782673478126526, 0.012842967174947262, 0.23986461758613586, 0.001610813313163817, 0.16262882947921753, 0.004598091822117567, 0.610175371170044, 0.004990253131836653]}, {"target": [1], "doc": ["you may be interested in read <url> - it describe a way to lazyload a component", "the trick be to have the component in it be own ngmodule that s not export :. !", "then you can just have your lazy import statement :", "and render it dynamically via <tag> like :"], "issue_sim": [0.462663471698761, 0.42857825756073, 0.18336769938468933, 0.20812660455703735], "prob": [0.01853414997458458, 0.9631835222244263, 0.0006983840721659362, 0.007045627571642399]}, {"target": [0], "doc": ["yeah we can do that but language service intelisense will not work and also as angular do load with ngmodules , why ca n't we use the same approach for load and render dynamic component in the same way .", "why just restrict it with only <tag>"], "issue_sim": [0.6622227430343628, 0.04151277616620064], "prob": [0.9669536352157593, 0.005656098015606403]}, {"target": [0], "doc": ["the solution that i give in the gist be modify code from @angular / router ."], "issue_sim": [0.5265696048736572], "prob": [0.9991219639778137]}, {"target": [0], "doc": ["then the principle be general , it be possible to use it without the router also - just only the programmatical way to load a module / component in any moment and place ."], "issue_sim": [0.4014824628829956], "prob": [0.9999839067459106]}, {"target": [1], "doc": ["this could be a solution for these kind of issue # <number> , # <number> , # <number> by load module not component directly", "component to render dynamically can be query from module use a value provider get ."], "issue_sim": [0.5623817443847656, 0.582368016242981], "prob": [0.0030682715587317944, 0.9640547633171082]}, {"target": [0], "doc": ["but do n't work with aot build !", "anyone can help i"], "issue_sim": [0.10540719330310822, 0.05894434452056885], "prob": [0.4044109284877777, 0.1654767096042633]}, {"target": [1], "doc": ["currently , we have :", "to keep simple case easy , and for retro - compatibility , we could simply add an advanced configuration .", "to fix problem1 & <number> :", "to cancel route activation , the preroute receive an extra parameter :", "note : we can also store the parameter directly in the route snapshot object", "then , to fix problem <number> , if we consider that all preroute configuration in the array be launch simultaneously , we can add an extra parameter to allow to chain they :"], "issue_sim": [0.06129656732082367, 0.22866974771022797, 0.12486180663108826, 0.3137425184249878, 0.2622823715209961, 0.3651093542575836], "prob": [0.0021064525935798883, 0.3589537739753723, 0.0010899162152782083, 0.07287746667861938, 0.008439339697360992, 0.7212169170379639]}, {"target": [1], "doc": ["@jasonaden any update about this one", "my suggestion would be currently break by aot compilation :"], "issue_sim": [0.04468680918216705, 0.12423644214868546], "prob": [0.18891531229019165, 0.605858325958252]}, {"target": [0], "doc": ["be i understand this correctly : you want the <tag> to be able to fail the same way as <tag> by trigger cancelnavigation ?", "if so , i be really hope for this as well", "* * in the follow case :* *", "<tag> resolve fine e", "the item exist in the database and return datum", "<tag> ca n't resolve e", "the item do not exist in the database and return <number>", "currently the last url would force i to redirect to another url , and return an empty observable like this", "* * what i 'd like :* *", "to force <tag> for observable to trigger navigationcancel in the routing process , thus make it possible for fail resolve to trigger the wildcard  path while persist the url like this :", "* * what be currently happen :* *", "the application crash if an <tag> be return inside the <tag> function"], "issue_sim": [0.34772056341171265, 0.03500106930732727, 0.05737640708684921, 0.19410260021686554, 0.1450900137424469, 0.10320174694061279, 0.1736447960138321, 0.49576830863952637, -0.010097961872816086, 0.46418845653533936, -0.013711725361645222, 0.3191508650779724], "prob": [0.8547194600105286, 0.0003528176748659462, 7.938440830912441e-06, 7.708035263931379e-05, 0.00023448166029993445, 3.571432898752391e-05, 0.00023721804609522223, 0.0033172662369906902, 1.6441483694507042e-06, 0.3243710994720459, 9.76632691163104e-07, 0.03361396864056587]}, {"target": [0], "doc": ["i assume that be just a practical decision as for most usecase you 'd only be interested in a boolean value .", "follow the value rather than check attribute would mean it be a string value set to \" on \" or undefined", "which be awkward to handle", "if you really want this behavior you can just implement your own controlvalueaccessor , though"], "issue_sim": [0.3484828770160675, 0.534832239151001, 0.06973923742771149, 0.2712089717388153], "prob": [0.576216459274292, 0.08040760457515717, 0.0011091992491856217, 0.09667746722698212]}, {"target": [0], "doc": ["or set to a user define string .", "as in my use case : the result / value of a dynamic form be send to a pdf generation service that do n't know anything else", "break standard for practical reason be probably not good practice , hope that be not the case here"], "issue_sim": [0.10602361708879471, 0.28653866052627563, 0.21432898938655853], "prob": [0.1624356508255005, 0.605370283126831, 0.05598245933651924]}, {"target": [0], "doc": ["at least as an intermediate step , angular might behave as be in case value attribute be miss from checkbox to prevent break exist usage .", "if instead any value attribute be provide , angular should respect it and set the formcontrol", "value accordingly , i", "set it to that of the attribute if check , else set it to undefined and omit it from formgroup"], "issue_sim": [0.6710027456283569, 0.6696591377258301, 0.11253770440816879, 0.5438021421432495], "prob": [0.6348438858985901, 0.07659343630075455, 0.026469776406884193, 0.1457972526550293]}, {"target": [0], "doc": ["that would still be a break change ."], "issue_sim": [0.059996310621500015], "prob": [0.9999814033508301]}, {"target": [0], "doc": ["break for user already use a _ value _ attribute on a checkbox * and * use formcontrol * and * rely on the fact that formcontrol do not do anything with the _ value _ attribute .", "it be break as per definition , but real world impact should be near _ null _ since this usage be mostly self - contradictory", "that say , i 'd still prefer do it right , though , just suggest a lenient upgrade path"], "issue_sim": [0.6595208644866943, 0.10279004275798798, 0.09924586117267609], "prob": [0.621887743473053, 0.036977577954530716, 0.12164562195539474]}, {"target": [3], "doc": ["thank for the issue", "i agree there be something wrong or at least misleading about this api", "i be not entirely sure what the good solution be though as there be a number of thing to consider", "minimally it seem there should be a way to get access to the \" never \" value you provide in the \" value \" attribute ."], "issue_sim": [0.07044418901205063, 0.15985649824142456, 0.12058538943529129, 0.4101722836494446], "prob": [0.006609718315303326, 0.3935469090938568, 0.23100726306438446, 0.558752715587616]}, {"target": [1], "doc": ["angular <number> , i ca n't get it to work with <tag> or <tag> attribute", "it only work if you do n't use the \" object \" syntax and pass a boolean instead , which mean we ca n't use the <tag> attribute ."], "issue_sim": [0.5929594039916992, 0.42045319080352783], "prob": [0.5660120844841003, 0.5550937056541443]}, {"target": [0], "doc": ["<tag> as the dependency have to specify the value and this be available for the factory function which return the final value ."], "issue_sim": [0.3188348412513733], "prob": [0.9998563528060913]}, {"target": [4], "doc": ["@mlc - mlapis , this be pretty much the same", "<tag> should be initialize first", "in my case this initialization should occur asynchronously", "since <tag> <tag> do n't support promise , i initialize it in <tag> <tag>", "but <tag> <tag> execute before <tag> <tag> promise resolve .", "so , <tag> be <tag>"], "issue_sim": [0.14563962817192078, 0.16147670149803162, 0.27365878224372864, 0.6529192924499512, 0.4842677414417267, 0.13235509395599365], "prob": [0.00036259781336411834, 0.005167139228433371, 0.004300194326788187, 0.06149677559733391, 0.9239399433135986, 0.0029935906641185284]}, {"target": [1], "doc": ["how so when <tag> be the dependency for both", "<tag> have to be instantiate first ."], "issue_sim": [0.342268705368042, 0.18812233209609985], "prob": [0.005379789974540472, 0.9971511960029602]}, {"target": [1], "doc": ["ok , i can see now", "so you have to use some <tag> direct import or <tag> request ."], "issue_sim": [-0.003291133791208267, 0.20906157791614532], "prob": [0.003976144827902317, 0.9976003766059875]}, {"target": [0], "doc": ["just for curiosity ... what be print when you inject <tag> into the ' configservice ` ?", "import { location } from ' @angular / common ' ;"], "issue_sim": [0.153842955827713, 0.28223901987075806], "prob": [0.939918041229248, 0.019139744341373444]}, {"target": [2], "doc": ["@mlc - mlapis , i just figure out that the request feature wo n't help i at all", "the irony be that i need to get base path from ajax request in <tag> <tag>", "but in order to make the request , base path should already be define , otherwise the request url prefix be undefined .", "if i be right , the issue could be close"], "issue_sim": [0.22897325456142426, 0.42349445819854736, 0.2196996808052063, -0.024858061224222183], "prob": [0.002623006235808134, 0.16509941220283508, 0.5737743377685547, 0.006036204285919666]}, {"target": [0], "doc": ["here be another use case , when support promise in <tag> might be useful :. you need to set app base href dynamically use external configuration .", "- in order to get this external configuration you can use <tag>", "- but then , in <tag> of <tag> provider you need to wait for this call to finish to get config", "and since you can only use value there , it be not possible", "seem like currently the only way to do so , be to move config load into <tag> file , and bootstrap application only after all config be load and pass config in extra provider like so    :", "which seem like a hack , especially when app_initializer be use specifically for app initialization , but you ca n't use it in this particular case", "the same issue be describe here : <url>"], "issue_sim": [0.6335130929946899, 0.2670542299747467, 0.4006144106388092, 0.14580243825912476, 0.4172217845916748, 0.3356102406978607, 0.11059737205505371], "prob": [0.8242849707603455, 0.010532070882618427, 0.1800466775894165, 0.009448801167309284, 0.4358982443809509, 0.10057836771011353, 0.001650487189181149]}, {"target": [1], "doc": ["be there any progress about that", "this strongly limit our use - case as we want to have base app href dynamically configurable ."], "issue_sim": [0.08261498808860779, 0.46533748507499695], "prob": [0.026570910587906837, 0.9081568717956543]}, {"target": [0], "doc": ["how would you bind to such dynamic template variable from within a component", "spontaneously it seem hard due to the fact that the template variable resolve at runtime"], "issue_sim": [0.561087429523468, 0.4448758363723755], "prob": [0.4459262788295746, 0.44757282733917236]}, {"target": [0], "doc": ["who say user be an array without duplicate ?", "what happen when the collection change", "this do n't sound like a good idea to i at all , not to mention that nothing can be decide at compile time"], "issue_sim": [0.20643149316310883, -0.0025906278751790524, 0.2763449251651764], "prob": [0.04883631318807602, 0.03949009254574776, 0.6980472207069397]}, {"target": [0], "doc": ["good point : i think that it would also be helpful to have a method of bind to these via viewchildren  , or maybe a new decorator .", "so maybe we could say something like :", "but the use case that i have in mind  be the scenario where you need to send focus to a specific element that be be build by the * ngfor directive", "in that case , the only technique which work that i know of be <tag> <tag> <tag>", "and make sure that you set the ' i d ' attribute on one of the iterated element to <tag> <tag> <tag>"], "issue_sim": [0.3289933204650879, 0.07003854215145111, 0.49441882967948914, 0.17616374790668488, 0.292754590511322], "prob": [0.7324038743972778, 0.0017265500500798225, 0.054063595831394196, 0.0004621289554052055, 0.019040707498788834]}, {"target": [0], "doc": ["there be plenty of way to solve that , for example a directive with a boolean input that when it change to true focus the host .", "or split into small component and use exist viewchild mechanism etc"], "issue_sim": [0.391373872756958, 0.1191706582903862], "prob": [0.8758052587509155, 0.02310432493686676]}, {"target": [5], "doc": ["base on your question , i be assume that duplicate be bad", "as it stand now , use a template reference variable on an element within an * ngfor create many duplicate template reference", "the proposal would reduce the risk of that happen , although not eliminate it", "a dynamically determine template reference variable do n't necessarily need to depend on the array be use by the * ngfor at all", "maybe it could be something as simple as #", "the point of the proposal be that template reference variable within loop need to be improve .", "in term of work with the element via viewchild / viewchildren , programmer would need to be aware of that possibility and work with it", "but it sound like there may be problem if the variable change on the template side"], "issue_sim": [0.0703003779053688, 0.6903157830238342, 0.021914158016443253, 0.7005360126495361, 0.03720880299806595, 0.4158746898174286, 0.3481123745441437, 0.3211292028427124], "prob": [0.013756489381194115, 0.0679677352309227, 0.004522778559476137, 0.022331837564706802, 0.002686286810785532, 0.2543153166770935, 0.18715794384479523, 0.0016635360661894083]}, {"target": [0], "doc": ["but i be have trouble imagine code that would be as clean as * ngfor , which could also use a unique directive in some case .", "that be not to say that it do n't exist , just that i be not experience enough with directive to fully understand you", "of course , abandon * ngfor entirely would be an option , but it be a very convenient construct"], "issue_sim": [0.4097742736339569, 0.34011566638946533, 0.13846194744110107], "prob": [0.6760027408599854, 0.24069668352603912, 0.13312768936157227]}, {"target": [3], "doc": ["no one be tell you not to use <tag>", "here be an example of the directive that i mention : <url>", "as you change the value in the dropdown , the corresponding input get focus", "no viewchild , no dynamic template reference variable , no awkwardness ."], "issue_sim": [0.11101807653903961, 0.19418197870254517, 0.16789574921131134, 0.45925143361091614], "prob": [0.004459671676158905, 0.009280646219849586, 0.010408208705484867, 0.9682925343513489]}, {"target": [12], "doc": ["here you go : <url>", "there be only a litte input box", "step to reproduce :", "type \" abc \"", "cursor be now behind \" c \"", "cursor be not behind \" b \"", "delete \" b \"", "now cursor wo n't stay where it be", "instead it jump to the end of the input", "this behavior be pretty obvious because the input 's value be get re - set", "i need a way to not re - set the input 's value if oldvalue = = = newvalue", "or be it possible to create a directive which handle this for all input field", "something like \" if this input have focus , remember the current value and cursor position .", "if value setter be get call , check if oldvalue = = = newvalue", "if true : re - apply the old cursor position \"", "do n't know how this affect performance , if there be hundred of input on the page", "or maybe it even be n't possible at all"], "issue_sim": [-0.1385021209716797, 0.11347975581884384, 0.031145960092544556, 0.11244232952594757, 0.15727876126766205, 0.139035165309906, 0.09450691938400269, 0.11423435062170029, 0.12900397181510925, 0.29318124055862427, 0.37673676013946533, 0.4616527259349823, 0.3837597966194153, 0.35753393173217773, 0.19714243710041046, 0.23781311511993408, 0.03367144614458084], "prob": [0.016853535547852516, 0.014474749565124512, 0.0058466908521950245, 0.0009093417902477086, 0.0014781675999984145, 0.0016409008530899882, 0.001091863145120442, 0.013707050122320652, 0.006934038363397121, 0.08233772218227386, 0.652582049369812, 0.08305633068084717, 0.09216262400150299, 0.0055709718726575375, 0.007282100152224302, 0.06964084506034851, 0.009227007627487183]}, {"target": [0], "doc": ["i think u can create a directive which will listen for input event and will reset cursor position ."], "issue_sim": [0.509928286075592], "prob": [0.9999598264694214]}, {"target": [2], "doc": ["i have a look at your commit", "look pretty nice and simple", "could you also add <tag> to formgroup and formarray ?", "and also to the <tag> method", "then there would be equal behavior across all class and method"], "issue_sim": [0.09126155823469162, -0.02506515011191368, 0.21622198820114136, 0.010709788650274277, 0.13608531653881073], "prob": [0.0005136629333719611, 0.04492891579866409, 0.45310908555984497, 0.0004196510708425194, 0.0015942270401865244]}, {"target": [1], "doc": ["this issue be more likely to happen if you be use an ngrx type store , where the value get patch back onto itself", "interestingly chrome can deal with the same value get patch back and will leave the cursor wherever it be , but ios will jump to the end of the field even if the value be n't change - which it wo n't be most of the time !", "i be not sure if this be the case when this issue be open", "since there be be no activity on this - i think i be go to have to do something like this , to only patch unchanged value :", "const currentdata = this", "const addresscopy =   {", "address } ;    // where ' address ' be my new incoming datum"], "issue_sim": [0.2894947826862335, 0.47090473771095276, 0.0880071371793747, 0.3028436303138733, 0.2006823718547821, 0.20534679293632507, -0.015305990353226662], "prob": [0.13153976202011108, 0.7916135787963867, 0.02554684691131115, 0.7985572814941406, 0.0010455537121742964, 0.005673047620803118, 0.04351227357983589]}, {"target": [0], "doc": ["<tag> be n't pass the flag here"], "issue_sim": [0.20908841490745544], "prob": [0.9987311959266663]}, {"target": [0], "doc": ["i would call it a bug , not a feature : the provide injector clearly do not behave as define by the api documentation :"], "issue_sim": [0.29044976830482483], "prob": [0.9998145699501038]}, {"target": [0], "doc": ["look like a bug , the type signature say we that there be third option for flag , but under the hood the implementation do not take this option into account ."], "issue_sim": [0.27864688634872437], "prob": [0.9999812841415405]}, {"target": [3], "doc": ["definitely a bug imo - the <tag> signature be :", "<tag> <tag> notfoundvalue <tag> notfoundvalue <tag> undefined <tag> injector", "and <tag> be :", "so , nodeinjector implement the deprecate signature , not the current one .", "i should add that the <tag>  do correctly implement the <tag> api with <tag>", "<tag> and <tag> also do n't correctly implement the   <tag> api", "here be a karma test suite that demonstrate the bug :"], "issue_sim": [0.16374975442886353, 0.3825100064277649, 0.1102115660905838, 0.20434999465942383, 0.5801756381988525, 0.4565078914165497, 0.05413980036973953], "prob": [0.000880965031683445, 0.08426506817340851, 0.00971839390695095, 0.3999256491661072, 0.0184234157204628, 0.010135470889508724, 5.67686183785554e-05]}, {"target": [0], "doc": ["the likely workaround for this be go to be to use the <tag> decorator and not use the <tag> api directly , but that be suboptimal in a lot of case .", "my use case be that i want to provide service at the directive level only if they be not already provide by an ancestor element , use the following :", "implementation , which do n't work b / c it require <tag> and <tag> :", "<tag> <tag> factoryprovider <tag> type < t > <tag> injectiontoken < t > <tag> factory <tag> type < t > <tag> injectiontoken < t > <tag> factory <tag> <tag>", "the workaround be for do the same thing use <tag> be quite a bit less clean - will require constructor modification and inject custom factory on each class in the chain , instead of just use a share provider definition"], "issue_sim": [0.406096488237381, 0.4369361102581024, 0.3243143856525421, 0.31832125782966614, 0.4033752679824829], "prob": [0.35482484102249146, 0.41265738010406494, 0.004144561477005482, 0.004509065765887499, 0.355495423078537]}, {"target": [2], "doc": ["i 've find that if i use <tag> instead of <tag> i be able to use the <tag> arg", "at least it seem to work so far", "the limitation of this be that the <tag> function only work in factory function , you ca n't use it in regular code where <tag> can be use .", "but with some refactoring use of <tag> could usually be move into factory function"], "issue_sim": [0.3995940089225769, 0.006070833653211594, 0.40871569514274597, 0.13303832709789276], "prob": [0.1654772311449051, 0.06112424284219742, 0.33135685324668884, 0.067361980676651]}, {"target": [1], "doc": ["any update on this", "i might be underestimate the difficulty but it seem like the nodeinjector could easily implement the correct injector function .", "it be currently pass in undefined to getorcreateinjectable for the injectorflags"], "issue_sim": [0.060414571315050125, 0.2150830626487732, 0.20794975757598877], "prob": [0.014533252455294132, 0.7278693318367004, 0.26798215508461]}, {"target": [0], "doc": ["there be quite a lot of thing which you can do with they but essentially iterate through they and perform some check , add datum \" dynamically \"  , exclude route etc", "you can do some , with a plain function * * unless * * you need to use a service , then you wo n't be able to ; and even for these scenario we have for example a logger service which we can not use for well logging", "a small concreate example would be :", "for example in our app we control <tag> through a service name <tag> to determine whether its in debug mode or not  , and we have some route which be only for developer only  , so if its not run in debug mode the route be remove", "pass additional route datum via a config service"], "issue_sim": [0.36955928802490234, 0.25196218490600586, -0.003114003688097, 0.4647561013698578, 0.38808879256248474], "prob": [0.629347562789917, 0.05491362139582634, 0.001945550087839365, 0.4058590829372406, 1.920950489875395e-05]}, {"target": [0], "doc": ["ca n't all of this already be achieve with guard , resolver and url matcher ?", "for example , let 's consider your debugmode", "either this be purely a build time thing for developer or you want this to be possible even in the live production app", "in the first case add / remove route at build time be already possible", "in the latter case you can use guard", "the config base on route datum sound a whole lot like resolver to i , though you do n't go into a lot of detail so i be not sure"], "issue_sim": [0.2780749201774597, -0.07027178257703781, 0.21096545457839966, 0.38666489720344543, 0.07190311700105667, 0.3336279094219208], "prob": [0.05568956583738327, 0.00026363981305621564, 0.03628629818558693, 0.0004896055324934423, 4.112315582460724e-05, 0.13652928173542023]}, {"target": [2], "doc": ["some thing can be handle maybe , but still different than what we expect and some do n't", "if you need to validate a route , with a guard / resolver you need to * * active * * it in order to be validate so its lazy , ideally in such case we do it upfront so it make our life easy", "other action if you need it a bit more crosscut such as breadcrumb or so it use the route config but not do as a guard , but react to navigation event instead , so have some datum in the route help you do some logic .", "and in some other case we do it the other way round , pass datum in route config and consume in guard / resolver", "the usage of this be not about route match so i do n't think its relate to that", "this one seem related / possibly duplicate <url>"], "issue_sim": [0.08298962563276291, 0.30740493535995483, 0.5383349657058716, 0.35000672936439514, 0.16192933917045593, -0.016739238053560257], "prob": [0.0020800232887268066, 0.641208827495575, 0.595929741859436, 0.04257599264383316, 0.004203959833830595, 2.5218376322300173e-05]}, {"target": [0], "doc": ["i do n't see the difference . in both case the route have to exist in the application , in both case the decision be make at runtime .", "the guard can easily defer the logic to a cached result that you eagerly calculate if for some reason this be absolutely necessary", "either way the request feature of make route inaccessible at runtime base on logic from a service already exist", "i 'd really love to see an actual , concrete example of something you 'd want to achieve with this feature  as maybe that make it easy to discuss if or why this be n't possible with the exist feature set and , if so , how this feature could be shape"], "issue_sim": [0.23829513788223267, 0.23285529017448425, 0.40279483795166016, 0.20961631834506989], "prob": [0.3675463795661926, 0.04449036344885826, 0.019492853432893753, 0.6647364497184753]}, {"target": [1], "doc": ["oki so one of the example i mention be to iterate through route and add validation", "again the only problem we have be we be not able to use di , so the request feature be to enable di pretty much , in this case a simple logger .", "this be how it currently be , and ~~it works~~  , however in this example we can not use our own logger", "now in order to be able to use the logger we would need di , and this be how we generally create it", "so again , the problem be that we be currently limit to only write code which do n't use any service", "another issue be you need to apply this manually for each individual usage , like this :", "while with the other , you register the service once in root and that s it"], "issue_sim": [0.3572143018245697, 0.3712915778160095, 0.25035226345062256, 0.1893017292022705, 0.19249418377876282, 0.22204454243183136, 0.18832877278327942], "prob": [0.005409335717558861, 0.8338521718978882, 0.015699753537774086, 0.48329368233680725, 0.010525927878916264, 0.0004748499486595392, 0.016796741634607315]}, {"target": [3], "doc": ["thank for take the time to write this up , i appreciate it", "i think understand the use - case help in find solution , be it exist one or to think about a possible new feature", "i 'll follow up with my thought on this below , but let 's see what the angular team think about it", "since this be about prevent misconfiguration during development , would n't you rather want this to be a compile - time error rather than a runtime one , though ?", "this could probably be cover in a test that scan the source for routing module and then perform the check", "as for a runtime version you could have a service which inject router and then parse router#config this way to log the error", "this would n't disable those route , though this could then still be achieve by keep that validation result and access it from a guard"], "issue_sim": [-0.000496437307447195, 0.2533966302871704, 0.24495843052864075, 0.17858493328094482, 0.2322457730770111, 0.4178314208984375, 0.4042678475379944], "prob": [0.008282531052827835, 0.13562645018100739, 0.034938156604766846, 0.4264266788959503, 0.0058546350337564945, 0.02186834253370762, 0.015919731929898262]}, {"target": [0], "doc": ["this sound almost good for i i think , tho after some thinking , i think its not go to work for lazy load route"], "issue_sim": [0.18516531586647034], "prob": [0.9999586343765259]}, {"target": [0], "doc": ["that be true ; the good i could offer be an internal <tag> method which provide both routermodule and that service , and then by - convention use that to provide the router in all module .", "but i can see why that tend to defeat the purpose"], "issue_sim": [0.44580844044685364, 0.01296781562268734], "prob": [0.9432554244995117, 0.003141694003716111]}, {"target": [0], "doc": ["i always end up inject the router and call <tag> manually with the \" normal \" route command array , include aux route . i be a little surprised that <tag> be not conceptually in sync with this ."], "issue_sim": [0.49046626687049866], "prob": [0.9998775720596313]}, {"target": [4], "doc": ["i be also run into this or a similar issue", "essentially , i have a _ child _ view that need to open up an auxiliary view in the _ parent _ view", "i try to do :", "but this remove the _ child _ from render and leave the url in an invalid state", "i know that i could inject the <tag> and navigate programmatically relative - to the <tag> ; but , i be hope to keep this in the html as much as possible ."], "issue_sim": [0.1127113327383995, 0.22206853330135345, 0.03421040624380112, 0.2744206488132477, 0.4145839810371399], "prob": [0.010212864726781845, 0.14750859141349792, 0.0075571900233626366, 0.014931880868971348, 0.628813624382019]}, {"target": [0], "doc": ["our workaround to this be to create a service at the ' host ' of these route , such that it know about both the main route and the auxiliary route .", "we then have the child route component  always use that service for any navigation", "ts < - provide the authrouterservice", "< router - outlet></router - outlet >", "< router - outlet name=\"aux\"></router - outlet >", "in hindsight , ours be a terrible design to put two router outlet  on the main authorize landing page", "it cause issue with lazy load , component communication , etc", "next time , i 'll just have each component that need a \" bottom \" , define it inside itself"], "issue_sim": [0.2959662079811096, 0.40157851576805115, 0.07239733636379242, 0.2695588171482086, 0.2414880096912384, 0.25327789783477783, 0.2168903648853302, 0.18051213026046753], "prob": [0.9024773240089417, 0.010124935768544674, 0.0014973108191043139, 0.012726133689284325, 0.06471133232116699, 0.07548441737890244, 0.0016538018826395273, 0.022711098194122314]}, {"target": [2], "doc": ["close as resolve by <url>", "<tag> use the current <tag> as the <tag> by default", "when in an aux outlet , you need to \" escape \" that outlet first so you can add command for a sibling name outlet in the parent .", "stackblitz link : <url>"], "issue_sim": [0.18211695551872253, 0.27001750469207764, 0.32489362359046936, 0.11127203702926636], "prob": [0.026582859456539154, 0.0661497712135315, 0.8820902109146118, 0.007022092584520578]}, {"target": [1], "doc": ["this be discuss at length in # <number>", "the goal of disable the <tag> be accomplish by set input to <tag> or <tag> .", "this be a change in behavior and land for the v13 release", "<tag> will not be respect"], "issue_sim": [-0.006420912221074104, 0.2087796926498413, -0.013108542189002037, 0.11592011153697968], "prob": [0.07069404423236847, 0.8721340894699097, 0.0747491791844368, 0.011399706825613976]}, {"target": [2], "doc": ["@atscott i be well aware of the discussion in that issue", "please consider the use case i 've describe , instead of close the issue so quickly with wontfix", "input set do not work when react to an event bubble up from child element ."], "issue_sim": [0.09001560509204865, 0.23125219345092773, 0.5524532198905945], "prob": [0.01599281281232834, 0.21829107403755188, 0.8615309596061707]}, {"target": [2], "doc": ["just to make sure i understand , this be about some arbitrary descendant element of the <tag> having already call <tag> , and the expectation that this would prevent navigation", "* it be true that a native anchor element with an <tag> attribute will not navigate if a descendant call <tag> on the <tag> event", "in angular cdk and angular material , though , we do n't check the <tag> state in any of the component  .", "* from an accessibility perspective , interactive control should not contain other interactive control", "put another way , nothing that should be handle a click / keyboard event should usually not be inside of an anchor in the first place", "@willydee for the third case you mention  , why would n't the expectation be that call <tag> also prevent the thing the <tag> be do"], "issue_sim": [0.44339171051979065, 0.6475846767425537, 0.3782159388065338, 0.1737533062696457, 0.41557300090789795, 0.23017136752605438], "prob": [0.2634449303150177, 0.012088500894606113, 0.1849983036518097, 0.0004450241394806653, 0.051740750670433044, 0.00028725372976623476]}, {"target": [4], "doc": ["the purpose of the top - level event listener in our concrete case be to prevent multiple overlay  from stay open simultaneously , without have to connect all the different implementation though a service .", "the global listener be not even a <tag> , but attach as a manage event with renderer3 in some directive", "anyway , that be implementation detail not relevant here", "the purpose could just as well be application - wide tracking of user interaction without incorporate third - party analytic tool", "my point be , the purpose of <tag> be entirely different from <tag> : the former be intercept user agent behavior like show a context menu  , or navigate ; while the latter make sure an event never reach the parent element", "all user agent i be aware of be respect the flag , and my argument be angular 's <tag> should too"], "issue_sim": [0.30602356791496277, 0.47391605377197266, 0.11220238357782364, 0.14619943499565125, 0.6136652231216431, 0.2896479070186615], "prob": [0.44641685485839844, 0.03360016644001007, 0.0028041405603289604, 0.047592971473932266, 0.3098219335079193, 0.038202278316020966]}, {"target": [3], "doc": ["@willydee can you address @jelbourn last point with respect to accessibility", "here another thread on the issue as well <url>", "in fact , have an anchor inside another anchor isn even valid html", "note that interactive also mean focusable - interactive control shouldn have focus able descendant either : <url>", "this feature seem like it would encourage less accessible component .", "<tag> routerlink <tag> router", "navigate <tag> routerlink <tag> routerlink <tag> null <tag> mouseover<tag>mouseout<tag>focus <tag> event", "stoppropagation ` , which doesn work in your specific use - case but would for many other"], "issue_sim": [0.21078284084796906, 0.07747216522693634, 0.35955899953842163, 0.3448563814163208, 0.09647136926651001, 0.1815255582332611, 0.5445597171783447, 0.1952194720506668], "prob": [0.011556115001440048, 0.10106071084737778, 0.0640542134642601, 0.15188415348529816, 0.31031855940818787, 0.001518766744993627, 0.006893699988722801, 0.03153414651751518]}, {"target": [0], "doc": ["on top of that be the combination of button and anchor , which be separate \" interaction \" in term of semantic .", "- anchor for navigation", "- button for action", "by nest they , and even put a heading inside of the anchor , a user with a screen reader will be totally confuse", "he wo n't even realize that it be an anchor which will trigger a navigation", "* * please do n't do thing like this * *"], "issue_sim": [0.2392156422138214, 0.2750798165798187, 0.08577021956443787, 0.13677646219730377, 0.2516390085220337, 0.030235465615987778], "prob": [0.7854545712471008, 0.028027450665831566, 0.015061598271131516, 0.3212181627750397, 0.045168597251176834, 0.006793886888772249]}, {"target": [0], "doc": ["this do not even work , if you have a hash in the url it will be remove when click a link that have ='null '"], "issue_sim": [0.3893009126186371], "prob": [0.9999555349349976]}, {"target": [0], "doc": ["i have exactly the same case as in # <number> , it be virtually impossible to test an onpush component without make a dummy outer component , which be quite annoying .", "the general issue be it seem impossible to acquire the changedetectorref instance from outside of it be component"], "issue_sim": [0.5188964009284973, 0.37192320823669434], "prob": [0.8093051314353943, 0.10332999378442764]}, {"target": [1], "doc": ["big pain for we", "we have a lot of dynamic component and same problem with cdr ."], "issue_sim": [0.001699589192867279, 0.26690536737442017], "prob": [0.0006638811901211739, 0.9994810223579407]}, {"target": [0], "doc": ["i ca n't really test my component those be   on <tag> strategy .", "painful thing i 've ever see", "no workaround work for i"], "issue_sim": [0.21442419290542603, -0.03895007073879242, 0.0423630028963089], "prob": [0.9594040513038635, 0.002138689626008272, 0.006543734110891819]}, {"target": [17], "doc": ["guy , the problem be mostly with lack of proper documentation on how to test component with onpush strategy", "but it turn out that it be quite simple and i have <number> solution for you", "let 's test this component", "it have an initial input value of <number>", "so let 's see if we can set it to <number> in our unit test", "* * solution <number> * *", "this be the simple approach", "i suspect that be what we be suppose to be do to test our onpush component", "unfortunately the wrapper component can grow in complexity very fast , so as soon as i find other way , i stop do that", "* * solution <number> * *", "if you dive deep into angular , you 'll know that event may trigger change detection and in our test , mark component for check", "know this , we can abuse testbed a bit by add a custom event listener to our component , the _ _ push_changes", "when we trigger this event , next call to fixture", "detectchanges  will actually check that component , as it will already be mark as dirty", "it be kind of awkward to type this every time , so create helper function to generate the pushchange  and call the testbed", "* * solution <number> * *", "this be a solution i find recently by accident and it rock", "i call it the ultimate solution as it do n't use any hack , it be a drop - in replacement for your usual fixture.detectchanges  call and it be quite convenient to use .", "the only thing leave to solve be the lack of this information in official doc / guide :)", "i hope this help"], "issue_sim": [0.2984679937362671, 0.09378242492675781, 0.30210763216018677, 0.09581835567951202, 0.2761583924293518, 0.06312926113605499, 0.02658565156161785, 0.4448639750480652, 0.3216044306755066, 0.06312926113605499, 0.39584264159202576, 0.49855101108551025, 0.17373226583003998, 0.41343986988067627, 0.34464097023010254, 0.06312926113605499, 0.036950401961803436, 0.13992848992347717, 0.12978699803352356, -0.0010420531034469604], "prob": [0.021810268983244896, 0.019937193021178246, 0.0004267117183189839, 0.00021356908837333322, 0.005633225664496422, 9.88068563856359e-07, 7.013988943072036e-05, 6.727466825395823e-05, 0.004384020809084177, 1.3046810636296868e-06, 0.009326983243227005, 0.0007352372049354017, 0.00012220465578138828, 0.00014832518354523927, 0.010407982394099236, 3.180364501531585e-06, 5.112425787956454e-05, 0.10070466250181198, 0.0020663966424763203, 1.621683986741118e-05]}, {"target": [1], "doc": ["this be a pain even in the runtime", "when i want to create component dynamically , i have no reference to its change detector to execute <tag>   when i update its property via api"], "issue_sim": [0.07806521654129028, 0.5633251070976257], "prob": [0.11388939619064331, 0.8664190769195557]}, {"target": [1], "doc": ["<tag> be same as <tag>", "but we should not make <tag> as the default .", "instead <tag> should be the default", "that be different from current implementation and doc"], "issue_sim": [0.14629867672920227, 0.22659091651439667, 0.3587873578071594, 0.10426913946866989], "prob": [0.007250778377056122, 0.9861133694648743, 0.009385786019265652, 0.003927184268832207]}, {"target": [3], "doc": ["regard flicker in ssr - we can only do so much to avoid it", "preboot will not stop flicker", "last week i debug a site where a google analytic experiment script be cause client to hide it be body till it be ready and be cause a flicker", "we be go to have a schematic to set <tag> as the setting for ssr app .", "this eliminate one easy source of flicker", "but there may be more - we will keep try to locate they and add way to avoid they"], "issue_sim": [0.1304006576538086, 0.13072216510772705, 0.21602970361709595, 0.11102006584405899, 0.10742484778165817, 0.06685677915811539], "prob": [0.03482617437839508, 0.007388286292552948, 0.21236355602741241, 0.14443336427211761, 0.0010324025060981512, 0.04102480784058571]}, {"target": [1], "doc": ["ok , that be good to know", "hopefully we can gather enough experience to be able to create some kind of troubleshoot doc for flicker in ssr since it seem to be very commonly encounter and the solution do seem to vary across a number of scenario ."], "issue_sim": [-0.06616885960102081, 0.1896045207977295], "prob": [0.0014888690784573555, 0.9986792206764221]}, {"target": [3], "doc": ["- should this proposal include an angular cli migration script to migrate project to these new value", "- should it also include remove the <number> deprecate <tag> value", "- i also assume that the proposal include update the two related api doc and the ssr guide", "as for <tag> , i think that we should deprecate it and just map it to <tag> for now .", "then it could be consider for removal follow the normal deprecation policy", "would this go into version <number>"], "issue_sim": [0.27825671434402466, 0.1467013955116272, 0.1334034502506256, 0.3033297657966614, 0.10809449851512909, 0.0947219729423523], "prob": [0.35753706097602844, 0.04413200169801712, 0.376899391412735, 0.4611470401287079, 0.005863548256456852, 0.0005584701430052519]}, {"target": [2], "doc": ["yes - it be part of the plan", "adam plumer would be help here", "and migrate they out since they have deprecate for quite some time .", "yes - that be my plan", "yes - seem straightforward and doable"], "issue_sim": [0.062336064875125885, 0.06391502171754837, 0.1487255096435547, 0.012036208063364029, 0.036654941737651825], "prob": [0.018921593204140663, 0.0806017592549324, 0.7443113327026367, 0.00638158805668354, 0.026021236553788185]}, {"target": [1], "doc": ["this sound good to i", "since we be not change the default behavior for the exist app , and just clean up the meaning of various flag and deprecate the confusingly name <tag> flag , we be make the current situation strictly well without downside .", "the only break change be the default to the behavior of new ssr project , without affect the default of exist application"], "issue_sim": [-0.005657118745148182, 0.3684924244880676, 0.3914138078689575], "prob": [0.0006175932358019054, 0.9762819409370422, 0.09021419286727905]}, {"target": [0], "doc": ["it seem this would be useful if implement a \" check for updates \" button / action in a software .", "typically i be use to click \" check for update \" in a software and get a message back that either there be update available , or there be no update available", "it would seem there be no feedback currently if there be no update available"], "issue_sim": [0.40295884013175964, 0.43410277366638184, 0.4205816984176636], "prob": [0.3697755038738251, 0.4563169777393341, 0.008363156579434872]}, {"target": [0], "doc": ["i would like to * * show to the user that a more recent version be publish * * , even if the update be not available to use  .", "< p align=\"center \" >", "< img width=\"412 \" alt=\"dowloading_update2 \" src=\"<url> - images", "com/97092/82044829 - 5acbc100 - 96ae-11ea-8629 - d3af9c44d834", "it be frustrating when you have fix a bug , and your user test again , not know that even though they reload in their browser , they still run the previous version while the new be be download", "like suggest by @kylealandavi and @bobdankert , i would like that <tag> return a promise boolean", "an alternative would be to get an observable event when we start download the update"], "issue_sim": [0.39787715673446655, -0.012123586609959602, -0.057884059846401215, 0.07489045709371567, 0.3023338317871094, 0.6217893958091736, 0.39970171451568604], "prob": [0.5509623885154724, 0.0031981547363102436, 0.0012239656643941998, 0.08092682808637619, 0.970112681388855, 1.7829548596637323e-05, 0.05979283154010773]}, {"target": [0], "doc": ["i have the same use case - when a user open a home page i want to show a load spinner meanwhile check if there be any update :", "<tag> <tag> available <tag> available <tag> <tag>", "or a well alternative i guess would be an observable which emit whenever an update be detect"], "issue_sim": [0.5303381085395813, 0.09483736753463745, 0.4619098901748657], "prob": [0.7320295572280884, 0.02895968034863472, 0.7809599041938782]}, {"target": [0], "doc": ["i do n't want to wait a huge amount of time to get notify that an update be available ...   the <tag> be take several second before completion so your idea be non - sense for a critical update scenario .", "the simple solution would be to send the <tag> just when we know a new version be available", "i do n't know why it be n't the case"], "issue_sim": [0.4388047456741333, 0.2652752101421356, 0.030854441225528717], "prob": [0.8231011033058167, 0.17187990248203278, 0.010082327760756016]}, {"target": [3], "doc": ["i be sorry that you do n't like my \" idea \" , @odonno : grin :", "technically , there be no update available by the sw until it have successfully download the necessary file", "the sw should not advertise an update before it be able to serve it", "in the future , we could consider have more granular report , so the sw could emit event for both when an update be available on the server and when the update be ready to be serve by the sw .", "for the time be , though , <tag> refer to an update be available to be serve by the sw"], "issue_sim": [0.07860800623893738, 0.313551127910614, 0.1724679321050644, 0.37816694378852844, 0.2215227633714676], "prob": [0.0015692212618887424, 0.008265436626970768, 0.008662725798785686, 0.8804419636726379, 0.010459817945957184]}, {"target": [0], "doc": ["i have a similar requirement as @bobdankert   , i need to know if an update be available or not .", "any update / workaround on this issue"], "issue_sim": [0.48079371452331543, 0.2752704620361328], "prob": [0.9253137111663818, 0.025244763121008873]}, {"target": [1], "doc": ["@airblader true , i have add a few sentence about this", "it be relatively easy to make it backwards compatible ."], "issue_sim": [0.008581047877669334, 0.11873559653759003], "prob": [0.0013328141067177057, 0.995582640171051]}, {"target": [2], "doc": ["can you actually show an example of how you 'd make use of this", "i be have a hard time see the use case for this give that cva be mostly use by the form implementation and some library , but not generally \" user code \"", "it sound like you 'd have to manually call this , but for that you would n't need a change in cva anyway , you can just implement that app - side ."], "issue_sim": [0.12186503410339355, 0.21332994103431702, 0.2357393056154251], "prob": [0.007694012951105833, 0.46741583943367004, 0.6321715116500854]}, {"target": [0], "doc": ["i have a wide range of controlvalueaccessor implement , because when i start my project  angular be in beta and there be no library .", "i do n't know how i can implement this app side without a lot of hack", "probably there be a solution but it just not a great one"], "issue_sim": [0.31296759843826294, 0.07888872921466827, 0.10392743349075317], "prob": [0.8842055797576904, 0.06810402870178223, 0.06980904936790466]}, {"target": [2], "doc": ["i 'd be happy to ponder over this if i understand the use case a bit well", "my main question be : who would call getvalue and under which circumstance", "naively i 'd expect that you can just have your own interface <tag> and then provide ng_value_accessor as usual , but wherever you be currently interact with a cva directly you inject they as that interface instead and use a type guard to see if they actually implement the method .", "side note : i wonder if long term all these api should n't be build as async by default"], "issue_sim": [0.004854017868638039, 0.029902439564466476, 0.363984614610672, 0.24883189797401428], "prob": [0.12900756299495697, 0.08665041625499725, 0.3859082758426666, 0.04270258545875549]}, {"target": [0], "doc": ["there be two case when getvalue  should be call in my opinion .. <number> . before a submit when use reactive form to force an update of all control .. <number> . by the form directive like <tag> or <tag> .", "at the moment we have the <tag> option for form", "but imagine you have a complex control like tinymce and you set this value to <tag>", "then the form system do the follow :", "change : cve convert dom to html and send it as value to the directive", "the directive maintain a <tag> which be update", "see here : <url>", "// thousand of change in a few minute of writing", "blur : cve invoke callback", "the directive forward the pendingvalue to the reactive formcontrol", "so we have a lot of conversion from dom to html and we need to maintain the pendingvalue to make it work", "but in our example we should only do it when the control loose the focus", "instead the directive now just call getvalue", "either in the blur callback or in the change callback"], "issue_sim": [0.5201912522315979, 0.11327969282865524, 0.42382097244262695, -0.01924031414091587, 0.5566241145133972, 0.2702891230583191, -0.041723042726516724, 0.15557309985160828, 0.34910258650779724, 0.15203461050987244, 0.381686806678772, 0.14838603138923645, 0.22077886760234833, 0.4389194846153259], "prob": [0.5936977863311768, 0.025610072538256645, 0.09527299553155899, 0.0015901054721325636, 0.03231531009078026, 0.0007957282941788435, 0.0002435659262118861, 0.0012319659581407905, 0.0003704046248458326, 0.0019765417091548443, 0.09282263368368149, 0.0029966451693326235, 0.0010384774068370461, 0.003561516758054495]}, {"target": [1], "doc": ["thank for take the time", "so you be actually propose to change the implementation of how reactive form work and not just extend the api , that be n't clear to i from the initial post .", "indeed i think that 'd require ugly workaround at the moment"], "issue_sim": [-0.030666232109069824, 0.38608598709106445, 0.1545228362083435], "prob": [0.003348170081153512, 0.9645039439201355, 0.01627201959490776]}, {"target": [0], "doc": ["yes , but the code and logic be share and ngmodel have the same problem ."], "issue_sim": [0.10168875753879547], "prob": [0.9998155236244202]}, {"target": [2], "doc": ["@tytskyi i already use my own version within my own code space", "so no immediate need", "but for the sake of dry and not copy the same code into all future project , it would be great to have it come from a single package .", "something like * * @angular / contrib * *   should be good", "contribute by other , bless by @angular team"], "issue_sim": [0.09007848799228668, 0.018274053931236267, 0.028816979378461838, 0.2540203332901001, 0.2051820158958435], "prob": [0.0069290692918002605, 0.02499934285879135, 0.9034855961799622, 0.00467622559517622, 0.0036444631405174732]}, {"target": [1], "doc": ["<tag> could be cool", "generally i would like to not have angular core extend - more feature mean more bug and more maintenance .", "this potentially would postpone release of the core"], "issue_sim": [0.12570831179618835, 0.21154575049877167, 0.04826238751411438], "prob": [0.04439180716872215, 0.9121522307395935, 0.06256505101919174]}, {"target": [0], "doc": ["not really , neither <tag> nor <tag> have any direct postponement power over @angular / core .", "<tag> should not have any either", "it be just an idea as many package & | framework also have the <tag> portion"], "issue_sim": [0.15520018339157104, 0.02896411530673504, -0.02766360528767109], "prob": [0.8359315395355225, 0.004977704491466284, 0.6165923476219177]}, {"target": [0], "doc": ["i mean it will add overhead if implement under <tag> directly .", "i be both hand for <tag>"], "issue_sim": [0.15801307559013367, 0.021693512797355652], "prob": [0.910959005355835, 0.048350319266319275]}, {"target": [1], "doc": ["this would be very nice , i 've yet to find an easy way to implement a global \" warning when pend change \" service", "with something like this i could iterate over active component on the page , and call a specific method on they ask whether they have pend change or not ."], "issue_sim": [0.3526381254196167, 0.5639258027076721], "prob": [0.11220410466194153, 0.8891457915306091]}, {"target": [0], "doc": ["you can get the component instance from <tag>", "i be use angular 5", "1 , not sure what version this become available"], "issue_sim": [0.49282199144363403, 0.1447886973619461, 0.0755624771118164], "prob": [0.23313277959823608, 0.051508981734514236, 0.3311477303504944]}, {"target": [0], "doc": ["there be two hook <tag> and <tag> since version <number> to get an instance of the component .", "< router - outlet ='onactivate ' ='ondeactivate'></router - outlet >"], "issue_sim": [0.4913528263568878, 0.0879962369799614], "prob": [0.971112847328186, 0.01610415428876877]}, {"target": [1], "doc": ["i exactly want to create a global dirty checker solution that work for prompt the user when close the window", "i think i have a solution by use activatedroute.component , but that be the component type ... ;-)"], "issue_sim": [0.4923442304134369, 0.46330446004867554], "prob": [0.01679627038538456, 0.9769219756126404]}, {"target": [0], "doc": ["i think the aim be to make this into a page on anguar.io .", "nee doc and aio team to get together to discuss approach"], "issue_sim": [0.17555110156536102, 0.13645899295806885], "prob": [0.9858646392822266, 0.00027625731308944523]}, {"target": [2], "doc": ["i be try to manage this to work and have the same issue", "i just want to understand how it work , it be not for a real application , but it be bother i", "and , well ... i do n't know if i be use it right way , but it seem to be work fine with canactivate but not with candeactivate .", "so the only way i find to \" make it work \" , be by use this workaround on my candeactivate method :", "candeactivate : observable < boolean | urltree > | promise < boolean | urltree > | boolean | urltree {", "const response = component", "i notice that the nextstate receive the correct url on the first time , so on the second time it should be the same as the urltree i return before"], "issue_sim": [0.1654590219259262, 0.13144859671592712, 0.2530810832977295, 0.20274655520915985, 0.3161662817001343, 0.2955314517021179, 0.3945262134075165], "prob": [0.002630187664180994, 0.01820320636034012, 0.7291954159736633, 0.028949473053216934, 0.0008359178900718689, 0.0022050950210541487, 0.045901279896497726]}, {"target": [5], "doc": ["this seem to make sense to i base on the doc :", "it seem like you 'd still be deactivate the current route in the new navigation", "it may be that the intend use for this would be to first modify the state such that when <tag> run in the new navigation , it return <tag>", "also see somewhat relate discussion", "it be from <number> so some of the statement be slightly outdated , but some still hold true", "\" run guard be a part of a navigation . \" and \" every navigation be independent \""], "issue_sim": [0.13099409639835358, 0.2245650738477707, 0.40747058391571045, -0.03757227957248688, 0.08220920711755753, 0.2160620093345642], "prob": [0.005114807281643152, 0.01050708256661892, 0.9593467116355896, 0.0007504608947783709, 0.0330909825861454, 0.018541395664215088]}, {"target": [1], "doc": ["i do n't think that the documentation clearly state that return a <tag> might retrigger this guard and possibly create an infinite loop", "this usage case of the <tag> guard be like an interceptor .", "you be modify this request / navigation base on certain condition", "if we translate this current behavior to interceptor it would mean that you 'd need to keep state in every interceptor in the stack , since every interception would trigger again the entire interceptor stack and you 'd need to check if you have modify the request already or not"], "issue_sim": [0.5363582372665405, 0.28730809688568115, 0.19947388768196106, 0.5002323389053345], "prob": [0.20109185576438904, 0.14589902758598328, 0.026245111599564552, 0.7164181470870972]}, {"target": [2], "doc": ["@jvquarck can you describe a situation where it make sense to return a <tag> from the <tag> guard and why it do n't make sense to add a check in the guard to verify you be not already navigate to that route", "how do your guard behave if the user be already navigate to the <tag> that you be return", "should n't it be check for that case and return <tag> instead of a <tag> anyways ?"], "issue_sim": [0.583543598651886, 0.4768242835998535, 0.3567751944065094], "prob": [0.020217617973685265, 0.015737611800432205, 0.9234402775764465]}, {"target": [0], "doc": ["the issue be more general : candeactivate guard be call every time when any guard return urltree and navigationcancel+navigationstart event occur"], "issue_sim": [0.5870108604431152], "prob": [0.9999638795852661]}, {"target": [3], "doc": ["this really seem like it be work as intend and document though", "return a <tag> be n't a redirect that continue the previous navigation", "again , the doc state", "a new navigation _ would _ trigger all deactivate guard relate to the previous route as well as the activate guard for the route that get activate by the <tag> .", "i 've file this as a feature request for an option to not trigger some guard in some case because as i understand thing , the current behavior be not a bug"], "issue_sim": [0.056669145822525024, 0.313285768032074, 0.19051766395568848, 0.3741191029548645, 0.41935694217681885], "prob": [0.05085825175046921, 0.1402161568403244, 0.009758848696947098, 0.32462069392204285, 0.2661167085170746]}, {"target": [5], "doc": ["it be just architecture bug", "guard exist not just because they should exist , they resolve some problem", "<tag> often use for permission check , <tag> - to prevent user datum lose", "i be not say it be the only case , but we should n't say _ \" it be ok , because of architecture \"", "_ architecture for development , not ver a versa", "and while you need to check activation guard every time , because you will have different navigation every time , you need only single call of <tag> in any series of navigation : you _ already have confirmation _ from user or developer that you may leave this route ."], "issue_sim": [0.17367012798786163, 0.2081058919429779, 0.19475513696670532, 0.1344131976366043, 0.17577117681503296, 0.35550183057785034], "prob": [9.428746125195175e-05, 0.015685098245739937, 0.007756770122796297, 0.31174638867378235, 0.003957923501729965, 0.7087724208831787]}, {"target": [2], "doc": ["i be try to use the deactivate guard to prompt user save or discard their change on a record", "on save i would let they continue to where they be route , and on discard i would re - route they to a record list view", "have the ability to make candeactivate return a urltree on the surface seem to be exactly what i need , but as report here , this wo n't work .", "which be fine , i can solve this other way", "but now i can help but wonder when would it ever make sense to return a urltree from a deactivate guard", "be this add to candeactivate just because canactivate get it"], "issue_sim": [0.33360785245895386, 0.29815417528152466, 0.19189861416816711, 0.10597928613424301, 0.4487473964691162, 0.20689374208450317], "prob": [0.07414484024047852, 0.36539095640182495, 0.5119613409042358, 0.0017717768205329776, 0.04185923933982849, 0.01047426275908947]}, {"target": [0], "doc": ["angular have throw native shadow dom out anyway , so i do n't feel strongly about keep browser contract : innocent :"], "issue_sim": [0.174554243683815], "prob": [0.9999433755874634]}, {"target": [0], "doc": ["it be not throw away but disable by default .", "on thu , nov <number> , <number> , 9:53 am matan lurey notifications@github"], "issue_sim": [0.03876292333006859, -0.13503170013427734], "prob": [0.8419344425201416, 0.14091551303863525]}, {"target": [0], "doc": ["since i be not sure how frequent this use case be , i be reluctant to mix the di and ng - content concern .", "it can make di a lot more complicated", "what about this way of do it", "this pattern require an extra level of indirection , but keep both di and ng - content simple"], "issue_sim": [0.28570207953453064, 0.055576905608177185, 0.04334196448326111, 0.3127768635749817], "prob": [0.9482600688934326, 0.025581995025277138, 0.003031299915164709, 0.054358553141355515]}, {"target": [0], "doc": ["what if the <tag> component be create before <tag> ?", "i think this be a decent work around / pattern , but could fail if you have the follow logic :"], "issue_sim": [0.36604297161102295, 0.2770645022392273], "prob": [0.7325724363327026, 0.3443824052810669]}, {"target": [0], "doc": ["i believe this kind of interaction can be achieve by use a formgroup with your changeon as the desire ' submit ' , and the individual control can have the changeon as ' blur ' .", "with the note  , you should be able to combine such functionality as you see fit", "for example <number> :", "have an encompass formgroup with updateon set to ' submit '", "the same child formcontrols for text can have the updateon set to ' blur '", "the toggle or whatever be prepende your name can have the updateon set to ' change '", "when the parent formgroup have a child that trigger the updatevalueandvalidity method , it should force it on the formgroup as well", "when the form be submit , it 'll trigger that method from the formgroup 's updateon ' submit ' value", "i know  be n't exactly what you be ask for , but i think via the change cycle and subscription it show how you can achieve what you be ask for part <number>", "when change the name , it do not update anything", "when navigate off the field , it update", "when change the prepend , it update", "when submit , it update", "for example two , the formgroup have updateon as ' submit ' will solve this issue ( while still have the formcontrols updateon as ' blur '", "do this help with the issue you be have"], "issue_sim": [0.36312681436538696, 0.057682231068611145, 0.0617886483669281, 0.40392786264419556, 0.31363123655319214, 0.2902179956436157, 0.3653159737586975, 0.4498937726020813, 0.17032791674137115, 0.2377198338508606, 0.14608916640281677, 0.2014845460653305, 0.20101463794708252, 0.45215904712677, 0.04266280308365822], "prob": [0.3088672161102295, 0.018257251009345055, 0.002039664890617132, 0.008803361095488071, 0.007522341329604387, 0.01145313773304224, 0.10465095937252045, 0.010126922279596329, 0.30300506949424744, 3.033095708815381e-05, 6.323509296635166e-05, 6.79513905197382e-05, 5.992133810650557e-05, 0.3402900993824005, 7.657068636035547e-05]}, {"target": [4], "doc": ["@chrisdahmcs i do n't know we could set updateon on the form group itself", "it certainly do make sense to", "however , i be not sure it will be able to fix the issue though , since the default value for \" updateon \" seem to be", "' default ' , wich appear to update whenever there be any change in the \" scope \"", "base on this observation , i expect the validation of the formgroup to only check the validity status of its child formcontrols , without force they to actually rerun the validator .", "anyway , i 'll give it a try when i be give the opportunity , sadly i be just assign to another project so i guess it 'll have to wait a bit long"], "issue_sim": [0.3294820189476013, -0.015058641321957111, 0.2048831433057785, 0.21169112622737885, 0.45179885625839233, 0.1113005131483078], "prob": [0.008882446214556694, 0.006240157410502434, 0.30586323142051697, 0.02377389743924141, 0.7190989255905151, 0.22724339365959167]}, {"target": [1], "doc": ["can we have feature like", "<tag> to manual update value match with .html file . when i use update on <tag> ?", "i just use enter key on the form and it trigger submit but not update value", "that so confuse for i", "i try <tag> but it seem not update from <tag> to <tag>"], "issue_sim": [0.11488877981901169, 0.3130713701248169, 0.5540999174118042, -0.07246725261211395, 0.22337114810943604], "prob": [0.016094865277409554, 0.7669819593429565, 0.06355619430541992, 0.010876539163291454, 0.4336567521095276]}, {"target": [7], "doc": ["i just make a proposal which address this issue over in # <number>", "i 'd be very interested in any feedback you might have", "specifically , it allow a service to add / remove error from a control", "because error be key to the service which add they , one service can not overwrite another 's error", "for example , this hypothetical service check the <tag> to see if the enter username already exist or not", "it use debounce time to ensure that check be n't make too frequently", "more broadly , this allow you to programmatically add error to a control however you see fit , either synchronously or asynchronously", "it would allow you to create a custom \" validation \" interval ."], "issue_sim": [0.15181179344654083, 0.03459438309073448, 0.3101452589035034, 0.22186416387557983, 0.2920404374599457, 0.1403639018535614, 0.22940734028816223, 0.390217125415802], "prob": [0.010207516141235828, 0.021611999720335007, 0.00641205720603466, 0.10778402537107468, 0.31105172634124756, 0.011267460882663727, 0.10447904467582703, 0.03826963156461716]}, {"target": [0], "doc": ["a quick and dirty fix use directive :"], "issue_sim": [0.27343612909317017], "prob": [0.9994571805000305]}, {"target": [0], "doc": ["i think it make sense to emit a boolean when the state of <tag> change to future - proof this feature a bit .", "we can bikeshe the name of the event in the public api review stage of the pr :)"], "issue_sim": [0.36978644132614136, 0.02687130868434906], "prob": [0.7907447218894958, 0.28615817427635193]}, {"target": [0], "doc": ["the idea behind emit only when become true be ?if you loop over link with ngfor and listen to this output on all of they , they would all emit when change .", "this would probably be suboptimal in term of performance"], "issue_sim": [0.342157244682312, 0.06177366152405739], "prob": [0.9262331128120422, 0.03668441250920296]}, {"target": [1], "doc": ["@waterplea i be think only emit when the change be from <tag> and vice versa", "this should n't happen that frequently for any given link , right ?"], "issue_sim": [0.23512884974479675, 0.10979437828063965], "prob": [0.26082462072372437, 0.8408397436141968]}, {"target": [0], "doc": ["right , stupid i , it would only emit two time on routing , previous one will emit false and new one will emit true .", "do n't know why i think different )"], "issue_sim": [0.4200504422187805, 0.03429042547941208], "prob": [0.9059963226318359, 0.016235103830695152]}, {"target": [0], "doc": ["basically i be look for a feature / way to export component build with angular like say button / list / form ect as stand alone standard web components so that they can be use in other project that do not use angular without initialize the entire angular application .", "of course assume i be still use that component api externally", "a way to pull in and re - use the angular component  in plain javascript or in application with other library / framework", "if each angular component be default be export as a web component they could be re - use in non - angular project"], "issue_sim": [0.7974519729614258, 0.40935391187667847, 0.6271355152130127, 0.7656353712081909], "prob": [0.8802072405815125, 6.418859265977517e-05, 0.06345123052597046, 0.0061284685507416725]}, {"target": [6], "doc": ["angular element work just fine for your use case", "the only change that need to be make be to actually use the customelements", "define for each component that you want to export", "this be assume that the component be export from an angular app instead of an angular library project", "in that case , you can resort to a hack - ish method and build an angular app that expose one component for each angular library component that you have", "basically you would wrap those library components and export they yourself", "the downside be that you would basically need an instance of the angular runtime in every app where you plan to use those component .", "maybe add some sort of support for angular elements in an angular library project be a feature worth consider"], "issue_sim": [0.6482522487640381, 0.1778291016817093, 0.34718865156173706, 0.7512421011924744, 0.6968165636062622, 0.32041680812835693, 0.6408882141113281, 0.6989359259605408], "prob": [0.008463433012366295, 0.06323998421430588, 0.021215973421931267, 0.05646407976746559, 0.39829757809638977, 0.007429237477481365, 0.15027762949466705, 0.015145417302846909]}, {"target": [7], "doc": ["thank for a good answer to my question that be cause as i get a task re - use angular  component from a huge project  that i can not change and encounter real challenge export it 's component", "the component would then be use in another large project that be base around standard web components", "the problem i be have might also be relate to how that specific project be build with dependency injection and so on", "when i try export component from a clean angular project everything work fine  , but with a project create without export in mind it might maybe simply be hard depend on how all the component have various dependency and so on", "thank for the hint about create an application and have that as an extra runtime on the side , as long as it be one extra runtime and not one per instance or similar it will probably be fine", "i think that run it on the side be what i try , but i 'll dig into workaround for that a bit more", "still i would suggest use standard web component be default once an angular project be transpile down to plain javascript would probably make this so much easy , as angular create custom tag name anyway it look on the surface that this would not be to far away at all", "it would make angular component so much more accessible for other project as well as prevent the need for large re - write in case break change to api where to be need .", "all above say , i be not an angular expert , i only know the basic , as i mainly work in other setup and preferably as close to the browser api as possible", "i 'll leave the issue open , but feel free to close in case my description be not clear / concise enough", "i can also try to provide  detail about the setup of the project in case it would be useful for improve the compatibility between the web components and @angular / element"], "issue_sim": [0.5977498292922974, 0.46514901518821716, 0.304274320602417, 0.6795953512191772, 0.24574708938598633, 0.09648971259593964, 0.742394208908081, 0.6244093179702759, 0.4752289354801178, 0.054694801568984985, 0.5810971260070801], "prob": [0.13461144268512726, 0.01734950952231884, 0.02031799592077732, 0.26936179399490356, 0.11695494502782822, 0.004947630222886801, 0.16190268099308014, 0.018955064937472343, 0.1628779023885727, 0.0022308023180812597, 0.04308949410915375]}, {"target": [1], "doc": ["* * @tirithen * *", "you should consider that there be some amount of angular runtime environment  that have to be also load , so it have the logical consequence to have such a bundle only one and sharable  for a set of some component  .", "another factor be the ability to lazy - load of those component on demand and not all of they together and eagerly"], "issue_sim": [-0.026162125170230865, 0.5459463596343994, 0.18389829993247986], "prob": [0.0015985211357474327, 0.8682888746261597, 0.35070350766181946]}, {"target": [6], "doc": ["@mlc - mlapis thank , it be fine to have some extra runtime as long as they do n't slow down to much", "hopefully the angular project would be run as it be own close environment  and", "i think i need to dig into the specific project a bit more before say to much about the specific setup as it be a week since i last try", "the thing i remember be that it would not compile when i try to add new entrycomponent  due to how the project build system be setup", "it work perfectly in a new clean project to do that and then in app module constructor use createcustomelement with customelements", "define , but it seem to not be as straight forward to do this in a project that do not have export in mind when create", "this be why i suggest to change angular in a way so that there be always  possible to export component regardless dependency on other angular service / import / event or other binding .", "there be some more experiment i 'll try , like for example create one additional component to each component that i want to export , to see if that allow the export , but as it would possibly mess up the related css and add even more layer to an already complex setup , so that might be a less attractive option", "if it be possible to just export the component as be , same as in a clean project with @angular / element that would keep complexity down but as i understand from the developer of this specific angular project that would severely limit the angular feature that they depend on", "ah , this be no good without concrete case example i guess , i 'll get back with one the next time i be work on that project"], "issue_sim": [0.17159190773963928, 0.49026820063591003, 0.16405171155929565, 0.3098629117012024, 0.35968300700187683, 0.3296501338481903, 0.7294546961784363, 0.4640732407569885, 0.788703203201294, 0.10542280226945877], "prob": [0.005502564832568169, 0.008863723836839199, 0.057527847588062286, 0.07790251076221466, 0.02527952380478382, 0.025455405935645103, 0.03818526118993759, 0.07890661060810089, 0.05882440507411957, 0.02565927430987358]}, {"target": [0], "doc": ["@tirithen - it really be on a case by case basis here , and from my personal experience with use angular 's web component integration , thing run pretty smooth - ish", "there be some thing to consider , for example , routing , rxjs and other be like that , but by use the middleware angular project that i suggest might come in handy when export one component to also be able to bundle all the require dependency , especially if there be some sort of lazy load involve in the original project .", "when use web component with angular , there be one more thing that really boggle the mind and that be the webpack export module which cause a lot of issue when work with multiple \" angular project \" in the same context", "have in mind that you might need ngx - build - plus to overwrite the output", "jsonpfunction to a proper unique name", "but without know more info about your particular case , it be hard to help out , so i be just put thing out there that i have come across while do roughly the same thing :)"], "issue_sim": [0.5639933943748474, 0.6727428436279297, 0.7373976707458496, 0.19306300580501556, 0.05294039472937584, 0.09386778622865677], "prob": [0.3413495123386383, 0.25452566146850586, 0.018200872465968132, 0.006441653240472078, 0.002211780985817313, 0.4826200306415558]}, {"target": [2], "doc": ["i have similar relate problem as your", "fyi , i have explore  , and", "i be pleased to have a work poc with the late reactjs and angular <number> component within an angular app shell with angular extension elements", "the different web component be able to interface with each other and for the angular component , only a minor configuration change and code change at app.module.ts .", "so the app shell will need to house the common library use by reactjs and angular component , so that the web component can be lean to be lazy loaded", "this help i in my micro - frontends application design", "hope it work for you"], "issue_sim": [-0.06910181045532227, -0.005792491137981415, 0.7527766823768616, 0.6604347825050354, 0.636278510093689, 0.1911146640777588, 0.044866882264614105], "prob": [0.048263050615787506, 0.04291889816522598, 0.5088212490081787, 0.5396414995193481, 0.41479095816612244, 0.007271028123795986, 0.002606611233204603]}, {"target": [1], "doc": ["and move it into the <tag> tag would also break it", "i be not sure if it would even work if angular do n't manipulate <tag> , but i also would like to be able to use polymer dom module .", "i be pretty sure it ca n't work when <tag> be involve , because angular and polymer use different emulation", "i guess it would require <tag> and for polymer full shadow dom be enable"], "issue_sim": [0.179404616355896, 0.528096079826355, 0.43816226720809937, 0.45619285106658936], "prob": [0.17783308029174805, 0.5617973804473877, 0.23492568731307983, 0.05121443793177605]}, {"target": [1], "doc": ["i think i 've make that : <url>", "the thing be , if you 'll inspect with dev - tool preview window , you can see a <tag> tag without any attribute ."], "issue_sim": [-0.021509487181901932, 0.2904045879840851], "prob": [0.0016267746686935425, 0.9958428740501404]}, {"target": [0], "doc": ["as i can see all attrs be omit  .", "if this issue be still important , i can try to fix it"], "issue_sim": [0.05266476422548294, 0.2174307405948639], "prob": [0.46449774503707886, 0.23630252480506897]}, {"target": [1], "doc": ["the current update notification workflow be indeed less than ideal", "fwiw , you can have a little more control by call  explicitly  .", "while <tag> do not report whether an update be find or not  it allow you to know when a check happen", "then by subscribe to <tag> you can know whether a new version have be detect", "if a new version be detect , it will be download and emit on <tag> before the promise return by <tag> resolve", "so , that could be use to emulate your \" a new version finish download \" event", "if the promise return by <tag> resolve without a value be emit on <tag> , this can mean two thing :", "there be no update available", "there be an error while check or download the update", "there be no straight - forward way to distinguish the two , but if an error occur the sw would have enter a degraded mode", "so , you can determine what happen by request <tag> parse it manually for the sw state with somthe like :", "you can read more about the available debug option", "i be go to leave it open as a feature request , but it be not a high priority", "if anyone want to take it on , i would be happy to help / review"], "issue_sim": [0.30988720059394836, 0.2589927315711975, 0.32867705821990967, 0.37464720010757446, 0.5456599593162537, 0.3096386194229126, 0.2983260154724121, 0.08060040324926376, 0.17370697855949402, 0.19337591528892517, 0.39470577239990234, 0.042750097811222076, 0.22085098922252655, 0.12311480194330215], "prob": [0.012069741263985634, 0.04013364017009735, 0.04880528897047043, 0.04655662924051285, 0.014732340350747108, 0.0014301500050351024, 0.05338529124855995, 4.507086850935593e-05, 0.0002254649589303881, 0.022931883111596107, 0.009188680909574032, 0.00021895102690905333, 0.004093271680176258, 0.0005005283164791763]}, {"target": [11], "doc": ["i be ask to post my idea here :)", "this feature request be for @angular / service - worker", "the current api be not very user - friendly", "* * so far , in order to check for update , i have to do the follow :* *", "- call checkforupdate  every n minute", "when it return , * * i do n't know if the check be successful and if there be an update * *", "- i have to subscribe to swupdate", "available  , and i can act accordingly , for example prompt the user", "available  * * seem to fire only once * * , i need to save  that an updateavailableevent be available  seem to be fire twice in a row from time to time , i have not be able to reproduce it consistently", "activateupdate  also do not give my anything useful in return", "- finally , i be have problem update my service worker on an android tablet where my pwa have be \" instal \" , whereas it work when run in a browser", "how i would like the api to be :* *. - checkforupdate  return observable < updateavailableevent > if there be an update , or undefined if not . and an error if the check fail. - activateupdate  return observable < boolean > with true if it be successful , or false if not", "do this make sense"], "issue_sim": [0.034713536500930786, 0.3836711049079895, 0.21023878455162048, 0.2048703134059906, 0.00882556103169918, 0.28781312704086304, 0.088985376060009, 0.11441176384687424, 0.24495287239551544, 0.05125965178012848, 0.3807821571826935, 0.42809978127479553, -0.03811146318912506], "prob": [0.002715770388022065, 0.0061377957463264465, 0.0009078563307411969, 0.0032581023406237364, 0.0013851430267095566, 0.004962218925356865, 0.00046023036702536047, 0.0007259014528244734, 0.20188143849372864, 0.0003334820503368974, 0.09097310155630112, 0.006008231081068516, 5.009974120184779e-05]}, {"target": [7], "doc": ["sorry for my long response time", "here be my suggestion for the api modification :", "i would add a new field to ngupdate :", "this should meet the <tag> and <tag> event", "at least for i it look there be no need to differentiate as download start immediately after the potential update be detect", "same be for <tag> which be basically the same as <tag>", "* * regard @theparad0x   comment :* *", "i guess stick to promise be fine here as observables would require a call to <tag> .", "but i can agree on add a meaningful return value", "i would prefer a signature like this :", "throw an error in case of failure would force application to catch it which would be definitely a break change", "and for <tag> it could look like this : <tag>", "tbh i be not sure if return the event be the good way here", "if an error be throw in case of failure , return a <tag> value would be possible as well"], "issue_sim": [0.0108928382396698, 0.1637275516986847, 0.16066908836364746, 0.1333257108926773, 0.3492662310600281, 0.19343510270118713, -0.08722741156816483, 0.33253902196884155, 0.11207516491413116, 0.027745148167014122, 0.2939804494380951, 0.0745672658085823, 0.19727012515068054, 0.20542606711387634], "prob": [0.028297344222664833, 0.04195600748062134, 0.02247903309762478, 0.0025956686586141586, 0.29269999265670776, 0.006542407441884279, 0.0004539230722002685, 0.15456010401248932, 0.00019592967873904854, 8.197550050681457e-05, 0.0029396484605968, 0.0021267312113195658, 0.0055322349071502686, 0.0814562737941742]}, {"target": [3], "doc": ["thx for put this together , @spike - rabbit", "i take some time to  think about the api today , so here be my thought", "first of all , as a point of reference , here be what the <tag> public api look like today :", "try to stay as backwards compatible as possible , i might propose the follow change to the <tag> public api  .", "these be similar to your suggestion , @spike - rabbit , just a little more concrete", "- keep <tag> and <tag> as be", "- update <tag> to return a promise resolve to <tag>/<tag> on successful completion  or not ) and reject on failure", "resolve to <tag> mean an update be find and download and be ready to use , resolve to <tag> mean no update be find and reject mean an error happen while either check for an update or download it", "- update <tag> to return a promise resolve to <tag>/<tag> on successful completion  ) and reject on failure", "- introduce a new <tag> observable  that emit the follow type of event :", "- consider deprecating  the <tag> observable , since it could now be construct from <tag>", "- consider deprecating  the <tag> observable , since  it only really emit in response to call <tag>", "with that , the <tag> public api surface would look like :", "wdyt , @spike - rabbit , @marcinowski , other"], "issue_sim": [-0.07469351589679718, 0.06712762266397476, 0.18009290099143982, 0.34320688247680664, -0.02448875457048416, 0.04301861301064491, 0.295829713344574, 0.3454272747039795, 0.2705780863761902, 0.3670755624771118, 0.3950675129890442, 0.3622521162033081, 0.11049288511276245, 0.0004088273271918297], "prob": [3.24523466588289e-06, 0.0003587106184568256, 0.0035877933260053396, 0.05823097378015518, 1.5399073163280264e-05, 5.729639087803662e-05, 0.000639963720459491, 0.025546349585056305, 0.00011301066115265712, 2.5297860702266917e-05, 0.0013644725549966097, 0.002293640049174428, 0.00015147561498451978, 8.776803497312358e-07]}, {"target": [2], "doc": ["@zoechi , you say that the problem describe in this feature request be too complicated", "i be not much good to know angular <number> to make pr to correct this problem , but i think it be not difficult to fix", "do you believe that the removal of all html - unsafe attribute , without validate they , it be normal practice ?"], "issue_sim": [0.17244194447994232, 0.34042859077453613, 0.5905431509017944], "prob": [0.02256765030324459, 0.6279792785644531, 0.4359563887119293]}, {"target": [1], "doc": ["actually , i do n't want to say anything about that ;-)", "i just want to mention that there might be way to work around , independent of how the angular team will proceed with this issue ."], "issue_sim": [0.029587622731924057, 0.45473238825798035], "prob": [0.45804423093795776, 0.8200960159301758]}, {"target": [0], "doc": ["my problem occur when i try to implement translation from large block markdown to html , and result to insert into <tag> .", "i do not see how i can get around this problem", "if you do a prompt , i will be grateful"], "issue_sim": [0.30055004358291626, 0.04930313304066658, 0.04395957291126251], "prob": [0.9465071558952332, 0.01807321421802044, 0.047543004155159]}, {"target": [2], "doc": ["@igorminar , yes i can , - just for the clarity of the experiment", "if there substitute any value , nothing will change - i d will be delete", "\" not check any validation \" - <tag> remove without the presence of malicious code"], "issue_sim": [0.06099129468202591, 0.18038597702980042, 0.48477914929389954], "prob": [0.08700892329216003, 0.18372072279453278, 0.4193795323371887]}, {"target": [2], "doc": ["@t1bb4r , thank you", "that <tag> - it be your own pipe", "i want it do through <tag> , but without delete attribute <tag> , <tag> ."], "issue_sim": [0.04449033364653587, 0.04737740755081177, 0.41981014609336853], "prob": [0.004590021446347237, 0.09689949452877045, 0.9826138615608215]}]}
