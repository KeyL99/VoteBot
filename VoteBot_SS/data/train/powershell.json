{"dataset": [{"target": [51], "doc": ["here be the parameterbinding trace from each scenario :", "<tag> <tag>1 ] to parameter", "debug : parameterbinding information : <number> :          execute data generation metadata :", "debug : parameterbinding information : <number> :              result return from datum generation : system", "debug : parameterbinding information : <number> :          coerce arg to  ]", "debug : parameterbinding information : <number> :              parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :          bind arg  ] to param  successful", "debug : parameterbinding information : <number> : mandatory parameter check on cmdlet", "debug : parameterbinding information : <number> : call beginprocessing", "debug : parameterbinding information : <number> : call endprocessing", "debug : parameterbinding information : <number> : bind name cmd line args", "debug : parameterbinding information : <number> : bind positional cmd line args", "debug : parameterbinding information : <number> :      bind arg  to parameter", "debug : parameterbinding information : <number> :          bind arg  to param  successful", "debug : parameterbinding information : <number> : bind remainingarguments cmd line args to param :", "debug : parameterbinding information : <number> :      bind arg  to system", "debug : parameterbinding information : <number> :              encoding arg into collection", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  be ilist", "debug : parameterbinding information : <number> :              coerce collection element from type object  to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  try to convert argument value from system", "debug : parameterbinding information : <number> :                  error : error : coerce fail : arg  ] could not be convert to the parameter type", "debug : parameterbinding information : <number> :      bind arg  ] to parameter", "debug : parameterbinding information : <number> :          coerce arg to  ]", "debug : parameterbinding information : <number> :              try to convert argument value from system", "debug : parameterbinding information : <number> :              encoding arg into collection", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  ] , parameter type  ] , collection type array , element type  ,", "debug : parameterbinding information : <number> :              arg be ilist with <number> element", "debug : parameterbinding information : <number> :              create array with element type  and <number> element", "debug : parameterbinding information : <number> :              argument type system", "debug : parameterbinding information : <number> :              coerce collection element from type string to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :              add element of type string to array position <number>", "debug : parameterbinding information : <number> :              coerce collection element from type string to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :              add element of type string to array position <number>", "debug : parameterbinding information : <number> :          bind arg  ] to param  successful", "debug : parameterbinding information : <number> : mandatory parameter check on cmdlet", "debug : parameterbinding information : <number> : call beginprocessing", "debug : parameterbinding information : <number> : call endprocessing", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  be ilist", "debug : parameterbinding information : <number> :              coerce collection element from type object  to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  try to convert argument value from system", "debug : parameterbinding information : <number> :                  error : error : coerce fail : arg  ] could not be convert to the parameter type", "if i be understand this correctly , it look like the binder be receive a <number> - element list < object > , and the element happen to be a <number> - element object  in this case", "it try  to convert the list < object > directly to a string  , but fail because the inner array  could n't be directly convert to a string", "when we be do a function 's binding , the argumenttypeconverterattribute get involve , and it have no problem \" cast \" anything to a string", "in this case , the string representation of the array @ be the string ' aa bb '", "in both case , the array we actually pass as an argument to the command be wrap in a single - element list < object > , and the binder try to do conversion on that list _ first _ , instead of act directly on the value that be pass to the command .", "it be just that the argumenttypeconverterattribute be successfully able to convert the list , and the code path that be take for the cmdlet 's bind be not , so it fall through to convert the list 's element instead"], "issue_sim": [0.08467721939086914, 0.2870635688304901, 0.03742142766714096, 0.049040719866752625, 0.19535328447818756, 0.32884863018989563, 0.3484804034233093, 0.44130393862724304, 0.1032724678516388, 0.03235010430216789, 0.36999428272247314, 0.39780277013778687, 0.3419581651687622, 0.3484804034233093, 0.44851407408714294, 0.23349545896053314, 0.18292558193206787, 0.3569004535675049, 0.2724319100379944, 0.19535328447818756, 0.31500348448753357, 0.3331218659877777, 0.3419581651687622, 0.19535328447818756, 0.31500348448753357, 0.18292558193206787, 0.35797807574272156, 0.29262739419937134, 0.27101585268974304, 0.22798539698123932, 0.28546828031539917, 0.19535328447818756, 0.32884863018989563, 0.3322846591472626, 0.28546828031539917, 0.19535328447818756, 0.32884863018989563, 0.3322846591472626, 0.3484804034233093, 0.44130393862724304, 0.1032724678516388, 0.03235010430216789, 0.3569004535675049, 0.2724319100379944, 0.19535328447818756, 0.31500348448753357, 0.3331218659877777, 0.22685623168945312, 0.43771809339523315, 0.3249392509460449, 0.300004243850708, 0.5990520715713501, 0.4547184109687805], "prob": [0.000538941822014749, 0.0023880405351519585, 0.15638478100299835, 0.008921741507947445, 0.02508900873363018, 0.007453921716660261, 0.005479179322719574, 0.00510843051597476, 0.0011621176963672042, 0.0013287002220749855, 0.0020137738902121782, 0.002317636040970683, 0.00802560430020094, 0.0020798337645828724, 0.01113168615847826, 0.0029185949824750423, 0.0018673597369343042, 0.004252750892192125, 0.006043629255145788, 0.0034089696127921343, 0.008047129958868027, 0.015026282519102097, 0.007555993273854256, 0.00732858432456851, 0.006577617488801479, 0.001479455386288464, 0.027084773406386375, 0.0016973917372524738, 0.00278440210968256, 0.0011506682494655252, 0.008453508839011192, 0.0031325777526944876, 0.00555049255490303, 0.0023324142675846815, 0.007519617211073637, 0.0031097345054149628, 0.005458252038806677, 0.002339639002457261, 0.0043091196566820145, 0.003972594626247883, 0.0008016948122531176, 0.0006736046052537858, 0.0019505515228956938, 0.00229361723177135, 0.001335014938376844, 0.0069839321076869965, 0.02934793010354042, 0.39213690161705017, 0.0026814634911715984, 0.5177688002586365, 0.0005440154927782714, 0.15474700927734375, 0.3525730073451996]}, {"target": [1], "doc": ["i have n't step through the code yet , but it seem logical that this list < object > be what be be build up any time a valuefromremainingargument parameter be in play", "that would be logical , and i would expect it to be a <number> - element list that contain string if we have pass the value as separate argument instead of a single array .", "if that be what be happen , then what seem to be miss be some logic to check , when valuefromremainingargument be in play , whether the list contain only a single element", "if so , perhaps the list should be unwrapped before the parameter binder start try to do type conversion"], "issue_sim": [0.36928799748420715, 0.49674391746520996, 0.15543867647647858, 0.27566832304000854], "prob": [0.36604875326156616, 0.5239763259887695, 0.09161242842674255, 0.0029200061690062284]}, {"target": [4], "doc": ["be this not down to how the string array be be pass in", "would \" aa\",\"bb \"   work any well", "i only ask as something similar happen to i in powershell data file in dsc", "if i comma separate node , they end up as an array in the first element of an object array", "when i remove the comma , i get an array as expect without be put into a containing array . -- > ok so ' similar ' be a very loose term", "either way , it be a good bit of investigation and work", "perhaps i should stop be lazy and do similar"], "issue_sim": [0.30453038215637207, 0.04054935276508331, 0.49383288621902466, 0.33778393268585205, 0.42561137676239014, 0.0018751639872789383, 0.12073144316673279], "prob": [0.2388964742422104, 0.022326383739709854, 0.009933984838426113, 0.043147824704647064, 0.9524252414703369, 0.0033958503045141697, 0.0060150399804115295]}, {"target": [1], "doc": ["@jpsnover : in that example , you be sidestep the problem by pass in three argument to the $ extra parameter", "the code path that be cause a problem be when you just pass the parameter an array without use the \" additional argument \" syntax sugar ."], "issue_sim": [0.5057429671287537, 0.48869287967681885], "prob": [0.024676352739334106, 0.9874067902565002]}, {"target": [2], "doc": ["the current parameter binder be work as i expect too .", "you can get the desire output by use splatte :", "that say , it might be nice to have a convenient syntax for splatte unnamed / positional argument that take an array like :", "but to make it really convenient it should work on an array literal e", "not exactly sure what the syntax should be since today this do n't work with hashtable literal either"], "issue_sim": [0.27493903040885925, 0.21367347240447998, 0.4183482527732849, 0.3106808662414551, 0.3825809955596924], "prob": [0.8310413360595703, 0.023320019245147705, 0.7893993854522705, 0.0018667789408937097, 0.0011470330646261573]}, {"target": [4], "doc": ["i do n't see how this can be expect behavior", "go back to the original example , give the function a name this time :", "both of those call _ should _ have identical value for the <tag> variable inside the function", "<tag> be the last positional parameter define , and have the <tag> attribute", "i can either pass it the whole array in one go  , or i can use the syntax that be enable by <tag> instead .", "but they be not identical , because of the bug that be demonstrate here", "if you look at the discussion for the pr to fix it , there be even more weird scenario involve cmdlet like write - output"], "issue_sim": [0.21817442774772644, 0.1316344290971756, 0.3505004346370697, 0.4263804256916046, 0.3715367317199707, 0.023097233846783638, 0.40853190422058105], "prob": [0.02907489612698555, 0.013378842733800411, 0.4354025721549988, 0.025012828409671783, 0.37280821800231934, 0.0015108929947018623, 0.14860649406909943]}, {"target": [6], "doc": ["let 's start with the case where there be no <tag> :", "that result in :", "that be your initial expect output", "but this do n't accept extra args : <tag>", "so you add in <tag> to handle that case and voila , that case work :", "unfortunately the original array case behavior have change", "i can see how that appear to be buggy and i guess it come down to what the semantic be for <tag> .", "i think the semantic change pretty significantly for a parameter decorate with valuefromremainingargument", "obviously , for such a parameter , ps aggregate all remain / unbound argument into a single argument value  to supply to the parameter", "that appear to work as you 'd expect for multiple space separate args", "but for array the behavior be perhaps not expect", "however , i think for the follow case it be work as expect :", "i be not sure what else powershell could do here but treat the first array as a \" single \" argument in this case", "but what to do about the case where you have a single argument that be an array", "should powershell be clever and if the first  argument be an array , assign it as sort of the splatted value of the parameter instead of treat it as a single value in the array or remain args", "i do n't know", "but i can see a case be make that if the user want those as mulitple args they would have specify they as multiple args", "not try to be snarky but really just wonder if there could be a case where the user really want the first  argument to be treat as a single argument  and this cleverness take away that ability"], "issue_sim": [-0.09340249747037888, 0.02205943688750267, 0.13024787604808807, 0.34468328952789307, 0.052820514887571335, 0.2556757926940918, 0.0062608784064650536, 0.25897151231765747, 0.47597095370292664, 0.3761061429977417, 0.2435206025838852, 0.09243625402450562, 0.6741495132446289, 0.2705550193786621, 0.6934880018234253, -0.02497934177517891, 0.3423565626144409, 0.29007959365844727], "prob": [0.00746798375621438, 0.005384398624300957, 0.0033823829144239426, 0.0025417909491807222, 0.011983473785221577, 0.0012347237206995487, 0.183977872133255, 0.01127753034234047, 0.10934939980506897, 0.00042122541344724596, 0.00038713988033123314, 0.001165093737654388, 0.03046545386314392, 0.0004864977963734418, 0.30702483654022217, 0.00026665552286431193, 0.20537829399108887, 0.09011013060808182]}, {"target": [0], "doc": ["i agree with @rkeithhill   the current parameter binder for valuefromremainingargument be work as expect - its by design and no fix need ."], "issue_sim": [0.309540331363678], "prob": [0.999812662601471]}, {"target": [1], "doc": ["no , it be not , and that be where the confusion lie", "if you pass <tag> to a parameter that be define as an array type , then the parameter will be an array with <number> element , _ not _ an array contain one element which happen to be another array .", "the good example i can give for this be the -argumentlist parameter of new - object", "it be an <tag> type , because new - object ca n't know ahead of time what type of argument the object 's constructor might expect", "most of the time , this be n't a problem , _ except _ when the constructor expect a single argument that be itself an array", "for example , the <tag> class let you pass in an array of byte :", "if you want to pass in the <number> - element array as a single argument to a constructor , you use the lead unary comma :", "that be how it have always work for any parameter that do _ not _ include the buggy valuefromremainingargument attribute"], "issue_sim": [-0.05669175460934639, 0.5516056418418884, 0.2806970477104187, 0.2467723935842514, 0.28720834851264954, 0.305618017911911, 0.46934160590171814, 0.35261255502700806], "prob": [0.004697884898632765, 0.257699191570282, 0.012793831527233124, 0.09014943242073059, 0.04896035045385361, 0.0009720055968500674, 0.0530753992497921, 0.005188072565943003]}, {"target": [8], "doc": ["i be very late to this party , but let i offer the follow perspective :", "i think everyone agree that it be important that both cmdlet and advanced function exhibit the same behavior .", "* i think that it be the _ advanced function _ ' current behavior that should be standardize", "the <tag> attribute be an _ anomaly _ in the realm of powershell parameter parse :", "as the _ plural _ in the name suggest , it _ implicitly _ pertain to _ multiple _ argument at once - unlike any other parameter", "therefore , the follow dichotomy make sense to i :", "* if you opt into _ regular _   powershell parse - by way of use an _ explicit parameter name _ on invocation , you _ must _ use an _ array _ to bind all remaining  argument", "* otherwise , _ by omission of the parameter name _ , you _ implicitly opt into the anomaly _ , which mean that _ multiple , separate _ argument _ implicitly _ bind to such a parameter as collection element - whether these individual argument happen to be array themselves or not", "* remember that an important use of <tag> be to enable script that be call from _ outside _ of powershell  to receive _ array _ - which can not be do any other way and _ require _ that the parameter name be _ omit _", "in other word , the follow equivalence make sense to i :", "* pass multiple argument :", "* pass an array as a single argument :"], "issue_sim": [-0.007834412157535553, 0.4581449627876282, 0.32190555334091187, 0.4640851616859436, 0.3634302318096161, 0.06593186408281326, 0.6730338335037231, 0.4385737180709839, 0.5547528266906738, 0.05734006315469742, 0.3889371156692505, 0.49668124318122864], "prob": [0.13698290288448334, 0.1555921584367752, 0.038218241184949875, 0.005151692777872086, 0.28249800205230713, 0.022032352164387703, 0.07276380062103271, 0.26825475692749023, 0.26049235463142395, 0.003321619937196374, 0.0012201577192172408, 0.004147551488131285]}, {"target": [0], "doc": ["i imagine it could be annoying to have some progress truncate with ellipsis , especially if you then increase the width of the window and it still clip to <number> char .", "should the scriptwriter be able to affect the single / multiline render decision , or be it completely up to the invoker", "it make more sense to have progress at the bottom as it do n't always work great with a flow of output constantly overwrite it when it be at the top", "well make it consistent between platform", "there be case when both may be valid", "limit by default , but allow it to change", "the thing that annoy i the most with the progress implementation be the inability to express a new \" task \" , where other task that render progress become child", "say that you want to do something like the follow :", "then all progress will end up as sibling when it be clearly a parent / child relationship", "so i would like a way to specify the start of a new \" task \""], "issue_sim": [0.4796985983848572, 0.39307528734207153, 0.42894667387008667, 0.15168991684913635, 0.0031266696751117706, 0.21431054174900055, 0.43632543087005615, 0.04346930980682373, 0.12188249081373215, 0.11723228543996811], "prob": [0.30016037821769714, 0.19220349192619324, 0.4962950348854065, 0.001312627806328237, 0.0011662142351269722, 0.0015320208622142673, 0.45404988527297974, 0.0012748162262141705, 0.006016706116497517, 0.0072227586060762405]}, {"target": [3], "doc": ["i have no objection to have the same behavior on all platform", "my only concern be that it would be well to make such change in a version before lts", "and we need to review windows powershell module before accept the change", "we need to keep current behavior otherwise we _ break _ a design of many script .", "i think we need to have separate issue to discuss redesign the area , i expect it will large discussion because", "there be many contradiction between developer and consumer , between use in script and cmdlet , and so on", "i agree to limit width to <number> char - it be enough to have ~1 char per <number> %", "we need to look on minimal width value too while we be here", "it could raise old question about how often do we need to update the display so that the user do not think about freeze , but again this should be discuss separately", "if we intend to make many improvement in this progress bar area we need to open new meta issue and collect all the discussion there"], "issue_sim": [0.20019236207008362, 0.20258763432502747, 0.18874570727348328, 0.15805062651634216, 0.22305400669574738, 0.09310393035411835, 0.261364221572876, 0.1992691159248352, 0.33270901441574097, 0.44048547744750977], "prob": [0.01903504505753517, 0.07365332543849945, 0.005490672774612904, 0.04341679438948631, 0.003915085922926664, 0.00959605723619461, 0.010944454930722713, 0.005136444233357906, 0.15864644944667816, 0.035983115434646606]}, {"target": [5], "doc": ["i think this be one of the key part", "the video of the demo @stevel - msft   post show difference people want in their experience", "steve have a two line prompt which use <number> colour , but i would _ hate _ the time for the last command show in red", ", or the two colour for the path or ps in a different colour", "i want the prompt as small as possible - in windows terminal and vscode i start powershell with -nobanner and be one of those who complain with the integrate terminal start use in 1970s mainframe style banner", "i prefer original window tab expansion to the ctrl - space / unix style , i prefer the predictive one line to many line ....", "* * what i want as a user * * be", "minimum chaff and distraction on the screen", "i <tag> want time in my prompt , nor git status", "i trim the middle out of the path to keep the prompt short", "- compare steve 's prompt with mine", "by all mean put error in red but most other colour be actively bad", "command should not be \" chatty \"   this sort of output be ok once", "but it just slow i down , i have to read it to discover that i do n't need to read it and for the last <number> year i 've be direct that kind of thing to null", "something which tell i that after a pause of <number> - <number> second the command have n't stop , and be do _ something _    thing which do this in limited space  fill in * between", "thing which print a long list , be bad", "how many line would @powercode 's example leave print", "* * as an author * *", "i keep what i write to the console to a minimum , but i do put <tag> in as it serve as a comment as well as a progress indicator", "if someone use my code want step by step progress they can use <tag>", "when i expect thing to pause i use write - progress - the information in write - progress be n't need afterwards", "as @isazonov   say _ we need to keep current behavior otherwise we break a design of many script", "certainly a lot of my script would no long work as design and i would need to remove most instance of write - progress"], "issue_sim": [-0.06392844766378403, 0.09457777440547943, 0.15292586386203766, 0.06262591481208801, 0.3825083374977112, 0.36385536193847656, 0.024475783109664917, 0.07240849733352661, 0.2661646604537964, 0.18445484340190887, -0.020239409059286118, 0.09165734052658081, 0.21322068572044373, 0.13681234419345856, 0.21404710412025452, 0.022944895550608635, 0.10837677121162415, -0.031426526606082916, 0.30913493037223816, 0.2700474262237549, 0.34741857647895813, 0.21739351749420166, 0.3048052489757538], "prob": [0.003559888806194067, 0.006415982265025377, 0.1633656620979309, 0.0008566194446757436, 0.40885233879089355, 0.34782782196998596, 5.284625513013452e-05, 7.90783524280414e-05, 0.0010191601468250155, 0.00016142675303854048, 3.27376983477734e-05, 5.4550553613808006e-05, 8.656785939820111e-05, 0.06422749161720276, 0.3031569719314575, 6.497543836303521e-06, 5.907716058572987e-06, 1.9597812297433848e-06, 0.04049510881304741, 4.429796899785288e-05, 0.003957195673137903, 4.11770497521502e-06, 0.00536642549559474]}, {"target": [2], "doc": ["@jhoneill you should ignore my custom prompt as that be not part of any propose change nor relate to progress bar discussion", "i believe @isazonov 's referral to \" keep current behavior \" be the write - progress api should n't change", "what be write to the console be merely decorative and do n't affect functionality and thus would n't break any exist script ."], "issue_sim": [0.48610013723373413, 0.3209385275840759, 0.27337098121643066], "prob": [0.004016322083771229, 0.003595119109377265, 0.9977489113807678]}, {"target": [5], "doc": ["note that as we have an <tag> way to change how error message be present , we could have a <tag> to allow choose between this new presentation vs the exist one", "although i prefer to have an extension to <tag> like <tag> and also have <tag> there along with <tag> keep they in one place for discovery", "@isazonov i think 7", "2 be lts be a great point", "this be why i 'd like to get this as an experimental feature early to get feedback", "it could stay experimental in 7.2 or with user selection , we could make the new presentation default and allow user to go back to the original ."], "issue_sim": [0.24122853577136993, 0.13875296711921692, 0.06941428035497665, 0.08195360004901886, 0.057080358266830444, 0.2346411645412445], "prob": [0.15214313566684723, 0.13048796355724335, 9.325565042672679e-05, 0.0005746992537751794, 0.0022682505659759045, 0.5574248433113098]}, {"target": [3], "doc": ["@stevel - msft the behavior you be show here , to i , be way more consistent than current write - progress ' pop - up ' like behavior", "never understand why it be ' that fancy ' in first place", "* when i expect thing to pause i use write - progress - the information in write - progress be n't need afterwards", "my understanding of the purpose of write - progress be to inform the user / viewer .", "not for pause purpose per se", "with that in mind i do not get why it be perceive as a problem when info remain afterwards on the console output", "we be inform a user on the console , not write a window like interface with pop - up and all"], "issue_sim": [0.4164687991142273, 0.05124712735414505, 0.34741857647895813, 0.2529051899909973, 0.10971833020448685, 0.2360413670539856, 0.1314617097377777], "prob": [0.027930987998843193, 0.04999351128935814, 0.08751887083053589, 0.16232755780220032, 0.00041088717989623547, 0.023301908746361732, 0.055860165506601334]}, {"target": [12], "doc": ["@stevel - msft    yes i understand that , the point i be try to make be you like your shell one way and i like mine another and neither be more _ right _ or less _ right _", "try to change what exist be likely to upset as many people as it please", "i be also quite conservative with these thing , i see no need to change the colour although it turn out to make no difference", "i think the notice can go at the top , bottom or under the prompt , provide it be clean up by default", "@peppekerstens   apart from a perf issue it do n't pause thing", "it tell the user \" thing _ look _ like they have stop but i be download / expand / whatever \"", "the need for that information be _ transient _", "one example be i get information from azure devop use the rest api and this take a couple of minute", "if i be glance at my screen i want to see \" stage <number> of <number> be   <number> % do \"   but if go and get a coffee , i do n't want a screen full of \" do stage <number>", "do stage <number> etc \"", "in some case i can see the way write - progress be call it will print \" fetched work item <number> , fetched work item <number>", "fetch work item <number> \" and i have to scroll back through 10,000 line to see if there be any error", "progress message cease to be useful a few second after they appear , and that be why they  replace each other ."], "issue_sim": [0.1970214992761612, 0.129370778799057, 0.15046308934688568, 0.18039922416210175, 0.19420576095581055, 0.17834317684173584, -0.06774255633354187, 0.09825579822063446, 0.262508749961853, 0.10819460451602936, 0.26708871126174927, 0.2538207769393921, 0.24991077184677124], "prob": [0.008381471037864685, 0.0468829981982708, 0.22986625134944916, 0.24077320098876953, 0.0005300313350744545, 0.09193796664476395, 0.0016670154873281717, 0.03218502178788185, 0.054934751242399216, 0.00019585252448450774, 0.03324549272656441, 0.004418814089149237, 0.08857569098472595]}, {"target": [1], "doc": ["i do n't see how that could be do _ in the progress api _ , assume that change the current assumption of parallelism to an assumption of nest be n't go to be well in general", "i think we would need a progressparent common parameter that would set the parentid for all progress write from within a command that do n't have an _ explicit _ parent .", "otherwise , it would just make a different --but equally invalid-- assumption"], "issue_sim": [0.33512434363365173, 0.29921579360961914, 0.13453593850135803], "prob": [0.7663092017173767, 0.2952638268470764, 0.004781695548444986]}, {"target": [1], "doc": ["this be interesting , since patch release often have security patch in they", "in this sense , patch release be much more important than major version release to the people see they .", "to this end , i would imagine there be many user who be on ps <number> lts who do n't want a notification for ps 7", "1 or <number> , but who really need to see one for ps 7", "i believe this be exactly how the lts update channel be configure to function currently", "i think the assumption in the issue here be that big version increment mean that there be more goodness mean that you should be more likely to upgrade", "but really it be the opposite", "small version increment mean more relevant to your current installation mean you have more to gain and less to lose by upgrading", "the version update notification be n't market , it be powershell 's current solution to the update problem give that its installation be manage in different way across different platform"], "issue_sim": [0.18967847526073456, 0.2703825831413269, 0.206646129488945, 0.0683605819940567, 0.41739600896835327, 0.3032771348953247, 0.01453145407140255, 0.37081488966941833, 0.4786086678504944], "prob": [0.00328713352791965, 0.7435063719749451, 0.004125082399696112, 0.00011297111632302403, 0.0012415177188813686, 0.031505417078733444, 2.0529370885924436e-05, 0.003594551235437393, 0.1295265108346939]}, {"target": [0], "doc": ["you can disable the update check by set a user or system environment variable call <tag> to <tag> but i would n't recommend do that unless this * * really * * bother you ."], "issue_sim": [0.47906494140625], "prob": [0.9999840259552002]}, {"target": [3], "doc": ["if it be contain a security fix , the notification should mention that", "currently it look like \" hey , we fix a typo", "that be not the intention maybe", "also , lower the effort to upgrade , at least on windows would be nice , like a one - liner that be show in the notification .", "love your work though"], "issue_sim": [0.11527470499277115, 0.1105380728840828, 0.0018001478165388107, 0.46600157022476196, 0.06461074948310852], "prob": [0.08501890301704407, 0.10978998243808746, 0.035966724157333374, 0.9732382297515869, 0.002935864729806781]}, {"target": [0], "doc": ["imho , simplify upgrade  be important .", "maybe it would be sufficient to help people create their own upgrade script", "i know there be an <tag> at <url> but it do not upgrade my installation , just unzip the late package into <tag>", "maybe it be easy to create a dedicated website with upgrade strategy  for each type of install"], "issue_sim": [0.31879740953445435, 0.332911878824234, 0.3568662106990814, 0.32991304993629456], "prob": [0.7552071809768677, 0.000984433339908719, 0.039229582995176315, 0.00322153652086854]}, {"target": [3], "doc": ["the bar for servicing update be high", "we do n't take trivial fix to avoid risk of regression .   there should only be fix that be security , compliance , or customer block issue .", "this  describe the intent and design in detail and way to disable", "auto - update be something i would love to have , but be very difficult to solve whether because it require root or due to open file handle  on windows", "however a cmdlet like <tag> where we make it easy to install an update version the same way you originally instal it  seem feasible"], "issue_sim": [0.16175955533981323, 0.10771834850311279, 0.07166501879692078, 0.27370792627334595, 0.33399254083633423], "prob": [0.0023853962775319815, 0.6006824374198914, 0.020411308854818344, 0.43123599886894226, 0.01829683594405651]}, {"target": [2], "doc": ["this be useful to know , but user do n't understand that because it be very much contrary to how most software treat version number - nobody see an 0", "1 increase and think \" wow , i should definitely get that , it be almost certainly security relate", "if this be the case , powershell need to call out security update differently than \" we add new stuff \" release , and do thing to educate user about how powershell use version number differently than most project"], "issue_sim": [0.2969163656234741, 0.15669816732406616, 0.4846478998661041], "prob": [0.6436947584152222, 0.008870589546859264, 0.637204110622406]}, {"target": [1], "doc": ["be there any way to disable the nag", "also , imho , the upgrade should be come through window update ."], "issue_sim": [0.2773808538913727, 0.442764014005661], "prob": [0.026340676471590996, 0.8770104646682739]}, {"target": [0], "doc": ["i 've see thing like this occur in the vs code integrate console , but never in the pwsh console itself .", "do you have anything in your powershell profile script"], "issue_sim": [0.2312772274017334, 0.4915955662727356], "prob": [0.9915599226951599, 0.0011281529441475868]}, {"target": [1], "doc": ["sorry , i do n't understand what you mean", "when i try to _ right click > > open powershell _ in windows explorer , it take quite long time and as you see , there be no text display here .", "i think affter excute command <tag> , powershell do response but it ca n't display any text"], "issue_sim": [0.004923458211123943, 0.5592432618141174, 0.5602816939353943], "prob": [0.01016487367451191, 0.7176756262779236, 0.024120522662997246]}, {"target": [0], "doc": ["@kvprasoon the startup time have be improve already via <url> although there be still additional work we can do to improve it , but it be not a priority for 6", "2 since we be within the \" ballpark \" now", "as for the context menu , the difference be the command line  to start pwsh", "otherwise it should be the same", "it should never take that long to start unless you have a complicated <tag> that be be run on startup"], "issue_sim": [0.06228504702448845, -0.00011171773076057434, 0.2479640245437622, -0.05109596252441406, -0.01223667711019516], "prob": [0.29972532391548157, 0.08373216539621353, 0.1299106478691101, 0.03933371230959892, 0.4928387403488159]}, {"target": [0], "doc": ["i do n't think azure be the correct module to load in powershell core  .", "you should use azurerm", "netcore which be the one support cross platform", "azure module be only for windows powershell"], "issue_sim": [0.4049881100654602, 0.03786862641572952, 0.0653664618730545, 0.4038395881652832], "prob": [0.8712262511253357, 0.014568240381777287, 0.037795521318912506, 0.003578756470233202]}, {"target": [1], "doc": ["i use azure as an example ;", "it be also fail for the module i really want , invokebuild ."], "issue_sim": [0.12319020181894302, 0.21111805737018585], "prob": [0.118541419506073, 0.9712072014808655]}, {"target": [1], "doc": ["first , i suggest to use azurerm", "as use azure module wo n't instal in wsl because be a windows module .", "currently , your scenario ca n't be reproduce"], "issue_sim": [0.10627344995737076, 0.43111279606819153, 0.14100836217403412], "prob": [0.262999951839447, 0.8652823567390442, 0.011037114076316357]}, {"target": [2], "doc": ["ok , as i say before , i use azure as an example ; my apology for the red herring here @maximotrinidad", "invokebuild be the module i be actually try to install", "on my machine , the module download , but do not appear to install correctly :", "i see your <tag> be new than mine", "i 'll try update wsl and see if that make a difference"], "issue_sim": [0.010238418355584145, 0.3689868748188019, 0.351692259311676, 0.07078106701374054, 0.10340982675552368], "prob": [0.21478374302387238, 0.07502169907093048, 0.5157486200332642, 0.02904479391872883, 0.05115215852856636]}, {"target": [2], "doc": ["@maximotrinidad it work fine on macos and a full blown pop_os", "vm i have run where ps install fine and the module do as well", "wsl seem to be the issue here ."], "issue_sim": [0.10070996731519699, 0.4208682179450989, 0.1659054309129715], "prob": [0.002039937535300851, 0.09482599049806595, 0.9729386568069458]}, {"target": [0], "doc": ["this really need to be raise in the powershellget repo as this be n't a powershell issue as such but an issue with that module -"], "issue_sim": [0.4438956379890442], "prob": [0.9999771118164062]}, {"target": [0], "doc": ["it be unbelievable but user can actually catch process with * * name * * <tag> and actually get a process with * * pid * * <tag> ."], "issue_sim": [0.4546196758747101], "prob": [0.9999662637710571]}, {"target": [0], "doc": ["maybe there should be a defaulted parameterset nameorid with this behavior , so that you can specify -name or -id and _ only _ get by name or by i d."], "issue_sim": [0.4639238119125366], "prob": [0.999975323677063]}, {"target": [2], "doc": ["that wo n't help if the arg be specify by position but at least it a ) give a way to specify that you really want to match * just * by name and b ) give a more correct name for the parameter", "conceivably this could be a break change if a script do not use the <tag> parameter and there just happen to be a process with a name that correspond to a pid you want stop", "that say , it be pretty uncommon to run across process with a name that parse as a integer .   and the workaround be simple - use the <tag> parameter .", "i 'd be willing to risk the back compat issue for the convenience provide", "btw why not give <tag> the same treatment", "make a new nameorid parameter and make it the default parameterset", "it annoy i that gps default to name but spps default to pid", "i be always forget to specify the -name parameter to stop - process when i want to stop all instance of an app"], "issue_sim": [0.6199148297309875, 0.5942343473434448, 0.5904996395111084, 0.06122169271111488, 0.06556905806064606, 0.38464850187301636, 0.3251953721046448, 0.4614938497543335], "prob": [0.27959877252578735, 0.5280776619911194, 0.20315039157867432, 0.005898484960198402, 0.00030496553517878056, 0.003007472027093172, 0.0070747449062764645, 0.02090148814022541]}, {"target": [1], "doc": ["this dovetail nicely into the parameter alias discussion in # <number>", "if a user can extend the parameter metadata for other command , they can add alias or even an <tag> , which would solve this problem nicely without explicitly opt into the potentially destructive and possibly surprising behavior that i 'd like ."], "issue_sim": [0.2898772358894348, 0.45293158292770386], "prob": [0.022506089881062508, 0.9660066962242126]}, {"target": [0], "doc": ["agree . at the very least , the error message could say ` cannont find a process with the name \" <number> \" .", "if <number> be a process i d , use get - process -id <number>", "`   of course , you would only use * * that * * error message when the name parameter value be all digit"], "issue_sim": [0.5350212454795837, 0.372976154088974, 0.5478499531745911], "prob": [0.8066393733024597, 0.014383968897163868, 0.23269501328468323]}, {"target": [0], "doc": ["it should use the   like the other operating system .", "be there any reason to have windows be different"], "issue_sim": [0.10362155735492706, 0.16294819116592407], "prob": [0.5546906590461731, 0.3655754029750824]}, {"target": [1], "doc": ["sorry for not be clear", "what i mean to say be powershell already respect xdg spec for linux and macos . we should extend that to windows as well .", "module when then go in <tag> which would address the issue"], "issue_sim": [-0.001613423228263855, 0.3605937957763672, 0.014480587095022202], "prob": [0.005732747260481119, 0.9952364563941956, 0.041652850806713104]}, {"target": [0], "doc": ["i 've never like module be store under document .", "seem to i they should have be store under <tag> or some path like that", "btw i define this symlink a while back in my home dir :", "i wonder if <tag> should be hide by default like they be on linux", "i suppose mostly developer will wind up with these so perhaps it be ok that they be not hide", "re <tag> , i like the idea but you 've get some other team to convince :"], "issue_sim": [0.07400912046432495, 0.10447464883327484, 0.16222520172595978, 0.173109769821167, 0.0839962586760521, 0.05699747055768967], "prob": [0.9680820107460022, 0.11103099584579468, 0.0007546477136202157, 0.02847471833229065, 0.003987539559602737, 0.1481676697731018]}, {"target": [0], "doc": ["i do not perfer .local either but have it the same across all platform would be nice for powershell", "all those team be consistent across their platform , we be not"], "issue_sim": [0.3499366044998169, 0.046202801167964935], "prob": [0.8140794634819031, 0.23859348893165588]}, {"target": [1], "doc": ["i agree with the benefit of consistency .", "the path do n't matter so much since you can just set up psdrive 's in a profile , and i be n't personally attach to the path i propose -- i simply choose it base on the other similar path like"], "issue_sim": [-0.039925605058670044, 0.286815345287323], "prob": [0.9335949420928955, 0.22921186685562134]}, {"target": [2], "doc": ["i agree with the op on this issue", "i recently upgrade my win10 and now i get those file in onedrive / document as well", "while i like the idea of share my default profile and possibly script across pc use onedrive , this should be do use the proper windows folder , namely appdata local / roaming , because this be the convention on windows and it work well .", "also well than dotfile and dotfolder in the home directory", "so the correct path would be something like <tag> or <tag>"], "issue_sim": [-0.06312691420316696, 0.4538179337978363, 0.5519136190414429, 0.07502245903015137, 0.12474261224269867], "prob": [0.016873536631464958, 0.5321369171142578, 0.7074257135391235, 0.015524768270552158, 0.009331443347036839]}, {"target": [2], "doc": ["it be be very frustrating each time i type <tag> or <tag> in a console and the wrong thing happen", "now at the eve of ga , yet another alias have be remove : <tag>", "it be time to put an end to the madness , and just clean the slate so this ca n't ever happen again ."], "issue_sim": [0.12271438539028168, 0.2502609193325043, 0.02211717888712883], "prob": [0.28776636719703674, 0.009789303876459599, 0.980901300907135]}, {"target": [4], "doc": ["@jaykul thank for the short and clear thought", "i totally agree that the time have come and we have to complete this story that last two year", "related # <number> # <number>", "base on previous discussion we know that some user want all the windows aliase , some one only part , some one do not want they at all", "we have also come to the conclusion that aliase only make sense in an interactive session and should  be exclude from script .", "so i see a simple solution that we can implement in step :", "create compatibility module :", "- the first only aliase without conflict", "- the second include all alias from previous module and curently exclude windows powershell aliase", "- the third include all windows powershell aliase", "import these module only in the interactive session", "we could add a new set <tag> to a module manifest", "this feature will be useful for all compatibility module and psreadline", "enable an user to choose which compatibility module to download or not to download at all use a configuration file  and gpo", "until we implement the option user can load select compatibility module use their profile file", "add an option to disable / enable alias in script - enhance strict mode  or / and <tag> statement", "add global option  to enable / disable alias in script"], "issue_sim": [-0.08747106790542603, 0.045474451035261154, 0.08926037698984146, 0.21836484968662262, 0.2832217216491699, 0.11558255553245544, 0.38268354535102844, 0.019798945635557175, 0.5426125526428223, 0.4272187054157257, 0.3659610152244568, 0.3309207856655121, 0.27731558680534363, 0.2872636914253235, 0.2167387753725052, 0.3358573317527771, 0.341403603553772], "prob": [0.012246053665876389, 0.012723169289529324, 0.003458924125880003, 0.33543574810028076, 0.5233973860740662, 0.013053049333393574, 0.003341360716149211, 0.0035344301722943783, 0.012804185040295124, 0.004382130224257708, 0.0015405392041429877, 0.0033178236335515976, 0.002581600099802017, 0.019236214458942413, 0.008240020833909512, 0.08103115856647491, 0.0038371249102056026]}, {"target": [7], "doc": ["you be make this * * way * * too complicated", "there be no need for any functionality to be add in order to remove the default alias -- even a set to say which module to import would be overkill when we have profile script", "i be not try to get the alia _ feature _ remove", "i use alias , and i want to keep use they", "i do n't want to loose the ability to change the name of command", "i just want to clean out the default and give _ exist user _ an easy way to load the alias they be use to", "in an ideal world , i want to do all of that without break anything more , although obviously we 'll need user to add the <tag> line to their profile", "the main point be to ensure we never _ again _ break people 's experience by such a silly trivial change as remove a build - in alia .", "i honestly do n't think you can get a new set add to module manifest", "we still do n't have a set to indicate the support * * edition * * or * * operating system * * , nevermind something as meta as whether the author think the module should be use interactively"], "issue_sim": [0.06048616021871567, 0.5408269166946411, 0.11529116332530975, 0.3327106833457947, 0.22149138152599335, 0.37220120429992676, 0.2811088263988495, 0.06817498803138733, 0.3479365110397339, 0.3824233114719391], "prob": [0.0009277964127250016, 0.4536120593547821, 0.0016871385741978884, 0.003240145742893219, 0.00695047527551651, 0.06256427615880966, 0.16724595427513123, 0.10022354871034622, 0.001785685890354216, 0.33701571822166443]}, {"target": [0], "doc": ["i think it might be good to have a symbol to put in front of an alias to invoke use it .", "that add one character for type an alia and allow for keep some sane default", "since we be go for break , might as well make it a useful breaking change", "to be honest , the only alias i care about be the <tag> aliase", "i wonder if they be the most commonly use since i tend to see <tag> rather than <tag>"], "issue_sim": [0.2697816789150238, 0.1363329291343689, 0.07281280308961868, 0.23796983063220978, 0.09278661012649536], "prob": [0.9717169404029846, 0.010492367669939995, 0.01757461205124855, 0.001952576101757586, 0.005095460452139378]}, {"target": [4], "doc": ["well , remove <tag> in powershell 5", "1 would have be a lot more timely , consider", "i definitely agree that select , where , and foreach be the most common alias that get leave in script -- because they be basically more readable than the full command", "but i have to repeat , again , i do n't want to break anything", "i be try to * * _ stop _ break thing * * , by move the alias into module where nobody will have any excuse to change they anymore ."], "issue_sim": [0.3378700613975525, 0.017392292618751526, 0.41798117756843567, 0.08747885376214981, 0.3863026797771454], "prob": [0.025519900023937225, 0.009486177936196327, 0.6872431635856628, 0.0027746357955038548, 0.48957327008247375]}, {"target": [0], "doc": ["i believe this to be by design and desirable . what be undesirable , imo , be the operation of <tag> .", "i have # <number> to address this", "this issue be kind of a duplicate of that"], "issue_sim": [0.21124441921710968, 0.03696907311677933, 0.04512188956141472], "prob": [0.9976213574409485, 0.00045655525173060596, 0.029368102550506592]}, {"target": [1], "doc": ["@mklement0 i just do n't think this be possible or desirebale", "how would <tag> know if what it be get be a wrap object result from <tag> or <tag> or a psobject create by a user that look like one ?", "that be why i think he fix for this need to be with each command that do some wrapping", "i 'll keep my issue open because it apply to more than json conversion for date", "but i be not sure what the approach be for this issue", "there be always unexpected behavior around psobject black magic"], "issue_sim": [0.11156920343637466, 0.33849722146987915, 0.08419731259346008, 0.29819661378860474, 0.03991322964429855, 0.11274995654821396], "prob": [2.8193022444611415e-05, 0.9111087918281555, 0.009647327475249767, 0.04783349111676216, 0.0034376108087599277, 0.005753527395427227]}, {"target": [1], "doc": ["you be right , that would be tricky , but i 've since realize that the problem can be tackle differently , and i 've substantially revise the original post ; in a nutshell :", "type that normally serialize to a _ scalar _  should _ never _ serialize differently base on the situational presence of noteproperty / scriptproperty member ."], "issue_sim": [0.10134457051753998, 0.48792797327041626], "prob": [0.784604549407959, 0.3497909903526306]}, {"target": [1], "doc": ["conceivably we could do something similar", "however , valuetype encompass _ all _ struct and may be an unsuitable reference as json only have a handful of standard representation", "we can simply refer to the spec and account for each type that it have a scalar value form for , and treat all other as they be normally treat , i would think ?"], "issue_sim": [0.02306346595287323, 0.25401124358177185, 0.198236882686615], "prob": [0.012182856909930706, 0.6332470774650574, 0.738634467124939]}, {"target": [2], "doc": ["@jszabo98 while that be an interesting question , it be incidental to this issue , so i encourage you to ask it on stackoverflow", "com instead ; the short answer be :", "the ets property be lose whenever a new string instance be construct ."], "issue_sim": [0.26278942823410034, 0.09855081140995026, 0.2870091199874878], "prob": [0.1858641356229782, 0.005628929473459721, 0.8262197971343994]}, {"target": [0], "doc": ["i do n't think we can simply strip ets member automatically as there be case where you want those include .", "perhaps we can have a <tag> switch"], "issue_sim": [0.11892400681972504, 0.06973253190517426], "prob": [0.9271121621131897, 0.031124060973525047]}, {"target": [9], "doc": ["you be right : we should take a step back :", "let 's revisit at what i propose in the op :", "i still think this be by far the good choice , but it be technically a break change", "while i 'd say this fall into bucket <number> and therefore make it an acceptable break change , if that be n't the consensus then have it as an opt - in , via <tag> be the next good choice - and user can decide whether they want ets member or not", "if we deem the break change acceptable , and someone really want to serialize <tag> _ with _ the - relevant - for - display - formatting - only - ets property - which strike i as unlikely - they can do :", "note that to - json serialization in the vast majority of case fall into the category of serialization of \" property bag \" type : dtos  that be implement as <tag> instance , hashtable , or   custom  class design specifically for that purpose", "such  type be ultimately solely compose of data type that serialize as json primitive : string , number , booleans , and date", "all other type be n't really suit for json serialization", "in short , my vote be for :", "all type that serialize to json primitive , include <tag> and <tag> , should _ always ignore _ ets property .", "* <tag> be the only type where powershell itself add such property , via <tag> , and _ solely for output format _ , which have nothing to do with serialization", "* all such type - comprise string and", "net primitive type that be _ value type _ - all of which conceptually be and present as as a _ single value _ , be poor candidate for have ets property attach to in general", "* in the rare event that someone still want such ets property serialize , they can use the <tag> solution show above", "* the above alone will cover the vast majority of use case", "separately , even though my sense be that it will be rarely , if ever , need : there be no harm in also give user a <tag> option to opt - out of ets property"], "issue_sim": [-0.05506506562232971, 0.012112213298678398, 0.029912903904914856, 0.16392096877098083, 0.36824938654899597, 0.5344633460044861, 0.40017977356910706, 0.39120346307754517, -0.05480526387691498, 0.5346717238426208, 0.6193934082984924, 0.04470260441303253, 0.31308770179748535, 0.4662131667137146, -0.011612486094236374, 0.18590548634529114], "prob": [0.006712495815008879, 0.006939150858670473, 4.251478458172642e-05, 0.016335347667336464, 0.025661690160632133, 0.03657668083906174, 0.008275792002677917, 1.738136234052945e-05, 1.5916255506454036e-05, 0.0529312938451767, 0.01122288778424263, 9.415032764081843e-06, 0.01695183292031288, 0.0014437835197895765, 4.8620699999446515e-06, 0.16742785274982452]}, {"target": [1], "doc": ["ets be a key and very power feature of powershell", "i believe that any attempt to limit key feature will most likely be reject by the committee as it have do before .", "this have be say even for primitive type", "and i agree with that", "first , it be the current behavior for many year", "second , it be not insurmountable - powershell be so flexible that user can always find workaround , which i understand happen in some of the scenario mention here", "we must be absolutely convinced that this behavior block important script and powershell development in order to change it", "it be important to note what should be say about _ specific _ scenario", "so if a user want to have a frombase64string property on a string in a particular scenario , he must create a new runspace and add it there , not in his profile", "it also imply that the user want this property by default everywhere in this scenario , include serialization", "if it be not , then we need to provide it with <tag>", "as for property come from provider , i believe this should be a feature of the provider as the provider developer design", "this imply that we should not change the default behavior of exist provider , but could provide the ability for user to change this behavior for specific scenario", "as for property come from engine , i believe it be not good practice come from limitation of our formatting system and we should enhance formatting system", "i agree that helper property add exclusively for formatting system should be normally hide but it make no sense to make a break change for the particular serialization   scenario - we should make this only in formatting system enhancement time"], "issue_sim": [0.22627320885658264, 0.11800651252269745, 0.09686824679374695, -0.018604492768645287, 0.1014922484755516, 0.41499391198158264, 0.25045350193977356, -0.1077495813369751, 0.27662864327430725, 0.3817659616470337, 0.05024199187755585, 0.1522175371646881, 0.3117557764053345, 0.08998256921768188, 0.3622215986251831], "prob": [0.0026141765993088484, 0.033162761479616165, 0.0006495480192825198, 0.00035426372778601944, 0.0009689670405350626, 0.07902761548757553, 0.09192508459091187, 0.000820947578176856, 0.14855556190013885, 0.0013556946069002151, 0.0006094190757721663, 0.007167954463511705, 0.01952424831688404, 0.036851074546575546, 0.15278398990631104]}, {"target": [0], "doc": ["as a matter of _ convention _ , we usually generate an error for a non - wildcard query e.g. <tag> return a error , but <tag> quietly return nothing ."], "issue_sim": [0.3881463408470154], "prob": [0.9999841451644897]}, {"target": [1], "doc": ["@jakul : the output behavior be incidental", "what matter be whether the <tag> argument be design to uniquely identify an exist entity use a literal  name .", "as such , @stevel - msft , you be right that the case of <tag> be _ ambiguous _ :", "*  on the one hand , you could argue that its <tag> argument   identify _ multiple entity _ , if you conceive of the _ version _ of a give module as _ distinct entity in their own right _", "*  on the other hand , you can conceive of a module with a give name to be an _ abstract , yet distinct _ entity , and conceive of its _ version _ as its _ specific incarnation _", "*  as an aside : even the unambiguous case of ask for an _ exact module version _ via the <tag> key of a hashtable represent a fully qualified module module   pass <tag> currently quietly return nothing if the specific version be not find - something that should also be fix", "the  interpretation be at odd with the parameter name : if the argument be really a _ filter _ , it should n't be name <tag> , since in most cmdlet <tag> unambiguously identify a specific , exist entity", "view through the lens of  , <tag>   can still be think of unambiguously identify the module _ in the abstract _ , irrespective of which and how many of its version be load", "perhaps needless to say ,  make more sense to i in the grand scheme of thing", "overall , separate the aspect of _ retrieve _   item from  be indeed the way to go"], "issue_sim": [0.27290380001068115, 0.3091462254524231, 0.19023901224136353, 0.28827497363090515, 0.21347197890281677, 0.48698297142982483, 0.48051655292510986, 0.2691960036754608, 0.0711618959903717, 0.013445315882563591], "prob": [0.0002171233354602009, 0.5794340372085571, 0.002505967393517494, 0.06358858197927475, 0.14078596234321594, 0.04618234932422638, 0.09000751376152039, 0.2647598087787628, 0.0002643673506099731, 0.00033991056261584163]}, {"target": [0], "doc": ["it bother i that <tag> can be a filter , but it be what it be and we may just have to live with those inconsistency for backwards compatibility sake .", "i think the good we can do be ensure that new cmdlet follow the intend guideline to have consistency as well as promote more <tag> cmdlet remove the need for <tag> to be multi - purpose"], "issue_sim": [0.19391751289367676, 0.38478219509124756], "prob": [0.5239585638046265, 0.5617799758911133]}, {"target": [1], "doc": ["this proposal be just wrong", "i put up with this bad behavior where it already exist for backwards compatibility , but spread it across the ecosystem in the name of consistency be not appropriate .", "find nothing when there be nothing to find be not an error", "it be the correct answer", "it be the correct result"], "issue_sim": [0.1551346778869629, 0.4244556725025177, 0.17400306463241577, -0.05196688324213028, 0.08533225208520889], "prob": [0.02611992135643959, 0.9411396980285645, 0.027133198454976082, 0.021653413772583008, 0.013394057750701904]}, {"target": [7], "doc": ["if we decide to change this -- _ there be no more limit to what can be change _", "<tag> be one of the most common command", "and as far as most user be concern , the current behavior _ be correct _ , if only because it be how it have always behave", "the * * reality * * be that <tag> * * be * * how you test if a module be load", "it be a combination function : we use it to test , and we use it to get -- but most people use it to test", "a decade worth of code have be write base on this _ expect _ behavior", "in fact , he _ get _ functionality be n't what people usually care about", "as a result , any attempt to \" correct \" this will be annoying to * * all * * current user , in addition to be a break change for compatibility with windows powershell .", "if we start produce error from core command where there have be none before , the experience for user be go to be a lot like a disaster : break script and module everywhere -- thing that use to work , but do n't work anymore", "write <tag> command do n't solve the problem of break the exist command -- change the command require rewrite hundred of thousand of line of code , and the <tag> command simply wo n't be available on windows powershell"], "issue_sim": [0.15948092937469482, 0.15409569442272186, 0.28603866696357727, 0.3054780960083008, 0.06314793974161148, 0.3481842875480652, 0.11104541271924973, 0.43380436301231384, 0.4298486113548279, 0.48800304532051086], "prob": [0.005315470974892378, 0.0018441755091771483, 0.06829376518726349, 0.002107668900862336, 0.08159802109003067, 0.0002800866204779595, 0.0013370990054681897, 0.6354105472564697, 0.037221759557724, 0.0850897878408432]}, {"target": [5], "doc": ["let 's take @jaykul 's datum and extrapolate a little from there", "if we assume that <number> % of the people write powershell script and module be use github  then that be at 1", "48 million script that will break with this change", "or to put it another way , that be 1", "48 million script that need to be rewrite before they can be use on ps v6 +", "this change may only produce a non - terminating error but how many script writer know that there be even non - terminating error ?", "how many people use script write by other be likely to know", "i 'd imagine most of they will see red text and assume a big problem have occur , because for the vast majority of user there be no difference between the error type", "personally i do n't want to have to rewrite all of my script to have <tag> on every non - wildcard <tag> call", "i 've only get a few hundred script that i 'd need to change but that be still a good week of effort to rewrite they and at least that much time again to test they all", "i 'd also definitely argue against it be a bucket <number> change , this be at least a bucket <number> change or high", "this have be document by a variety of blog post and a lot of code sample all over the internet , include \" official \" microsoft source like hey scripting guy link above , it just might not be officially document and that be a very easy fix to make"], "issue_sim": [-0.005672491621226072, 0.3804317116737366, 0.22725458443164825, -0.020823616534471512, 0.15882021188735962, 0.46643251180648804, 0.18124255537986755, 0.23788869380950928, 0.4777664542198181, 0.1994461715221405, 0.15906038880348206, 0.204903244972229], "prob": [0.0012031883234158158, 0.02258632332086563, 0.0006706709391437471, 0.0017790256533771753, 0.0037176189944148064, 0.016264645382761955, 0.00013609256711788476, 0.09020154923200607, 0.00391775369644165, 0.22920702397823334, 0.0014985715970396996, 0.46148213744163513]}, {"target": [1], "doc": ["i think this change complicate thing beyond just add <tag> .", "if this pattern be adopt en mass , user will be force to redo large section of code to accommodate where <tag> command currently return nothing when nothing be find but do produce error whenever other condition occur", "where before the presence of an error indicate a failure and no result indicate not find , now the user must do error inspection", "this pattern will result in error message scrape because many author do n't make error generation easy to consume", "because error generation in powershell be neither intuitive nor easy", "do add a ton of <tag> command fix that", "but now i need more code to do the same thing i have be do for yeas and i need to make massive adjustment to my exist windows powershell code to make it work with core", "if i be a small shop , this would just add another reason to not move to core and stay on windows powershell", "be the original design wrong", "but it have result in a unique - to - powershell shortcut that have be widely use as a good practice recommendation", "the current behavior do n't break anything", "it do n't stand in the way of progress", "the new behavior , if adopt from the start , would have build a body of work and recommendation that would have maintain it", "however , now a decade of example , text book , blog post , help document , course material , etc be all seed of confusion and frustration for new user who come in to this after the behavior be change", "what do change this behavior solve and at what cost"], "issue_sim": [0.28045976161956787, 0.40056729316711426, 0.35753148794174194, 0.30625826120376587, 0.32745903730392456, 0.3240439295768738, 0.34404119849205017, 0.3130722641944885, 0.08584579080343246, 0.22461728751659393, 0.35326921939849854, 0.020916804671287537, 0.26455622911453247, 0.21904680132865906, 0.2694680094718933], "prob": [0.0026808881666511297, 0.2816855013370514, 0.024503692984580994, 0.024407370015978813, 0.001998309511691332, 1.4839858522464056e-05, 0.11072853952646255, 0.0013735026586800814, 1.2001682080153842e-05, 0.0022768843919038773, 1.592323496879544e-05, 5.5275289923883975e-05, 0.005228819325566292, 0.3458390235900879, 8.485127909807488e-05]}, {"target": [1], "doc": ["this do n't repro for i", "i create a folder with a a few file in it , set they to be foded , then <tag> and <tag> . the item remain foded ."], "issue_sim": [0.034804441034793854, 0.29814061522483826], "prob": [0.0048578050918877125, 0.9869531393051147]}, {"target": [0], "doc": ["i be able to verify that pwsh.exe would behave this way no matter which host i run it from . 5.1 do n't behave that way ."], "issue_sim": [0.12910646200180054], "prob": [0.9999920129776001]}, {"target": [0], "doc": ["what your screenshot show be that <tag> trigger the download of something call <tag>  , not of any of the online - only file in the <tag> folder !"], "issue_sim": [0.49182114005088806], "prob": [0.9999626874923706]}, {"target": [1], "doc": ["here another <tag> that i run right after i finish record the video :", "as you can see from the video , during the first <tag> , online - only file get download , but <tag> still report they as online - only . by the time the second <tag> run , file be already download , so it mark they appropriately ."], "issue_sim": [-0.060886189341545105, 0.32630228996276855], "prob": [0.2938680946826935, 0.6149253845214844]}, {"target": [1], "doc": ["<tag> work just fine with data structure :", "it do exactly what you would expect from other language : it create a _ durable _ reference to a _ specific _ instance .", "the so item in question be use <tag> when they do n't need to not understand that they already have a reference to the parent object and also not understand how array concatenation be do in powershell", "if they have assign to an _ element _ of the array it would have work fine", "but by append an element , they create a new object which , of course , do not update the reference"], "issue_sim": [0.2841264009475708, 0.35161811113357544, 0.4806078374385834, 0.281877726316452, 0.36419224739074707], "prob": [0.04246969893574715, 0.6602928042411804, 0.09609923511743546, 0.020066436380147934, 0.2751530110836029]}, {"target": [4], "doc": ["thanks , @brucepay , but this issue be not about how <tag> function when it be use _ as intend _ , it be about the syntax not prevent _ nonsensical use _", "what you be demonstrate be not per se about _ data structure _  , you be demonstrate use with a _ variable _ , i", ", effectively create a variable _ alia _  to the so question )", "yes , it would have work - but it also would have be _ pointless _", "point to a piece of _ data _  only make sense with instance of _ reference type _ and  you can use a _ regular _ variable to do that - use <tag> in this scenario add nothing and only complicate matter .", "thus , my point be that use it with a  _ variable _ be the _ only _ use that make sense", "and that user can be spare confusion if the language itself prevent other use", "or be i miss other legitimate use of <tag>"], "issue_sim": [0.5538985729217529, 0.334769606590271, 0.2160435914993286, 0.08232218027114868, 0.49383413791656494, 0.3106282651424408, 0.26130399107933044, 0.10812386125326157], "prob": [0.10410197079181671, 0.23061560094356537, 0.03661176934838295, 0.0032851260621100664, 0.45569032430648804, 0.03342539817094803, 0.0013374962145462632, 0.0002399563236394897]}, {"target": [10], "doc": ["since i be the op of the item in question , i think i 'd provide a little more insight into what i be try to do and how i get to the bad <tag> use", "first , here be a simplified version of the code i be try to use :", "$ list = @", "$ pointer =  $ list", "value + = @ { datavalue = $ field", "value ; child = @  }", "i hope this code explain why i be try to point to an array element instead of just use the parent variable contain the array", "second , i do understand that there might be an issue with array concatenation , that be why i first attempt to test with a simple <tag> to an array variable", "see that it work  , i make an incorrect assumption that i could create a persistent pointer to an array member", "when that do n't work , i look for an explanation at so , which i receive", "so , now i know that create reference to a piece of datum have no practical use , and i should be fine use <tag> go forward as long as i know what be just datum and what be a reference to datum  ."], "issue_sim": [0.12760654091835022, 0.17565087974071503, 0.10227059572935104, 0.15348732471466064, 0.19169874489307404, 0.014829671010375023, 0.34268325567245483, 0.3885248005390167, 0.3541543483734131, -0.028143061324954033, 0.36511000990867615], "prob": [0.24545951187610626, 0.024657363072037697, 0.0027755408082157373, 0.0008169896900653839, 0.0005890461034141481, 0.0017947520827874541, 0.550815999507904, 0.1994139850139618, 0.012219499796628952, 0.011487724259495735, 0.439159631729126]}, {"target": [1], "doc": ["@the - cpu1 : thank for the explanation - what you do be an understandable thing to try , especially give that the language do n't prevent you from do so", "so , if there be consensus that apply <tag> only ever make sense when apply to a _ variable _ , perhaps try anything else can be flag as a syntax error .", "that would spare future user the confusion over why their code do n't work as expect"], "issue_sim": [0.2616322636604309, 0.558838963508606, 0.24818573892116547], "prob": [0.5197926163673401, 0.4425863027572632, 0.0009201808134093881]}, {"target": [3], "doc": ["bad example - how about this :-)", "you get a persistent pointer to the _ datum _ store in in the array member", "get a pointer to a specific location in memory be not support in powershell", "everything in powershell be already a pointer  so the set of circumstance where <tag> be _ need _ be very small - basically with api that have in / out / ref parameter .", "com api in particular tend to have <tag> parameter , but , as the example above show , it can be necessary even with powershell api"], "issue_sim": [0.10627682507038116, 0.1393532156944275, 0.38028326630592346, 0.39026951789855957, 0.3608740270137787], "prob": [8.755888848099858e-05, 0.0005917344242334366, 0.02293739840388298, 0.5195173621177673, 0.2588874399662018]}, {"target": [13], "doc": ["an attempt to summarize and clear  conceptual fog :", "* the purpose of <tag>  ) be to enable pass powershell _ variable _ _ by reference _ to", "net method _ parameter _ mark as <tag>/ <tag> / <tag> or , rarely , to powershell function parameter type as <tag>", "* when use as such , a regular powershell variable be _ directly cast _ to <tag> , the variable be wrap so that modify the <tag> instance 's <tag> property be equivalent to assign to the variable directly", "* this indirect access to a variable _ only _ work with a _ direct cast _ :", "* the conceptually clean idiom be :", "* define a _ regular _ powershell variable", "* cast it to <tag> _ as part of the invocation only _ ; e", "* that way , the by - reference passing be a localize aspect of the give invocation ; this mirror c # usage , where you _ must _ use the <tag> / <tag> / <tag> keyword on invocation", "* outside of this use , there be no good reason to use <tag> :", "* there be no point in use <tag> with a _ value _ rather than a _ variable _  - see below", "* if you really want an alias variable  , use <tag> :", "* * why <tag> should not be use with _ value _  * *", "note : there be one edge case : <tag> be useful for case where you do n't care about what the target method / function return via the by - reference parameter ; that say , you can conceive of <tag> as a _ variable _ too  .", "when you use <tag> with a _ value _ :", "* it obviously do n't work with the cast - to-<tag>-on - invocation idiom , whose purpose be to pass a _ variable _", "* * * if you save a <tag> expression in a variable  <tag>", "value <tag> $ ref <tag> ref <tag> out <tag> in <tag>  <tag> $ ref", "value <tag><tag> $ var = <number> , <number> , <number> <tag>  $ var <tag>  <tag> $ ref =   # pointless ; just use the expression result directly <tag>  <tag> get - help about_ref<tag><tag> ref <tag> out <tag> in ` parameter be not mention", "* the description be confuse"], "issue_sim": [0.1873036026954651, 0.3605024814605713, 0.4518619775772095, 0.3694750666618347, 0.13943062722682953, 0.19375884532928467, 0.2974782884120941, 0.23351360857486725, 0.42342597246170044, 0.32522642612457275, 0.399688184261322, 0.3576231896877289, 0.28231000900268555, 0.45917749404907227, 0.17416365444660187, 0.3201436400413513, 0.3075641095638275, 0.168727308511734, 0.45247504115104675, 0.15440525114536285], "prob": [0.042223140597343445, 0.06422283500432968, 0.04736999049782753, 0.058638934046030045, 0.0023749920073896646, 7.716039544902742e-05, 8.434077608399093e-05, 0.007548156194388866, 0.0488227978348732, 0.00024739347281865776, 0.014117846265435219, 0.0004973880713805556, 0.00017495948122814298, 0.12028749287128448, 9.820636478252709e-05, 0.16950127482414246, 0.0001309226208832115, 0.0001418633182765916, 0.0012462286977097392, 1.980532761081122e-05]}, {"target": [7], "doc": ["@the - cpu1 :", "indeed : <tag> be special in that it truly create a reference to the variable _ object _ behind the scene , not its _ present value _", "i understand the intent behind", "but the point be that the use of <tag> here create a   _ pointless wrapper _", "you can simply assign <tag>   directly to a regular variable and get the same effect :", "again , note that this only work because the value of the <tag> entry be an instance of a", "net _ reference type _", "if it be an instance of a _ value type _  , this approach _ fundamentally _ would n't work - whether or not you use the <tag> wrapper ."], "issue_sim": [0.007199210114777088, 0.32425516843795776, 0.0583367794752121, 0.24902072548866272, 0.3477213978767395, 0.24476182460784912, 0.1887657642364502, 0.35893356800079346], "prob": [0.001585951540619135, 0.23096492886543274, 0.0005541903083212674, 0.012735466472804546, 0.016605734825134277, 0.03976349160075188, 0.003004612633958459, 0.22870612144470215]}, {"target": [4], "doc": ["that be a good example in principle , but note that it be n't about _ value _ type - it be about  _ modify a variable in a parent scope _", "without the scope issue involve , again a simple variable will do - note the use of <tag> rather than <tag> , which create _ no _ child scope :", "because <tag> create a child scope , you do need an indirect reference , as demonstrate in your example", "implement the same thing without <tag> would indeed be clunky :", "so , as long as <tag> be update to properly frame the two - disparate - case in which <tag> make sense - use with api , use a convenient <tag> alternative - perhaps that be all we need ."], "issue_sim": [0.3395549952983856, 0.49829384684562683, 0.360672265291214, 0.25218749046325684, 0.44160211086273193], "prob": [0.32343435287475586, 0.5863603353500366, 0.03386204317212105, 0.00634152814745903, 0.3684271574020386]}, {"target": [0], "doc": ["this behavior be by  design :. powershell 's format system _ always _ produce line right - padded to the  output width with space .", "it be only when you copy directly from a windows _ console window _ that _ it _ extend you the  courtesy of trim the trail space", "you can verify the behavior by pipe to <tag> on windows as oppose to manually copy in the console window :"], "issue_sim": [0.5910520553588867, 0.49112755060195923, 0.4695665240287781], "prob": [0.8772353529930115, 0.17430977523326874, 0.01782471500337124]}, {"target": [1], "doc": ["be this something that can be change without break something", "seem inefficient for a console to waste time add and display right padded character ."], "issue_sim": [0.09604723751544952, 0.21752482652664185], "prob": [0.006985757499933243, 0.9966944456100464]}, {"target": [1], "doc": ["this appear to be <tag>", "any table view have padding .", "any non - table view , i make a pr  to remove padding and linebreak"], "issue_sim": [0.04937070235610008, 0.1299755573272705, 0.2962244153022766], "prob": [0.0243642870336771, 0.8662110567092896, 0.10195065289735794]}, {"target": [2], "doc": ["@stevel - msft : thank for the clarification re table view", "we now know that the behavior be by design , but perhaps it be time to revisit that , as @thezim suggest -", "especially give that it be behavior relate to _ for - display - only _ output that no one can expect to rely on for long - term stability and machine parsing , as", "do away with the padding might also help with # <number> and the"], "issue_sim": [0.08974307775497437, 0.034665536135435104, 0.13546426594257355, 0.15546812117099762], "prob": [0.0022198420483618975, 0.058592695742845535, 0.6868864297866821, 0.0017966623418033123]}, {"target": [0], "doc": ["these trail space may be necessary  if we want to recolor the background of the table ."], "issue_sim": [-0.006344285793602467], "prob": [0.9993743300437927]}, {"target": [0], "doc": ["follow \" the law of least surprise \" for how thing generally should work , if you be get plain text output , it should not be pad to some arbitrary width that depend on the size of your terminal window .", "if it be pad  it would possibly be well to be pad to a fix width , dependent on the width of the output table", "or , if you be not recoloure the output , it should n't be pad at all", "or somehow have the trail space trim when copy to the clipboard , however this may be out of your control and depend more on the terminal app in use"], "issue_sim": [0.5789347290992737, 0.33987998962402344, 0.26701846718788147, 0.4141385853290558], "prob": [0.8089314103126526, 0.025956999510526657, 0.011136195622384548, 0.2627950608730316]}, {"target": [0], "doc": ["copy w/ color work fine w/o padding , <tag> in psreadline handle it cleanly ."], "issue_sim": [0.3203672766685486], "prob": [0.9999836683273315]}, {"target": [0], "doc": ["re color and output width : also note that adjust the output behavior base on whether a _ terminal _ be be target or not be sensible , as many unix utility  do  ."], "issue_sim": [0.5746674537658691], "prob": [0.9999788999557495]}, {"target": [0], "doc": ["i think we should support cell in the table have a background , but not the entire table .", "alternatively , if we want to support colored background , then we can special case that to preserve padding"], "issue_sim": [0.09997853636741638, 0.10131947696208954], "prob": [0.7343584299087524, 0.3557819128036499]}, {"target": [1], "doc": ["the wording of <tag> do n't make sense for warning", "by issue a warning , you be by default allow unencrypted .", "i propose an <tag> should be use if warning be choose", "the error proposal should continue with <tag>"], "issue_sim": [0.16943636536598206, 0.2799096703529358, 0.22794394195079803, 0.14172308146953583], "prob": [0.035898357629776, 0.9831205606460571, 0.007455896586179733, 0.0025811076629906893]}, {"target": [1], "doc": ["i disagree with <tag>", "<tag> will already be present and there be no need to add a second parameter to do the same thing .", "there be already discussion and back and forth on <tag> and i think that debate do not need to be revisit"], "issue_sim": [0.059211522340774536, 0.3234352469444275, 0.009108723141252995], "prob": [0.013228164985775948, 0.7565696835517883, 0.5061119794845581]}, {"target": [2], "doc": ["<tag> be a parameter switch to do what exactly", "i think it be a new parameter that be pull out from previous pr specifically for this discussion of whether a warning or error should happen if no parameter be specify", "what i be suggest be that for warning proposal , it be very confuse and do n't make any sense .", "if i run <tag> and it work with a warning display then you have by default allow it to happen", "so why would i need to set <tag>", "now , if you want <tag> to happen so the user interactively choose yes or no", "then it make sense to have an <tag> switch to hide confirmation and choose yes", "error proposal be fine , i just think the wording do n't make sense if credential be still send with just a warning let the user know it happen"], "issue_sim": [0.32666999101638794, 0.4164178669452667, 0.1824215054512024, 0.19321800768375397, 0.0916057899594307, 0.2009977251291275, 0.15658965706825256, 0.4835625886917114], "prob": [0.011758317239582539, 0.26690223813056946, 0.2357124239206314, 0.02060147002339363, 0.0012239179341122508, 0.014814266003668308, 0.005585924722254276, 0.2114088088274002]}, {"target": [6], "doc": ["and what i be say be there be no point in have yet another parameter that do the same thing .", "if <tag> do n't already exist , then yea , maybe something else", "but there be no point in two parameter do the same thing", "see both <tag> and <tag> would be awkward", "the warning would be temporary", "the end game be remove the legacy usage , imo", "for that temporary period of time have use the same parameter even if the wording do n't suit everyone , be well than add another parameter that will just end up be remove"], "issue_sim": [0.05344744771718979, 0.15695971250534058, 0.03813925385475159, -0.03049631416797638, 0.0644049197435379, 0.12342582643032074, 0.23570804297924042], "prob": [0.9183151721954346, 0.011882324703037739, 0.00663014268502593, 0.03437172621488571, 0.0016770444344729185, 0.0003803751606028527, 0.8414287567138672]}, {"target": [0], "doc": ["the new <tag> parameter option give a terminate error for non - https and can only by suppress with <tag> ."], "issue_sim": [0.4816949963569641], "prob": [0.9999589920043945]}, {"target": [1], "doc": ["i think you be separate out logic that should n't be separate", "<tag> and <tag> behavior should match when send over unencrypted .", "i think that be where my confusion be come in", "have one error by default and the other give a warning would be inconsistent", "so either both error , both warn , or both ask confirmation", "maybe that be what your 3rd proposal about <tag> be about", "also , you be not propose remove the <tag> parameter right , just clean up the code on how it use"], "issue_sim": [0.05863408371806145, 0.4806968569755554, 0.0048353951424360275, 0.13757134974002838, 0.16376464068889618, 0.10536448657512665, 0.28942278027534485], "prob": [0.07272177934646606, 0.3148995637893677, 0.0033086463809013367, 0.010419081896543503, 0.0072653815150260925, 0.017077406868338585, 0.1654466688632965]}, {"target": [11], "doc": ["that be to avoid a break change now", "ultimately , there will be a break change", "but , we can go this route with a warning temporarily an avoid break it until we have to", "that be exactly it", "basically , <tag> have <number> use now", "the legacy use where it be just <tag> and the new use where it be <tag>", "the legacy use only send the <tag> header when a web server have issue a <tag> and <tag>", "many api and oauth grant flow require <tag> auth without the <tag> or <tag>", "the legacy never error", "the new usage allow for send the <tag> header always and it give a terminate error when you try anything other that http unless you provide the switch", "my goal  be to remove the legacy usage and just standardize on the <tag>   parameter", "that way we can add more authentication method which may or may not use the <tag> parameter  . but that be not a trivial task .", "for one it be a significant breaking change and for another there be a lot of code cleanup associate with it", "so get that do before 6", "0 rtm when it be not really a priority be unlikely", "so that be what the 3rd option be about", "it be more of a \" do nothing until we do it right and when we can doit right , this be how \"", "but i would rather up the security game in the web cmdlets * before * 6", "0 rtm even if some of those measure be temporary", "no , it will stay", "but , to use it , in the future you will need to supply <tag>", "for now , the legacy behavior be leave in"], "issue_sim": [0.018025286495685577, -0.04218010604381561, 0.1518586277961731, 0.034989528357982635, 0.040500346571207047, 0.18384946882724762, 0.46649616956710815, 0.44776564836502075, 0.12188492715358734, 0.47352999448776245, 0.3884984850883484, 0.5757976174354553, 0.16516315937042236, 0.023723706603050232, 0.17916667461395264, -0.0523606538772583, 0.09118044376373291, 0.1743159145116806, 0.10778579115867615, 0.054341740906238556, 0.04681669920682907, 0.09585360437631607], "prob": [0.0002712519490160048, 0.006519437301903963, 0.028390204533934593, 9.154069994110614e-05, 0.000376527284970507, 0.0015560922911390662, 0.0035874764434993267, 0.0006009721546433866, 5.23454127687728e-06, 0.02252998575568199, 0.00024201645283028483, 0.09149784594774246, 0.0004030657873954624, 2.4269256755360402e-05, 9.138992754742503e-05, 3.510690658004023e-05, 0.0017812344012781978, 3.387656033737585e-05, 4.66941564809531e-05, 9.544372733216733e-05, 0.0004536781634669751, 0.0003809358167927712]}, {"target": [2], "doc": ["i like the use of the backtick", "i 've be do this for a long time and i like it", "so , why change something that work ?", "by the way ,   a script with code have backtick copy / paste to a console work", "i use it all the time"], "issue_sim": [0.3349721431732178, 0.03155110031366348, 0.06361252069473267, 0.38445818424224854, 0.021330270916223526], "prob": [0.012577570043504238, 0.0845683142542839, 0.15688908100128174, 0.20449164509773254, 0.0011614435352385044]}, {"target": [1], "doc": ["if you read the proposal all the way through , it mention that this would * * not * * change the exist mechanism", "you ca n't because that would break too many script .", "this issue be mean to discuss if it be worth add another mechanism for line continuation", "i know , right", "have more than * * one * * way to do something in powershell be shocking i tell you"], "issue_sim": [0.10548874735832214, 0.30567067861557007, 0.25250622630119324, -0.021617665886878967, 0.49990588426589966], "prob": [0.03550504148006439, 0.9401994347572327, 0.005726070608943701, 6.48616551188752e-05, 0.007010329514741898]}, {"target": [0], "doc": ["keep in mind that neither break on | or use splatte be an option when invoke a native executable with a lot of lengthy parameter .", "that say , when i can avoid backtick i too try to avoid it"], "issue_sim": [0.46477967500686646, 0.2667057514190674], "prob": [0.9714250564575195, 0.0010020240442827344]}, {"target": [0], "doc": ["i personally do n't feel it be necessary to add a new language construct . instead of that first what come on my mind be well text editor support .", "a lot of token be highlight in editor , so why not backtick", "and the rest of the line behind the backtick might be in other color with mean \" warning , this might be wrong \""], "issue_sim": [0.21742020547389984, 0.3543925881385803, 0.16096554696559906], "prob": [0.8094594478607178, 0.013244629837572575, 0.20880404114723206]}, {"target": [5], "doc": ["you most certainly * can * splat to native command", "the catch be that native _ switch _ command do n't accept \" true \" value ;-)", "could just as easily be :", "i do n't like line continuation character", "i wish we do n't have the one we have", "one problem with line continuation character be that the only reason for they to exist be to enable people to stay within some arbitrary line width .", "next thing you know you 've get people try to make a <number> character file path somehow fit on <number> character line by split it into many string and append they together -- as if that actually _ improve _ readability"], "issue_sim": [0.14564695954322815, 0.2784954309463501, 0.07600794732570648, 0.338821679353714, 0.0728939101099968, 0.3045870065689087, 0.4118415415287018], "prob": [0.004702001344412565, 0.3257642388343811, 0.0030637881718575954, 0.0015172173734754324, 0.01464877836406231, 0.42390763759613037, 0.29467278718948364]}, {"target": [2], "doc": ["the reason that i like stay within some \" arbitrary line width \" be because a lot of devs run portrait monitor", "have a <number> or <number> character limit mean that my code fit in the width of the window", "i would love to have a switch to enable a line terminator as oppose to implement yet another continuation character ."], "issue_sim": [0.12659664452075958, 0.24037989974021912, 0.372251957654953], "prob": [0.19641603529453278, 0.031427860260009766, 0.8565353155136108]}, {"target": [0], "doc": ["just kid : soon you will suffer from 8.3  name compatibility issue ."], "issue_sim": [0.10948016494512558], "prob": [0.9999784231185913]}, {"target": [0], "doc": ["powershell already support the <tag> directive in script to set minimum compatible version ."], "issue_sim": [0.579475998878479], "prob": [0.9998462200164795]}, {"target": [1], "doc": ["@ebelew @kilasuit thank you", "but be there a way to set a know maximum compatible version ?"], "issue_sim": [0.002860208973288536, 0.14802569150924683], "prob": [0.006302508059889078, 0.9487513303756714]}, {"target": [2], "doc": ["@kilasuit assume we write a script today which use unix alia such as <tag> for <tag> , and in some later powershell version , that alias be remove", "it will stop work", "if powershell engine can know which version the script be wrtten for , it may be able to provide compatibility mode for legacy script ."], "issue_sim": [0.5779021978378296, 0.10343968123197556, 0.6137750148773193], "prob": [0.06266951560974121, 0.0004436055605765432, 0.9937352538108826]}, {"target": [0], "doc": ["that s simple = do not ever use aliases in script !", "we even have a rule in the static analysis engine psscriptanalyzer <url> warn about this", "powershell engine will not run a script in downlevel version if you be to put in"], "issue_sim": [0.2852039337158203, 0.14815428853034973, 0.5841484665870667], "prob": [0.4979648292064667, 0.19559922814369202, 0.04911230877041817]}, {"target": [0], "doc": ["alias be only really intend for interactive use so use they in script be really an anti - practice and something that i would seriously recommend against use"], "issue_sim": [0.2858031988143921], "prob": [0.999981164932251]}, {"target": [1], "doc": ["@kilasuit i agree with you , but the alia issue be just an example", "if we can let powershell * * know the version a script be create for * * , we will be able to introduce \" break change \" to powershell itself in the future by provide compatibility mode for legacy script  ."], "issue_sim": [-0.06775134056806564, 0.739254355430603], "prob": [0.038292046636343, 0.9548420310020447]}, {"target": [1], "doc": ["we already have this with the requires statement which to fit your suggestion would be well if that be expand to include a -maxversion arguement", "change the ps1 to ps6 be not really a suitable idea for this as this will increment through the version and i be not sure that there be much benefit in enforce that go forward .", "i would either change the issue title to expand # require should have a -maxversion arguement or raise a new issue on this"], "issue_sim": [0.13157148659229279, 0.4657246172428131, 0.25336331129074097], "prob": [0.15845638513565063, 0.9496007561683655, 0.0059626540169119835]}, {"target": [1], "doc": ["i guess window only", "the slowness come from have to reopen each file to get the hardlink count .", "the rest of the information be available in the fileinfo object", "for the hardlink , we need to call <tag>  to get a handle , and then use it to get the handle info", "exe do n't do this", "it show link type when there be a reparse - point", "we could display when there be a reparse point , and ignore hardlink"], "issue_sim": [0.032911814749240875, 0.22323966026306152, 0.06859219074249268, 0.2709805965423584, 0.11083124577999115, 0.24230949580669403, 0.28704318404197693], "prob": [0.0005204248591326177, 0.9848293662071228, 0.0023146432358771563, 0.05818323791027069, 0.00010843948984984308, 0.002462708158418536, 0.061297256499528885]}, {"target": [0], "doc": ["but it look as a break change and also we need a way to expose the information by demand"], "issue_sim": [0.2852662205696106], "prob": [0.9994404911994934]}, {"target": [1], "doc": ["iirc a hard link be n't set as a reparse point so have a check on that wo n't work", "i be unsure as to the speed but you can use  and  to enumerate all hard link on a file without call <tag> .", "as for what that do internally i have no idea"], "issue_sim": [0.14515405893325806, 0.3074549436569214, 0.07871411740779877], "prob": [0.3457897901535034, 0.8833372592926025, 0.0014762554783374071]}, {"target": [1], "doc": ["the problem be the extra roundtrip to disc , since we do n't get enough information from the fileinfo", "and go from a fileinfo to a filehandle , which be need to get the the hardlink count , be expensive on window .", "i argue that this info be so rarely need that pay the price all the time be not motivate", "here be some pointer to the relevant doc for people interested in look deeply :", "| the api to get extend file info", "|enum to select info to retrieve", "| the struct for get the hardlink count", "| source code for", "| structs etc use by the framework to get the datum from the file system"], "issue_sim": [0.2243262529373169, 0.3793872594833374, 0.26025649905204773, 0.14449234306812286, 0.20908601582050323, 0.05553586781024933, 0.14551512897014618, 0.10215247422456741, 0.1505240499973297], "prob": [0.12947598099708557, 0.9146237373352051, 0.004309098236262798, 0.00033440793049521744, 2.588713505247142e-05, 0.0003395764797460288, 0.003639012575149536, 0.0009677449124865234, 0.00849301740527153]}, {"target": [2], "doc": ["@isazonov i be not that concerned about the linktype as it be n't display by default", "i be start to think that the right solution be just to change the default format", "we can keep the current as a non - default view ."], "issue_sim": [0.33973994851112366, 0.30857783555984497, 0.09954249858856201], "prob": [0.00756937637925148, 0.039123836904764175, 0.9735018610954285]}, {"target": [1], "doc": ["i would be ok with remove hardlink by default", "a dynamic param for filesystemprovider may be an ok solution ."], "issue_sim": [0.2825051546096802, 0.08024721592664719], "prob": [0.16382940113544464, 0.6437735557556152]}, {"target": [14], "doc": ["@isazonov   that be helpful , thank", "the documentation talk about the \" last _ operation _ \" , without define what _ operation _ mean in this context", "in practice , as you 've demonstrate , that mean it be about the last _ command _ or _ expression _", "by _ command _ i mean specifically mean something parse in _ argument mode _  , as oppose to an _ expression _", "i be not sure if there be an establish umbrella term for both  , but call the umbrella term \" command \" too be obviously not a good choice", "note that even if we assume that \" operation \" mean command or expression , the claim that <tag> reflect the _ last _ operation be n't always true :", "* * exception * * :", "even though <tag> succeed , <tag> still reflect the  failure of <tag>", "another exception appear to be when the last expression be execute inside a _ conditional _ :", "even though <tag> be the last expression evaluate - and be clearly evaluate successfully - <tag> still reflect the failure of <tag>", "there _ be _ a case where the command 's <tag> status be preserve , at least a command in the _ syntactical _ sense : if a command by the specified name can not be find :", "despite embed in an expression , the inability to find the command be reflect in <tag> - contrast this with <tag>", "yes , there be a difference between powershell not find the command and an invoked command report a non - terminating error , but be it worth treat these two case differently in term of their <tag> behavior", "* * conclusions :* *", "currently , make a command part of an expression invariably lose its <tag> status - except if the command name be n't recognize at all .", "* you could make the case that error in _ expression _ should always result in _ terminate _ error  that should be handle with <tag> , with <tag> only report _ command _ error , irrespective of whether a command be part of an expression or not", "do it really make sense to treat <tag> as a _ non_-terminate error , for instance"], "issue_sim": [-0.030370134860277176, 0.11055286228656769, 0.01825609616935253, 0.18468761444091797, 0.08746224641799927, 0.2703419327735901, 0.02354525774717331, 0.2660589814186096, 0.10018002986907959, 0.3054066002368927, 0.2011355459690094, 0.3300049901008606, 0.2891705632209778, 0.033094316720962524, 0.13270975649356842, 0.29622024297714233, 0.21443529427051544], "prob": [0.0038533350452780724, 0.09701261669397354, 0.007709347177296877, 0.0014462631661444902, 0.0018101402092725039, 0.0036692912690341473, 0.00042473478242754936, 0.011697638779878616, 0.0018762267427518964, 0.02978552132844925, 0.03952927142381668, 0.014801775105297565, 0.17063848674297333, 0.00027099388535134494, 0.05940494313836098, 0.06019742041826248, 0.03653816133737564]}, {"target": [1], "doc": ["i wish that be true ; it be my initial expectation , reflect in the first post", "however , as you point out , if the entire \" operation \" be an _ expression _  , <tag> reflect the _ expression 's _ success , not that of the embed command :", "<tag> yield <tag> , with the expression 's success eclipse <tag> 's failure", "exclude command in conditional make sense , but note that fail _ expression _ be still reflect in <tag> :", "this be a contrived example , but it lead i back to my point that perhaps _ expression themselves _ should _ never _ set <tag> , only _ command _", "and even if we assume that the current behavior be by design ,", "* the rule ,  , be hard to remember", "* the rule be n't adequately explain in"], "issue_sim": [0.0989408791065216, 0.1307263970375061, 0.12384656071662903, 0.37144437432289124, 0.21599850058555603, 0.3700588047504425, 0.035062894225120544, -0.0661584883928299], "prob": [0.13349978625774384, 0.23839615285396576, 0.10426578670740128, 0.009434713050723076, 0.6827790141105652, 0.014018174260854721, 0.006796058267354965, 0.0022439169697463512]}, {"target": [2], "doc": ["@stevel - msft , @isazonov : i be glad that * * we agree that the doc need update * *", "for the sake of update the doc , * * let 's see if we agree what the _ current _ behavior be * * :", "again , use the term \" command \" in this abstract way be invite confusion , give the fundamental distinction between a command proper  and an expression", "when i use the term \" command \" an \" expression \" below , i be refer to their _ specific _ definition , and by \" operation \" i mean the _ abstraction _ over the two , _ exclude _ multi - command pipeline", "i be not cover the case where _ terminate _ error be treat as non - terminating one", "also note that the behavior describe be arrive at by trial and error , not source - code analysis", "* * current behavior * * :", "* if a command be execute by itself , boolean variable <tag> reflect whether it run successfully ; success / failure be determine by  if a cmdlet / script / function generate at least one non - terminating error , or  in the case of call an external utility , if its exit code be zero", "* inside a conditional , _ command _ success be by design _ not _ reflect in <tag>", "if a command be embed in an expression - whether via <tag> , <tag> , or <tag> - its <tag> status be lose , because the success of the expression _ itself _ be reflect in <tag>", "* reason why expression   may fail include : invalid operand  <tag> $", "<tag> $ false <tag> $", "<tag> try / catch <tag> try / catch ` to catch they - something you can not do with non - terminate _ command _ error", "i be happy to create a new issue focus on just that"], "issue_sim": [0.1911611258983612, 0.26117751002311707, 0.09799528867006302, 0.1805630326271057, 0.14549925923347473, 0.31313303112983704, 0.29988643527030945, 0.19112080335617065, 0.3285403847694397, 0.26958930492401123, 0.16249161958694458, 0.280456006526947, 0.23179513216018677, 0.13386665284633636], "prob": [0.05194755271077156, 0.30610620975494385, 0.058308906853199005, 0.36782434582710266, 0.003963591530919075, 0.0140283964574337, 0.0017993850633502007, 0.3556572496891022, 0.010254346765577793, 0.21749931573867798, 0.0008063048589974642, 0.00013925325765740126, 0.011930115520954132, 0.0011335195740684867]}, {"target": [2], "doc": ["should it be other way around", "since powershell explicit cast use <tag> :", "i would expect that implicit cast to parameter type should also use <tag> ."], "issue_sim": [-0.016059869900345802, 0.5333133935928345, 0.37598085403442383], "prob": [0.010550657287240028, 0.014093223959207535, 0.9800711274147034]}, {"target": [0], "doc": ["it seem strange that powershell ignore culture .", "we need more discussion - it be break change"], "issue_sim": [0.48871922492980957, -0.013305507600307465], "prob": [0.30305010080337524, 0.5100623965263367]}, {"target": [0], "doc": ["i guess it be for the script to be more portable .", "i add the break change label"], "issue_sim": [0.08718366175889969, 0.22421321272850037], "prob": [0.9930657148361206, 0.0019554358441382647]}, {"target": [2], "doc": ["@powershell / powershell - committee have reject the pr # <number>", "quote the decision here :", "due to the potential for break many exist module , it be too risky to make this change so that c # and script cmdlet be alike for this case .", "we should keep the current behavior", "i will close this issue as ' wo n't fix '"], "issue_sim": [0.42996180057525635, 0.003313180059194565, 0.4228562116622925, 0.07671855390071869, 0.06215495616197586], "prob": [0.07168057560920715, 0.016705935820937157, 0.9191657304763794, 0.022194722667336464, 0.03268249332904816]}, {"target": [2], "doc": ["do anyone know how many  break change we 've already make", "it seem so much that talk about these change be no long relevant", "also if we already be invariantculture for argument and cast in script where be entry point where customer can catch problem ?"], "issue_sim": [0.0675770491361618, 0.051661938428878784, 0.25672444701194763], "prob": [0.07672082632780075, 0.1100253164768219, 0.6032085418701172]}, {"target": [2], "doc": ["@isazonov one example i get from the committee be the c # module run on , for example , japanese machine", "after this change , it may happen that some cmdlet be break with the same input argument because the conversion have change", "but i do agree with you that this inconsistency be unpleasant"], "issue_sim": [0.0027934443205595016, 0.53926682472229, 0.04786571487784386], "prob": [0.044715385884046555, 0.790607213973999, 0.10221849381923676]}, {"target": [18], "doc": ["to unify some of the stuff which i raise in # <number>", "with non - us , culture select    <tag>   return \" <number> january <number> 00:00:00 \" which be   * * what most user would expect * * and therefore * * good * *", "if the culture be us it return \" thursday , september <number> , <number> 12:00:00 am \" , still * * what user would expect * * however use <tag> make a * * non - portable script * * because the output for a give input be n't consistent , and therefore * * bad * *", "cast    with <tag> or <tag> or <tag>   * * always use invariant culture", "if you be on en - us   <tag>   show the time use <number> hour clock where the en - us locale use <number> hour with \" am / pm \"   if you be in france and use \" , \" instead of \"", "\" for your decimal point \"123,45 \"   might give an unexpected result because it use invariant", "<tag> ,   <tag> and <tag> use local  culture", "use these in a script with \" whatever the local culture happen to be \" can also produce non portable script", "if number will be in french format , it be well to state french culture explicitly than assume the script will only ever run with culture set to french", "stay with french we can see that * * the   <tag> operator sometimes support local culture and sometimes invariant", "compile cmdlet parameter seem to follow <tag>   so with french select   <tag>   understand that \" janvier \" be the first month of the year in this culture but    <tag> fail because a space be not accept as a separator", "as a side note , <tag> wo n't process _ either _ form", "i be not sure how <tag> link to <tag> in   what @daxian - dbw   say above :", "when we write <tag>   it   look like a cast , although it be really add an argumenttypeconverterattribute   that _ will do a cast", "_    if would be odd if   the result be not the same as", "it _ could _ have be create to do the same as", "but people would n't expect this version", "this be the solution for the proxy - function case , not to specify a type in the param block and to the use   convert inside the function", "the inconsistency of -as and the different handling of date time parameter in different kind of command be annoying , but the problem that would result from make everything consistent be far great .", "it be worth ensure that help for datetime parameter say whether they accept local format or require invariant"], "issue_sim": [0.01674749329686165, 0.17027392983436584, 0.40848830342292786, 0.35499346256256104, 0.19644232094287872, 0.31369277834892273, 0.25400686264038086, 0.16535136103630066, 0.20700964331626892, 0.14933335781097412, 0.5734361410140991, 0.05899100750684738, 0.065575510263443, 0.15021635591983795, 0.0720939114689827, 0.018958285450935364, 0.02094217576086521, 0.4333110451698303, 0.38177919387817383, 0.28425174951553345], "prob": [0.0058688027784228325, 0.000612603616900742, 0.02768365852534771, 0.001681285910308361, 0.047326840460300446, 0.001357479253783822, 0.000700396834872663, 0.0010353205725550652, 0.028605738654732704, 0.00031888371449895203, 0.004841931629925966, 2.6439396606292576e-05, 4.3943557102466e-05, 0.005499066319316626, 4.0549210098106414e-05, 0.0003554336726665497, 9.598725227988325e-06, 0.014611384831368923, 0.08241420984268188, 0.0034167550038546324]}, {"target": [1], "doc": ["that sound pretty complicated -", "why should n't a module author just target <tag> and only depend on assembly that also target an appropriate version of <tag> ?", "take a look at how msbuild be think about this issue - it be really a similar thing : <url>", "i think we 'll need to do the same for powershell - ship the facade assembly alongside powershell", "exe in <tag> and , if applicable , <tag> - we would need to do that for v3 and v5", "1 at a minimum , maybe v4 and v5 as well"], "issue_sim": [0.053527671843767166, 0.3918260931968689, 0.4553661346435547, 0.5927659273147583, 0.20044094324111938, -0.021843547001481056], "prob": [0.0008960560080595315, 0.6431060433387756, 0.000578580133151263, 0.001486888388171792, 0.027568470686674118, 0.00010465339437359944]}, {"target": [15], "doc": ["first of all ,", "i think we be on 1", "now , i be go to go ahead and  accept as a given that you can find some way of ship all \" the \" facade into the old version of powershell on all oses", "i actually think the whole \" facade \" thing be n't go to work until .netstandard2 , but if it be an option now , that sound great .", "do that mean you be go to ship * * everything * * in powershell core , too -- even if you be not use it yourself", "i mean , otherwise , you be only cover the basic , and you have barely dent the problem", "however , regardless :", "powershell module be still go to have half a metric gigabyte of dependency , , which they only need for core", "we can make a list of what you 've ship to reduce what get package , right , but still", "what do i do with \" native \" library", "i mean , even <tag> and <tag> be compile to _ native _ , but have you see <tag>", "the other day i try", "it have no dependency on", "5 , but when i run", "since package manager 's motto be \" be prepare , \" i manage to get back 318,011,877 byte worth of stuff", "now , for cryptography , you guy might choose to ship it in powershell core , but my question be , in general -- how do i load the right library , when it be * * just not * * cross - platform"], "issue_sim": [0.045234315097332, 0.01002618670463562, 0.4721173942089081, 0.09828578680753708, 0.4017266035079956, 0.030736440792679787, 0.026344377547502518, 0.5395292639732361, 0.17457588016986847, 0.025178836658596992, 0.1969650238752365, -0.018670497462153435, 0.11784394085407257, -0.031041117385029793, 0.24302895367145538, 0.5236287117004395], "prob": [0.00027007641620002687, 0.000113608744868543, 0.21509721875190735, 0.6700814366340637, 0.00048096690443344414, 0.00032815340091474354, 1.2549983239296125e-06, 0.0008467212901450694, 0.00030206466908566654, 2.0879606665857864e-07, 0.0003357642563059926, 1.3468536508298712e-07, 1.890804696813575e-06, 1.2382713521219557e-06, 0.003342467825859785, 0.4141079783439636]}, {"target": [1], "doc": ["@lzybkr we  * must * be able to produce module like this one :", "we either need a way to ship \" core \" _ and _ \" full \" module to the gallery  , or we need a solution for load the right one from a module package contain both .", "not to mention that if you build a * * binary module * * you have to take a dependency on  , which be * cross compile * -- force the binary module to cross - compile", "it be therefore * impossible * , as thing stand , to ship a cross - platform binary module the way you describe", "we have to package both module as submodule into one module package , and use a script module _ facade _ to do os detection and load the right one", "net <number> ship , and a _ well way _ get sort out , we be go to be knee deep in hack for this"], "issue_sim": [0.23759132623672485, 0.4456600546836853, 0.47664299607276917, 0.35707104206085205, 0.4784301221370697, 0.09040369093418121], "prob": [0.0010167827131226659, 0.6825594902038574, 0.26144805550575256, 0.005563959013670683, 0.11455199122428894, 0.042254265397787094]}, {"target": [1], "doc": ["@lzybkr have you consider pack the shim in a set of module in the gallery maintain by microsoft while portable module specify the dependency in their manifest as a require module rather than custom tag", "to i this look like the classic problem of share a dynamic library and a good solution be a package manager .", "msbuild do not have a package manager  but powershell do"], "issue_sim": [0.5457284450531006, 0.36640042066574097, 0.6281284093856812], "prob": [0.004931270610541105, 0.9718238115310669, 0.024285975843667984]}, {"target": [0], "doc": ["hmm , be it too much to ask apple to add a <tag> option to <tag> and have powershell call the binary ?", "i be all for having <tag> support this , but , i be somewhat against reinvent it within powershell", "if macos update their implementation to include something like <tag> , then we 'd have to stay on top of that change and add it to our own implementation", "it make well sense to i to call out to <tag> and either parse or evaluate the result"], "issue_sim": [0.39317265152931213, 0.4762701988220215, 0.335679292678833, 0.12822261452674866], "prob": [0.19974277913570404, 0.01349171157926321, 0.09004224836826324, 0.010341531597077847]}, {"target": [1], "doc": ["@markekraus nice , i be completely unaware of <tag>", "if invoke with <tag> we can use it directly from powershell already :"], "issue_sim": [0.13993923366069794, 0.5238652229309082], "prob": [0.008991864509880543, 0.93007892370224]}, {"target": [0], "doc": ["as i comment / update the issue for : by invoke <tag> , nothing need to be parse .", "the c - shell command be syntactically valid powershell - we just need to temporarily define <tag> :", "if anyone want to lobby apple for a <tag> option and if they ever implement it , that 'd be great , but i certainly do n't think powershell should block on that"], "issue_sim": [0.3258735239505768, 0.48220759630203247, 0.35215914249420166], "prob": [0.33380258083343506, 0.16238494217395782, 0.282042920589447]}, {"target": [0], "doc": ["i feel like create a temporary function and then delete it be a bit hacky .", "in my experience , environment variable be use way more heavily in * nix than windows", "with that in mind , i think it probably   make sense to expose a <tag> with the <tag> alia along with a <tag> with the <tag> alia", "<tag> would take a <tag> and <tag> with <tag>   as position <number> and <tag> position <number>", "this would also help with some confusion about env var only accept string as the <tag> parameter would accept a string", "with that in place , the profile can work very similar to the csh : <tag> for <tag> , execute with <tag> , and then evaluate with <tag>", "this , of course , mean expose <number> new cmdlet that will probably not see much heavy usage outside of macos and possibly other * nix", "they be kind of redundant give powershell expose the <tag> variable prefix", "but i still think this be the clean solution", "another possibility be to have <tag> as an alias of <tag> and some kind of logic to set an environment variable when the <tag> alia be call", "i be not real thrill with this solution", "i dislike command behavior change base on <tag>", "this be just as \" hacky \" to i as create a temporary function and remove it"], "issue_sim": [0.25097620487213135, 0.20650511980056763, 0.19407306611537933, 0.38398265838623047, 0.2924094796180725, 0.4043726921081543, 0.2576836347579956, 0.3265554904937744, 0.11740511655807495, 0.34477031230926514, -0.02912084385752678, 0.2917538285255432, 0.19434481859207153], "prob": [0.45006054639816284, 0.004633979871869087, 0.2082202434539795, 0.001679829554632306, 0.004051110707223415, 0.023615945130586624, 0.012416128069162369, 7.064473174978048e-05, 0.0001248222542926669, 0.09812130033969879, 6.726399442413822e-05, 0.00032026131520979106, 0.0006914861151017249]}, {"target": [1], "doc": ["in my mind , i 've be think like :", "short - term be to finish startup config and put a value in there that concatenate windows ps psmodulepath", "* long - term be the compat module that help with whitelist and warning", "we should do short - term , i think , before 6"], "issue_sim": [-0.03898775577545166, 0.3552719056606293, 0.28406423330307007, -0.009564032778143883], "prob": [0.05154122784733772, 0.3142695426940918, 0.0199107825756073, 0.018574077636003494]}, {"target": [0], "doc": ["have a set in startupconfig be fine as a brute force way to get people to help we test compatibility , the compat module be something we can do separate from pscore6 in the gallery perhaps and ideally drive by the community"], "issue_sim": [0.4724428653717041], "prob": [0.9999469518661499]}, {"target": [0], "doc": ["we could add <tag> switch to <tag> cmdlet on windows to enable search in   legacy windows powershell psmodulepath - s", "also it allow use <tag>"], "issue_sim": [0.6462504863739014, 0.09846404939889908], "prob": [0.8884745240211487, 0.0015086070634424686]}, {"target": [1], "doc": ["@isazonov it be not just <tag> , but also <tag>", "listlegacymodule ` might be ok as the long term we want everyone to have module compatible with pscore as well as available in the psgallery ."], "issue_sim": [-0.04403577372431755, 0.35647401213645935], "prob": [0.07604030519723892, 0.7997518181800842]}, {"target": [0], "doc": ["this change do n't make sense on new nano server container .", "this be what you see when you start microsoft / nanoserver - insider - powershell :", "\" warning : appended windows powershell psmodulepath \"", "<number> of those <number> path be unnecessary on new nano server"], "issue_sim": [0.19158190488815308, 0.3596929609775543, 0.42319655418395996, 0.15407827496528625], "prob": [0.972478449344635, 0.18432489037513733, 0.017239168286323547, 0.001399270840920508]}, {"target": [0], "doc": ["base on the initial feedback , i think it make sense to have the windows powershell psmodulepath add by default as many module just work ( or seem so without exhaustive testing", "-  implement in the console host instead of userprofile", "-  make configurable in startup json", "-  blacklist or whitelist windows powershell module", "this should also resolve <url>"], "issue_sim": [0.603926420211792, 0.2761188745498657, 0.19111594557762146, 0.5241924524307251, 0.06769609451293945], "prob": [0.9632810950279236, 0.013939782045781612, 0.012389644980430603, 0.019866706803441048, 0.0026751882396638393]}, {"target": [1], "doc": ["@powershell / powershell - committee close on shipping either an <tag> or <tag> on the gallery", "we do n't want to expose a bunch of module that do n't work yet", "* in the future , we * can * expose module that be know to work within ps 6", "* this feel like a bit of a hack , and we do n't want to be tie to keep it forever", "* there be still value in easily add your windows psmodulepath"], "issue_sim": [0.4540831446647644, 0.34863272309303284, 0.2137461006641388, 0.09051968157291412, 0.1886260211467743], "prob": [0.01745411567389965, 0.5160502791404724, 0.04540460184216499, 0.38547393679618835, 0.017415620386600494]}, {"target": [2], "doc": ["i suggest start with _ white list _ of windows powershell module which we want to enable to load from windows powershell module path", "the white list should contain only test and approve module", "hence we do not need new cmdlet - we can   implicitly use windows powershell module path  and enhance import - module to check the white list _ after _ module search in psmodulepath ."], "issue_sim": [0.6570687294006348, 0.23167107999324799, 0.7030428647994995], "prob": [0.31340891122817993, 0.013385258615016937, 0.8851146101951599]}, {"target": [0], "doc": ["i be go to ask in # <number> about plan for update the xdscresourcedesigner module , however base on this change , i guess there be no need ."], "issue_sim": [0.27344846725463867], "prob": [0.999921441078186]}, {"target": [0], "doc": ["however , the first question that come to my mind be unit testing for class resource", "we do n't yet have an effective way to test class in powershell", "be n't this a block factor"], "issue_sim": [0.23247195780277252, 0.4522322416305542, -0.04010754078626633], "prob": [0.5823083519935608, 0.09788424521684647, 0.09206663817167282]}, {"target": [0], "doc": ["look through the comment in that issue  , i would say that this issue should be completely and utterly block on massive improvement in more useable and complete class support in ps , with the inclusion note in that issue by @seeminglyscience .", "in other word , if this be the route y' all wanna go down , please be * * absolutely sure * * that the underlie infrastructure here be actually up to the task and much more complete than it be currently , so we do n't have hundred or thousand of folk depend heavily on a subsystem that be fundamentally incomplete", "foundation be extremely important if you be try to put all of the dsc infrastructure on top of it and it alone"], "issue_sim": [0.11460554599761963, 0.10029618442058563, 0.2591044008731842], "prob": [0.8439765572547913, 0.5982993245124817, 0.0187731571495533]}, {"target": [1], "doc": ["@vexx32 we should separate what be need by class for dsc vs generically in powershell", "we have an issue that link to all the know limitation of class , but i be not aware of any limitation purely for dsc usage as there be resource write for dsc use class already and the original design be specifically for dsc usage ."], "issue_sim": [0.5085404515266418, 0.4774821996688843], "prob": [0.010165662504732609, 0.9481666088104248]}, {"target": [1], "doc": ["as have be mention in the pester issue pester / pester#706  ,", "the reliability of a purely class - base dsc resource will be very difficult to ensure . they be not testable .", "judge from the comment in that thread , fix that will by necessity involve significant reworking / improvement in how class in ps as a whole be handle", "i do n't know about y' all , but the idea that * * all * * dsc resource will be fundamentally impossible to mock and otherwise difficult at good to shore up with proper test make i very uneasy", "if you be go to force folk to use class for dsc , please make they usable", "ps class be so annoying and limit to use in ps that if i find myself need they , i usually move to c # instead anyway", "i do n't think dsc resource author should be force into a frustrating experience"], "issue_sim": [0.09539546072483063, 0.29935726523399353, 0.07672109454870224, 0.2563067674636841, 0.2669838070869446, 0.13533857464790344, 0.31884533166885376], "prob": [0.029893038794398308, 0.17140565812587738, 0.14214734733104706, 0.2595338821411133, 0.010639735497534275, 0.13042107224464417, 0.0031199350487440825]}, {"target": [0], "doc": ["after some experiment with powershell class i do a long time ago i find many limitation and i 'd expect an endless stream of claim as soon as dsc community start actively use they .", "i 'd like to see example of dsc resource implementation on powershell class to gain confidence otherwise", "do you consider a dsl", "i remember @rjmholt 's old experiment with dynamic keyword support <url> perhaps this be a good alternative for dcs development"], "issue_sim": [0.31183916330337524, 0.503643274307251, -0.042754627764225006, 0.31753695011138916], "prob": [0.8654773235321045, 0.3121873736381531, 0.0021833444479852915, 0.03582506999373436]}, {"target": [1], "doc": ["that be my concern as well @isazonov", "if we put all of dsc into class and nothing else , there simply be no alternative option when something do n't work quite right / simply fail to work the way someone need or expect it to .", "there be so many issue around class that , while i wholeheartedly think this be actually a really good way to go , i be _ extremely _ wary of even imply it be a good idea to do this without fix a * * lot * * of the outstanding issue and miss feature in powershell 's class support", "this will either be a very good decision , or a really costly decision  , and it really do all depend on the foundation be in place or not"], "issue_sim": [0.07620909065008163, 0.24774718284606934, 0.3549917936325073, 0.01818244159221649], "prob": [0.004188155755400658, 0.7406420111656189, 0.46244415640830994, 0.05324876680970192]}, {"target": [3], "doc": ["as there be load to unpack here , and i do not want to spam this issue , so i 've write a post with my opinion here : <url>", "tl , dr :", "i be excited and i think it be the right move", "although potentially risky , go all - in class resource for ps7 be a good move because it help focus the effort  . also , that do not mean it ca n't change later .", "json & mof exist because of the lack of metadata in function , i 'd prefer have metadata and be able to use ast", "it also avoid different move part and simplify some of the tooling", "support json in an exist dsc resource would often be break and not backward compatible , while class be", "a fair few explanation about testing , why we be not use class in dsc community resources", "it be long , but i try to provide context", "feel free to reach out  for question and comment"], "issue_sim": [0.07071267813444138, 0.030351802706718445, -0.004879946354776621, 0.1907471865415573, 0.5063079595565796, 0.0434638112783432, 0.49704286456108093, 0.3546923100948334, -0.021842092275619507, 0.08222385495901108], "prob": [0.11579274386167526, 0.002079803729429841, 0.01783180795609951, 0.57997727394104, 0.06130256876349449, 0.02832956425845623, 0.060445237904787064, 0.0234442837536335, 0.0048204283230006695, 0.004556508269160986]}, {"target": [5], "doc": ["not only over winrm but also ssh", "as of now , you ca n't directly execute python  remotely", "this maybe * * by - design * *", "now , what it can be do from powershell remotely , you can execute and collect / save the result from python with powershell", "the follow command line work :", "i see the benefit of use python remotely as well as other tool .", "it would be a good feature to add"], "issue_sim": [0.21294866502285004, 0.4254891276359558, 0.030439123511314392, 0.44161516427993774, 0.14576926827430725, 0.3579346835613251, -0.0359814390540123], "prob": [0.007263414096087217, 0.017413634806871414, 0.011519566178321838, 0.7852763533592224, 0.014464852400124073, 0.6714717149734497, 0.007895526476204395]}, {"target": [0], "doc": ["thx for your reply , but python repl work well over ssh for linux , that be why i ask for powershell winrm .", "currently , when i need to do some python test on a window server , i must connect to rdp"], "issue_sim": [0.4956657886505127, 0.4403788447380066], "prob": [0.7852529287338257, 0.29616501927375793]}, {"target": [0], "doc": ["for the moment , i do n't need to embed python module into powershell , what i need be just use python by exactly the same way on local window machine and remote window machine .", "for my work , i often need to connect to remote machine to do some small debug", "every time must open a rdp session to achieve the goal be not a pleasant way", "and sometimes you can not even open the rdp session as both the <number> session have already be use by other"], "issue_sim": [0.5410481691360474, 0.1019674688577652, 0.1516181081533432, 0.1541569083929062], "prob": [0.9568427801132202, 0.01576930657029152, 0.009202110581099987, 0.2156415432691574]}, {"target": [2], "doc": ["@chriskuech can you provide some example json , example powershell code , what you expect , and what you currently see", "newtonsoft support work with json comment but have <number> mode : ignore and load", "though , with how the cmdlet currently operate , it may not be possible to make use of that ."], "issue_sim": [0.48351481556892395, 0.491652250289917, 0.3518165051937103], "prob": [0.036778468638658524, 0.09657978266477585, 0.8560872673988342]}, {"target": [0], "doc": ["this would be a great addition to an already well used cmdlet , able to import a .jsonc file and convert it to an object as usually .", "to use <tag> now , the file first need to load and then be strip from comment"], "issue_sim": [0.4353320002555847, 0.1628689169883728], "prob": [0.9662114381790161, 0.008213484659790993]}, {"target": [0], "doc": ["one argument against support json comment be that they be not rfc define .", "that make it difficult to write code that support something that be not well define", "the general guidance be to not use comment in json that be not valid json", "instead , add a metadata object or a <tag> property be recommend", "if we do support this , we would not be able to include it in the default operation of <tag> until comment for json be rfc - back", "it would require a switch of some kind", "that be because we need to reserve the default operation of the cmdlet for rfc compliance", "if a later rfc implement comment as begin with <tag> , for example", "also , what do we do with the comment datum", "apply it as a property on the object it comment"], "issue_sim": [0.3182583451271057, 0.1483187973499298, 0.3737170696258545, 0.2229517698287964, 0.33736222982406616, 0.04586222767829895, 0.3065568208694458, 0.11889208853244781, -0.004379902966320515, 0.03664972633123398], "prob": [0.22857043147087097, 0.024576405063271523, 0.028902877122163773, 0.07302947342395782, 0.47170382738113403, 0.0061998525634408, 0.07994026690721512, 0.03298583999276161, 0.002364378422498703, 0.0024852079804986715]}, {"target": [5], "doc": ["@markekraus i would say make the use of comment opt - in", "default be today , it will fail parse the file", "if use <tag> then it can parse the file", "it would simplify when it be rfc back", "then the <tag> would be obsolete , and the default be to be able to parse both", "i suggest we do nothing with comment , the comment be comment for the jsonc file , not part of the object or datum , unless and rfc say differently in the future ."], "issue_sim": [0.0426647886633873, 0.19274531304836273, 0.20832112431526184, 0.10113479197025299, 0.11582594364881516, 0.16788683831691742], "prob": [0.005243717692792416, 0.015941482037305832, 0.014459331519901752, 0.012815520167350769, 0.1260693073272705, 0.727898359298706]}, {"target": [3], "doc": ["i think @johlju have the right idea about add an \" -allowcomments \" switch", "that way the cmdlet default to rfc - compliant behavior", "unless someone want to write a new rfc", "one very important argument in favor of support comment be the visual studio \" azure resource group \" sample project .", "the powershell wrapper that upload the artifact to azure storage and execute the deployment fail to run when one of the template or parameter have a comment in it", "i strip out all the comment from the file manually and everything be fine -- with they there , the error that @chriskuech receive be what stop the deployment", "if i have an \" -allowcomments \" switch , i could just modify the wrapper script and there would be no problem", "arm template can become very confuse and stretch to thousand of line , and not everyone be <number> % dedicate to automate pipeline - base deployment yet", "put a set of comment in to clearly mark what need to be modify by a human reduce the chance for error"], "issue_sim": [0.032719098031520844, 0.2967749238014221, 0.07160114496946335, 0.5537053346633911, 0.6719356775283813, 0.29622602462768555, 0.13828808069229126, 0.2656404674053192, 0.0613221600651741], "prob": [0.00998323317617178, 0.011290390975773335, 0.0016157148638740182, 0.5807666778564453, 0.015599057078361511, 0.00905302632600069, 0.01090335939079523, 0.08581236004829407, 0.001572572160512209]}, {"target": [2], "doc": ["<number> quick comment :", "this would not be a good idea", "there be a a few common type which have recursive parent - child property that would result in some very unexpected behavior if this be the default ."], "issue_sim": [0.014346886426210403, -0.024180028587579727, 0.2150818407535553], "prob": [0.010445580817759037, 0.04779580608010292, 0.9848201274871826]}, {"target": [1], "doc": ["aliases in script text be bad", "alias in interactive session do n't make sense due to the intellisense ."], "issue_sim": [0.2758477032184601, 0.15417516231536865], "prob": [0.0022096249740570784, 0.9846709966659546]}, {"target": [0], "doc": ["send json today should be easy and i think we should keep json to the json cmdlet and not have it marry to the web cmdlet ."], "issue_sim": [0.4846261143684387], "prob": [0.999933123588562]}, {"target": [1], "doc": ["he do say that the alias be for interactive use", "practically , on the command line alias be simple , fast and let you get more on the line . that be why we have they .", "also , have a parameter that serialize if it be a hashtable or validate then pass the value through as a string seem like a nice accelerator", "@markekraus   i would interpret \" depth <number> \" to be something like \" for hash table , serialize to every level of the hashtable with a check for loop \"", "the hashtable value themselves would n't be serialize beyond the default <number> level", "@mtman be this along the line of what you be think of"], "issue_sim": [0.09856993705034256, 0.2424154281616211, 0.4580519199371338, 0.23716813325881958, 0.20689159631729126, -0.06939086318016052], "prob": [0.015560618601739407, 0.34951820969581604, 0.4582667350769043, 0.001447253511287272, 0.2218446433544159, 0.005294799339026213]}, {"target": [0], "doc": ["a <tag> type accelerator would be well than to do this directly in the web cmdlet just like <tag> ."], "issue_sim": [0.33268973231315613], "prob": [0.999958872795105]}, {"target": [4], "doc": ["@brucepay i ca n't speak to @mtman 's intention , but i can explain my thinking there", "imo , the json serialization and deserialzation powershell should be the same across all use", "in this case , we would serialize object the same way we do with <tag>", "if we use <tag> as the parameter for this , then these <number> should be functionally equivalent :", "in other word , we should n't use a different implementation for json serialization as someone would reasonably expect those to be functionally equivalent .", "sometimes you want to preserve the loop nature of object and other time you do not", "i do n't believe there be currently any way to disable looping in the json cmdlets", "the only mechanism currently available be to limit the depth", "but even if we do have the mechanism to prevent looping , we would be make a judgement call on behalf of the user on this parameter , that be probably not a good idea", "i understand the request as make the behavior functionally equivalent to this :", "this be problematic for the follow : <tag>", "we also do n't know what depth to stop at if the user supply a sufficiently deep object", "parallel to this problem be the assumption of object type for json submission", "a hashtable translate to a json object", "however , single value json literal  and json arrays be also valid json to submit to endpoint", "ultimately , as much as i would like to make it easy to submit a powershell object as json without use <tag> , i think it be probably good to keep to \" do one thing \" and let the json cmdlets handle the the conversion / serialization separately from the web cmdlets", "i would hate to keep the web cmdlet couple with change in the json cmdlet and i would not think an opinionated implementation would result in a good ux", "on the possible use of a <tag> type accelerator , i think this be backwards from <tag>", "the xml type accelerator be work on a string and transform it into an object", "we could look at something similar for json , but it would would like xml in that it deserialize a json string to an object", "what the cmdlet here need be to serialize an object into json string", "it be maybe something to consider , but the serialization and deserialization be not always straight forward so whatever we implement would have an opinionated default behavior", "on parameter aliase , i be good with make the common one simple and easy to use on interactive session", "especially since we have so many and some of they be long", "on the automatic scheme , i be pretty sure that already work as request :"], "issue_sim": [0.0342697873711586, 0.4085538983345032, 0.3145475685596466, 0.34994837641716003, 0.3585349917411804, 0.02324042096734047, 0.3925431966781616, 0.01699071377515793, 0.27264443039894104, 0.30534639954566956, -0.001394930761307478, 0.09857774525880814, 0.3304513096809387, 0.28307464718818665, 0.3796417713165283, 0.48952817916870117, 0.4019378423690796, 0.11774377524852753, 0.308918833732605, 0.48476627469062805, 0.44278931617736816, 0.377272367477417, 0.19504009187221527, -0.0324888676404953, 0.1579960584640503], "prob": [0.06408575177192688, 0.001196698285639286, 0.0028908702079206705, 0.0905320793390274, 0.23366408050060272, 0.0022975471802055836, 0.002951592206954956, 0.000934988958761096, 0.0966852530837059, 0.018311386927962303, 0.0003786860324908048, 0.015662631019949913, 0.0010186220752075315, 0.00044335293932817876, 0.009029905311763287, 0.11148671060800552, 0.011163357645273209, 0.001406346564181149, 0.002131039509549737, 0.0022725057788193226, 0.00026132501079700887, 0.005638157017529011, 0.0010209205793216825, 0.0039346483536064625, 0.0027625502552837133]}, {"target": [2], "doc": ["i 'll make one caveat to my above statement", "i be ok with add functionality for deserialize web response from json to object in <tag>", "it be already marry there and where the cmdlet derive the majority of its value .", "for example , extend irm to include the <tag> feature or work with object model"], "issue_sim": [0.027193117886781693, 0.4207040071487427, 0.12832309305667877, 0.19737210869789124], "prob": [0.0028313761577010155, 0.032836150377988815, 0.978550910949707, 0.015342725440859795]}, {"target": [0], "doc": ["alias be very different than intellisense because they be short and do n't require iteration .", "in case of script , the common problem be positional argument", "if those script writer adopt alias instead , the tooling can replace it with full name , which can not be do with positional args", "- writing and reading be short and confident", "- cli history be clear and easy to navigate", "- help replace positional args with full parameter name in script", "- easy adoption when come from curl", "@brucepay , @markekraus i do n't consider loop", "i think it be a very rare use case for restful query", "however , there be a coherent way to improve json serialization in general", "<tag> can have a <tag> accept <tag>  , <tag> , <tag>", "web cmdlets should always use <tag>", "once it detect a circular reference , it throw an exception alongside a hint to use <tag> for more option", "if a break change for <tag> be not an issue , the default can be <tag>", "and since it already fail silently once the default depth  be reach , i would n't mind to break the behavior at all", "good point on auto scheme and primitive type", "<tag> should accept <tag> and act just like <tag>", "the key issue be that in case of rest api , json seem to be the default body format instead of form", "take the default asp", "net core project as an example", "it automatically convert a json body , but fail for form"], "issue_sim": [0.3067006766796112, 0.19314755499362946, 0.3886765241622925, 0.045574165880680084, 0.08917517215013504, 0.4096202552318573, 0.2193051278591156, 0.19035261869430542, 0.2728685140609741, 0.2517722249031067, 0.31094422936439514, 0.19735805690288544, 0.2562442123889923, 0.23578372597694397, 0.17046457529067993, 0.05144212394952774, 0.334276020526886, 0.5031626224517822, 0.14949700236320496, 0.13492867350578308, 0.48719948530197144], "prob": [0.6618545651435852, 0.03150416538119316, 0.16942721605300903, 0.012060681357979774, 0.002221073489636183, 0.0028760835994035006, 0.004901188891381025, 0.0012498708674684167, 0.0007380328606814146, 0.0010203358251601458, 0.0034840635489672422, 0.0002887265582103282, 0.002590147778391838, 0.00902879610657692, 0.008770749904215336, 0.003961839247494936, 0.000918267818633467, 0.02009185589849949, 0.0003988065873272717, 0.002272488083690405, 0.005581324454396963]}, {"target": [11], "doc": ["you would be wrong ;)", "the acl example and dacl require the child parent relationship in <number> of the api i work with", "again , that would be an opinionated implementation which would lead to a bad ux", "there be <number> i use on a regular basis : json , xml , and multipart / form - data", "xml be increasinly rare , but multipart / form - datum and json be about equal", "more often than not , most rest api do n't even require a body", "only u operation in crud tend to need a body and even then a good portion of endpoint i work with still use query field instead of body payload", "i be not sure that be accurate", "the weblistener in this project be testament to that", "again , i understand that add the ability to directly serialize an object as json in the web cmdlet seem useful", "i have consider it myself", "however , whatever implementation we use would be opinionated unless we add more parameter to accommodate various json serialization need or risk endless support issue and question about why our opinionated implementation do n't serialize the way the user expect it to .", "at that point , it be good to stick to _ do one thing _ and let the json cmdlet handle the serialization and the web cmdlets handle web request", "on improvement to json serialization , there be quite a few i would like to make as well", "@mtman can you please open a separate issue for your suggestion of loop detection", "honestly , once the experimental features feature be add , i want to possibly redo the entire json implementation", "at this point in my own code , i be make raw", "net call to newtonsoft", "json because the current cmdlet be too simplistic and opinionated", "when you be work with <number> + api , you start to see the entire spectrum of json and that require great flexibility"], "issue_sim": [-0.016948875039815903, 0.22586679458618164, 0.11063503473997116, 0.45129936933517456, 0.42476755380630493, 0.3557640314102173, 0.36583513021469116, -0.033258065581321716, -0.059320054948329926, 0.4485190510749817, -0.0258902907371521, 0.4190511703491211, 0.39524465799331665, 0.33653828501701355, 0.2086380571126938, 0.3491296172142029, 0.038713544607162476, 0.08106735348701477, 0.4276171922683716, 0.366057813167572], "prob": [0.021773066371679306, 0.009848387911915779, 0.011831752024590969, 0.17855723202228546, 0.0011040159733965993, 0.00031828664941713214, 0.011095225811004639, 6.127746019046754e-05, 0.00048450357280671597, 0.023494277149438858, 1.813103699532803e-05, 0.02649829164147377, 0.024579912424087524, 0.01264579314738512, 1.8983504560310394e-05, 0.005883377976715565, 0.00014662608737125993, 4.384629937703721e-05, 0.0010675149969756603, 0.043018363416194916]}, {"target": [3], "doc": ["if <number> out of <number> + api you work with require that , i think that count as quite rare ;)", "that be just the general way to achieve any simplification", "as long as there be a simple and logical way to opt out , i do n't see how that be bad ux", "even well , we can see a reception of the same decision for newtonsoft . json .", "you can find multiple stackoverflow question on how to opt out , but i have n't see any rant against the choice there", "here , the solution would be contain directly within the error message", "i think the general way be to accept body once query field become overwhelming , e", "elasticsearch let you make basic query via query field and advanced one via the json body", "so the issue occur only when use with a port :"], "issue_sim": [0.30429744720458984, 0.12144540995359421, 0.14947840571403503, 0.2332841157913208, 0.12492872029542923, 0.18204043805599213, 0.15079036355018616, 0.4379115700721741, 0.10420069843530655], "prob": [0.054046113044023514, 0.005937563255429268, 0.20683728158473969, 0.0599980354309082, 0.18274766206741333, 0.021129505708813667, 0.022583860903978348, 0.0018962466856464744, 0.003174880752339959]}, {"target": [3], "doc": ["let i describe how i understand how <tag> work", "suppose you have this :", "it be more or less equivalent to :", "so <tag> invoke provide statement , collect all the pipeline output and create array from they .", "notice : it absolutely do not care what kind of object  you write into pipeline , and that be where great power of <tag> be", "_ note special case : <tag>", "i think that in this case <tag> be eliminate as optimization , but that lead to incorrect , imho , result , when <tag> be type", "<tag> return <tag> instead of <tag>", "how be that useful", "it be useful when you work with array of array", "suppose you have follow command :", "if you have <number> line in <tag> , then result will be <tag>", "but if have only <number> line , then result will be <tag> , but not <tag>", "what if you always want to have array of array , regardless of number of line in <tag>", "other example : suppose you want to filter array of row  by some condition , and then find how many be actually satisfy condition", "that be how to do it right :", "the same apply on any other transformation of array of row , for example", "<tag> make this case work especially because it wrap single array write into pipeline into another single element array , which other method , like cast to <tag> , do not do", "so , how do <tag> different from <tag> from above", "right answer : they do not different , both write array into pipeline as single object , and it get wrap by <tag> operator , because it be what that operator do"], "issue_sim": [0.12187039852142334, -0.08328591287136078, 0.056392375379800797, 0.3870668411254883, 0.25195881724357605, 0.051005177199840546, 0.2923637330532074, 0.2810019850730896, -0.008831588551402092, 0.22701390087604523, 0.04656181111931801, 0.09469142556190491, 0.12476619333028793, 0.3093982934951782, 0.22407731413841248, -0.028990155085921288, 0.1252172589302063, 0.5746761560440063, 0.008769739419221878, 0.43342915177345276], "prob": [9.415114618605003e-06, 5.1065006118733436e-05, 4.95234016852919e-05, 0.061090532690286636, 0.06040497124195099, 3.4643148865143303e-06, 0.015606213361024857, 8.535328561265487e-06, 3.107778866251465e-06, 2.304097688465845e-05, 1.894875822472386e-06, 1.8911116512754234e-06, 7.366766567429295e-06, 4.123512553633191e-05, 0.00014199131692294031, 6.754492574145843e-07, 1.1436405657150317e-05, 0.0639643445611, 3.9660685615672264e-06, 0.1908658891916275]}, {"target": [0], "doc": ["one thing everyone should understand about <tag> be that it always treat its content as statement , not as expression .", "that mean that standard collection unroll behavior apply , when expression supply as first  element of pipeline"], "issue_sim": [0.255772203207016, 0.20860028266906738], "prob": [0.7418695688247681, 0.1753687560558319]}, {"target": [1], "doc": ["@petseral : thank for the background info and the helpful example", "first , let i say that my example be obviously contrived and this issue may rarely , if ever , arise in the real world - of course , if you be explicitly construct an array / collection , wrap it in <tag> be pointless .", "in the follow example i 'll use something _ other _ than an array for illustration , namely an _ empty _ <tag> instance", "if i understand you correctly , you be say that :", "the equivalent of this _ cmdlet_-base statement :", "be the follow _ expression_-base statement :", "this equivalence in itself be puzzle - why would n't the equivalent be just <tag> , without the wrapper array", "it seem to i that there be * * no good _ conceptual _ reason for <tag> to wrap the instance create in an outer , single - element array * * when write to the pipeline - but , if i understand you correctly , * * do so be a _ technical necessity _ * * , because the collection instance would otherwise invariably be convert to <tag> on output , correct", "here be another example of where the distinction be puzzle , at least to those not intimately familiar with the inner working of powershell , and take that perspective  be the reason for create this issue :", "the fact that * * <tag> cause unwrap of _ pipeline _ output * * be also far from obvious :", "incidentally , that make inspect the true output generate by <tag> all but impossible :", "give that this seemingly come down to the fundamental of pipeline behavior , there be probably nothing that can be do - except perhaps consider include the finding in a collection of yet - to - be - create advanced help topic", "unless someone think that an actionable change be warrant here , i 'll close this issue soon"], "issue_sim": [-4.0745362639427185e-05, 0.41370120644569397, 0.2960883378982544, -0.03392689675092697, 0.14808644354343414, 0.06490880250930786, 0.2930930256843567, 0.5020400285720825, 0.3446420431137085, 0.2976306080818176, 0.18065395951271057, 0.2981920838356018, 0.05797886475920677], "prob": [0.043276939541101456, 0.4042207896709442, 0.01206341665238142, 0.0005374306347221136, 0.002854718128219247, 0.0006632385193370283, 0.23656830191612244, 0.05104689300060272, 0.01671747863292694, 0.0018665093230083585, 0.009489390067756176, 0.4233798086643219, 0.0035652187652885914]}, {"target": [2], "doc": ["@daxian - dbw but where i can see that definition of array expression", "before now i always expect it to return new array object each time", "i myself use <tag>  as array copy operator , and i really do not like if it stop copy array at some point in the future ."], "issue_sim": [0.24668487906455994, 0.3250088095664978, 0.4037952721118927], "prob": [0.02978411316871643, 0.034595340490341187, 0.9394382834434509]}, {"target": [0], "doc": ["i do n't understand the issue - since sort be a valid verb it can be use in all noun combination .", "can you clarify what you actually want to achieve and what be block you"], "issue_sim": [0.3326573073863983, 0.1260412037372589], "prob": [0.8336334228515625, 0.037453558295965195]}, {"target": [2], "doc": ["no sort be not a valid verb", "if we use it in an own module and import it , we get :", "i think there be no comprehensible reason to not allow sort as an approve verb .", "kind regard , thomas"], "issue_sim": [0.2630382776260376, 0.15296310186386108, 0.33802056312561035, 0.10708709806203842], "prob": [0.0063871098682284355, 0.5659900903701782, 0.724420428276062, 0.006054262164980173]}, {"target": [2], "doc": ["<number> ) why not use <tag> instead", "<number> ) why not use <tag> instead", "the reason , as i understand it , be that in order to sort something you use sort - object anyway  .", "otherwise i do n't see a particular reason against add it"], "issue_sim": [0.13699212670326233, 0.13699212670326233, 0.5327631235122681, 0.14530080556869507], "prob": [0.025469345971941948, 0.024483095854520798, 0.7916237115859985, 0.0010002843337133527]}, {"target": [2], "doc": ["thank a lot for your proposal :-)", "because we be work with the inicontent - object , change its content - and at some time we would like to sort it", "therefore , i think that?| sort - inicontent would be more intuitive because it be similar to?| sort - object .", "kind regard , thomas"], "issue_sim": [0.016607504338026047, 0.2248084545135498, 0.48117923736572266, 0.10708709806203842], "prob": [0.021557055413722992, 0.3577641546726227, 0.5573502779006958, 0.0017160489223897457]}, {"target": [1], "doc": ["the object in the pipeline be a complex business object and we need a sort-**algorithm * * to calculate it be right , \" natural order \"", "because powershell be use in more and more use case  , i think it be the natural development to have more complex object which need their own sort-?command .", "our powershell module offer the business logic to the user , so he can just work with the business object"], "issue_sim": [0.3525891602039337, 0.4122018814086914, 0.43941181898117065], "prob": [0.5234899520874023, 0.903506338596344, 0.0028802924789488316]}, {"target": [8], "doc": ["thank you very much for all your support", ", * * but this be not a technical question", "of course , there be way to solve the problem to sort complex business object", "but in fact , this be the real problem / question :", "powershell have the great verb - noun concept", "we should not break it , because it allow we to use powershell in a very intuitive way", "i be pretty sure it be a great concept to hide complexity in modules , so that user of our module do not have to remember to use", "just to get business object in the right order", "to add a -sort argument to a get - specialthing cmdlet break the great verb - noun rule , because we would like to sort something and not to get something in a sorted way .", "the good way to sort complex object should be sort - businessobjects", "because it have the expect verb - noun naming : sort a business object", "it do not make to reserve verbs for internal command , just to have they reserve", "you probably recognize that english be my foreign language and i be fight with word"], "issue_sim": [-0.03437831997871399, 0.11674106121063232, 0.3249170780181885, 0.055575475096702576, 0.4180336594581604, 0.4179643392562866, 0.20783840119838715, 0.32939833402633667, 0.6318446397781372, 0.43331998586654663, 0.4085805118083954, 0.2882767617702484, 0.042746402323246], "prob": [0.015901124104857445, 0.2094651460647583, 0.025408446788787842, 0.03382772207260132, 0.0002753605367615819, 0.03650346025824547, 0.054145973175764084, 0.002008860232308507, 0.26117560267448425, 0.0034312354400753975, 0.00221392884850502, 0.008510771207511425, 0.004464586265385151]}, {"target": [2], "doc": ["first , i totally ack that certain object and type require complex business logic for proper sorting", "that be a very real business problem , so the question from here be \" what be the right technical solution to solve that business problem", "afaik , the original intention of reserve <tag> be to discourage user from write all sort of custom sort cmdlet that be incompatible with one another .", "the fact that anything * can * be sort with <tag> lend itself to be the \" one true way \" to sort object", "for discoverability 's sake , you do n't have user have to cycle through <tag> , <tag> , <tag> , etc", "until they get the right one", "from that perspective , i think the right solution here be to expose some sort of way for you to implement the proper custom sort method in your own output type", "for instance , maybe if you implement a <tag> method for your output type , we run that thing by default with <tag>", "that way , you can house that custom logic in the cmdlet itself , and user can continue to use <tag> as they would with any other object", "side note @schittli : your english be fantastic", "i genuinely do n't notice until you say something", "thank for be patient with we"], "issue_sim": [0.4366031587123871, 0.03362404182553291, 0.4701659381389618, 0.4496285021305084, 0.07475397735834122, -0.037339892238378525, 0.4092158377170563, 0.1494956612586975, 0.45311012864112854, 0.06120484322309494, 0.025073399767279625, 0.00988063309341669], "prob": [0.0006735564675182104, 0.006415779236704111, 0.153469979763031, 0.0033954123500734568, 0.016018450260162354, 2.2717400497640483e-05, 0.026663634926080704, 0.0008951521595008671, 0.015076055191457272, 2.090339279448017e-07, 3.299520903965458e-05, 0.00013869538088329136]}, {"target": [0], "doc": ["we should get the document folder programmatically"], "issue_sim": [0.38072049617767334], "prob": [0.9973721504211426]}, {"target": [0], "doc": ["if the issue be that within the same powershell session the env var be n't be update , then as @isazonov note , that be expect and <tag>"], "issue_sim": [0.4968631863594055], "prob": [0.9994537234306335]}, {"target": [1], "doc": ["<url> be hard code <tag> as the folder ,", "probably because <tag> and <tag> be n't available in the current version of coreclr we be build against .", "look like these api be should be available in", "will revisit this once that work be complete"], "issue_sim": [0.20541897416114807, 0.09709040820598602, 0.08332587778568268, -0.03842771053314209], "prob": [0.02755873091518879, 0.9705877304077148, 0.04385937377810478, 0.031063277274370193]}, {"target": [0], "doc": ["just check this and it appear to be fix as part of the move to .net std 2.0 as that code which hardcode the value be remove ."], "issue_sim": [0.35417020320892334], "prob": [0.9999827146530151]}, {"target": [1], "doc": ["we would have to document that it be an effective no - op", "de facto use <tag> as the default shell already work fine on macos , after apply the workaround describe in <url>", "eventually we 'll need a documentation topic that describe all limitation with respect to use <tag> as the default shell on unix - like platform , currently summarize here : <url>"], "issue_sim": [-0.0450797975063324, 0.6137139797210693, 0.42476168274879456], "prob": [0.10895965993404388, 0.5548657774925232, 0.41942986845970154]}, {"target": [0], "doc": ["no , it be not an _ argument _ that reflect <tag> , it be the _ name of the executable _ , reflect in <tag> in c term and in <tag> in posix - like shell term , which the caller set to an arbitrary value - see below for detail", "give that we be currently not modify the behavior base on whether we be invoke as a logon shell or not , it be not even necessary to detect <tag>-prefixed invocation ; of course we will have to , if we ever decide to change that  .", "not necessarily , because other tool - such as vscode and at least hypothetically other terminal application - may still use the <tag> option rather than the <tag>-prefix technique", "that be why i think we should fix it in powershell rather than ask vscode to modify its default - shell invocation", "* * the <tag>-prefix convention * *", "by convention , shell should consider themselves _ login _ shell if the 1st character of <tag>  be <tag>", "the caller can \" fake \" the name / path of the executable it invoke as report in <tag> , so even though it be <tag> that be invoke , <tag> contain <tag> when invoke from terminal", "app  while configure as the default shell", "on unix - like platform , for instance , you can use bash 's <tag> builtin with the <tag> option to set <tag> , and the <tag> option automatically prepend <tag> to it", "the tricky part be to get powershell to obtain this value , because <tag> do n't reflect it", "the only way i personally know of to get this information from inside powershell  would be to call the <tag> utility as follow , but that be obviously an undesirable cost to incur on startup :"], "issue_sim": [0.4098457098007202, 0.2974725663661957, 0.2864224314689636, 0.5995508432388306, -0.0023984797298908234, 0.32839351892471313, 0.46254706382751465, 0.4318780303001404, 0.4803117513656616, 0.4573795795440674, 0.462682843208313], "prob": [0.3468129634857178, 0.38254812359809875, 0.06522655487060547, 0.08218961954116821, 0.000688239699229598, 0.054708901792764664, 0.12623848021030426, 0.0003640605427790433, 0.06379278004169464, 0.004317201673984528, 0.2873876392841339]}, {"target": [0], "doc": ["seem we have already discuss that we could use different file name to address such scenario  .", "for the issue we could create <tag> or <tag> runner"], "issue_sim": [0.1514594405889511, 0.10360638797283173], "prob": [0.9881653785705566, 0.005709466990083456]}, {"target": [2], "doc": ["that would add unnecessary complexity :", "it require create , maintain , shipping , document   a new executable , even though its sole purpose would be to ignore the <tag> / <tag> option .", "* user will need to know and remember that they must specify that a different executable when change their default shell to powershell with <tag> , which be far from obvious"], "issue_sim": [-0.004706237465143204, 0.18939334154129028, 0.6067363619804382], "prob": [0.021294565871357918, 0.7726197838783264, 0.4934479892253876]}, {"target": [3], "doc": ["that would be nice , but it be already not true for <tag> : as a script author , you must know to use _ it _ as the executable in the shebang line in order to get predictable behavior that do n't load <tag>", "unfortunately , backward - compatibility concern leave we no choice there , so a separate executable be require", "similarly , as state , the end user would need to know that it be not <tag> , but <tag>  that must be pass to <tag> _ in order to make powershell the default shell", "fortunately , in this case we _ do _ have the option to support that with the exist executable , by implement <tag> / <tag> as no - op switch ."], "issue_sim": [0.4118003249168396, 0.16846352815628052, 0.5840094089508057, 0.28203529119491577], "prob": [0.5207553505897522, 0.019682692363858223, 0.19714057445526123, 0.16230508685112]}, {"target": [5], "doc": ["my vote be to follow", "net core 's lead", "in general we should avoid hide native capability , unless absolutely necessary .", "just to add another example :", "on unix , <tag> , instead of create a single dir", "literally name <tag> - which be what the native<tag> do - it create _ two _ directory , subdir <tag> with a subdir <tag> ; again a consequence of automatically translate <tag> into <tag>", "conversely , <tag> wo n't let you change to a directory   literally name <tag>"], "issue_sim": [0.033871449530124664, 0.16882069408893585, 0.07638943940401077, -0.0073120566084980965, 0.5056928396224976, 0.4418916702270508, 0.2861107587814331], "prob": [0.005652706138789654, 0.034655142575502396, 0.43355438113212585, 0.002293494762852788, 0.007825897075235844, 0.38521692156791687, 0.026920370757579803]}, {"target": [1], "doc": ["i find the same problem in registry provider", "it seem we have to move the normalization of path and possibly  globbe into provider ."], "issue_sim": [0.23896071314811707, 0.2161533236503601], "prob": [0.01706782355904579, 0.9630011916160583]}, {"target": [0], "doc": ["worth note that change the behaviour so that only forward slash work on unix would potentially break a lot of otherwise cross - platform script , and would mean that powershell <number> on windows support unix - style path , but powershell <number> on unix do not support windows - style path  ."], "issue_sim": [0.6389243602752686], "prob": [0.9999722242355347]}, {"target": [0], "doc": ["note that you 've always be able to use <tag> and <tag> interchangeably on windows - while there may be individual external utility that do n't support <tag>  , all the major api support it  .", "thus - aside from rule out illegal - in - a - filename character - literal use of <tag> work as a cross - platform filesystem - path separator"], "issue_sim": [0.3891882300376892, 0.49016085267066956], "prob": [0.7856844663619995, 0.44238677620887756]}, {"target": [8], "doc": ["also we do repeat path parsing and rebuilding , to be more resource - efficient and fast we need to delegate common method to provider ,", "net and kernel api", "even in powershell , i think", "the other problem , like i mention in <url> , be that we already promise to support multiple", "aspx ) that use conflicting path separator and legal name character", "so powershell have to do some abstract , provider - base path handle i imagine", "but once we know it be a filesystem path , i agree that we should do as little as possible on top of", "also , by \" break change \" above , i mean that pscore <number> have already ship as ga and people be already write script with backslashe in their path to be use cross - platform", "i fervently agree that just use <tag> would be well , especially since all the major api support it , it be design into windows from the start , and backslashe be just the bad legacy of cmd / dos .", "but i think there be script already be write as cross - platform that would break , and script from old powershell version that should work cross - platform with ps6 if not for the path - separator change"], "issue_sim": [0.24602970480918884, 0.21914425492286682, 0.27008646726608276, 0.056927502155303955, 0.32980796694755554, 0.3082709312438965, 0.2961592972278595, 0.27238959074020386, 0.3772231936454773, 0.49689146876335144], "prob": [0.04447593912482262, 0.0006022583111189306, 0.0010165912099182606, 0.0016880566254258156, 1.8115293642040342e-05, 0.00026979087851941586, 0.0584188774228096, 0.028705935925245285, 0.7177948355674744, 0.5128488540649414]}, {"target": [2], "doc": ["@powershell / powershell - committee review this", "we agree that the utility of support both forward and backslashe as a directory separator be valuable for cross platform script as well as be exist behavior", "the fundamental issue seem to be that escape character in path be not propagate through provider and this be a bug that should be fix ."], "issue_sim": [0.24047160148620605, 0.4255372881889343, 0.48494774103164673], "prob": [0.0073319305665791035, 0.6929893493652344, 0.8330302834510803]}, {"target": [2], "doc": ["fwiw - some background :   this behavior be actually intentional", "prior to the v1 release of powershell , the ui designer pick color for the powershell console", "since the background color they choose be n't part of the standard palette , one of the less used standard color be remappe to produce what the designer want .", "it be be ship that way ever since"], "issue_sim": [0.26234522461891174, 0.422024130821228, 0.20957419276237488, 0.03694162145256996], "prob": [0.00026151060592383146, 0.041818052530288696, 0.9421660900115967, 0.0006332615739665926]}, {"target": [1], "doc": ["imho should have remappe the black and white , but", "if anyone have any idea how force <tag> to respect ansi , we could implement on our end ."], "issue_sim": [0.02388753369450569, 0.3017428517341614], "prob": [0.059307076036930084, 0.882390558719635]}, {"target": [1], "doc": ["do that mean there be no chance of it change", "not be able to see one of the standard colour seem like a pretty major defect for a console", "this seem like a reasonable solution , any chance of it happen"], "issue_sim": [0.03224404901266098, 0.2593632936477661, -0.0029910914599895477], "prob": [0.2989713251590729, 0.7445281744003296, 0.024632278829813004]}, {"target": [0], "doc": ["i think the default fg / bg color should be decouple from the <number> ansi color , and instead be separately be define .", "that be how pretty much all unix terminal do it"], "issue_sim": [0.4798440635204315, 0.21167360246181488], "prob": [0.9718819856643677, 0.00246142758987844]}, {"target": [0], "doc": ["we would also need <tag> and <tag> cmdlet to set the default and enumerate instal version .", "this should probably end up be an rfc"], "issue_sim": [0.46274715662002563, 0.14346574246883392], "prob": [0.875586211681366, 0.09020888805389404]}, {"target": [1], "doc": ["we have so much default that the new cmdlet look wasteful", "i expect that only developer will have multiple instal version , user - windows powershell and one - two powershell core .", "also system service  can use specific version", "a distributive provider can include a powershell core version as system default", "an application provider can make the same", "they must all have a predictable way to run the correct version", "if windows powershell stop on <number> version  we would use <tag> to run a correct version - powershell core start with <number> version"], "issue_sim": [0.41613760590553284, 0.5779377222061157, 0.2602683901786804, 0.513164758682251, 0.12201519310474396, 0.03515326604247093, 0.564450740814209], "prob": [0.10435912758111954, 0.6418970227241516, 0.0014272715197876096, 0.013488112017512321, 0.0032167613971978426, 0.04686899855732918, 0.05550418049097061]}, {"target": [0], "doc": ["i agree that most user wo n't likely have more than one version of pscore6 instal which be why this issue be n't <tag> for i .", "current solution be to use the full path and advanced user will know what they be do", "app that distribute pscore6", "x will treat it as a library not should not be expect to be use by the end user", "some app will be fine with any version of pscore6 be available while other may have dependency on specific version for various reason", "app should not change the system default"], "issue_sim": [0.25577259063720703, 0.1842723786830902, 0.059290364384651184, 0.05833311378955841, 0.20041608810424805, 0.09651020169258118], "prob": [0.7689364552497864, 0.08603015542030334, 0.0007111474988050759, 0.04436907917261124, 0.37095195055007935, 0.0033136033453047276]}, {"target": [0], "doc": ["main thought be that we should have simple possibility to switch default windows and core version user - wide and system - wide .", "ideally powershell should take version parameter and/or configuration option to run a desire version"], "issue_sim": [0.49692466855049133, 0.49847981333732605], "prob": [0.8134727478027344, 0.2614375352859497]}, {"target": [2], "doc": ["with powershell <number> offering  , some more discussion around sxs installation of powershell should be have soon so that if there be some change that can be make in the current release timeframe , by the ps team or the community , there be time to do so", "the notion of a <number> year support cycle without side - by - side support be a scary proposition", "today we can install stable and preview side - by - side , but we need to consider support multiple stable version instal side by side so that scripter can take hard dependency on one lts version of powershell without lock that machine down to that version for <number> year !", "can we please talk about this _ now _ and see what can be do so that management solution can be build on the reliability of a lts release without an unnecessary system lockdown to just that version during that time"], "issue_sim": [0.5254839658737183, 0.2124587595462799, 0.6084948778152466, 0.3268197178840637], "prob": [0.28347665071487427, 0.03825605288147926, 0.435615211725235, 0.1654461771249771]}, {"target": [2], "doc": ["thank you for the warm word", "we aware of the return semantic concern", "as you can imagine it be quite hard to make any reasonable non - breaking change in the exist semantic to alternate it for <tag>s .", "our approach to address these concern be ps class as @rkeithhill point out", "class be relatively new and not a fully - bake feature", "one of their goal be to provide more developer - orient experience for people who be use to language like c #", "they should help people write more safe and maintainble ps code fast"], "issue_sim": [0.010775897651910782, 0.17301799356937408, 0.25868165493011475, 0.15635696053504944, 0.23320385813713074, 0.29303309321403503, 0.02023671567440033], "prob": [0.005989579483866692, 0.0060904561541974545, 0.5276713371276855, 0.011499160900712013, 0.01630154810845852, 0.2459874004125595, 0.01172658707946539]}, {"target": [3], "doc": ["@srgom   also , the return semantic you be post about be very typical  for a <tag>", "korn shell and bash behave this way", "the idea be that you can copy paste line you execute from the console into a script file inside a function and then execute that function would behave just as if you execute those line - one at a time - at the console", "i think the return semantic difference between powershell function and powershell class method be a pretty clever way of a ) not break thousand of exist function b ) appeal to shell scripter  and c ) give devs with more experience in a traditional / gp programming language something they be more comfortable with ."], "issue_sim": [0.325550377368927, 0.16853472590446472, 0.2908812165260315, 0.47554346919059753], "prob": [0.0006823302828706801, 0.0004604618588928133, 0.24194028973579407, 0.6288601160049438]}, {"target": [5], "doc": ["thank you for discuss this", "i will check out class", "i should note that comparison with ksh / bash be a disservice to ps", "it be a nightmare to write maintainable script in they and the reason that i be explore ps on linux look to migrate some of that stuff", "devs nor op like those sell for scripting , there just be no option", "give what ps offer , there be a real chance at set the direction so i 'd request you to not use they as a bar ."], "issue_sim": [-0.08428898453712463, 0.09057868272066116, 0.3628150522708893, 0.38280704617500305, 0.23816876113414764, 0.24217230081558228], "prob": [0.004493528511375189, 0.01983351819217205, 0.008651282638311386, 0.15266311168670654, 0.053753115236759186, 0.3819003105163574]}, {"target": [7], "doc": ["so i be not say   this to continue argue but just make a point for othe who come here", "both the case @rkeithhill point out and many other be well think out and in case where they deviate from well - establish dev principle , they be usually follow well - establish op principle where the cost and intuitiveness be n't lose", "case in point , <tag> be already an establish operator for shell redirection", "once you know about this and know of <tag> , you will likely never have trouble about this", "in this case , sysadmin have be ahead of the curve to make process launch straightforward", "the programming language way of do it be not canonical but give that process launch be n't really the bread and butter , they can get away with it", "although at least one language that i know of- scala , have process relate api that make they as easy as shell to handle", "speak of <tag> , besides a \" convention \" that most on the bash / ksh side do n't even think of at first usage and nobody like , i do n't see anything go for it in the current form .", "i use <tag> all the time know fully well that it capture output", "yet when i write return statement on a function and see in my shell status that the function return value be in shell but the assign value be output , i scratch my head", "good thing i be not alone", "7 million google hit for <tag> and go so far back as page <number> , i find a question that deal with exactly this : ' <url> '", "at some point you have to break from convention if it help make progress", "one of the usp of microsoft be it do n't break backwards compatibility which be what make it so reliable", "so i would n't want they to break anything but create a very straightforward simple operator would hurt nobody  )", "@vors maybe take inspiration from scala process api", "i have n't do this for a while so its probably even easy than this but quick intro : you can launch process like <tag> , which be the equivalent of <tag> in powershell", "you can also do  <tag> and now x have the return value and the <tag> have capture output", "clean , very elegant , break no assumption"], "issue_sim": [0.2192201018333435, 0.10832399874925613, 0.3472751975059509, 0.007725994102656841, 0.10407146066427231, 0.22523140907287598, 0.3344852328300476, 0.27730369567871094, 0.19591158628463745, 0.43936657905578613, 0.09652222692966461, 0.14532199501991272, 0.027473209425807, 0.37241989374160767, 0.42218929529190063, 0.27792808413505554, 0.28966575860977173, 0.36118650436401367, 0.20598022639751434], "prob": [0.0018535938579589128, 0.06609330326318741, 0.00026264891494065523, 0.001283304300159216, 0.002791281323879957, 0.006355050019919872, 0.0005112941726110876, 0.16811902821063995, 1.631957638892345e-05, 0.016269823536276817, 2.470088020345429e-06, 0.003811784088611603, 1.367023833154235e-05, 0.0002049103641184047, 0.00227822782471776, 1.5114308098418405e-06, 0.09714793413877487, 0.0005789591814391315, 0.0014237285358831286]}, {"target": [1], "doc": ["let i try to summarize the debate :", "we 've establish that <tag> in powershell script block / script / function be just syntactic sugar  , and that anything not capture or redirected go to the success output stream _ by default _ - no operator or output command need - and that be something that must n't change .", "* the only way to get traditional <tag> semantic in powershell be via _ class _ method", "* assign statement output to _ variable _ , as @dragonwolf83 have show , can be use to prevent unintended implicit output", "* if suppress output be the only goal , i", ", if you know you be not interested in the output , you can simply assign to <tag>  <tag>", "| out - null <tag> write- * <tag> write - host <tag> out - host <tag> <tag> powershell", "complexcommandwhoseoutputiwouldideallyliketoreadwhenitisexecuted | out - host", "' regular output '", "<tag> <tag> out - host <tag> write - host <tag> write- * <tag> out - host <tag> write- * <tag> write - host <tag> out - string <tag>", "| out - string | write - host `", "at this point i be unclear on what be actionable here and whether any enhancement be need", "@stevel - msft , can you clarify what , specifically , be up for grab"], "issue_sim": [0.05386127904057503, 0.4364590346813202, 0.36366426944732666, 0.2830979824066162, 0.25258347392082214, 0.38835495710372925, 0.25610119104385376, 0.05950954928994179, 0.11307850480079651, 0.19881239533424377, 0.21397316455841064, 0.28578388690948486, 0.24866540729999542], "prob": [0.0019988592248409986, 0.9476590752601624, 0.00033145106863230467, 0.004470528569072485, 7.094953616615385e-05, 0.026684217154979706, 0.00701028760522604, 4.6338878746610135e-05, 2.518398332540528e-06, 0.002599784405902028, 0.0003195774042978883, 0.0021449748892337084, 2.0314359062467702e-05]}, {"target": [0], "doc": ["imo , an <tag> should be the default , despite the fact that it would probably be a bit of a break in behaviour from what it be previously ."], "issue_sim": [0.17610779404640198], "prob": [0.9999672174453735]}, {"target": [0], "doc": ["now that i think about it , another option would be stringsonly  .", "i 'll add it to the proposal"], "issue_sim": [0.004650449380278587, 0.014819405972957611], "prob": [0.9915995597839355, 0.0010951344156637788]}, {"target": [2], "doc": ["thank for the fast action", "fyi , a use case for stringsonly be where numeric datum need to be treat as a string", "presumably the information in already store in powershell as a string , so use stringonly would force powershell to quote the string so the program read the datum know it be a string and not numeric .", "an example would be id# which may have lead zero  , especially if the lead zero be significant", "such situation can arise when use variable length code scheme", "another case would be hex datum", "some program will look at <number> and treat be as numeric , even though far down in the same column we might have 09da , which be clearly intend to be hex", "force the datum to be quote would  treat the entire column as string , not just those that have letter in they", "consider the case of encode a binary value into a string", "\" <number> \" might represent two byte code as a string , while \" <number> \"  would represent a single byte"], "issue_sim": [-0.09344834834337234, 0.30403488874435425, 0.4458734691143036, 0.07119476795196533, 0.20246896147727966, 0.07182666659355164, 0.2376648187637329, 0.4906465411186218, 0.20993438363075256, 0.25278908014297485], "prob": [0.0015837019309401512, 0.044133905321359634, 0.2825753688812256, 0.003850124077871442, 0.0030845690052956343, 0.0009630485437810421, 0.22489383816719055, 0.014014221727848053, 0.0018674590392038226, 0.01980540156364441]}, {"target": [5], "doc": ["@davidberg - msft i think what @isazonov be concerned about be that when translate some type of object to a string form , you can end up with their representation contain comma", "in fact , some system of record _ number _ will result in comma depend on the culture setting", "i believe several european culture actually notate a decimal point with a comma instead of a period", "this would break the result file , if you attempt to have it create the file without quote number as string", "ultimately , try to determine ahead of time which type of object can and can not stringify well and not break the format be liable to be a _ very _ large waste of time ; the file create _ be _ go to be a text file , by design of the csv format", "it be arguably much more effective to simply assume datum be stre and allow the program that intend to consume it to determine the format however be appropriate for its requirement ."], "issue_sim": [0.3482394218444824, 0.06290092319250107, 0.23384927213191986, 0.5433614253997803, 0.43038254976272583, 0.2736220955848694], "prob": [0.0035022080410271883, 0.12470706552267075, 0.012749536894261837, 0.055621061474084854, 0.45023515820503235, 0.05157652497291565]}, {"target": [3], "doc": ["i think i can agree with all of that", "we should document those caveat with <tag> and/or <tag> option to avoid confusion , though", "i be sure some user will still run into it , but as long as it be clearly document i do n't see an issue with it", "it be essentially an opt - in behaviour to relax aggressiveness of quote value base on criterion or just not use quote at all , so i think it make sense to allow it and document the potential pitfall with suggestion of how to avoid they"], "issue_sim": [0.050675034523010254, 0.1970721185207367, 0.1946258246898651, 0.4395868480205536], "prob": [0.01585063338279724, 0.2571132481098175, 0.05472760275006294, 0.44911664724349976]}, {"target": [10], "doc": ["@davidberg - msft thank for feedback", "i 'd prefer that we do \" smart thing \"", "this mean that user get \" expect \" result", "question be that be \" smart \" and \" expect \" in the context", "as @vexx32 point all be convert to string before output to csv", "so user expectation can be base only on original type of value", "we could implement exclude and include type list with common default", "in the case it be not clear benefit because exclude only fundamental type do n't look smart enough", "also we 'll have to add parameter to allow user modify the list", "fallback to asneeded can confuse user too - it can be \" over - smart \"", "this lead we to believe that stringonly parameter be not as useful as expect and quotefields be well alternative - do not require additional parameter and it be very fast ."], "issue_sim": [-0.016072221100330353, 0.07425500452518463, 0.09399177879095078, 0.09169037640094757, 0.43145591020584106, 0.12766626477241516, 0.23367226123809814, 0.1685129702091217, 0.22057309746742249, 0.08470468968153, 0.1686476469039917], "prob": [0.0032651186920702457, 0.036544933915138245, 0.004314957186579704, 0.01637292094528675, 0.0005146840121597052, 0.0031543439254164696, 0.00024135736748576164, 0.0037420776207000017, 0.0047730435617268085, 0.006393425166606903, 0.4340780973434448]}, {"target": [1], "doc": ["its design to tail line , from the doc", "for json , we have <tag> and for xml we have <tag> or you can read and cast to <tag>"], "issue_sim": [0.23848676681518555, 0.3216663599014282], "prob": [0.11072412878274918, 0.734338104724884]}, {"target": [0], "doc": ["you can combine <tag> with <tag> , in which case you get a stream of the request number   of byte as <tag> instance  .", "note , however , that that be not the same as simply pass the raw byte through", "powershell do n't support output raw binary datum via the pipeline - see # <number>"], "issue_sim": [0.17847377061843872, 0.12223335355520248, 0.3652843236923218], "prob": [0.8528405427932739, 0.09010603278875351, 0.013882089406251907]}, {"target": [1], "doc": ["you understand people want easy right", "easy be easy for you to provode. and support than accurate be .", "there be no reason get - content can have a -l n option to importantly show", "just the last n character", "no reason except flawed design choice", "on tue , nov <number> , <number> , 11:50 michael klement < notifications@github"], "issue_sim": [0.105910524725914, 0.049117960035800934, 0.17776593565940857, 0.1917506754398346, 0.09100557863712311, 0.0351899117231369], "prob": [0.08215533196926117, 0.7037099599838257, 0.05127445608377457, 0.002075812080875039, 0.0029526427388191223, 0.11660290509462357]}, {"target": [0], "doc": ["as have be mention , this be not a simple solution due to file encode potentially make it tricky to determine what \" x character from the end \" actually _ be _ .", "i be sure you or someone else could probably implement this as a feature if its behaviour could be concretely define", "without a concrete definition of exactly what you be after , we 'll just be talk in circle and not really get anywhere , however"], "issue_sim": [0.43876945972442627, 0.29506754875183105, 0.15035733580589294], "prob": [0.7637876272201538, 0.3437306880950928, 0.08690691739320755]}, {"target": [2], "doc": ["i say your request need to be clarify", "as steve mention , please see the code of conduct he link ; if you want we to assist , we need to be clear on what you be actually ask for", "powershell 's style be typically verbose and i would imagine a more sensible parameter name would likely be <tag> or some such .", "<tag> be not _ take _ on <tag> but imply probably too similar a thing to <tag> without a distinction of what it be do", "if you just want the last <tag> byte , though , as @mklement0 mention , you already can :", "your request be n't clear", "do you want the last n byte , or the last n _ properly encode / decode character _", "those be two different thing entirely", "the latter be perfectly doable , though a little messy to do , and yes you could conceivably design such a parameter"], "issue_sim": [0.06552593410015106, 0.12403470277786255, 0.3266199231147766, 0.024835744872689247, 0.28634053468704224, 0.03560638800263405, 0.3311936557292938, -0.023647405207157135, 0.12273410707712173], "prob": [0.023338662460446358, 0.32781559228897095, 0.37805959582328796, 0.14515382051467896, 0.03092585690319538, 0.0007036271854303777, 0.0218266099691391, 0.001586533384397626, 0.0768088549375534]}, {"target": [1], "doc": ["alternately , the stream should just be serialize to the file descriptor correspond to the stream number document  , and", "anyone who want to see progress , warn etc . output on stdout can just manually redirect all of those file descriptor into <tag> ."], "issue_sim": [0.4015151262283325, 0.5890292525291443], "prob": [0.28396669030189514, 0.5731992125511169]}, {"target": [1], "doc": ["yeah , you 'll need to redirect the stream from within a ps session .", "there be not a complete 1:1 mapping of all ps stream to other console stream , so you 'll have to perform this redirection when call from a ps shell or from within the script itself to be sure powershell be actually handle the redirection", "otherwise , i believe most of these will get squash into the output / stderr stream by default"], "issue_sim": [0.23510734736919403, 0.5312727093696594, 0.28139469027519226], "prob": [0.7746749520301819, 0.653697669506073, 0.001914630294777453]}, {"target": [2], "doc": ["@vexx32 i do n't always have access to the script though", "from my perspective i be just try to evaluate some black box binary which emit datum to a variety of output stream , and i only care about retrieve one of they , which be trivial with other shell and script interpreter", "if some function somewhere do <tag> or <tag> or whatever , i want to be able to retrieve the output san that content ."], "issue_sim": [0.15967664122581482, 0.38236385583877563, 0.36506688594818115], "prob": [0.0034583525266498327, 0.8930968642234802, 0.263197124004364]}, {"target": [1], "doc": ["powershell have more stream than stdout and stderr , but these be only understand from within powershell", "by default , i believe it be expect for the extended stream to be send to stdout from pwsh.exe as it ca n't send it anywhere else .", "try to understand the use case here", "if you do n't want the warning stream , you could just add <tag> into the script", "if you want to redirect those stream to something else , you can do it within the script as well", "be you ask for something like :"], "issue_sim": [0.45895981788635254, 0.36255234479904175, 0.14673760533332825, 0.4601116180419922, 0.3371623158454895, -0.0007433714345097542], "prob": [0.06814268976449966, 0.8842442035675049, 0.00010484545055078343, 0.038907717913389206, 0.02123725600540638, 3.834451126749627e-05]}, {"target": [0], "doc": ["yes , something like that would be very useful , provide it can be specify exhaustively for all powershell stream ."], "issue_sim": [0.38356244564056396], "prob": [0.9999715089797974]}, {"target": [0], "doc": ["arguably , what powershell should always have do be to map _ all streams other than the success stream _ to stderr  - throw everything into stdout be never a good idea .", "it be another unfortunate example of powershell treat the outside world as an afterthought - which be less of a problem on windows , but unix user will expect conformant behavior", "it would be a break change , @stevel - msft , but perhaps it be not too late for core", "+1   for the option to capture stream individually"], "issue_sim": [0.5064402222633362, 0.44127100706100464, 0.15888762474060059, 0.2434542030096054], "prob": [0.641497015953064, 0.7257373929023743, 0.034669939428567886, 0.0018458960112184286]}, {"target": [0], "doc": ["while everything currently go to stdout in the absence of redirection or in the presence of only   stdout redirection  , at least with a   <tag>  redirection it be currently possible to capture the _ error stream _ separately  - but _ only _ the error stream : streams <number> - <number> invariably go to stdout .", "here be variation of a simple test command that exercise all stream :"], "issue_sim": [0.4965478777885437, 0.2737995982170105], "prob": [0.9787241816520691, 0.002633380703628063]}, {"target": [0], "doc": ["change from stdout to stderr be probably too big a break change to take at this point , add a switch to <tag> to enable this be doable if people will actually use it ."], "issue_sim": [0.3925218880176544], "prob": [0.9999662637710571]}, {"target": [2], "doc": ["i be disinclined to support this operator", "* c # do n't have it , so do powershell really need it", "an operator be potentially confuse - different language use different token", "* the operator be n't use all that often , especially in typical powershell script", "* <tag> be really readable"], "issue_sim": [0.2662872076034546, 0.3330262303352356, 0.2627353072166443, 0.41159114241600037, 0.1253678947687149], "prob": [0.011604396626353264, 0.25208690762519836, 0.042277343571186066, 0.5566145181655884, 0.010328374803066254]}, {"target": [9], "doc": ["thank for the feedback", "i ca n't speak to the real - world need , only that i keep miss it personally", "perhaps other can comment", "frankly , i find the absence of an exponentiation operator from c # puzzle ;  from <number> explain that it be n't include because it be \" fairly rare \" , which be n't too well - receive in the comment", "aside from that , powershell already have operator that c # do n't have , and it be a sufficiently different beast so that i would n't rule it out just base on that", "perhaps powershell can lead by example and down the road we 'll see an operator add to c # as well", "<tag> indeed invite confusion , because it have", "<tag> , by contrast , while not use by all language , seem to have no other meaning , and , as state , be use in several popular language : python , ruby , javascript , perl", "it be readable , but neither easy to _ remember _ nor to _ type _", "to i , a dedicated exponentiation operator seem like a natural complement to the arithmetic operator ."], "issue_sim": [-0.1043194979429245, 0.06338877975940704, 0.06719015538692474, 0.45905768871307373, 0.5078592300415039, 0.4600817561149597, -0.036778829991817474, 0.31345334649086, 0.18912887573242188, 0.5461078882217407], "prob": [0.04122618958353996, 0.0019857925362885, 0.0008422464015893638, 0.08864746242761612, 0.09679324924945831, 0.00619405135512352, 0.00030872231582179666, 0.48541364073753357, 0.00023414460883941501, 0.033320799469947815]}, {"target": [4], "doc": ["i have miss the python <tag> power operator as well , sometimes", "add a suggestion that this operator could be in the form :", "which be perhaps more clear , more discoverable , and invite less confusion than <tag> or <tag>", "that would be different to the arithmetic syntax  , but consistent with <tag> syntax", "powershell tend to like full word , so <tag> be another option , but <tag> have the advantage of match the name of <tag>"], "issue_sim": [0.3700941205024719, 0.2570436894893646, 0.18955697119235992, 0.3784753978252411, 0.3157802224159241], "prob": [0.2115129828453064, 0.0201504435390234, 0.3220331072807312, 0.009376121684908867, 0.3125114440917969]}, {"target": [2], "doc": ["my personal opinion be that i would be fine add a power operator", "it would certainly not be high on my priority list , but since @gimly be already offer to contribute the work , i do n't see any major downside to enable this capability", "for the syntax , i think i prefer <tag> only because it enable add more operator in the future without run out of symbol or remember what which one mean what ."], "issue_sim": [0.2925392985343933, 0.2380419224500656, 0.41995447874069214], "prob": [0.16323257982730865, 0.4512615203857422, 0.6535689234733582]}, {"target": [1], "doc": ["i still would find it usefull", "pwsh have nice number  . and can not use fsharp for as it be too type . but for simple and small formula in console it be great . so have 2.pow   or 2**512 would be great ."], "issue_sim": [0.05768267810344696, 0.43714749813079834], "prob": [0.016680320724844933, 0.95726478099823]}, {"target": [0], "doc": ["if we do this we lose parity with the json object be return from the api .", "that be clearly <number> json array of json object , not a single array of object"], "issue_sim": [0.2795134484767914, 0.3193948268890381], "prob": [0.9413576126098633, 0.03800623491406441]}, {"target": [0], "doc": ["i will also add that unwrap the jagged array be easily do with <tag> :"], "issue_sim": [0.2584629952907562], "prob": [0.9999349117279053]}, {"target": [1], "doc": ["you be absolutely right that the current behavior more closely match the actual return", "however , from my  perspective followrellink be add as a convenience so the caller do n't need to think about paging and multiple call .", "with that spirit in mind it seem like we should n't require they to post - process result in any way either"], "issue_sim": [0.2914537191390991, 0.13808774948120117, 0.014183485880494118], "prob": [0.04893210530281067, 0.5589118003845215, 0.25037431716918945]}, {"target": [7], "doc": ["@dddugan it be certainly a difference of opinion on how it should work", "on the one hand , we need to maintain parity with the object as they be return from the api and on the other be convenience", "i can not condone make the default behavior break parity with api", "as someone who work heavily with api , i can not stand it when something make assumption about how the object should be provide to i , especially when that assumption break with what the api have document", "the api say it will return an array of object per page , i would expect and array of array from <tag>", "my vehicle for obtain these object from the api may change , and i do n't want to adjust my logic to fit with what ever api breaking format that vehicle have decide to impose on i", "we could _ maybe _ add a switch to unwrap array , but , i be not real excited about do so", "i think it be good to just return the object as they be and let the user decide how they want to process they .", "and they do n't", "1 for this operation to work you need", "fall back to <tag> ,", "check for error ,", "inspect content - type header ,", "convert the <tag> to an object ,", "handle serialization error ,", "inspect the header for <tag> ,", "regex parse the single <tag> header ,", "and finally repeat the process with the <tag> link uri", "0 <tag> manage all of that for you"], "issue_sim": [0.01038844883441925, 0.12720778584480286, 0.30099958181381226, 0.22657530009746552, 0.45816999673843384, 0.26819780468940735, 0.164280503988266, 0.16799122095108032, 0.05118022486567497, 0.039036598056554794, 0.13277770578861237, 0.08675218373537064, 0.20480948686599731, 0.23639991879463196, 0.3214520215988159, 0.07870396971702576, 0.27950507402420044, 0.19548934698104858, 0.09155510365962982], "prob": [0.0034208118449896574, 0.1294541358947754, 0.0053400518372654915, 0.5128366947174072, 0.10821177810430527, 0.5585610270500183, 0.001556563307531178, 0.18798896670341492, 0.0002621118619572371, 0.00014138009282760322, 0.0011629171203821898, 7.502451626351103e-05, 6.422416481655091e-05, 0.00020389968995004892, 5.8106426877202466e-05, 0.00010514831228647381, 0.00019006378715857863, 0.0011975272791460156, 0.00047913106391206384]}, {"target": [1], "doc": ["@markekraus i second that", "it be easy to merge the multiple page in script , but not trivial to unwind it if merge in cmdlet .", "unless there be a particular efficiency gain from append they in the cmdlet that be", "do the project have any specific single responsibility type guidance for thing like this"], "issue_sim": [-0.06148868054151535, 0.3991205096244812, 0.10050085186958313, 0.0211563128978014], "prob": [0.019659781828522682, 0.9128850102424622, 0.046039801090955734, 0.022057458758354187]}, {"target": [4], "doc": ["i 'll weight in that this be not a good idea , imo", "with your proposal in place , look at that command should it be interpret as", "<tag> <tag> <tag> <tag> <tag> powershell", "get - command   -name ' get - help ' -module # miss an argument for parameter ' module '", "this could cause unexpected / unpredictable behavior and lead to a bad ux .", "this also open a pandora 's box of exception like pass string parameter with subexpression operator", "string that contain special token should be quote while string without special token can be pass without quote as a kind of convenient syntactic sugar", "unquoted string parameter should be the exception , not the rule , imo"], "issue_sim": [0.020744644105434418, 0.19202756881713867, 0.3635186553001404, 0.4577831029891968, 0.10551431775093079, 0.33618298172950745, 0.3985949456691742, 0.45236867666244507], "prob": [0.013445436954498291, 0.4028488099575043, 0.0012938077561557293, 0.20124764740467072, 0.010852347128093243, 0.08668490499258041, 0.09251385182142258, 0.011156397871673107]}, {"target": [1], "doc": ["i get your concern , but do note :", "that there be no syntactical ambiguity : in powershell , a parameter either _ require _ a value or be a _ switch _ ; so , for any give parameter name specify explicitly , it be unambiguously imply whether the next token be a parameter _ value _ or a _ different parameter _ .", "* that even single - character <tag> suffix - where there be no obvious resemblance to a parameter name - can trigger the problem ; e", "* that the current behavior be _ inconsistent _ :", "as you can see , <tag> , because it happen not to be the _ start of _ a parameter name , be accept as <tag> 's   parameter _ value _", "by contrast , because <tag>   happen to be the start of <tag> , it be interpret as that , and then <tag> have no value , and the command _ break _", "i suppose that one way to resolve the problem would be to disallow unquoted value that start with <tag> , but my concern would then be powershell 's _ cli _ , where introduce such an additional quote requirement  would far aggravate the quote headache , e", ", when call from <tag> :", "i guess the cli could continue to operate differently , but such inconsistency be ill - advise"], "issue_sim": [0.06542336195707321, 0.6809151768684387, 0.4166281819343567, 0.06627022475004196, 0.6436532735824585, 0.35665711760520935, 0.5477713346481323, 0.07130411267280579, 0.16988715529441833], "prob": [0.0082127396017313, 0.26166126132011414, 0.05228663608431816, 2.598755145299947e-06, 0.2246059775352478, 0.08422117680311203, 0.05414925143122673, 4.399538738653064e-05, 0.006219519767910242]}, {"target": [0], "doc": ["yes and i be suggest this would introduce that ambiguity", "in my example you could consider <tag> the positional parameter for <tag> and <tag> as the string parameter for <tag>", "that be not what i as a user would expect", "i would expect to be tell i forget to provide a value for <tag>", "instead , i would just get nothing in return assume i do n't have a <tag> command in a <tag> module", "if any change be make , i would say that this one be the way to go", "i do n't even know <tag> could begin any unquoted string value", "as for the rest , i be not sure that be the case unless i misunderstand you", "it appear you be seek consistency between parent shell and powershell syntax", "try to make the powershell cli consistent with other shells be a bit futile", "when powershell be the parent shell , you already have to quote <tag>", "i would n't expect powershell 's argument parse to be consistent with bash , cmd , ksh , python repl , or other interactive cli"], "issue_sim": [0.07316611707210541, 0.6177963614463806, 0.04716517776250839, 0.24593165516853333, 0.3279881775379181, 0.07219970226287842, 0.3307458758354187, 0.10243012011051178, 0.3354581296443939, 0.3380759656429291, 0.4569987654685974, 0.3473830223083496], "prob": [0.00275703938677907, 0.03258039429783821, 0.0006396076059900224, 0.00322826043702662, 0.08630456775426865, 0.0025978998746722937, 0.018143897876143456, 0.008136531338095665, 0.005133271683007479, 0.017425836995244026, 0.008834656327962875, 0.4908199608325958]}, {"target": [0], "doc": ["there be no ambiguity , because what i be propose be state - dependent , _ base on the specific syntax of the command in question _ :", "* with a clean slate , <tag> be unambiguously the parameter _ name _", "* once that have be recognize , give that the <tag> parameter _ require a value _ , the _ next _ token be unambiguously the parameter _ value _ - even if it look like a _ parameter _", "it be not that common a pattern in posix - like shell , but the equivalent be an _ option _ with a _ mandatory _ option - argument ; for instance , if you want to pass a script filename to <tag> via its <tag> option , the next token be _ invariably _ treat as the filename , even if it start with <tag> :", "again , in the case of <tag> it be obvious what the _ intent _ be , but let 's not forget that _ relative to the intent _ it be a _ syntax error _ - base on a misunderstanding of how the <tag> parameter work", "in other case , such as in my <tag> example , the intent may be quite different , and since <tag> be a syntactically unambiguous way to pass <tag> as a _ value _ - because <tag> _ require _ one - it should be treat as such", "that this fail from _ inside _ powershell look like a bug", "i do n't mean other shell , i mean the consistency between powershell 's cli and parameter pass to cmdlet and function :", "* <tag> work  ,", "* something like <tag> should work too"], "issue_sim": [0.299742192029953, 0.36406010389328003, 0.6667884588241577, 0.4046868681907654, 0.4364967942237854, 0.510270357131958, 0.2997923493385315, 0.4400600790977478, 0.03537002205848694, 0.17609858512878418], "prob": [0.2961331307888031, 0.005534014198929071, 0.0717809796333313, 0.11485195904970169, 0.11418014019727707, 0.14915043115615845, 0.005274704657495022, 0.46914252638816833, 0.0005886020371690392, 0.0007831276743672788]}, {"target": [1], "doc": ["i do n't think so", "it should be consider a difference of syntax between shell .", "how a shell parse argument to pass to binary be up to that shell and there be only similarity between shell", "powershell * as a shell * will have a different method for parse and pass argument to binary then bash , cmd , etc", "that would be expect", "what one shell deem an important token another may deem irrelevant", "internally , powershell be consistent :"], "issue_sim": [0.026119500398635864, 0.35052937269210815, 0.25913798809051514, 0.44758790731430054, 0.0009352304041385651, 0.19247910380363464, 0.23999804258346558], "prob": [0.04804791510105133, 0.5302202105522156, 0.27905288338661194, 0.6137111783027649, 0.014078914187848568, 0.05677451938390732, 0.0012944741174578667]}, {"target": [1], "doc": ["feel free to continue discuss , but i be close the issue because i ca n't see add more complexity to the parameter binder to change this behavior", "the \" workaround \" be in my opinion the preferred style - use quote .", "there be no confusion to human reader", "there be no potential ambiguity for the parameter binder to deal with", "the script be future proof , add a new parameter that might match some argument wo n't cause a problem"], "issue_sim": [0.3896545171737671, 0.2433023750782013, -0.004384595900774002, 0.31354260444641113, 0.3240956664085388], "prob": [0.6375090479850769, 0.37575116753578186, 0.00016611457976978272, 0.019668368622660637, 0.009300059638917446]}, {"target": [0], "doc": ["another workaround would be to use parameter with explicit argument syntax :"], "issue_sim": [0.5230414867401123], "prob": [0.9998958110809326]}, {"target": [0], "doc": ["i simply choose <tag> , because that be what number literal with a a decimal point  become in powershell .", "note that that even the current <tag> type can not be use in its full range , because internally the value be multiply by <tag> to get millisecond , while still use <tag> for the calculation :", "note that <tag> be simply the result of integer - dividing <tag> by <tag>", "in fact , an explicit validation attribute on the <tag> parameter enforce that : <url>", "that is , the  max", "sleep duration be currently <tag>", "that probably should n't change , irrespective of what non - integral type we choose - unless we feel we need to raise that limit", "so , what be your concern re <tag>"], "issue_sim": [0.36044222116470337, 0.5205034017562866, 0.32177138328552246, 0.22769729793071747, -0.02237490937113762, 0.23558048903942108, 0.28599801659584045, 0.09296929836273193], "prob": [0.4217285215854645, 0.3134283721446991, 0.04990381374955177, 0.007642604410648346, 0.0005029054009355605, 0.00028099032351747155, 0.283231645822525, 0.001388889504596591]}, {"target": [0], "doc": ["i think that kind of precision be overkill and may give user a false sense of how faithful the actual sleep duration be to the request one ."], "issue_sim": [0.3011128902435303], "prob": [0.9999681711196899]}, {"target": [1], "doc": ["to put it differently : in a way we already have a potential over - promising problem , by support <tag> value ; e", "i think it be sufficient to _ document _ the limit of accuracy and to otherwise make do with <tag> for <tag> ."], "issue_sim": [0.28448352217674255, 0.23785144090652466], "prob": [0.8262296319007874, 0.27343645691871643]}, {"target": [2], "doc": ["i have no strong preference about type", "i be only think about format", "also i 'd do n't add such change because it complicate backporting script ."], "issue_sim": [0.10625101625919342, 0.07731077820062637, 0.38351041078567505], "prob": [0.0072868457064032555, 0.004772125277668238, 0.9894053339958191]}, {"target": [0], "doc": ["note that <tag> already work , because powershell happily convert this <tag> literal to an <tag> during parameter bind .", "powershell 's flexible automatic type conversion can be confuse at time , but by and large they be very useful - i do n't think we should introduce any artificial restriction here", "_ any _ new feature complicate back - port - it be the price of innovation", "there be many case already where feature have be add later  , and there be no way around know what feature where introduce when if you want to target early version too", "now we may have to think about how to \" batch \" new feature couple with semantic versioning so that it do n't become too complex to keep track of what feature be introduce when , but that be a separate discussion"], "issue_sim": [0.45852676033973694, 0.43263310194015503, 0.10321439802646637, 0.22161906957626343, 0.2821860909461975], "prob": [0.37152543663978577, 0.25266194343566895, 0.0010040136985480785, 0.19106431305408478, 0.31464487314224243]}, {"target": [1], "doc": ["thank for take this on , @hubuk", "it be definitely a step in the right direction , but other quirk remain , so maybe we can expand the scope of your pr .", "the follow test code contrast the console output of various <tag> / <tag> / <tag> command with respect to what print to the console vs", "what show in the transcript :", "$ null = start - transcript", "write - host ' write - host silentlycontinue '", "write - information ' write - info silentlycontinue '", "write - host ' write - host continue ' -informationaction continue", "write - information ' write - info continue ' -informationaction continue", "write - host ' write - host ignore ' -informationaction ignore", "write - information ' write - info ignore ' -informationaction ignore", "out - host -inputobject ' out - host ' # always print to both the console and the transcript", "* your current pr commendably fix the <tag> behavior in principle , but in the transcript its output be still prefix with <tag> , unlike in the console", "* <tag> output still _ invariably _ end up in the transcript - while <tag> / <tag> work in the _ console _ , it do n't in the transcript", "while fix the quirk be definitely desirable , we also have to ask ourselves whether user may depend on the old behavior , such as expect <tag> output to be there by default", "@stevel - msft , any thought on this and the other issue mention in # <number> with respect to backward compatibility"], "issue_sim": [-0.008420946076512337, 0.14950095117092133, 0.24124258756637573, 0.041309893131256104, 0.2168046236038208, 0.22294756770133972, 0.17797309160232544, 0.26511871814727783, 0.1640845537185669, 0.325155109167099, 0.2908831238746643, 0.15236584842205048, 0.4425109028816223, 0.34991323947906494, 0.3297717571258545, 0.13923275470733643], "prob": [0.002816084073856473, 0.557386040687561, 0.005653647240251303, 0.000666928244754672, 0.00012591126142069697, 8.09367629699409e-05, 0.0005300688790157437, 0.0010030915727838874, 0.0006185342790558934, 0.0003321728727314621, 0.0003022887103725225, 0.005760318133980036, 0.013459889218211174, 0.09784909337759018, 0.10115595906972885, 0.00036413766792975366]}, {"target": [2], "doc": ["@mklement0 i make change to info : prefix , but i observe different behavior in <tag> than you describe", "it be present in transcript but not in the console", "i think that write - host should always be visible in both console and transcript regardless of informationaction and $ informationpreference ."], "issue_sim": [0.4295644760131836, 0.15296795964241028, 0.26099589467048645], "prob": [0.024889931082725525, 0.022256402298808098, 0.9756553769111633]}, {"target": [0], "doc": ["my general view be that <tag> , by default , be expect to log your input and the output and should resemble what you would see at the console .", "anything more than that should require the use of a parameter or switch", "where behavior change  be need to accomplish this , we 'll need to determine the impact to the user and decide on a case - by - base basis"], "issue_sim": [0.21423712372779846, 0.13937567174434662, 0.2043372392654419], "prob": [0.930962085723877, 0.001624181168153882, 0.4627425968647003]}, {"target": [3], "doc": ["if <tag> should suppress <tag> from write to console then <tag> should also suppress console output for consistency", "but for i it seem more natural that <tag> should always write to host", "its interaction with informationstream can be control use informationaction and informationpreference variable", "if the appearance on the console shall be control use these then write - information should be use instead .", "that be my understanding of the difference between these two command"], "issue_sim": [0.36763057112693787, 0.18865126371383667, 0.16436663269996643, 0.17715191841125488, 0.1756928414106369], "prob": [0.23381084203720093, 0.05045047402381897, 0.3151325583457947, 0.2612057328224182, 0.005574510432779789]}, {"target": [1], "doc": ["ok , that be odd -", "i do n't recall have any strange terminal setting , however the enter key on the keypad seem to return code <number> and the return key return <number> .", "in the example below , the enter key be the first example and the return key be the second one"], "issue_sim": [-0.02025545760989189, 0.6273627877235413, 0.5600811243057251], "prob": [0.002296963008120656, 0.9453433156013489, 0.07639604806900024]}, {"target": [1], "doc": ["@kai - h if you use the numeric enter key in textedit , do it show <tag> or a newline", "seem like your keyboard be configure incorrectly and probably not an issue with powershell ."], "issue_sim": [0.5250877737998962, 0.4210568964481354], "prob": [0.0009286442655138671, 0.9918083548545837]}, {"target": [0], "doc": ["it be primarily about pass <tag> through , though allow empty array can also help with dynamically construct parameter list ;", "i 've add an example to the initial post , base on"], "issue_sim": [0.4363252818584442, -0.015703432261943817], "prob": [0.8898804783821106, 0.009374801069498062]}, {"target": [0], "doc": ["yes , it be the same issue , but windows powershell also do n't support an empty array / <tag> <tag> value : try <tag>", "as an aside : unfortunately , the way <tag> currently work may require additional , embed quote to pass argument through", "for instance , your function would fail if the session have be invoke with something like <tag> , due to the space in the filename - see # <number>"], "issue_sim": [0.6311966180801392, 0.3254872262477875, 0.4518887996673584], "prob": [0.39019837975502014, 0.0932108536362648, 0.5442239046096802]}, {"target": [0], "doc": ["miss subject be a bad practice", "by default , we must ask for it to present"], "issue_sim": [0.12564074993133545, -0.02306898683309555], "prob": [0.02583223395049572, 0.7576027512550354]}, {"target": [2], "doc": ["i would like to try this one", "most information be gather from pr # <number> , which be close due to non - address comment", "the easy way to implement the option to make <tag> always mandatory , unless the user explicitly state to send the mail without a subject be to use <tag> as state by @dantramsft .", "~~though i would like to go with the <tag> switch , due to consistency with other cmdlet as suggest by @stevel - msft", "base on community feedback  the <tag> switch will be use in its own parameter set", "this will therefore exclude the parameter <tag> completely from the propose parametersetname \" nosubject \"", "parametersetname \" default \" : this would prompt for missing parameter <tag> due to be a mandatory parameter", "~~parametersetname \" force \" : this would not prompt for missing parameter <tag>~~", "parametersetname \" nosubject \" : this will exclude the parameter <tag> from the parameter set", "no error or prompt will be show due to miss email subject", "one problem be , that <tag> use positional parameter , where <tag> be at position <number>", "two option would be available :", "parametersetname \" nosubject \" : do n't use positional parameter at all", "parametersetname \" nosubject \" : make <tag> positional parameter at <number> instead of <number> and <tag> <number> instead of <number>", "example for solution <number> :", "-  submit pr to powershell repository with suggest modification", "-  implement <tag> switch", "-  include test case which use <tag> switch", "-  submit pr to powershell - docs repository to reflect alternative parameter set", "any feedback be highly appreciate", "edit <number> - <number> - <number>", "- change switch parameter <tag> to <tag>", "- change parametersetname \" force \" to \" nosubject \"", "- change <tag> to correct <tag> cmdlet name"], "issue_sim": [0.0647997185587883, 0.08123863488435745, 0.4631320834159851, 0.44451892375946045, 0.03491219878196716, 0.15406213700771332, 0.41249769926071167, 0.2608954906463623, 0.2639004588127136, 0.34778928756713867, 0.297121524810791, 0.014231055043637753, 0.2781450152397156, 0.4368968605995178, 0.06136950105428696, 0.42665785551071167, 0.09208010137081146, 0.19408294558525085, 0.40365535020828247, 0.01525871455669403, 0.11817432940006256, 0.2397877424955368, 0.09661166369915009, 0.42513009905815125], "prob": [0.028344448655843735, 0.14619943499565125, 0.2061525583267212, 0.37411025166511536, 0.004417433403432369, 0.0381561703979969, 0.08004884421825409, 0.02154134400188923, 0.0046506160870194435, 0.00023667214554734528, 0.008229740895330906, 0.0004250838537700474, 0.002696952084079385, 0.013413063250482082, 0.0004039029299747199, 0.0009006212931126356, 0.00018119266314897686, 0.0002554682141635567, 0.0016201265389099717, 0.0013520446373149753, 0.0018604567740112543, 0.0004672500363085419, 0.0013271101051941514, 0.009762180969119072]}, {"target": [0], "doc": ["i be not sure this can be fix , it would likely break exist script , especially because the workaround be to use more quote .", "my memory be a little fuzzy , but i believe i try to fix this issue when rewrite the parser in v3", "i do n't recall specific , but my original design be to tokenize the sub - expression during initial scan of the string , and i think it would have naturally work as you expect", "unfortunately , due to backwards compatibility issue  , we continue to work as it do in v1 and v2"], "issue_sim": [0.21836960315704346, 0.2969651222229004, 0.22565501928329468, 0.25667938590049744], "prob": [0.37871214747428894, 0.18353234231472015, 0.3615630865097046, 0.01948380097746849]}, {"target": [2], "doc": ["@lzybkr your previous comment be from almost a year ago", "since then it seem like there be plenty of break change go from windows powershell to   powershell core", "this seem like the right time if there ever be one to fix the parser ."], "issue_sim": [-0.05074277147650719, 0.25151222944259644, 0.10020945966243744], "prob": [0.015166656114161015, 0.6396389603614807, 0.18618810176849365]}, {"target": [1], "doc": ["while we have take break change , i believe none of they fall under bucket <number> or <number> in the", "i believe this one fall under bucket <number> : reasonable gray area because i do think real world script depend on the current behavior ."], "issue_sim": [0.08395643532276154, 0.07374024391174316], "prob": [0.7428114414215088, 0.15085850656032562]}, {"target": [4], "doc": ["@lzybkr thank for that link , it be great to read that sort of guidance about break change", "base on the example give , this do seem to fall under bucket <number>", "but base on the description of each bucket , i think it fall under bucket <number> :", "i think it be unlikely that exist script would have depend on this behavior", "i believe it be far less likely that author use what be clearly incorrect / unbalanced quote as a workaround rather than opt to refactor or simplify  .", "additionally even if it do fall under bucket <number> :", "this behavior be not predictable , obvious , or consistent", "it would be interesting to take a large corpus of public script  and test our assumption ; see how much code be out there that depend on this specific parsing behavior"], "issue_sim": [0.0958438366651535, 0.07896365225315094, 0.024585092440247536, 0.2243058979511261, 0.18508422374725342, -0.04000319913029671, 0.14578105509281158, 0.23841078579425812], "prob": [0.012241434305906296, 0.013031749054789543, 0.0066979494877159595, 0.01594458892941475, 0.334360808134079, 0.0006233803578652442, 0.022534312680363655, 0.09588456898927689]}, {"target": [0], "doc": ["first of all , would like to say i like the idea , i personally find myself create \" oneliner \" like <tag> while { stuff ; start - sleep <number> } <tag> a lot , so i think it would be great to have a parameter like that for when i monitor a condition in real time .", "other than that i think if at all possible the parameter should be keep the same for text and object , maybe limit how much it traverse an object as a \" solution \" to limit performance / display issue", "personally speak , i usually do n't dig too deep in the object , and since i control the scriptblock , spend a little extra time to simplify the return object , do n't seem too big a deal in my opinion"], "issue_sim": [0.42288950085639954, 0.4337537884712219, 0.3247791528701782], "prob": [0.44925907254219055, 0.4045270085334778, 0.2709592282772064]}, {"target": [1], "doc": ["i see some overlap here with the eventing we can do now in powershell", "a theoretical watch command could leverage eventing and maybe store \" watch result \" object .", "i could use <tag> to retrieve they", "or give i an option to have an interactive experience as i have in linus"], "issue_sim": [0.33545467257499695, 0.298427939414978, 0.09789738059043884, 0.19614942371845245], "prob": [0.006986132822930813, 0.996803879737854, 0.005500223487615585, 0.013917230069637299]}, {"target": [8], "doc": ["i do n't think you should expect the behavior you be describe , and i do n't see the actual behavior you be describe on macos , at least not on powershell core v6", "it be true that on unix - like platform the filename extension be irrelevant with respect to whether a file be _ executable _ , but in order to execute a file you must specify its _ exact _ filename , so if it happen to have an extension  do happen with <tag> use for shell script ) , it _ must _ be specify", "therefore , in a posix - like shell  , if the script name be <tag> , you can _ not _   invoke it with <tag> or <tag>", "this be where powershell 's behavior differ : it _ do _ implicitly look for its _ own _ script and , if no <tag> - without extension be present - look for <tag> and execute that , _ in - process _ and - if be use - in the current scope", "set in that case", "that you must use <tag> in order to target <tag> / <tag> _ in the current dir", "_  - whether with direct invocation or via \" dot - sourcing \" or via <tag> - be a sensible security measure that be actually mandate by posix , and <tag> happen to be in violation of it", "an additional difference be that in powershell you can invoke _ anything _ with <tag> , not just powershell _ script _  ; if the operand happen not to be a powershell script , <tag> behave as if you have invoke the operand directly  powershell code ) )", "i do n't see any problem with these selective difference between powershell and posix - like shell - they strike i as useful extension .", "let i give example that you can run as - be :", "<tag> <tag>n'hi from out - of - process t ' \" > t ; chmod a+x t", "' \" hi from in - process t", "ps1 \" ' > t", "' foo ' > t", "<tag> <tag> <tag> powershell", "hi from out - of - process t", "hi from in - process t"], "issue_sim": [0.43921202421188354, 0.5031090378761292, 0.4777839183807373, 0.434844434261322, 0.024950921535491943, 0.3617100417613983, 0.29943668842315674, 0.30231139063835144, 0.39107847213745117, 0.07497826218605042, 0.279305100440979, 0.07288726419210434, 0.21091309189796448, 0.14401750266551971, 0.30002397298812866, 0.08100225031375885, 0.07288726419210434], "prob": [0.32914209365844727, 0.6837127208709717, 0.27584508061408997, 0.2454202026128769, 0.004955868702381849, 0.009496823884546757, 0.031637948006391525, 0.03880952298641205, 0.0315660685300827, 0.002022047294303775, 0.01194350142031908, 0.00032967148581519723, 0.00013500134809873998, 0.00010463657963555306, 0.00019254552898928523, 0.000726770784240216, 0.000865164736751467]}, {"target": [8], "doc": ["as state , give that the file neither have extension <tag> nor be mark as executable , it be treat as a _ document _ , as if you have run <tag> or , use the native <tag> macos utility , <tag>", "what that do specifically depend on what default program you 've set up ; on my machine , for instance , it open the file in visual studio code", "it be unclear what you mean by \" open a new window \" , but i suspect that the file be open in textedit", "app , the macos default text editor", "give the extended mandate of <tag> in powershell - the ability   to invoke _ anything _ - it make sense to reserve the assumption that the target file contain powershell source code to be source to _ file with extension <tag> only _", "you could argue that this extended mandate should be revoke and that <tag> should _ only _ support source powershell source code , and - like posix - like shell , analogously - should _ blindly assume _ that whatever file argument be pass contain powershell source that should be \" dot - source \" , whereas currently this assumption be currently reserve solely for file argument _ with extension <tag> _", "consider this , however :", "* change the behavior of <tag> would be a break change", "it be unlikely that you 'll want to create _ extension - less _ powershell source - code file _ for the purpose of \" dot - sourcing \" _ ; instead , extension - less powershell source - code file be most likely _ executable script with a shebang line _ , which be design to run _ out - of - process _ , which contradict the purpose of \" dot - sourcing \" .", "now the file be executable , so an _ attempt _ be make to _ execute _ it", "_ presumably _  , powershell delegate execution to the _ system _ , which _ fail _ in this case , because the plain - text file that be mark as executable _ lack a shebang line _ that specify the interpreter to pass the file to", "that say , it should n't fail _ quietly _ , so that be worth create a separate issue for", "as state , <tag> file be special in powershell : you can invoke or \" dot - source \" they at will , whether they be executable file or not", "as for your <tag> command :", "yes , as state , posix - like shell _ blindly _ assume that file you pass to <tag> contain code in _ their _ shell language - powershell deviate from that", "also note that posix - like shell have no \" native \" filename extension , so they - unlike powershell with its <tag> -   _ can not _ infer from a give filename whether it contain shell code or not", "<tag> , as state , _ in violation of posix _ , allow you to do <tag> without need to refer to a file in the current directory with prefix <tag> - this be _ not _ worth support in powershell", "for _ direct _ invocation , posix - like shell also have a _ fallback mechanism _ , if delegate to the system to invoke an _ executable _ file fail due to _ absence of a shebang line _", "they default to execute such a file as either _ themselves _ or with <tag>", "that strike i as another practice that be _ not _ worth adopt in powershell : report an error seem more sensible to i - as note , powershell currently fail _ silently _ , which should be fix"], "issue_sim": [0.4166797399520874, 0.2950064241886139, 0.4243844747543335, 0.28166788816452026, 0.33652326464653015, 0.42779242992401123, -0.0004998515360057354, 0.31263989210128784, 0.3320610225200653, 0.2280595898628235, 0.29810136556625366, 0.10948894917964935, 0.2204364538192749, 0.16912299394607544, 0.4568134546279907, 0.489036500453949, 0.41897645592689514, 0.3875866234302521, 0.13317637145519257, 0.3102462589740753], "prob": [0.2413415014743805, 0.0048030661419034, 0.0025906951632350683, 0.0005840806406922638, 0.012515148147940636, 0.02337486483156681, 3.521074904710986e-05, 0.0006415550014935434, 0.07452259212732315, 2.4399982066825032e-05, 0.0074189030565321445, 0.00010003655188484117, 0.017885811626911163, 6.240565198822878e-06, 0.004926285240799189, 0.0005751949502155185, 0.025500960648059845, 0.002065143780782819, 2.4992050384753384e-05, 0.017490142956376076]}, {"target": [1], "doc": ["i do n't think this be something we would have as part of powershell", "similar to tmux , screen , cmder , i think it be something that be outside the shell ."], "issue_sim": [0.5973337888717651, 0.37903597950935364], "prob": [0.015354537405073643, 0.9901549816131592]}, {"target": [3], "doc": ["@stevel - msft ,", "thx for your reply , i have two main usage of the split window", "1/ when i connect to my remote admin server by psremote from my desktop", "as it be a admin server , i often need to launch multiple powershell window to manage other server .", "and as we do n't have the split window yet , i have to launch multiple psremote from my desktop , it take time", "2/ in vscode for windows , we can only see one terminal at the same time , i really need multiple terminal console at the same time instead of   switch among they each time", "cmder be a gui application that can not be intergrate into vscode terminal", "if the powershell team do n't want to implement the split window , we do n't have any other choice"], "issue_sim": [0.256093829870224, 0.2813456058502197, 0.16283947229385376, 0.6030387878417969, 0.3719601035118103, 0.3358156979084015, 0.22710773348808289, 0.6654617786407471], "prob": [0.0017559241969138384, 0.039520781487226486, 0.04144583269953728, 0.19964885711669922, 0.15744556486606598, 0.2943977117538452, 0.0015771470498293638, 0.0696849450469017]}, {"target": [0], "doc": ["i have vim run in powershell and i really need the ability to split pane both horizontally and vertically .", "it would also be nice to have vi binding to navigate through the pane as specify here : <url>", "< blockquote><img src=\"<url> / u/420113", "s=400&v=4 \" width=\"48 \" align=\"right\"></blockquote >"], "issue_sim": [0.6247202157974243, 0.31531187891960144, 0.05819974094629288, 0.10339584946632385], "prob": [0.9458793997764587, 0.05729852616786957, 0.0002432955225231126, 0.03445851057767868]}, {"target": [0], "doc": ["it look like this be a problem in exist _ production _ version , but not in powershell core as of v6 - beta.3  , so you should probably report this at  ."], "issue_sim": [0.36585861444473267], "prob": [0.9998854398727417]}, {"target": [4], "doc": ["the processing of <tag> be somewhat unusual in this case :", "unless you take extra action , pass <tag>   and _ omit _ <tag> be equivalent", "the <tag> parameter variable will be a <tag>-typed variable whose <tag> property  be <tag> in _ both _ case", "from what i understand , that be the intent behind <tag> , which normally only exist to facilitate _ programmatic _ construction of a command line", "the only way to distinguish these two case be to do something like <tag>  , which be apparently what happen here : <tag> return <tag> despite <tag> return <tag> imply that <tag> be pass", "thus , <tag> function as a signal to _ override _ the <tag> variable  be a semantic anomaly , but it be helpful and document ."], "issue_sim": [0.0686783492565155, 0.21219442784786224, 0.3151807188987732, 0.18050238490104675, 0.4365847110748291, 0.3500239849090576], "prob": [0.003104119561612606, 0.02868766151368618, 0.2151651382446289, 0.06447260826826096, 0.18943612277507782, 0.12239173799753189]}]}
