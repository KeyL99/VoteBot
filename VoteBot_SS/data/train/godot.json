{"dataset": [{"target": [3], "doc": ["could n't a lot of this be alleviate by empower the current visual scripting with more and well function", "a lot of the example be trivial in ue4 's blueprint", "\" on keypress w , move this actor forward \"", "you could build most of these in a very similar way in blueprint and even the visual difference  would be minimal .", "we should focus on make the visual script we have usable and work in a intuitive , smooth way , imo", "as be , the visual script * * we already have * * feel a little forgotten and do n't seem to get much love", "how would have * * two * * visual scripting system improve this situation at all"], "issue_sim": [0.2707662582397461, 0.32184159755706787, 0.009567697532474995, 0.18181098997592926, 0.2796947956085205, 0.16991181671619415, 0.27762076258659363], "prob": [0.2777521312236786, 0.06672410666942596, 0.07564927637577057, 0.5450423359870911, 0.03581665828824043, 0.6741952896118164, 0.00907210260629654]}, {"target": [1], "doc": ["a good idea for a plugin", "but officially maintain two visual scripting system would be a pain , and for little gain ."], "issue_sim": [0.15928226709365845, 0.21136526763439178], "prob": [0.033818431198596954, 0.9206778407096863]}, {"target": [2], "doc": ["@mhilbrunner unfortunately no , blueprint be a completely different approach to visual scripting", "to you they be trivial , but i dare you to say that on clickteam 's forum or on construct 's forum", "those guy be stick with the engine they use because of how much they love this approach and believe i - many of they have try blueprint in unity , unreal and other engines- include godot .", "they be still stick with construct2 or clickteam fusion because they prefer event sheet to blueprint", "they still request event sheet approach on unity 's forum", "godot 's visual scripting be mention on their forum and the user there still prefer event sheet", "i personally transition to gdscript and prefer to use gdscript instead of blueprints- because gdscript be close in its advantage to the event sheet than blueprint be", "it be like tell someone who like banana to eat tomato instead- its a matter of taste :)", "@groud i think the same for a while , but i be not even sure where to start - and even as a plugin- someone will have to maintain the plugin", "@reduz seem to feel warm towards the idea on <appname> , but i understand that he have his hand full with more important thing", "in any case , i be post this here for documentation - to outline the event sheet system - what it do and how it differ from blueprint", "if anybody else be interested to implement it in godot or as an addon , please let we know", "i would definitely roll my sleeve and help out , spread the news and get feedback from clickteam / construct user", "so far i do n't even know how to implement its interface with godot 's gui class properly", "you have to be able to drag logic block between cell of the same column", "copy / paste block / row too - nest row and", "i do n't think it be a small task"], "issue_sim": [0.39842987060546875, 0.21582916378974915, 0.20423179864883423, 0.313823938369751, 0.20661471784114838, 0.4305369257926941, 0.29662686586380005, 0.15389694273471832, 0.1851053237915039, 0.04152153059840202, 0.30415576696395874, 0.31255123019218445, 0.20348817110061646, 0.3042754530906677, 0.33561769127845764, 0.17757132649421692, 0.09413870424032211], "prob": [0.0002034807694144547, 0.010061688721179962, 0.10143832117319107, 0.002161853015422821, 0.0001520467922091484, 0.005141468718647957, 0.4282694458961487, 0.012589074671268463, 0.011234859004616737, 0.0003736123617272824, 0.009727154858410358, 0.000942249083891511, 0.00692586088553071, 0.0019223911222070456, 0.00042896150262095034, 0.0013071554712951183, 0.00026627304032444954]}, {"target": [0], "doc": ["i believe such event sheet could be implement via nativescript , but i do n't see any reason why it would need to rely on the same codebase as visualscripte ."], "issue_sim": [0.3000427484512329], "prob": [0.9994789958000183]}, {"target": [1], "doc": ["we now have multiple choice for scripting language", "why not also have more than one choice for visual scripting :)", "i guess this could also depend on how flexible godot 's api be for build visual scripting interface", "should the visualscripte codebase be reuse - or should a completely alternative one be write with nativescript", "can this just be implement as a gdscript addon"], "issue_sim": [0.12882617115974426, 0.28336775302886963, 0.3741520047187805, 0.22465765476226807, 0.23669801652431488], "prob": [0.002773839980363846, 0.07119865715503693, 0.000571628799661994, 0.18686819076538086, 0.00689336471259594]}, {"target": [6], "doc": ["because we already support too many language as build - in", "most use case be already cover , so there not a lot of reason to add on new language to maintain", "we have a language for basic programming  , two for performance  and one for artist / game designer", "there be no reason to add another language as build - in just because some people ca n't handle learn a new language", "honestly , i definitely do n't think this should be add to the core", "it would be well add via a plugin like any other language bind", "we already have enough work on maintain the current language .", "and no , i do n't think we can reuse the visualscripte 's code"], "issue_sim": [0.08553071320056915, 0.1798723042011261, 0.2110433280467987, 0.11483646929264069, 0.04682574421167374, 0.16194461286067963, 0.1327267289161682, 0.08749253302812576], "prob": [0.015094790607690811, 0.0780891552567482, 0.009853053838014603, 0.20297211408615112, 0.00980609841644764, 0.009182179346680641, 0.02772483415901661, 0.03655574098229408]}, {"target": [1], "doc": ["@groud that be a good point , but consider the ratio of programmer to artist in gamedev", "some of the great , most beautiful retro 2d game have be make with fusion <number> by artist who want to make game in an intuitive way that fit their way of thinking .", "here be a bit outdated showreel of fusion make game :", "they have many many succesful kickstarter project and game on steam - game on many platform", "people like to use this approach in visual programming - even professional team", "i would n't be present it here if i do n't see potential of expand the userbase"], "issue_sim": [0.20535898208618164, 0.2246856987476349, 0.14397424459457397, 0.07635988295078278, 0.16369913518428802, 0.07557448744773865], "prob": [0.0006333449855446815, 0.8358961939811707, 0.002317173173651099, 0.0020644667092710733, 5.553890332521405e-06, 0.003955741412937641]}, {"target": [6], "doc": ["well maybe , but how many of they be able to understand event sheets but not visualscripte", "you be say that \" those guy be stick with the engine they use because of how much they love this approach and believe i - many of they have try blueprint in unity , unreal and other engines- include godot \" , but you be actually the first one to ask that", "if this be a popular demand , yes we could add it to the core", "but until now it be not", "for i , we already cover all the use case", "at least for a state - of - the - art and professional game engine", "and as we do n't target kid or hobbyist but company , it be not worth spend time on it .", "fusion <number> , construct or even rpgmaker focus on another audience , even if beautiful game have be make with they only a tiny part of they be professional project"], "issue_sim": [0.19105935096740723, 0.23171938955783844, 0.12354724109172821, 0.04241982847452164, 0.19293998181819916, 0.15206819772720337, 0.04813024401664734, 0.2989841103553772], "prob": [0.28249120712280273, 0.3518953025341034, 0.00824001431465149, 0.0028276778757572174, 0.0033952314406633377, 0.0040319133549928665, 0.08617639541625977, 0.07397923618555069]}, {"target": [2], "doc": ["@groud these stat be hard to come by", "how many be use the current visual script", "i be also make point of why the event sheet approach have advantage over blueprint - such as less click to get thing work , clear presentation and well learn transition to gdscript .", "the rpg maker engine be really a level editor if you ask i", "it do not have the same level of flexibility as fusion and construct2", "it be easy to explain to someone how an event sheet work , than it be to explain the same example in a blueprint - they have to learn much less concept - no need to be teach the type of connection between node , type of input and output - how to set the flow", "instead the event flow from top to bottom , leave be condition and right be action", "you have to connect nothing", "look as hard to understand as this", "sure , godot would use more event block to achieve , but it would still be clear than a node graph", "even gdscript look clear to i than that", "our current visual script system look complicated at a first glimpse", "i speak as someone who have use both system and be now compare they - both be equaly powerful , one be clearly simple to learn and get into", "give it a try please", "you can try construct3 in your web browser for free here :", "if you have a son or a young sibling , ask they to try it , then try godot 's - see what they can do and how long it take they to do it without give instruction - there be a potential market for more school to adopt godot here - make visual scripting well for learn programming concept and we will get a young demographic use the engine"], "issue_sim": [-0.06260278820991516, 0.29071757197380066, 0.31404897570610046, 0.19918178021907806, 0.05272350460290909, 0.37520599365234375, 0.1385689079761505, 0.013278789818286896, 0.051581885665655136, 0.41311079263687134, 0.04131641238927841, 0.2547184228897095, 0.18746733665466309, 0.01847311109304428, 0.09030371159315109, 0.27032554149627686], "prob": [0.004644346889108419, 0.0016686980379745364, 0.11810999363660812, 0.0008069960749708116, 0.006229096557945013, 0.5170601606369019, 0.0018077719723805785, 0.0005788223352283239, 0.00035907741403207183, 0.0027065479662269354, 0.00023520301328971982, 0.0005804086686111987, 0.0802750214934349, 0.00012624716327991337, 0.0029804965015500784, 0.1977299600839615]}, {"target": [2], "doc": ["@groud would be great if we could test godot 's visual script in a school environment - with kid learn basic code concept", "one of construct2 's big selling point have be to teach kid code and they have be sell a special educational license for year", "my argument be that visual script in godot at the moment be not very inviting to non - coder and do n't really help people learn how to code - because its approach be purely state machine centric and basic programming concept get even more complicated with additional nodegraph centric rule on top .", "experience programmer be really not the good audience to sell this to- because they would see the event sheet as a simplification of what we already have - gdscript and will see blueprint as a new tool that could be use as a state machine by designer", "i would love to try to write a basic event sheet addon in gdscript ,   i be really not experience enough to make a native script addon", "if that be possible and you have some pointer where to start - i would love to hear they", "maybe if there be enough interest somebody might make it in nativescript"], "issue_sim": [0.3833681344985962, 0.16561070084571838, 0.4266923666000366, 0.4070185720920563, 0.41481292247772217, 0.09125913679599762, 0.11128035187721252], "prob": [0.006264952942728996, 0.18443280458450317, 0.2686383128166199, 0.13048256933689117, 0.013823562301695347, 0.005254462361335754, 0.0013508101692423224]}, {"target": [2], "doc": ["i have no idea why you would think that", "visualscripting have nothing to do with state machine", "visualscripting should be simple than gdscript for artist / game devs .", "i have to admit it be not really for now , probably that a bunch of node might be simplify / make more appealing", "but honestly , you be wrong thinking that events sheets be easy to understand than visualscript , to i they be not", "the only thing that actually make the difference in the example you show be the text and the icon that make thing a lot more understandable", "it be the text and icon that make thing more explicit and straightforward , not the vertical organization", "visualscripting would be as understandable if we add such icon , if we make a well gui for most common action , and group the function into pertinent category"], "issue_sim": [-0.05885935574769974, 0.0774400383234024, 0.19739529490470886, 0.2119218409061432, 0.14054591953754425, 0.23730061948299408, 0.18249115347862244, 0.2870680093765259], "prob": [0.006955049000680447, 0.0006117544253356755, 0.0785474106669426, 0.11787940561771393, 0.023485200479626656, 0.09026169031858444, 0.0010184868006035686, 0.08316797763109207]}, {"target": [2], "doc": ["@groud its also the order of execution and the type of connection", "there be way more concept to look out for in the nodegraph than the event sheet", "even if you add icon to node , you still have to explain that the order of event be dictate by the white line , also what the other color mean .", "you still end up with a spaghetti graph that be hard to read - your eye have to travel all over the place to figure out what be go on in someone else 's graph", "you be not the right target audience - you be an experienced c++ programmer", "please test this with people who be non - programmer and you will start to see what i mean"], "issue_sim": [0.023226814344525337, 0.1475970447063446, 0.27076876163482666, 0.17049643397331238, 0.15379586815834045, 0.13323411345481873], "prob": [0.0016170227900147438, 0.13413487374782562, 0.4781620502471924, 0.5341593623161316, 0.0006026793853379786, 0.0050758789293468]}, {"target": [2], "doc": ["come'on that be not that hard to understand , once again we be not target kid", "and regard the code organization , the problem be the same for event sheet", "if you do n't bother grouping node and organize your code you end up with unreadable code , whether it be due to lengthy event sheet or huge node graph ."], "issue_sim": [0.1114053726196289, 0.21817350387573242, 0.3986876308917999], "prob": [0.4016573429107666, 0.03842593729496002, 0.6996480226516724]}, {"target": [3], "doc": ["@groud can we even group visualscript node like in blender", "i do n't remember see that", "perhaps @mhilbrunner should add it to his list", "another important point be make there- ability to create reusable high level action / condition logic block via gdscript would be very beneficial for an event sheet system or the blueprint system .", "the blueprint system already have it - but i do not see any plugin make for it", "again - construct2 be way ahead of we", "their community have create many many many easy to install plugin that add custom condition and action - and their api to register an action and a condition be super simple"], "issue_sim": [0.2826295495033264, -0.026575684547424316, -0.02156423032283783, 0.36591190099716187, 0.20879808068275452, 0.00509322714060545, 0.29690027236938477], "prob": [0.019603576511144638, 0.01628287322819233, 0.011463622562587261, 0.8191665410995483, 0.24883167445659637, 0.004573687445372343, 0.3501168489456177]}, {"target": [3], "doc": ["well , that be where we differ :p because i think it be more than reasonable to compare they", "especially since gdscript do everything they do , at a much more simple level", "also , i disagree about the \" require programming experience \"", "if a level designer be create block of action _ in an event sheet or visual scripting already _ , they _ already have the fundamental building block _ to use gdscript .", "with that say : jit - compile gdscript be on the roadmap , and would be far more beneficial than event sheet or visual scripting addition", "and the potential use case of vs / event sheet be pretty low currently", "so all i be ask please be cautious about lead dev time , as your recent  have already allude to"], "issue_sim": [0.03953700140118599, 0.07435373216867447, 0.17530640959739685, 0.4892561435699463, 0.38669827580451965, 0.23114031553268433, 0.02005356177687645], "prob": [0.2631622850894928, 0.0053310636430978775, 0.004050864838063717, 0.6476063132286072, 0.3453867733478546, 0.0010079373605549335, 0.02163349837064743]}, {"target": [0], "doc": ["i think that be potentially one of its great advantage over the current spaghetti system - due to its design it will ease people into learn programming and gdscript / godot 's api .", "some people here commented- but why bother do it- its too similar to script in   presentation", "my answer to that be - precisely", "you learn spaghetti , you be leave with spaghetti", "you learn the event sheet , you will know gdscript by see what it generate and use those expression field", "it will teach you about execution order and how to read code", "see what convert to gml do in game maker"], "issue_sim": [0.3203129768371582, 0.204271599650383, -0.012084373272955418, 0.11832911521196365, 0.27597326040267944, 0.17075155675411224, 0.21261104941368103], "prob": [0.9698696136474609, 0.06367384642362595, 0.002619789680466056, 0.08244555443525314, 0.2722790837287903, 0.021638046950101852, 3.548986205714755e-05]}, {"target": [0], "doc": ["yes it do , i m debug it from android studio on my oneplus <number> t"], "issue_sim": [0.0019281054846942425], "prob": [0.9999432563781738]}, {"target": [0], "doc": ["i think the only reason to make this be for get user attention like \" godot : you can make a game even in your phone \" and photo of a guy with his phone make his own game when he be go to work .", "it be a striking feature"], "issue_sim": [0.03128492087125778, 0.09512840956449509], "prob": [0.9966607093811035, 0.0027260605711489916]}, {"target": [0], "doc": ["i ca n't see it work on a phone , tbh , due to available screen space limitation , but why not on tablet ?"], "issue_sim": [0.026540391147136688], "prob": [0.9999982118606567]}, {"target": [0], "doc": ["i personally use my phone and i know a lot of people use their android tablet as laptop , i have a foldable keyboard always on i ...", "and for now the editor work with almost no change to the code", "make the last few fix should not take too much time , and by the issue  you can see i be not the only one that think that way", "edit : link the original issue in the first comment"], "issue_sim": [0.025364775210618973, -0.012509923428297043, 0.03404533118009567, -0.034773483872413635], "prob": [0.9041455388069153, 0.004291868302971125, 0.15267641842365265, 0.00025653428747318685]}, {"target": [0], "doc": ["also the current code state of the port be on the hacky side , it be kind of a poc in some of it , but it should n't take too long to make it properly from here"], "issue_sim": [-0.0043834419921040535], "prob": [0.9999881982803345]}, {"target": [4], "doc": ["my original motivation be do gamedev with godot for teenager", "not everybody have access to a pc , but nearly everybody have access to a tablet or smartphone .", "and be able to create a game and then show it off to your friend on the same device be pretty cool", "also , you can attach keyboard , mouse and screen to phone", "i do n't think you 'll be able to do full blown gamedev in the subway but you can definitely work on some last minute change or try out simple concept"], "issue_sim": [0.056323714554309845, -0.003573087975382805, 0.07073988020420074, -0.028483279049396515, 0.08508020639419556], "prob": [0.04065535590052605, 0.521774172782898, 0.1576450765132904, 0.03855924308300018, 0.395110160112381]}, {"target": [4], "doc": ["add more feature to gdscript would be well way to approach scripting in my opinion", "for i , main reason to choose godot over other game engine be simplify scripting scheme", "godot be not offer to learn a new programing language", "it be offer to learn godot and its scripting language as a combine tool for game development", "this be a less intimidating approach than offer new comer to learn c++ or any other programing language for scripting ."], "issue_sim": [0.37317296862602234, 0.4356258511543274, 0.3733205199241638, 0.4605928659439087, 0.4746153950691223], "prob": [0.0041837431490421295, 0.08392471820116043, 0.0015454961685463786, 0.009077201597392559, 0.7513850331306458]}, {"target": [68], "doc": ["thank for open this issue , i think this be a topic where there be a big difference between the rationally good choice and what the majority will ask for", "the most important reason why more than one engine exist be because besides one - dimensional factor like performance in general purpose task or accessibility of the interface there be multi - dimensional factor like performance for specific situation  or usability for specific group of user", "so in order to find a place among other engine an engine have to pick a \" philosophy \"", "now a scripting language be an integral part of an engine , so the philosophy of the language should fit the philosophy of the engine , or at least it should n't contradict it", "so what be godot 's philosophy", "let 's look at some fact :", "- compare to godot every other major engine be bloated", "godot 's download be small than <number> mb , the whole \" installation \" be one executable that be less than <number> mb in size", "lumberyard on the other hand have an initial download size of about 5", "5 gb , currently my installation folder of it be 15", "the main reason for that be amazon 's philosophy regard dependency", "that initial download contain 10", "5 gb of build image of <number> dependency , and if you have work with amazon web service before you know that the aws sdk be not that different in that aspect , so it be not a matter of necessity or ability , it be a matter of choice", "for example while lumberyard include boost and lua , godot contain its own version of the most imporant stl container and use gdscript rather than lua , which keep the size down , remove dependency and make the code a lot more readable and accessible", "- godot 's source code be very accessible", "that start with the choice of the build system  which use python as a build language", "most other project use exist build system with proprietary build language or write their own proprietary build system , both of which have a negative impact on the readability of the build code", "the source code itself be also above average in that aspect", "it take i about the same time to find out how to write a single unreal blueprint node in c++ as it take i to write the code for my first pull request to godot", "that be not to say that unreal 's c++ code be unreadable , it be simply not as clean as godot 's as it use more macro and require the user to understand more of unreal 's default project code than godot", "- godot promote kiss and oo principle", "in order to illustrate that let 's look at some simple object in unity", "the first concept you be confront with in unity be that of gameobjects with attached component", "\" composition over inheritance \" as it be often call  be a successful pattern due to the flexibility it offer", "that flexibility come at a cost though", "if everything in your game be a gameobject you ca n't really get a reference to \" the player \" , because there be no player , there be just a gameobject that may or may not have a player component attach", "the unity developer see the same issue , sometimes you just want to create a button , not a gameobject with button component", "so what they do be this : they allow you to create \" a button \" through the editor interface which do actually create a gameobject with a button component attach", "in addition to that they route the most important member of gameobject through every component , so that now you can use a reference to a button just like you would use a reference to a gameobject", "you can ask a button for its position , you can ask it for a list of its component - even though the button be actually a component , not the object it be attach to", "so now we have a mixture of the two most popular way to describe a game world - composition base and in plain object", "but when you look at beginner ' project  you will find that unity also facilitate the third way to interpret a game world : procedural programming", "in unity every object be always part of a \" scene \"", "unlike in godot that term describe a top level part of the game  , mean that if an enemy want to shoot at the player it can just search it be current scene for the player and interact with it", "that be the core idea of procedural programming - you have a sequence of command that alter the state of the environment without regard for ownership", "of course technically it be still object orient programming , but as every object can expect to be part of the same scene you be enable to write code that behave like global code", "for example if you want to instantiate an object all you have to do be call \" instantiate \" and a copy of the templateobject will be instantiate and add to the scene", "there be no need to ask which scene to add the object to because there be always the one scene that everything be currently part of", "so unity promote a mixture of composition , object orient thinking and procedural programming", "godot on the other hand promote object orient thinking as for example every single object in your game can be build as a scene of its own", "those scene can be start by themselves , allow you to test they , alter they by themselves etc", "that in turn require you to build those scene in a way that do not require access the environment", "for example if an enemy want to interact with the player it be much more feasible to use signal to tell the underlying scene that an interaction be request or to simply require the scene to give the enemy a reference to the player", "you still can search the game scene for the player , but if you do that the enemy scene will not be able to run on its own , so that design simply do n't fit the tool as well", "so how do this make a difference regard the choice of scripting language", "c # be to language what unity be to engine", "c # 's philosophy have always be that if some feature would be nice to have it be add into the language", "just look at the list of feature that be add with each version : <url>", "now you may argue that have a feature be n't something bad , right", "you do n't have to use it , just leave it if you do n't like it", "unfortunately that be not true for a language", "with the importance of the internet today language be n't tool anymore , they be culture", "soon or later you will have to google for help , you will use module or object build by other , you will use new feature build by the community into the engine , and soon or later that will require you to use language feature that you never intend to use", "also if you be work in a team you will learn to appreciate use a language that promote a common coding style and do n't offer you dozen of way to write the same code", "now you may wonder if i mean to say that a language with less feature be always well than one with more feature", "of course that be not the case", "let 's compare how java solve the problem", "c # allow you to write unmanaged code", "just use the appropriate keyword and you can use it right in the same file", "it also allow you to write functional code use linq , which read like sql code and behave like functional code", "in order to completely understand what one file do you may need to know quite a lot about programming paradigm", "if you be write java you can use functional programming as well , you just have to write it to a separate file , use a different compiler and call it \" program clojure \"", "if you prefer to combine object - orient and funcitonal programming you can call it \" program scala \"", "the important part be that you be still write code for the jvm that can easily interact with code from other jvm language", "net - language have the same capability , it be just not use in the c#-philosophy", "they could just as well have decide to stick to one or two programming paradigm in c # and create a new language to add new paradigm , but instead they go with \" one language to conquer they all \" - which be totally fine , it be great to have a language like that", "you should just be aware of that philosophy and the choice you have as a programmer", "long story short : of all the language we have i think c # be just the bad fit for godot .", "it be a natural fit for unity , but if you have all those option then why choose a language that promote mix - and - matching of paradigms in an engine that promote clean oo - principle and kiss - programming in every other one of its part", "so if you think that c # would be a nice addition to godot then i be not disagree with you - i be merely say that alternative exist that be even well , that should be evaluate first and that would be immediately forget once c # be implement"], "issue_sim": [0.06464293599128723, 0.25929102301597595, 0.19428136944770813, 0.4643430709838867, 0.2365172803401947, -0.011591269634664059, 0.32237231731414795, 0.23359724879264832, 0.10361327230930328, -0.035802483558654785, 0.15183037519454956, -0.06092788279056549, 0.2678210735321045, 0.47964516282081604, 0.37485119700431824, 0.3554620146751404, 0.42446982860565186, 0.15009889006614685, 0.38671571016311646, 0.5118792057037354, 0.2096939980983734, 0.26875829696655273, 0.2751692831516266, 0.21412131190299988, 0.005830664187669754, 0.2815883457660675, 0.27434104681015015, 0.29022014141082764, 0.3301388621330261, 0.2115750014781952, 0.18093988299369812, 0.3099653422832489, 0.2423095852136612, 0.15967263281345367, 0.18056441843509674, 0.3641749322414398, 0.24843932688236237, 0.1268197000026703, 0.22892950475215912, 0.2714720070362091, -0.03101450204849243, 0.06686760485172272, 0.18724817037582397, 0.17384126782417297, 0.2813037037849426, 0.4491395950317383, 0.35983943939208984, 0.1102944165468216, 0.0011188555508852005, 0.08991464972496033, 0.1539127379655838, 0.1415199637413025, 0.35436850786209106, 0.29609036445617676, 0.27726227045059204, 0.04795689508318901, 0.33432483673095703, 0.3610524535179138, 0.13973252475261688, 0.32056406140327454, 0.26272064447402954, 0.5017581582069397, 0.3709731101989746, 0.5903444886207581, 0.36773884296417236, 0.454156756401062, 0.156033456325531, 0.4477672576904297, 0.3698109984397888, 0.4412160813808441], "prob": [0.24993540346622467, 0.008244901895523071, 0.024882595986127853, 0.06725667417049408, 0.002230191370472312, 0.0016453653806820512, 0.0009217389160767198, 0.03982972726225853, 0.0009020766010507941, 0.0007361364550888538, 0.0005221342435106635, 0.00014046761498320848, 0.024512987583875656, 0.009493635036051273, 0.00024836434749886394, 0.0007873618160374463, 0.014197691343724728, 0.0003399275301489979, 0.01595384255051613, 0.011484021320939064, 0.00017572735669091344, 0.0007437545573338866, 0.002057368867099285, 0.0020912117324769497, 0.00025407166685909033, 0.018763815984129906, 0.0009289660374633968, 0.0021299326326698065, 0.003728891722857952, 0.002703880425542593, 0.0006486381753347814, 0.0009432880906388164, 0.00017398853378836066, 0.006452339235693216, 0.0009831058559939265, 0.003454970195889473, 0.0042501213029026985, 0.0013399816816672683, 0.0005996551481075585, 0.06118989363312721, 8.934504876378924e-05, 0.00011689724487951025, 0.0031946899835020304, 0.005492508411407471, 0.00227138283662498, 7.028577238088474e-05, 0.0010230992920696735, 0.00015599279140587896, 0.00020661178859882057, 0.0004960569785907865, 5.5268072173930705e-05, 0.0002832268946804106, 0.007982850074768066, 0.003949735779315233, 0.006249850615859032, 0.00019683003483805805, 6.580891931662336e-05, 2.4100598238874227e-05, 7.924164674477652e-05, 0.0004539380024652928, 9.259505168301985e-05, 0.002999179298058152, 0.00022364576580002904, 0.0007904989179223776, 0.00018162187188863754, 0.013475212268531322, 0.0007096765330061316, 0.008463066071271896, 0.1496228724718094, 0.01810091733932495]}, {"target": [1], "doc": ["that can happen for sure , i do n't think it be incompatible with the other proposal", "but godot can already be use from c++ , so nothing would really change  except code in c++ would be make easy for those who want to do so  .", "if you read my post , i too disagree with c # be a good pick for godot , that be why i propose expand the already exist c++ capability to make it possible to use it as a scripting language , with gdscript remain the default language for most user", "user should be able to write pretty much in gdscript , however it be unreasonable to think that a large game would be write in gdscript", "in my opinion , there be nothing that prevent godot from be suitable for large game except gdscript performance , because the engine be very well design and have already pretty good performance", "in my opinion , performance do not appeal to most godot user , but it could bring more professional to godot , which mean more contribution which mean a well godot for everybody"], "issue_sim": [0.07280901819467545, 0.49993592500686646, 0.6542878150939941, 0.310943067073822, 0.3889797627925873, 0.43879663944244385], "prob": [0.022841807454824448, 0.5686258673667908, 0.16944678127765656, 0.006745843216776848, 0.047793470323085785, 0.14942200481891632]}, {"target": [4], "doc": ["@paper - pauper i understand that we be on the same side", "when i write \" if you think that c # would be a nice addition \" i be adresse \" you , the anonymous reader \" , not you personally", "and yes , any new scripting language will drain attention from gdscript", "i doubt that the community will take care of more than one language , soon or later some feature will be unavailable or break from either of they maybe even up to the point that one of the language be drop", "i also agree that the only real issue here be c++ 's compile time and gdscript 's performance .", "the argument that people already know c # be just plain wrong imho", "i have be work professionally with c # for about <number> year now  and the one thing that i have learn in that time be that i will most likely never be able to say that i really know that language", "after all with c # <number> and the proposition for <number> the number of feature be still grow", "so when we be talk about \" know c # \" all we can actually be refer to be know the most basic syntax which even the bad beginner should be able to re - learn in a few day", "i recently hold a lecture on different game engine to a class of game designer that be exclusively use unity before and none of they comment badly on the syntax of gdscript while in fact several who have give up on programming be now motivate again", "so yeah , a solution that speed up gdscript and make c++ less cumbersome to compile and use would be my favorite as well"], "issue_sim": [0.009255805984139442, 0.17626413702964783, 0.37476634979248047, 0.3199180066585541, 0.4959397315979004, 0.24862419068813324, 0.30732613801956177, 0.2583571672439575, 0.29000139236450195, 0.45563578605651855, 0.5091552734375], "prob": [0.0011747179087251425, 0.348967045545578, 0.017620615661144257, 0.5595587491989136, 0.09450332820415497, 0.00132053904235363, 0.08601533621549606, 0.002027468988671899, 0.03257216885685921, 0.030649324879050255, 0.08658070117235184]}, {"target": [12], "doc": ["a lot of people who \" know \" c # do n't use many of its feature which make it different from java", "just take a look at the myriad of unity script which do n't go much far than subclass", "for this reason alone , i be highly skeptical about the practical advantage c # would give", "they be nice in many context , just not game development", "besides , c++1x already offer many of those thing  without any overhead", "also , it be possible that the overhead bring by the clr  could make godot perform _ bad _ , although i see some advantage in use the jvm 's garbage collector", "i read on forum about people who do n't use godot because of gdscript", "i think that be close - minded , because there be nothing wrong about it except the fact that it have a poor selection of library , which i try to address in another ticket , # <number> , by suggest a solution which have zero overhead and cross - platform support", "without have to implement a c++ jit via llvm , there be a solution which run on native code and do not require any fiddling with godot 's source : dynamic linking", "the first would allow native code without have to recompile godot from scratch : you just compile it as a", "so file and then add it to your load path , then use it from gdscript with no overhead", "this should be very easy to do  but as far as i understand it be not do because of cross - platform concern", "also , there be the idea of compile gdscript to c++ , much like  do with its language . this be not easy , but obviously offer good performance ."], "issue_sim": [0.534827470779419, 0.4027169942855835, 0.12959899008274078, 0.1892698109149933, 0.16094081103801727, 0.5998533964157104, 0.2855895161628723, 0.29366111755371094, 0.602643609046936, 0.5534502863883972, 0.136487677693367, 0.2905721068382263, 0.5538027882575989], "prob": [0.05404779687523842, 0.08766631782054901, 0.004447415471076965, 0.0004590494791045785, 0.003922328352928162, 0.23124083876609802, 0.0005657803849317133, 0.22952260076999664, 0.09619362652301788, 0.0040426417253911495, 0.001743103377521038, 0.005791587755084038, 0.3602416515350342]}, {"target": [16], "doc": ["here be the history of gdscript :", "initially , godot be design to support multiple scripting language", "however , only gdscript be in use right now", "there be a little history behind this", "in the early day , the engine use the lua scripting language", "lua be fast , but create binding to an object orient system  be complex and slow and take an enormous amount of code", "after some experiment with python , it also prove difficult to embed", "the last third party scripting language that be use for ship game be squirrel , but it be also drop too", "at that point , it become evident that godot would work more optimally by use a build - in scripting language , as the follow barrier be meet :", "- godot embed script in node , most language be not design with this in mind", "-      godot use several build - in data type for 2d and 3d math , script language do not provide this , and bind they be inefficient", "-      godot use thread heavily for lift and initialize datum from the net or disk , script interpreter for common language be not friendly to this", "-      godot already have a memory management model for resource , most script language provide their own , which result in duplicate effort and bug", "-      binding code be always messy and result in several failure point , unexpected bug and general unmaintainability", "finally , gdscript be write as a custom solution", "the language and interpreter for it end up be small than the bind code itself for lua and squirrel , and equally as functional", "with time , have a build - in language have prove to be a huge advantage", "in my opinion , c++ can be good", "there be some solution like :", "even angel script typically can be like a runtime compile", "in scripting , i love python because i always love solution that mix game and scientific simulation", "in another issue why godot have it be own physics library : <url>", "there be some issue about language like c # : <url>"], "issue_sim": [-0.04169163852930069, 0.5074318647384644, 0.06321079283952713, 0.021825972944498062, 0.33113744854927063, 0.43142929673194885, 0.2360047698020935, 0.3217877745628357, 0.47590893507003784, 0.46260979771614075, 0.4438353180885315, 0.5020137429237366, 0.45156627893447876, 0.11464087665081024, 0.17378199100494385, 0.4019415080547333, 0.2264326512813568, 0.3651621639728546, 0.07626521587371826, 0.37667176127433777, 0.2485276162624359, 0.2858579754829407, 0.32828179001808167], "prob": [0.005409453995525837, 0.04928317293524742, 0.07146413624286652, 0.01755562610924244, 0.02074919082224369, 0.017214229330420494, 0.00879100151360035, 0.16923671960830688, 0.06114303320646286, 0.0013481318019330502, 0.022017141804099083, 0.006064560730010271, 0.011157655157148838, 0.005449344869703054, 0.0017949530156329274, 0.014964046888053417, 0.0010148129658773541, 0.0004265615716576576, 0.0005558613920584321, 0.007312656380236149, 0.0882093533873558, 0.01946290396153927, 0.006361832842230797]}, {"target": [0], "doc": ["i be a bit surprised to find that this thread which afaik be start as a reaction to the proposal to add c # as a scripting language do n't yet contain a single argument for c # , even after six people have express their opinion .", "maybe the decision to add c # be n't as premeditate as i assume from the rumor i hear"], "issue_sim": [0.48780307173728943, 0.22504141926765442], "prob": [0.8371245265007019, 0.056989915668964386]}, {"target": [3], "doc": ["imho it be because a lot of the c # talk be fuel by people who want godot to be a unity ripoff , but fortunately many here realize that godot be its own thing and already ahead of unity in many regard and it would n't be fair to let it become affect by the same issue .", "@alabd14313 i would change the title but perhaps it be well to create a separate issue and keep this for the sake of posterity so that it can be link when someone propose c #", "i be hesitant on the visual scripting , to be honest , but if it can be implement as a module then why not", "of course , i think have visual scripting  , gdscript  and c++  would make godot a pretty balanced program suitable for all level of skill , but make c++ code less cumbersome and allow easy interfacing with third - party library should have a high priority , imho , because it can bring in a lot of professional user"], "issue_sim": [0.47165387868881226, 0.2542761564254761, 0.32709139585494995, 0.6071677207946777], "prob": [0.627995491027832, 0.006173195317387581, 0.16172106564044952, 0.5798530578613281]}, {"target": [4], "doc": ["this be my first time comment", "i come over from unity and the move to gdscript have be a dream", "i pick up the language in less than a day", "i love how well the language be implement into the engine and my productivity have jump considerably", "my main concern be that with add c # support gdscript will be leave behind or see less development after a flood of unity developer .", "c # be a fine language but not my personal favorite", "also i be concerned to see godot try to be more like another engine instead of stand on its own", "unity be a fabulous success story but not the good engine i 've ever use", "it be bloated and buggy", "once it delete my entire project without confirmation", "deal with bug and thing not work like they should be a constant struggle", "i ca n't count how many time i have to completely rebuild a scene i be work on because thing be n't work right", "i once copy and paste all the content from an old buggy scene into a new scene to have it suddenly work despite both scene be identical", "i lose week hunt physics bug that would magically appear and magically disappear", "i really like that godot be lean and simple to understand", "work with godot have be like use a well tune musical instrument", "after almost a year of work in it i just know how to do anything i need to do , even if i have n't do it before", "i just hope the influx of unity user wo n't steer the direction of the engine more towards unity", "if i want unity then i 'd be use unity"], "issue_sim": [-0.061080269515514374, 0.1494472324848175, 0.18698135018348694, 0.29597941040992737, 0.3637208938598633, 0.30263665318489075, 0.2280840277671814, 0.2524573802947998, 0.11186853051185608, -0.007165346294641495, 0.07567998766899109, 0.09248509258031845, 0.04936457797884941, -0.004235472064465284, 0.27224022150039673, 0.23152214288711548, -0.03340195119380951, 0.28766804933547974, 0.33152222633361816], "prob": [0.01474685501307249, 0.04193730652332306, 0.04001208022236824, 0.16020290553569794, 0.4657953381538391, 0.007181594148278236, 0.3675307333469391, 0.003582039615139365, 0.0012681041844189167, 0.0005077259265817702, 0.002376007614657283, 0.015617595054209232, 0.008110580034554005, 0.002032013377174735, 0.0007807189249433577, 0.00046844163443893194, 0.06175873428583145, 0.028532903641462326, 0.007078275084495544]}, {"target": [6], "doc": ["this risk to become a flame war", "the log be so long that people will repeat the same question or topic instead of read it", "there be not much technical stuff remain to discuss either", "the future of godot in term of scripting be pretty clear already :", "- gdscript will stay as the main language and there be plan or idea to optimize it", "0 , c # will be support as a scripting alternative", "we will provide separate binary to avoid force the extra size cause by the mono runtime on people that wo n't use it .", "- dlscript be also on the work", "it will allow people to use share library for scripting", "these library can be write in any language that support c linkage and share library", "it be not clear yet if it will be ready for 3", "- do n't forget there will be visual scripting in 3", "if someone plan to contribute something else , this wo n't be the right place to discuss that either", "i think this issue can and should be close"], "issue_sim": [0.04916226491332054, 0.10138321667909622, 0.04930385947227478, 0.388643741607666, 0.23038911819458008, 0.3018146753311157, 0.2417992651462555, -0.004556945525109768, 0.3504260778427124, 0.3352341651916504, 0.022478517144918442, 0.22362996637821198, 0.0616355761885643, 0.03763877600431442], "prob": [0.0015525707276538014, 0.031387872993946075, 0.014787359163165092, 0.18725121021270752, 0.11656061559915543, 0.011166888289153576, 0.16700373589992523, 0.0020995717495679855, 0.005017714109271765, 0.006233202759176493, 0.0036115122493356466, 0.004787672311067581, 0.028643770143389702, 0.003427621442824602]}, {"target": [9], "doc": ["for what i understand , the buildsystem tooling must provide :", "* cross - compilation", "* by \" possible \" i mean that the host allow it", "* a way to generate file", "* scon know that the generate file be dependency , so change they trigger a rebuild of relevant file", "this should be consider too", "* multiple target and option within target", "* option to customize the build / enable extra target", "i do n't know meson , but if it provide everything above it should be fine", "of course , someone have to go the excruciating pain of rewrite the buildsystem in meson and then show the tooling and build time be effectively well for godot than scon .", "note that a few third - party dependency require a patch to be compile with godot", "i notice wrap have a patch support , but it look like the patch must be available somewhere to download , while i think it be easy to manage if they be still part of the repository", "also , some of they require special compilation flag that should not be apply to the whole build"], "issue_sim": [0.1777348518371582, 0.1889260858297348, -0.0474318191409111, 0.1639644205570221, 0.2979462146759033, 0.009530989453196526, 0.11572523415088654, 0.2786101698875427, 0.21089759469032288, 0.5152895450592041, 0.50556480884552, 0.32030054926872253, 0.3107365667819977], "prob": [0.0034049558453261852, 0.001989885699003935, 0.008339119143784046, 0.0015031031798571348, 0.006995654199272394, 0.0004317723214626312, 0.0006094473646953702, 0.001863578101620078, 0.0077757639810442924, 0.16154077649116516, 0.0008069288451224566, 0.4654463827610016, 0.007478075567632914]}, {"target": [3], "doc": ["i think such a proof - of - concept would be very valuable because", "- it give we a well idea if the new build system handle everything we need and how well it do it", "- it give we concrete instead of abstract datum to discuss", "for the second point , this mean we can see the difference in build speed * for godot * , we can see how much easy  * our * build script become , and we can compare the difference more easily to make a choice instead of make educate guess base on what whe think it could offer .", "now , personally , i have to say i be neither for nor against this , but i think there be more low - hang fruit to <appname> instead of  change the entire build system", "especially at this critical point in time , where as many hand as possible be need to make sure 3", "0 and the first patch be in the good shape possible", "but * if * we want to improve the build system , i 'd look at the ci build time and the hassle of the mono build situation", "also , the bugged parallel build on windows suck , but that be more on a personal would - be - nice - if - it - be - fix basis", "- i agree scons documentation / resource be lack , the build script be easy python somewhat counteract that , imo", "- as a new - ish contributor , the godot build system be one of the least annoying to setup , really low time to first successful compile", "- i 'd rather see the effort spend on improve 3", "1 as much as possible and * maybe * think about this once those be stable", "- better ci build time & easy mono build could be more important"], "issue_sim": [0.23410473763942719, 0.28224924206733704, 0.10181717574596405, 0.35220223665237427, 0.27168047428131104, 0.04314354807138443, -0.08458966016769409, 0.45113667845726013, 0.27513423562049866, 0.49052590131759644, 0.4541328549385071, 0.06955556571483612, 0.06687512993812561, 0.3549739420413971], "prob": [0.01653844676911831, 0.04410264641046524, 0.0011962493881583214, 0.26337385177612305, 0.13897432386875153, 0.0014116002712398767, 0.00014211826783139259, 0.011322098784148693, 0.059851858764886856, 0.00432061729952693, 0.06580518931150436, 0.0001763043983373791, 0.005176094360649586, 0.00017870029842015356]}, {"target": [2], "doc": ["i absolutely do believe that get 3", "0 out there and focus on the follow release  should take priority over this , for the record", "i know why people do n't like to work on buildsystem  and there be this whole \" opportunity cost \" thing , ie . when the time spend  on improve the build system could be spend on improve the project itself .", "and ultimately , scon really do \" just work \" which for most developer out there will probably be good enough , so while this be something that i hope do eventually happen , i be not hold out my breath for it for 3", "1 or even 3", "2 , if it even garner enough support to actually end up be work on to begin with", "all this say , i might kickstart the poc later this week in my fork , for those who be willing to follow the progress on that  , but i wo n't be open a pull request for this for a while most likely"], "issue_sim": [-0.012854745611548424, 0.010545585304498672, 0.4338024854660034, 0.201282799243927, 0.034796152263879776, 0.10089278966188431, 0.3003397583961487], "prob": [0.0003857417032122612, 0.059101272374391556, 0.5533212423324585, 0.38147035241127014, 0.00019899479229934514, 0.010000431910157204, 0.39608389139175415]}, {"target": [2], "doc": ["i do not really find scon to be slow , and its flexibility  be probably unmatched by anything else .", "scon be also extremely proven , i find it that it never screw up a build", "honestly , unless someone volunteer to rewrite * * the whole build system * *  , and * * show that it be either simple * *  or * * much fast * * , i would not even consider anything else , not even a bit"], "issue_sim": [0.15244758129119873, 0.2973603904247284, 0.39103806018829346], "prob": [0.6222546696662903, 0.022886479273438454, 0.6082110404968262]}, {"target": [1], "doc": ["i do think scon be slow though", "not much slow , but thing like the progress status and the cache make it slow for rebuild  , so i disable those when rebuild .", "it do take a bit to start do stuff , after that it be quite fast", "do n't know if meson will be significantly fast , but if someone be willing to try i be not against it"], "issue_sim": [0.1815989762544632, 0.192108616232872, 0.07467210292816162, 0.2790328860282898], "prob": [0.0006469003274105489, 0.9289186000823975, 0.0035975389182567596, 0.11805280297994614]}, {"target": [0], "doc": ["the big issue be probably replace the python build script for autogenerate code like the shader , it do n't seem like meson have a feature like that ."], "issue_sim": [0.4931306540966034], "prob": [0.99997878074646]}, {"target": [1], "doc": ["anyway , i ca n't verify that , but it be very likely that <number> % of the computational time spend to build godot be spend in the compiler", "so even if the overhead of the building software be none , this would lead to a <number> % decrease of the build time . even a <number> % decrease would not be worth , unless it allow less code and more reliability  ) ."], "issue_sim": [0.4750581681728363, 0.3536831736564636], "prob": [0.6385952234268188, 0.578687310218811]}, {"target": [3], "doc": ["for raw build speed of a clean clone , i doubt it 'll have any significant difference", "but it can be significant if you consider rebuild speed", "scon always rebuild a lot of stuff that be n't change when i pull a new commit", "as i say before , scon be slow to start  . if you be build the whole source that be negligible , but if you only change a line and be compile to test , it can significantly improve the workflow  .", "so 5s decrease in a 10min build be irrelevant , but 5s decrease in a 10 rebuild be a major improvement", "but i agree that any change in this regard should be test * a lot * to prove it work", "as @reduz state , scon never mess up a build , and that be something to consider"], "issue_sim": [0.21972639858722687, 0.1410534828901291, 0.11159534752368927, 0.40507322549819946, 0.1273200362920761, 0.14279022812843323, 0.17164601385593414], "prob": [0.049455929547548294, 0.029858652502298355, 0.06879562139511108, 0.5252103805541992, 0.15777643024921417, 0.03934841230511665, 0.03620895743370056]}, {"target": [0], "doc": ["since we have embrace c # for game development , we might as well try something like  .", "i have n't try it myself though , so i be interested in what be your thought on that one", "for one thing , at least , script wold run fast than with python"], "issue_sim": [0.2773885726928711, 0.1454048901796341, 0.2824767231941223], "prob": [0.43590086698532104, 0.09425348788499832, 0.09948471188545227]}, {"target": [1], "doc": ["i be not sure if require a mono installation to compile godot be a good idea , consider that godot be mostly a c++ project and can be compile without c # support", "the level of performance offer by meson or cmake  should be more than enough for godot 's purpose ."], "issue_sim": [0.6106792688369751, 0.5415596961975098], "prob": [0.9593921899795532, 0.08186541497707367]}, {"target": [4], "doc": ["i be very interested in do the footwork to move godot to meson", "the only thing currently stop i from contribute to godot  be scons", "i have to use it year ago , and i 've never have a more painful incremental development experience in my entire life", "the article link above have a lot of strawman argument , argue that cmake already exist and we should just use that", "meson 's build file be extremely easy to read , and use a syntax close to that of python .", "conversion can be quick", "what i be post in this thread for be , if the footwork be do , would a pull request even be consider for merge"], "issue_sim": [0.3975161015987396, 0.4996275305747986, 0.16630452871322632, 0.39890915155410767, 0.445161372423172, 0.03397946059703827, 0.3294396996498108], "prob": [0.0026127935852855444, 0.0023945807479321957, 0.21429432928562164, 0.07710269093513489, 0.7567419409751892, 0.0005523169529624283, 0.1334637850522995]}, {"target": [0], "doc": ["meson generate ninja file , which be * much * fast for incremental development .", "additionally , on window , you do n't * need * to do any sort of visual studio path manipulation", "meson work out of the box", "use meson over scon would reduce a lot of the overhead of target window , especially for those want to use visual studio", "give that bazel and buck be both write in java  , i would argue they be right out as a primary dependency for all user", "python be already in the dependency list , and you can easily install meson  through a quick <tag>", "meson support this by default , as this be a default feature build into ninja", "meson also have support for this , and rely heavily on pkg - config where appropriate", "meson have a very python - like syntax , rely on variable , object , and builtin function", "in my opinion , write", "be a lot easy , especially give how cmake be * sometimes * case sensitive , and other time not", "when you start to get into generator expression , it can get extremely hairy", "the equivalent meson look like :", "i think i should note , by the way , that of all the c++ build system out there , meson be the * least terrible *", "argument against its use tend to be a picture of a web comic , some hand wave about how cmake be the most use , so you should just deal with it , and \" hey at least cmake be n't autotool \"", "but above all  , meson support precompile header natively", "i can not tell you how much this could speed up the build for gdnative user , but it will be a significant boost on gcc and msvc", "add in the use of <tag> for the very little amount of templated code find in godot , and you could see decent build time improvement , which be important for iterative and incremental build"], "issue_sim": [0.41674184799194336, 0.258355975151062, 0.10573466122150421, 0.4322185516357422, 0.32806557416915894, 0.43585485219955444, 0.36506396532058716, 0.3541126251220703, 0.31315475702285767, 0.07519824802875519, 0.3621232509613037, 0.018741291016340256, 0.08215294033288956, 0.47114697098731995, 0.4688890874385834, 0.3195797801017761, 0.4387546181678772, 0.5484293699264526], "prob": [0.03849805146455765, 0.022111013531684875, 0.009863344952464104, 0.13442835211753845, 0.0016447593225166202, 0.007810089737176895, 0.0016616203356534243, 0.004140728618949652, 0.009378490038216114, 8.660722232889384e-05, 0.030502313748002052, 0.0003015435067936778, 0.00022301735589280725, 0.059308771044015884, 0.021284079179167747, 0.00016892183339223266, 0.04004021733999252, 0.4464980363845825]}, {"target": [2], "doc": ["note that cmake can also generate ninja build file instead of traditional makefile ; this be do by pass <tag> to its command line", "it work quite well on most project i 've try and be slightly fast overall", "meson still win in the raw performance comparison i 've see , but this definitely help close the gap between meson and cmake performance ."], "issue_sim": [0.5422477126121521, 0.19659921526908875, 0.34282487630844116], "prob": [0.5927335023880005, 0.006713123060762882, 0.7850449681282043]}, {"target": [1], "doc": ["yes , however , cmake do not automatically install ninja for you , and it be not the default generator", "most of cmake 's time be spend configure the project , in my experience , and while recent version of cmake have vastly improve performance , not everyone will have the late cmake ."], "issue_sim": [0.36698752641677856, 0.46552878618240356], "prob": [0.3571886122226715, 0.7628276348114014]}, {"target": [6], "doc": ["@bdbaddog scons do not generate intermediate stage build file", "it do the \" project dependency \" step in the same step as it do compile , and they can not be separate", "its like tell cmake to generate the project file * everytime * before you hit your build tool , whether it be msvc , ninja - build , make , llvm , pick your poison", "if i switch git branch , i can not update visual studio without perform a scon command line build to regenerate the proper", "sln file - and i almost always clean build branch change since i have run into issue in the past", "those intermediate file be not just for building , they can be use by static analyzer and other project as well", "while i agree that cmake be n't perfect  , and i would prefer the flexibility of python , cmake have the good integration and support of all the build tool on the table ."], "issue_sim": [0.36810460686683655, 0.385414183139801, 0.5251363515853882, 0.3784986138343811, 0.3065827786922455, 0.36121222376823425, 0.5522041320800781], "prob": [0.00040549359982833266, 0.16247935593128204, 0.5662787556648254, 0.05182277038693428, 0.025255795568227768, 0.09425779432058334, 0.49584174156188965]}, {"target": [15], "doc": ["when convert my fork to cmake most of the complexity be in the code generation file", "the idea that the build be complicated be a fallacy", "the build do n't need scon because its complex", "it be complex because it use scon", "with that say , the reason i halt work be because i meet with the lead devs at gdc in <number>  and they say they have absolutely no intention of switch to something more usable , cite that they 'd prefer to do the build entirely on linux and indeed from what i 've see they be violate the eula that apple require acceptance of to install build tool for cross compile", "the mentality of those in charge be very much \" end justify the mean \" and there do n't seem to be any care about treat the build as software , and instead godot treat it as a series of script that happen to produce a build", "i will not be contribute the change i make to the code generation to godot  , and i 've give up on this engine entirely and move on with my life", "i be much happy if i be be honest", "the engine already have considerable tech debt and i see it be an issue in about <number> year , especially as the c++ standard committee be work on a tooling technical report", "it be a shame too", "my cmake build be able to catch a bunch of static analysis error that have lead to ton of issue and be easily solvable , but i be too burn out from having argue with the devs about this at gdc to file bug or even attempt to fix they", "my energy and my mental health be well spend elsewhere", "there be no world where scon will be able to handle the upcoming c++20 module design , as much as i have shout how it will break many tool", "it ca n't handle the dependency tracking for that , and would require it to have a pre - scan step , which will slow the dependency track down even far", "lastly , i be go to suggest people not try to improve a tool that can only accept minor change", "scon would need a complete rewrite from the ground up and a large number of break change to get the improvement people here seek .", "i suggest this issue be close as the discussion of change the build system be answer at gdc <number> , but the lead do n't even think its worth waste their time to comment on this issue , which i think show how much they care about the ergonomic of development"], "issue_sim": [0.540257453918457, 0.2591174840927124, 0.3474377393722534, 0.16257239878177643, 0.5489304065704346, 0.45745953917503357, 0.34598416090011597, 0.060427434742450714, 0.32546138763427734, 0.054396167397499084, 0.45566290616989136, 0.062432192265987396, 0.3214918375015259, 0.28797003626823425, 0.17407694458961487, 0.2562747895717621, 0.4481801986694336], "prob": [0.0055487803183496, 0.0024506808258593082, 0.005866512656211853, 0.004429585300385952, 0.021845264360308647, 0.09587477892637253, 0.010972687974572182, 1.6360267181880772e-05, 0.005945021286606789, 2.3323898858507164e-05, 0.016215160489082336, 4.138464282732457e-05, 0.004041685257107019, 0.0045880782417953014, 0.00011087287566624582, 0.012970315292477608, 0.06590132415294647]}, {"target": [4], "doc": ["i use godot professionally for more than a year", "i agree with everything you say , except for :", "if we have this golden opportunity , let 's just rename everything", "that include sprite2d and meshinstance3d", "it be always well a full painful refactor , that many partial painful refactor ."], "issue_sim": [0.24798375368118286, 0.02394719608128071, 0.09475044906139374, -0.06970066577196121, 0.21140748262405396], "prob": [0.01684066839516163, 0.021566735580563545, 0.03462573513388634, 0.004403590690344572, 0.7693846225738525]}, {"target": [7], "doc": ["i think the stance against namespace be short - sighted", "it make sense from perspective of the engine workflow in general but it ignore the perspective from toolmaker", "godot unit testing  by bitwe for example break due to a naming conflict in one of its update", "there be a likelihood this could have be avoid with a dedicated gut namespace", "i would also like namespace for waiting and testing  so i can i can use class name like test  while not run over other framework  or just the user 's script", "i 've try a number of time use a wat class that contain all of the script use as subclass but that be just a cyclic reference hell", "if we be to be encourage to build tool from within the engine , then we need the tool to make those tool in the engine even if they be n't absolutely necessary for the engine workflow itself", "in summary , a dedicated namespace system which can be both access as well as define from the engine  so tool maker do n't end up walk over each other or their use would be a godsend ."], "issue_sim": [0.19629035890102386, 0.19037652015686035, 0.2521387040615082, 0.11501561105251312, 0.41003158688545227, 0.31724756956100464, 0.27481210231781006, 0.3369104266166687], "prob": [0.0014369901036843657, 0.07737564295530319, 0.0012336134677752852, 0.0017594718374311924, 0.0365767702460289, 0.018521547317504883, 0.4072194993495941, 0.2625006139278412]}, {"target": [1], "doc": ["@codedarigan i understand it have benefit and i be not deny they , but i sincerely believe that the cost outweigh they", "add to this that pretty much we have no significant complain from gdscript user , who prefer the current approach , so it would force they to an unwanted worfklow and type more code in a language that be intend to just write quick and dirty stuff fast .  .", "this be why i mean that they can exist as metadata for script language binding , and we could even add they for gdnative c++", "just not add they for core c++ engine"], "issue_sim": [0.033299826085567474, 0.31263047456741333, 0.3547833561897278, 0.341116726398468], "prob": [0.12832017242908478, 0.8408726453781128, 0.02580222859978676, 0.00025475904112681746]}, {"target": [1], "doc": ["tbh this change would come anyway , so well to do it now and stick with it", "for 3d there be not that many tut so now the change will do less damage than in one , two year later ."], "issue_sim": [0.0879690945148468, 0.26286107301712036], "prob": [0.08295868337154388, 0.8276861310005188]}, {"target": [2], "doc": ["i be also in favour of rename thing to be explicitly 3d or 2d", "would n't it be possible to have the original name still exist as alias to the new one", "they would be hide from the editor so the old name would n't be usable  .", "that way old code would still work , without change and without need additional logic to convert anything", "a warning could be add for code use the deprecate node name and then in 4", "2 they could be remove"], "issue_sim": [0.5952703356742859, 0.24492478370666504, 0.10934804379940033, 0.26238957047462463, 0.2643473744392395, 0.04009103402495384], "prob": [0.015614686533808708, 0.11699894070625305, 0.3678945302963257, 0.10467992722988129, 0.08009186387062073, 0.007730135694146156]}, {"target": [0], "doc": ["if there be two version of a node i would always append 2d/3d suffix ."], "issue_sim": [0.35382720828056335], "prob": [0.9999291896820068]}, {"target": [0], "doc": ["also , i would be happy if label - > textlabel . i go to add a node so i can show some text , so i type text in the search bar and of course only richtextlabel show up which remind i that the standard text node do n't actually have text in the name ."], "issue_sim": [0.33691906929016113], "prob": [0.9998376369476318]}, {"target": [0], "doc": ["i be a 2d person , so for node with mainly 2d application , keep the node name without a suffix if it do n't already have one seem fine to i .", "this seem like a more painful refactor for 3d user , but it do make a lot of sense where certain node have only a 2d or 3d application for the most part that they retain the short name for their intend domain and have a suffix elsewhere", "anything else that can be unify would be nice to see unified , specifically <tag>"], "issue_sim": [0.5246584415435791, 0.5504100322723389, 0.31985729932785034], "prob": [0.7460368275642395, 0.4760012924671173, 0.024372275918722153]}, {"target": [1], "doc": ["i be in favor of unconditionally use <tag>/<tag> suffix , too", "while it be true that for some node it seem like a lost opportunity to have more \" natural \" name , consistency win .", "what i do n't quite like be that the <tag> be the non - orm one", "my point be that orm be more strongly back by a standard", "but i ca n't yet suggest a well naming", "maybe this be also an opportunity to do something about ' canvas '", "i find that concept a bit confuse at time", "i know it be difficult , because be have no 3d counterpart : 3d scene live in <tag> node , but canvas can contain a mix of <tag>s and <tag>s", "however , it would be great if we could define some naming that allow rename <tag> to <tag> , while keep it meaningful for the \" pure \" 2d and the gui realm"], "issue_sim": [0.12293882668018341, 0.1333141326904297, 0.2623148262500763, 0.17411601543426514, 0.07277253270149231, 0.09465920925140381, 0.048072487115859985, 0.5616689920425415, 0.37567418813705444], "prob": [0.1822236329317093, 0.2317187786102295, 0.03308551013469696, 0.004222141578793526, 0.007723780814558268, 0.004579529166221619, 0.004493542946875095, 0.48781245946884155, 0.28287211060523987]}, {"target": [3], "doc": ["how far will you go with this", "will gridmap then become tilemap3d , and tilemap tilemap2d   for example", "also , node2d and node3d seem a bit generic , why not have spatial2d and spatial3d then", "i think a big ux difference too would be to have control , node2d and spatial , whatever they will be name , directly accessible beneath node in the new node dialog , although node2d and control inherit from canvasitem .", "you ca n't add a canvasitem directly to a tree anyway , so maybe it should not be visible in that dialog", "and as far as method go , i guess there be no need to add a 2d or 3d postfix on those , since you know what you call they on right"], "issue_sim": [-0.03603162616491318, 0.09511129558086395, 0.07295429706573486, 0.37045416235923767, 0.24140512943267822, 0.4124690294265747], "prob": [0.0004626943846233189, 0.060727644711732864, 0.021046077832579613, 0.03104831837117672, 0.0029287829529494047, 0.19964450597763062]}, {"target": [3], "doc": ["i 'll give our opinion about some renaming that would be usefull for we", "the renaming that we strongly suggest :", "<tag> - > <tag>", "for example the spatial have the transform that we can access , but many time we write \" this.transform.origin \" for well readibility , if we change \" transform \" to \" transform \" , we would n't need to use \" this \" all the time .", "that be our personal opinion", "we also support change \" label \" to something like \" textlabel \"", "or at least when we search by \" text \" when add the new node , \" label \" should appear , since it be totally related", "the constant for some predifined color should be access with <tag> in contrary to <tag>", "for the rest of the proposing rename we look forward to what the community think be well"], "issue_sim": [0.16130012273788452, 0.10187654197216034, 0.052773647010326385, 0.3827424943447113, 0.012930866330862045, 0.2238733470439911, 0.2996276617050171, 0.10390764474868774, 0.11380381882190704], "prob": [0.19298580288887024, 0.03876946493983269, 0.008970101363956928, 0.5726267099380493, 0.0016288126353174448, 0.022610444575548172, 0.07719344645738602, 0.04510447010397911, 0.10627555847167969]}, {"target": [1], "doc": ["there be one : portability", "but would n't implement static typing be well and easy at least for now ?", "not to mention c # support which may eventually happen"], "issue_sim": [0.22753089666366577, 0.29514122009277344, 0.15128019452095032], "prob": [0.10124091804027557, 0.855966329574585, 0.05436866357922554]}, {"target": [0], "doc": ["portability be n't a big concern , since we could just run the gdscript as we do now on unsupported platform ."], "issue_sim": [0.2565832734107971], "prob": [0.9993765950202942]}, {"target": [5], "doc": ["@calinou portability be n't a big concern if those library be use - they support plenty of architecture  and besides , the interpreter could always be use as a fallback", "llvm ir would actually make static typing easy to adopt", "if c # support be implement by link either against mono or coreclr , those both include jits so this issue will be solve automatically", "i can understand why c #  but for those purpose , the jvm would probably bring well performance than either mono or coreclr", "after java <number> , i personally do n't think most people would object to it instead of c #  , and use the jvm give access to plenty of neat functional language than c # like clojure , scala and kotlin anyway", "also llvm make it possible to use c++ in a jitted fashion", "unreal engine also use c++ for scripting , so i do n't think that would be too weird", "c++14  be quite a small language even compare to java and c # , if use properly"], "issue_sim": [0.4394555687904358, 0.49922114610671997, 0.33145976066589355, 0.5615249276161194, 0.5549536943435669, 0.5886787176132202, 0.5048958659172058, 0.49018990993499756], "prob": [0.0026728673838078976, 0.002373036229982972, 0.2891668379306793, 0.06495457887649536, 0.3427026867866516, 0.005933935288339853, 0.06797465682029724, 0.007062133867293596]}, {"target": [0], "doc": ["i would support jit compile for gdscript as long as it do n't mean the end of the language  as it be now ,", "- add a new * * static * * variable type , which in turn can be create by way of do something like", "<tag> or something  , but visible in the form of performance when the game be run", "the idea of use c++ here would mean that the godot developer would not have to add a bunch of new library to the source"], "issue_sim": [0.5209441184997559, 0.2627532184123993, 0.21805204451084137, 0.48997268080711365], "prob": [0.26442497968673706, 0.1535574346780777, 0.010642088018357754, 0.2263384461402893]}, {"target": [5], "doc": ["jit in dynamically type language like lua be do by do type inference", "from the entry point through the call tree , go as deep as possible", "not say this would n't be possible in godot , as pretty much every entry", "the code completion in godot do something similar , which", "be why it be able to guess so much type information", "however there be many case where the type be not obvious , and while the. code completion work great by guess the get_node  call on the tree. be edit , this information might be different or change in run - time .", "i be honestly not sure how efficient type inference might be", "to help on this , it would be easy to allow gdscript to allow the user to", "\" force \" the type of a variable", "be go to do this , then you might as well just go full static typing", "i be not convince of any approach at the moment", "on sun , jun <number> , <number> at 5:37 pm , ace - dragon notifications@github"], "issue_sim": [0.5224841237068176, 0.10988781601190567, 0.2557819187641144, 0.4081841707229614, 0.0016534226015210152, 0.3577696681022644, 0.24307170510292053, 0.1320822834968567, 0.2008688747882843, 0.16785715520381927, 0.07898986339569092, -0.003276567906141281], "prob": [0.0005601742304861546, 0.0002488496247678995, 0.0006020344444550574, 0.00045037412201054394, 0.0006472603417932987, 0.6495224237442017, 0.0042775957845151424, 0.014305117540061474, 0.0001853857102105394, 0.0003271048190072179, 5.833924296894111e-05, 0.0014240926830098033]}, {"target": [9], "doc": ["would implement jit via llvm mean clang would be preffere over gcc", "be it   possible to compile llvm jit use gcc", "unlike java , python , c # etc , gd script work as part of a big c++ native code engine", "in fact both gd script & the rest of the engine be one unit", "some game component be c++ and some be gd script", "overall the game performance depend on create a balance between the two", "write a godot game solely in script would make it slow but write it mostly via node with minimal gd script would make it fast", "so my question be", "be this small boost in performance really worth the effort", "i think c # addition may in fact be well for the engine than implement jit in gd script .", "c # be probably much more optimize and efficient language thus probably as fast as gd script + jit but   not as integrate as gd script", "to answer my own question i personally do n't see this be an important issue right now", "maybe in the future when godot have all the desire feature and devs would be simply optimize those feature"], "issue_sim": [0.6189751625061035, 0.6212072372436523, 0.48757073283195496, 0.15213491022586823, 0.3203842341899872, 0.15146984159946442, 0.41304251551628113, -0.020008035004138947, 0.14385750889778137, 0.4520791172981262, 0.4682057201862335, 0.06360021978616714, 0.2816644012928009], "prob": [0.0029007333796471357, 1.7500469766673632e-05, 0.0006067343638278544, 0.0013891462003812194, 1.4424649634747766e-05, 0.0004294753016438335, 0.042577993124723434, 1.0372514225309715e-05, 2.826917261700146e-05, 0.036251526325941086, 0.0014500118559226394, 2.6624707970768213e-05, 0.02775772660970688]}, {"target": [2], "doc": ["yes , but then llvm would become a dependency so it would make more sense to use llvm for everything", "i do n't think the boost in performance would be small for large game", "maybe for arcade game it would not be noticeable , but in game with a lot of loop and function call it definitely would .", "also , be there a discussion about why c # over java or even c++", "i think c # be a very good language , but the clr and tooling be definitely inferior to the jvm"], "issue_sim": [0.5941466689109802, 0.34254926443099976, 0.18752814829349518, 0.48103445768356323, 0.517886757850647], "prob": [0.14264871180057526, 0.07324226200580597, 0.6666399836540222, 0.0029185947496443987, 0.15904545783996582]}, {"target": [0], "doc": ["i agree that jit be not a workable solution give the number of platform , vary hardware , and amount of work necessary to maintain .", "aot be definitely the simple and the most portable solution for native performance with gdscript", "in fact unity transpile", "net to c++ for its aot also", "i would be interested in contribute with the gdscript rewrite"], "issue_sim": [0.3246105909347534, 0.37457114458084106, 0.12090931087732315, 0.4181320071220398, 0.14043807983398438], "prob": [0.9708796739578247, 0.07445987313985825, 0.002921377308666706, 3.223961539333686e-05, 0.11716041713953018]}, {"target": [0], "doc": ["what be the benefit instead of : <tag>"], "issue_sim": [0.11199460923671722], "prob": [0.9998075366020203]}, {"target": [0], "doc": ["because you can have multiple trait in a class , but you can only inherit one script ."], "issue_sim": [0.35770267248153687], "prob": [0.9999654293060303]}, {"target": [1], "doc": ["if i understand correctly , this be basically what c # call \"  \" , but with non - abstract method", "it might be well to call the feature interface instead of trait to be familiar to programmer ."], "issue_sim": [0.28601956367492676, 0.243069127202034], "prob": [0.00869120005518198, 0.9521110653877258]}, {"target": [2], "doc": ["@aaronfranke  ) , basically the same thing as  , have a completely different use - case from interface * precisely * because they include implementation of the method", "if an interface give a default implementation , then it would n't really * be * an interface anymore", "trait / mixins be present in php , ruby , d , rust , haxe , scala , and * many other language *  , so they should already be widely familiar with people who have a broad repertoire of programming language familiarity .", "if we be to implement interface  , it would effectively just be a way of specify function signature and then require that the relevant gdscript script implement those function signature , with trait include"], "issue_sim": [0.2588760256767273, 0.15254735946655273, 0.2953011989593506, 0.4316917657852173], "prob": [0.012967229820787907, 0.5823686122894287, 0.3837219178676605, 0.1732284277677536]}, {"target": [4], "doc": ["maybe a keyword like <tag>", "though other name like trait , mixin , have , etc", "be surely fine too", "i do like the idea too of have some option to exclude class_name type from the add menu", "it can get very cluttered with small type that do n't function on their own as node .", "it may even be just a feature topic of its own"], "issue_sim": [0.19251206517219543, 0.28094056248664856, 0.0025731753557920456, 0.39693376421928406, 0.35992908477783203, 0.15421685576438904], "prob": [0.012002864852547646, 0.027754737064242363, 0.0030711558647453785, 0.09941123425960541, 0.28014451265335083, 0.005881157238036394]}, {"target": [3], "doc": ["what be the need for such feature", "be there anything this allow that you can not do now", "or do it make some task significantly fast to deal with", "i 'd rather keep gdscript a simple language than add complex feature almost never use ."], "issue_sim": [0.08727794140577316, -0.01103792991489172, 0.10665131360292435, 0.283110648393631], "prob": [0.010419158264994621, 0.010711242444813251, 0.016851654276251793, 0.9590723514556885]}, {"target": [0], "doc": ["it solve the child - nodes - as - script - dependencies problem that  , but do n't come with any of the same kind of  because it be constrain to a single language .", "the gdscript module can isolate logic on how the trait relate to each other and the main script whereas resolve the difference between different language would be a lot more complicated"], "issue_sim": [0.5655810832977295, 0.3855544328689575], "prob": [0.7907496094703674, 0.24392743408679962]}, {"target": [0], "doc": ["with the absence of multiple import / multiple inheritance , child - node - as - script - dependency be the only way to avoid repeat the code a lot , and this would definitely solve the problem in a nice way ."], "issue_sim": [0.5689532160758972], "prob": [0.9999654293060303]}, {"target": [2], "doc": ["i do n't think trait be necessary", "what we need the most be fast engine release cycle", "i mean we need to make the engine more flexible to add new feature as simple just add new dll or so file and the engine auto integrate with it self , like plugin style in most ide .", "for example i really desperate need for websocket to work , i do not need to wait it until 3", "1 too break right now with so many bug", "it will be great if we have this feature", "new class can auto inject to gdscript from random", "so in some path", "i do n't know how much effort this to do in c++ but i hope this be not too hard"], "issue_sim": [0.13086602091789246, 0.1493840217590332, 0.35085514187812805, 0.16859033703804016, -0.008760569617152214, 0.10353375226259232, 0.2266368567943573, 0.022443871945142746, 0.15672451257705688], "prob": [0.040903490036726, 0.06064566597342491, 0.1404561549425125, 0.004745029844343662, 0.0011682701297104359, 0.0016562746604904532, 0.003525125328451395, 0.004434497095644474, 0.39857468008995056]}, {"target": [1], "doc": ["@fian46 well , if someone have implement websocket as a downloadable gdnative plugin , then yeah , what you describe * would * be the workflow", "instead , they opt to make it an integrate feature available in the vanilla engine .", "there be nothing stop people from create feature that way , so your point be really unrelated to the topic of this issue"], "issue_sim": [0.3361921012401581, 0.19036725163459778, 0.1686256229877472], "prob": [0.0368950255215168, 0.3428102135658264, 0.238450288772583]}, {"target": [1], "doc": ["oops i do not know gdnative be exist", "trait be awesome but be it easy to make fake trait class and instance it and later call the function like basic script ?"], "issue_sim": [-0.015625622123479843, 0.367118775844574], "prob": [0.0017995721427723765, 0.9838438630104065]}, {"target": [25], "doc": ["@fian46 @drineo well , yes and no", "load script and use script class take care of that already , but the problem extend beyond that", "the problem be not achieve a uniform interface which you be right , duck - typing solve just fine , but rather organize  group of related implementation efficiently", "1 , with script class , you can define static function on a reference script  and then use that script as a namespace to globally access those function in gdscript", "func _ ready :", "however , when it come to non - static content , especially stuff that use node - specific function , it be troublesome to divide out one 's logic .", "for example , what if i have a kinematicbody2d and i want to have a \" jump \" behavior and a \" run \" behavior", "each of these behavior would need access to the input handling and <tag> feature of the kinematicbody2d", "ideally , i would be able to swap out each behavior 's implementation independently and keep all of the code for each behavior in separate script", "currently , all the workflow i be familiar with for this simply be n't optimal", "if you keep all of the implementation in the same script and just swap out which function be be use", "change \" behavior \" may involve swap out several function as a set , so you ca n't group the implementation change effectively", "all of the function for every behavior  be sit in your single script , so it can get bloated very quickly", "you can just replace the entire script , but then that mean you have to create a new script for every * combination * of behavior * plus * any logic that use those behavior", "if you use child node as script dependency , then that mean you 'd have these weird \" component \" node2d node that grab their parent and call the <tag> method for it which be kind of unnatural , relatively speak", "- you have to make an assumption that your parent be go to implement that method or do logic to check that it have the method", "and if you do a check , then you can either fail silently and potentially have a silent bug in your game or you can turn it into a tool script unnecessarily just so you can set a configuration warning on the node to visually tell you in the editor that there be a problem", "- you also do n't get proper code completion for the * intend * operation of the node since they derive from node2d and the whole point be to drive the behavior of a kinematicbody2d parent", "now , i 'll admit that option <number> be the most effective workflow currently , and that its problem can largely be resolve by use the handy - dandy static typing for gdscript in 3", "however , there be a more fundamental issue at play", "godot 's node - scene system generally have the form of user create node or scene that do a particular job , in their own enclose system", "you might instance those node / scene within another scene and have they compute datum that be then use by the parent scene", "however , the vanilla engine 's usage and general good practice recommendation be to keep the * behavior * of your scene lock to the root node and/or its script", "hardly ever do you have \" behavior component \" node that actually tell the root what to do", "the animationplayer / tween node be the only arguable exception i can think of , but even their operation be direct by the root", "it be simple and more natural to allow a trait implementation to organize the code as it keep the relationship between the node strictly data - up / behavior - down and keep code more isolated into its own script file"], "issue_sim": [0.05967181921005249, 0.45006391406059265, 0.22709476947784424, 0.43114396929740906, 0.09443816542625427, 0.28053802251815796, 0.12868961691856384, 0.20676422119140625, 0.37081846594810486, 0.09697595238685608, 0.33803996443748474, 0.2980155348777771, 0.2841883897781372, 0.39900803565979004, 0.532601535320282, 0.24977757036685944, 0.4520775377750397, 0.47387123107910156, 0.21663489937782288, 0.01155063696205616, 0.37640708684921265, 0.3374636173248291, 0.35049939155578613, 0.3720514178276062, 0.3447566330432892, 0.48003172874450684], "prob": [0.007451657671481371, 0.03695886954665184, 0.07852478325366974, 0.011814074590802193, 5.927372694713995e-05, 0.06666354089975357, 0.001980415778234601, 7.781362364767119e-05, 0.00024129894154611975, 9.866243635769933e-05, 0.0003010070649906993, 0.00015262022498063743, 7.590003224322572e-05, 0.0008274191641248763, 0.004758365452289581, 0.00020457019854802638, 0.004934289027005434, 0.002718286821618676, 0.02204204723238945, 1.386126041325042e-05, 0.0024415894877165556, 4.456941314856522e-05, 0.017255613580346107, 3.8706057239323854e-05, 0.0004127878346480429, 0.07030484825372696]}, {"target": [0], "doc": ["eh , mark yourself as ' implement an interface / trait ' also should fulfill an <tag> test though , which be convenient to test functionality of something ."], "issue_sim": [0.26573437452316284], "prob": [0.9999798536300659]}, {"target": [2], "doc": ["from my limited understanting , the thing that this trait system want to accomplish be enable something similar to the workflow show in this video : <url>", "in the video , it be compare with other kind of workflow , with their advantage and disadvantage", "at least to my knowledge , this kind of workflow be impossible in gdscript right now , because of how inheritance work ."], "issue_sim": [0.2377026081085205, 0.02219899371266365, 0.26858630776405334], "prob": [0.6301105618476868, 0.06482837349176407, 0.17204147577285767]}, {"target": [2], "doc": ["@afterrebelion the first few minute of that video where he isolate the modularity , editability , and debugability of the codebase  * be * indeed the pursuit of have this feature", "this bit be n't quite true , because godot actually do this very well in regard to node hierarchy and designing scene", "scene be modular by nature , property can be export  directly from the editor without ever deal with code , and everything can be test / debug in isolation because scene can execute independently .", "the difficulty be when the logic that would typically be outsource to a child node must be execute by the root node because the logic rely on the root node 's inherit feature", "in these case , the only way to use composition be to have the child start tell the parent what to do rather than have they mind their own business while the parent use they", "this be n't a problem in unity because gameobject do n't have any real inheritance that user can take advantage of", "in unreal it might be a bit  of a problem since they have similar node / component - base internal hierarchy for actor"], "issue_sim": [0.24191388487815857, 0.3664417862892151, 0.3075326383113861, 0.4386660158634186, 0.19682443141937256, 0.27528706192970276, 0.3124142289161682], "prob": [0.08027224987745285, 0.08570435643196106, 0.3916921019554138, 0.1259336769580841, 0.14223478734493256, 0.017447860911488533, 0.029369071125984192]}, {"target": [0], "doc": ["extension method be already propose , but i do n't think they be feasible in a dynamic language .", "i also do n't think they solve the root problem that initially start this discussion", "on another note , i 'll probably open many of the proposal for gdscript as gip", "i still believe that trait make the most sense to share code horizontally in an oo language"], "issue_sim": [0.29798442125320435, 0.24798277020454407, 0.11831800639629364, 0.3161581754684448], "prob": [0.9684137105941772, 0.06645369529724121, 0.007542814128100872, 0.002373314928263426]}, {"target": [7], "doc": ["there be plenty of definition of \" dynamic \" in this context", "to be clear : the variable type may not be know at compilation time , so the method extension check need to be do at runtime", "if we start do this we might as well make gdscript type only", "but that be a whole other discussion that i do n't to get here", "point be : thing should n't start or stop work because the user add type to a script", "it be almost always confuse when it happen", "again , i do n't think it solve the issue anyway", "we be try to attach the same code to multiple type , while an extension method will add it only to one type .", "nobody propose  attach method dynamically  and i do n't want that either", "trait would be apply statically at compilation time"], "issue_sim": [0.10931067168712616, 0.31769442558288574, 0.16701127588748932, -0.020985636860132217, 0.25933247804641724, 0.15406650304794312, 0.11147280037403107, 0.3528780937194824, 0.21757963299751282, 0.26851943135261536], "prob": [0.011241628788411617, 0.15071071684360504, 0.010211614891886711, 0.057760708034038544, 0.043985966593027115, 0.002141796750947833, 0.008727951906621456, 0.14012667536735535, 0.00030440581031143665, 0.0010973005555570126]}, {"target": [0], "doc": ["i think 3.0 would be for es3 and not vulkan"], "issue_sim": [0.6298149824142456], "prob": [0.9997449517250061]}, {"target": [0], "doc": ["yeah vulkan be still not stable or widely support", "on fri , feb <number> , <number> at 9:37 am , nuno donato notifications@github"], "issue_sim": [0.5703465938568115, 0.027118753641843796], "prob": [0.5466092824935913, 0.05940036103129387]}, {"target": [0], "doc": ["and just for information , amd have say that their vulkan driver will be share between windows and linux and even more exiting , will be opensource !", "same for their opencl driver"], "issue_sim": [0.511429488658905, 0.39673030376434326], "prob": [0.9462164640426636, 0.01643848977982998]}, {"target": [0], "doc": ["just for precis amd be not yet in the list because they still have n't pass the vulkan conformance test suite , but their driver already work well on the first vulkan game port talos ."], "issue_sim": [0.5884403586387634], "prob": [0.9998519420623779]}, {"target": [2], "doc": ["thank for the all reference", "we be all also very excited about vulkan , but do n't put your hope too high , it wo n't be a priority for a while", "it be not only about available driver , i guess we can trust the industry to make good driver available within a few month , but it be more about focus the work on what will be useful for gamer .", "all the gpu that be mean to get vulkan support be relatively high end , and thus only a small fraction of gamer  own they", "it will likely be another two year before such hardware be widespread enough for it to be sensible to make game for the masse with it", "so the focus will first be on opengl es 3", "1 , and once it be work  , there will probably be some focus on implement vulkan support too as alternative", "of course contribution towards vulkan support will be very welcome , just want to clarify what @reduz have express lately regard what the focus will be for godot 's core developer"], "issue_sim": [0.057577092200517654, 0.4556795358657837, 0.3184143900871277, 0.5848344564437866, 0.2863529622554779, 0.45465710759162903, 0.6045607924461365, 0.603636622428894], "prob": [0.0027920559514313936, 0.20615433156490326, 0.3510686755180359, 0.03061641752719879, 0.04073193669319153, 0.00025255189393647015, 0.04381969943642616, 0.06307897716760635]}, {"target": [2], "doc": ["you say \" all the gpu that be mean to get vulkan support be relatively high end , and thus only a small fraction of gamer  own they", "it will likely be another two year before such hardware be widespread enough for it to be sensible to make game for the masse with it", "not on pc desktop , all opengl 4.x compatible gpu card be vulkan compatible !", "0 fully support vulkan", "i do n't know for nvidia and intel", "also the need of performance for 4k and virtual reality and steam os will accelerate it be adoption"], "issue_sim": [0.5610818266868591, 0.2863529622554779, 0.5517808198928833, 0.6135820150375366, 0.37714263796806335, 0.3314710855484009], "prob": [0.7076109051704407, 0.24900169670581818, 0.006136575248092413, 0.00017193157691508532, 0.0015593472635373473, 0.020666049793362617]}, {"target": [3], "doc": ["all pc gpus from <number> be support currently", "and maybe than older will have a subset of vulkan in the forthcoming driver", "so all gamer have a compatible card , and vulkan will be support on all os , even bsd", "also a big part of the vulkan driver implementation will be share with the exist opengl implementation , so more they will be vulkan games  well we will have opengl driver :)", "again sorry for my bad english", "i think that vulkan should be the priority of godot , because if it be one of the first engine to support it , godot will be massively use"], "issue_sim": [0.502841591835022, 0.5368124842643738, 0.5710500478744507, 0.6453462243080139, 0.031527530401945114, 0.6756125688552856], "prob": [0.0057189506478607655, 0.24568018317222595, 0.006864718161523342, 0.27169060707092285, 0.003282850841060281, 0.6037225723266602]}, {"target": [2], "doc": ["the problem be not pc support , this will be eventually resolve within a", "the main limitation be adoption on mobile and html5", "as a lot of godot user make game for mobile , we must give priority to. api that work on such platform .", "1 be on the way to", "be widely standardized so they get priority", "also , gles3 be already very powerful and we will be able to enormously", "improve the render quality thank to it", "on fri , feb <number> , <number> at 11:26 am , hubert jarosz notifications@github"], "issue_sim": [0.2439013421535492, 0.17502832412719727, 0.4970543682575226, 0.08832758665084839, 0.11775034666061401, 0.15664082765579224, 0.20344720780849457, -0.005811392329633236], "prob": [0.004224459175020456, 0.0004930530558340251, 0.7330541014671326, 5.4293606808641925e-05, 7.477137114619836e-05, 0.01690182276070118, 0.0005290143308229744, 1.1794417332566809e-05]}, {"target": [0], "doc": ["to clarify , the intention be not to give more priority to mobile than pc ,. but that both platform must get the same attention due to the diversity of. our userbase .", "on fri , feb <number> , <number> at 11:38 am , juan linietsky reduzio@gmail"], "issue_sim": [0.19899573922157288, -0.0009075822308659554], "prob": [0.9134988784790039, 0.16353753209114075]}, {"target": [2], "doc": ["i understund , but who care about smartphone \" game \"", "the fact be that the tactil control limitation destroy the possibility of create true games", "the second limitation be the power , limitation that justly vulkan aim to destroy .", "and html games be currently an ultra minority", "also vulkan will arrive on virtual reality and on console , ps4 and nintendo nx and steam machine", "the vast majority of <number> games will be on vulkan , do n't lose this train", "also arm <number> gpus , power vr <number> gpu and currently qualcomm <number> gpu will have vulkan support", "google heavily push vulkan", "mediatek will probably fully support it", "and there be rumor than qualcomm will use the opensource freedreno driver , if it be true , the community could add support for <number> card", "also all the tizen driver will be opensource and probably could be port to android", "vulkan will be everywhere support on android", "and pc / console / vr / ar be far more important", "but this be your software , you be free to do what you want obviously", "again sorry for my bad english"], "issue_sim": [0.21088433265686035, 0.13024821877479553, 0.43567296862602234, 0.20024001598358154, 0.3412935137748718, 0.4905165135860443, 0.48350298404693604, 0.5779275894165039, 0.47238194942474365, 0.4807514250278473, 0.4764710068702698, 0.7042732238769531, 0.210245281457901, 0.2871738374233246, 0.031527530401945114], "prob": [0.11354068666696548, 0.1069301888346672, 0.04607177525758743, 0.003145623952150345, 0.02257230319082737, 0.11610288918018341, 0.7207839488983154, 0.001776798744685948, 0.0025176473427563906, 0.22020673751831055, 0.0075722006149590015, 0.0013149409787729383, 0.006591346580535173, 0.04148833826184273, 0.0005880634998902678]}, {"target": [0], "doc": ["yes , you may not like smartphone game and might be far from want to. develop they , but a large amount of godot developer use it for mobile .", "ca n't simply ignore they", "on fri , feb <number> , <number> at 1:05 pm , hubert jarosz notifications@github"], "issue_sim": [0.3102203607559204, 0.10305661708116531, -0.0733296349644661], "prob": [0.9811582565307617, 0.02249280922114849, 0.019015779718756676]}, {"target": [4], "doc": ["there be really no point in @reduz implement vulkan support now anyway", "most game be make in godot be n't performance hog", "if your game be perform poorly there be probably something else that can  be do to improve it", "i personally love the many new improvement they 've do that probably would n't exist have he be spend time on learn and implement vulkan", "push it off for a while will probably result in a much well vulkan renderer because more \" good practice \" and \" common pitfall \" will be more well known and easy to research in a year or three . :)"], "issue_sim": [0.7656122446060181, 0.31739741563796997, 0.22100502252578735, 0.4395836889743805, 0.4731215536594391], "prob": [0.007509076036512852, 0.09882106631994247, 0.2946055829524994, 0.14784233272075653, 0.5995648503303528]}, {"target": [1], "doc": ["how do one keep 2d batch", "in <url> we be afraid it would cause batch to fail , since the mask method run the gpu shader on all the child .", "even if masking be an engine module it would be effect"], "issue_sim": [0.250624418258667, 0.38978415727615356, 0.1684371531009674], "prob": [0.000684683327563107, 0.9828885793685913, 0.08419842272996902]}, {"target": [11], "doc": ["all this sound terrific", "at first glance , it look terrific too", "the <tag> section of the <tag> have these among other :", "quality / driver / driver_name=\"gles2 \"", "batch / option / use_batche = false", "batching / option / use_batching_in_editor = false", "if i quit , remove  the line about <tag> and restart , the ui look normal", "at startup  it say invariably that batching be on though :", "at your service to help debug it", "ps : too many visual regression to report", "not sure whether they shall be discuss in this thread or in a bug report", "with lovely different color on every launch .", "i already start regret this be fix ;-)"], "issue_sim": [0.04841932654380798, 0.02598891407251358, 0.0508829802274704, 0.1198248565196991, 0.11597646772861481, 0.16707879304885864, 0.1445811539888382, 0.1585274040699005, 0.10169482231140137, 0.10712018609046936, 0.14974814653396606, 0.1295660138130188, 0.09753724932670593], "prob": [0.0053298515267670155, 0.05101681500673294, 0.06404455751180649, 0.025409959256649017, 0.005655687768012285, 0.018746046349406242, 0.03369765728712082, 0.015363630838692188, 0.004395341034978628, 0.0034066017251461744, 0.018890252336859703, 0.01849820837378502, 0.008133729919791222]}, {"target": [3], "doc": ["just want to pop in and quickly say thank for this", "i 've be work on a dwarf fortress - like colony sim in godot 3", "3 stable and have resign myself to use gles2 for the batching", "with this pr it look like render the massive pile of tilemap in my game be in the neighborhood of 6x fast on gles3 , about the same speed as gles2 on 3.2.3 .", "i have n't notice any issue so far but i 'll come back and make a proper report if i do"], "issue_sim": [-0.00010795518755912781, 0.12035395205020905, 0.2298605740070343, 0.3458173871040344, 0.14899422228336334], "prob": [0.0005880204262211919, 0.01753304712474346, 0.019345765933394432, 0.8586133718490601, 0.008983513340353966]}, {"target": [0], "doc": ["2  i get some strange artifacting around some of my graphic , they be control be scale in and out within a viewport render on top of a meshinstance", "this happen with uv contract and on window and linux", "big performance jump though , particularly from character drawing ."], "issue_sim": [0.31973886489868164, 0.1064835637807846, 0.13225774466991425], "prob": [0.7792708873748779, 0.0030814609490334988, 0.8662115931510925]}, {"target": [1], "doc": ["i understand , but this be too much work for too little gain", "what we could do be configure godot so you can set a path to your godot. repository that you compile yourself , and download the addon will add a. module into godot , that you can recompile .", "on sat , mar <number> , <number> at 4:46 pm , ignacio etcheverry < notifications@github"], "issue_sim": [0.08314885199069977, 0.6494663953781128, 0.0029366202652454376], "prob": [0.027869489043951035, 0.9902722239494324, 0.0030115838162600994]}, {"target": [0], "doc": ["i think it be too little gain be for you and i but think about the developer that they hope with godot they can bring food for their child : stuck_out_tongue_closed_eyes : and do not know anything about android sdks , ndk , gradle , or some of they even do not anything about git , i just say if it be lot of work just direct i in the right direction let i support this system but if you think that it be bad design for godot and you do n't want that in godot then i think i should close this issue ."], "issue_sim": [0.5366122722625732], "prob": [0.9999840259552002]}, {"target": [1], "doc": ["the problem be not link module dynamically , this be super easy", "the. problem be create module for every single platform godot support .", "on we d , jun <number> , <number> at 2:13 pm , bojidar marinov notifications@github"], "issue_sim": [0.4271273612976074, 0.4478551149368286, 0.03176019340753555], "prob": [0.009795690886676311, 0.9804934859275818, 0.006862005218863487]}, {"target": [1], "doc": ["@reduz that would be the module developer ' problem , not ours", "so not a big issue , since even now , the module have to be compile for every single platform ."], "issue_sim": [0.42005401849746704, 0.5185079574584961], "prob": [0.015557554550468922, 0.9488920569419861]}, {"target": [0], "doc": ["an alternative i think about could be to make a simplified , generate. from binding , godot api for this to link from c or c++ .", "it would at least", "make it easy to link and keep compatibility between version", "on we d , jun <number> , <number> at 3:02 pm , ignacio etcheverry < notifications@github"], "issue_sim": [0.43146589398384094, 0.07435230165719986, 0.3653653860092163, 0.07294262945652008], "prob": [0.9769980907440186, 0.003352972911670804, 0.013441810384392738, 0.0110384002327919]}, {"target": [0], "doc": ["i do n't really like the fact that gdscript would be require to bind dynamic module , because gdscript be a module itself , it be optional .", "module depend on other module be not a bad thing , but for such a core feature the engine 's api should be enough"], "issue_sim": [0.5023767948150635, 0.47490379214286804], "prob": [0.9267266988754272, 0.05053901672363281]}, {"target": [1], "doc": ["@zylann for what @reduz propose , gdscript be not require at all", "for what i propose in # <number> , you raise a good concern but gdscript be always bundle with godot , so it 'd be the good way to distribute wrapper  .", "what other language aside from those two would you suggest for wrapper", "would you rather not have wrapper at all than have they in gdscript"], "issue_sim": [0.16968122124671936, 0.4014076590538025, 0.1617262363433838, 0.053322963416576385], "prob": [2.739325827860739e-05, 0.8886114954948425, 0.0030645905062556267, 0.02770380675792694]}, {"target": [2], "doc": ["i would n't use an intermediate language , actually , or maybe use the reflection / variant system , which be already a dynamic interface to the engine", "i understand that it would reduce the requirement for the module creator", "however , since inheritance it be heavily use in the engine , how would you inherit from node , reference , or resource ?", "also , theoretically , if you setup a standard build system for a module on each platform you want to support , you can easily update module for new version of godot", "at the same time , i be curious about what will be the good solution", "i 've work on a few project involve dynamic module and realize a lot of problem need to be solve", "my last engine project be litteraly design around load module dynamically", "just like with godot , they have access to all the engine  , assume they wo n't change during execution because it be too much work to maintain validity of object", "so add or remove native module require to restart the engine , but from a user 's point of view , that be way well already than have to setup a whole environment to build everything for any platform"], "issue_sim": [0.3703479766845703, 0.38653385639190674, 0.2326258420944214, 0.6109635233879089, 0.16760945320129395, 0.3902622163295746, 0.4212508201599121, 0.30847787857055664, 0.4354671537876129], "prob": [0.44101962447166443, 0.0334007665514946, 0.1764863133430481, 0.21515659987926483, 0.00033463005092926323, 0.011512539349496365, 0.00045903061982244253, 0.1061282604932785, 0.07846593856811523]}, {"target": [1], "doc": ["@paper - pauper the problem be ,", "if a module link another at compile - time as a dependency , how would it be usable as a godot c module ?", "my last engine project support this case by simply let the os load the dependency , put the libs next to each other", "the system keep a reference count , so it do n't matter if the engine load it a second time after", "just wonder if that would be possible with godot :)", "@reduz i guess it will need some boilerplate for make c++ module easy to develop"], "issue_sim": [0.11763119697570801, 0.6573851704597473, 0.4921949505805969, 0.056410711258649826, 0.2905718684196472, 0.5325568914413452], "prob": [0.0026005373802036047, 0.6031771898269653, 0.12485971301794052, 0.1310987025499344, 0.031603388488292694, 0.005762158893048763]}, {"target": [0], "doc": ["the binding will give you access to the regular godot reflection api , you do n't have to do anything from godot side", "@zylann i do n't think one of these module will link another one"], "issue_sim": [0.3887009620666504, 0.2778359651565552], "prob": [0.8964614272117615, 0.013603475876152515]}, {"target": [2], "doc": ["@reduz   it might not be that frequent , but it can happen , and be certainly possible to do", "i already have module idea in that would rely on this", "otherwise , the same issue that lead godot to support c module would be present in module again ."], "issue_sim": [0.06944580376148224, 0.3059643507003784, 0.4638158977031708], "prob": [0.37677398324012756, 0.0013792382087558508, 0.5514569282531738]}, {"target": [0], "doc": ["here we be talk about dynamic load in any case , otherwise you 'd still have to recompile godot in order to write module , and in that case how would that be different from the current approach ?"], "issue_sim": [0.4635758399963379], "prob": [0.9999247789382935]}, {"target": [0], "doc": ["queue_free mean that execution of free be not happen until next frame where all queue object free , i do not think its a good idea to rename it .", "force_free instead free look more well"], "issue_sim": [0.316932737827301, 0.09592773765325546], "prob": [0.8960988521575928, 0.0004027827235404402]}, {"target": [0], "doc": ["i 'd vote in favor of <tag> and <tag>  .", "not <tag> though , then well leave it as - be"], "issue_sim": [0.17773114144802094, 0.1912560611963272], "prob": [0.7340640425682068, 0.11620505899190903]}, {"target": [2], "doc": ["i agree with ranoller in his first post", "rename free to be more descriptive would be a good idea", "i also agree queue_free should not be rename to free as this will essentially make an api that lie to the person use it .", "my personal suggestion would be :", "this way auto - complete will offer both method when type \" free \"", "edit : free_queue  make it sound like you be free a queue of some sort instead of add this to a queue to be free in the future , thus free_queue**d * * seem well to i"], "issue_sim": [-0.01153254508972168, 0.3201174736022949, 0.34678053855895996, 0.009512504562735558, 0.18416820466518402, 0.2588106095790863], "prob": [0.007278145290911198, 0.004123217426240444, 0.47954288125038147, 0.00018655405438039452, 1.0812366781465244e-05, 0.06613186746835709]}, {"target": [2], "doc": ["honestly i think it be good how it be", "but that could just be because i be used to it", "the way i see it \" free \" already imply that it will be immediately go , and queue_free mean that it will be put in a list to free at a later time ."], "issue_sim": [0.1118311882019043, 0.12893559038639069, 0.20085409283638], "prob": [0.007033650763332844, 0.0037388617638498545, 0.9898698925971985]}, {"target": [1], "doc": ["@cowthing @zylann i 'd be fine if it stay how it be also , but if it be to change it would be good to make it as clear as possible what they do", "i can see new user be confuse and always use \" free \" on node as it be obvious what it do , but queue_free be n't obvious .", "however , if the example code and project all use queue_free and if people in the forum / q&a / discord / etc give they correct advice they will learn to generally use queue_free instead for node", "so , from a self document api perspective change the name be a good idea", "from a practical point of view i think it ultimately do n't matter too much"], "issue_sim": [0.2513059973716736, 0.30192917585372925, 0.13417518138885498, 0.3181791305541992, 0.03558266907930374], "prob": [0.013469377532601357, 0.5529306530952454, 0.42371535301208496, 0.0030876589007675648, 0.17482268810272217]}, {"target": [1], "doc": ["new user should read what a method do before use it", "also queue_free be actually quite descriptive in my opinion ,", "of course as everything it need you to know waht it do and when you should use it"], "issue_sim": [0.19908712804317474, 0.11029446870088577, 0.056810446083545685], "prob": [0.007148489356040955, 0.026217415928840637, 0.7834625840187073]}, {"target": [1], "doc": ["i agree with @allandaemon that queue_free be confuse for beginner who neither understand the idea of a queue nor free memory", "however , i 'd advocate to keep queue_free and free the same , because of compatibility and they be semantically correct to the operation .", "that be say , i would _ also _ very much stand behind create an alias function for queue_free , such as <tag>", "php have both <tag> and <tag> function to do the same thing for example", "this would maintain compatibility and make the engine more intuitive to beginner"], "issue_sim": [0.12952376902103424, 0.20937269926071167, 0.4133852422237396, 0.37641364336013794, 0.14009493589401245], "prob": [5.9014520957134664e-05, 0.7375543117523193, 0.007625664584338665, 0.00010604262934066355, 0.009393256157636642]}, {"target": [2], "doc": ["i think <tag> and <tag> be just fine", "if they be confuse , it just mean that more documentation should be write about they", "<tag> or <tag> be redundant , as all godot method be run directly when they be process , unless you call they with <tag>  .", "as someone mention above , if <tag> be rename to <tag> , people would start wonder why they can still access the <tag>'d node in the same loop", "so nothing to change imo"], "issue_sim": [0.23775485157966614, 0.19056284427642822, 0.4642150402069092, 0.3715948164463043, 0.1961057186126709], "prob": [0.006158854346722364, 0.02249707654118538, 0.7060519456863403, 0.5910053849220276, 0.00030361340031959116]}, {"target": [2], "doc": ["i do n't agree", "i do n't have any experience with the other game engine you mention , and to i if i see <tag> i expect it to destroy the node when the statement be run , not defer", "since we be all bikeshedde about what be more user - friendly for first time user  , i would not accept to rename <tag> to something that hide its deferred nature .", "godot 's api be mean to be very explicit about what it do", "if other engine be happy with less explicit name hide the defer status of the call , that be cool for they , but we do n't have to copy they", "many first time godot user do n't have any experience with other engine , we should n't assume that copy unity would make we more user friendly"], "issue_sim": [0.10354293137788773, 0.34715813398361206, 0.4355687201023102, 0.18950191140174866, 0.2694573700428009, 0.25401538610458374], "prob": [0.0003570068220142275, 0.5026203989982605, 0.1561126410961151, 3.822881626547314e-05, 0.0847175121307373, 0.010477395728230476]}, {"target": [1], "doc": ["imho the current naming make sense", "<tag> sound like the default destructor who simply delete the object and <tag> be a more sophisticated function to delete object ."], "issue_sim": [0.21901996433734894, 0.4634944498538971], "prob": [0.023281436413526535, 0.9396584033966064]}, {"target": [2], "doc": ["this discussion be so convoluted that i be not sure what be the good", "it start as the <tag> problem , but then the problem be in the word <tag> too", "sum up the original point , the issue be that <tag> be use more often than <tag> so the name of the former should be simple .", "<tag> and <tag> make the name more explicit , put a great burden in the game programmer to pick the good one for their use case , so it might solve the misuse issue", "as for the word <tag> , it be very c - like in nature so it might be an issue for people not use to the language , but it be also a establish standard"], "issue_sim": [0.12025405466556549, 0.2059958428144455, 0.5142785906791687, 0.42735758423805237, 0.4072258174419403], "prob": [0.04285740107297897, 0.03682924807071686, 0.1539137214422226, 0.10981912910938263, 0.14351782202720642]}, {"target": [2], "doc": ["if one find oneself write code like this , i think there be a design problem", "this make the code dependent on a very specific node structure", "i would rather put the code in a node local to the node you want to access , and retrieve the node with a relative path from there", "edit : send too early"], "issue_sim": [0.24693560600280762, 0.45091572403907776, 0.565413236618042, 0.04287964850664139], "prob": [0.08870009332895279, 0.03540952503681183, 0.6881032586097717, 0.0009911030065268278]}, {"target": [3], "doc": ["i just start get into godot today and this be the main issue i have have with the scripting so far", "it be quite gross the way we find node currently", "i hate string reference  , but there could really be some clean up with finding node", "i would like a function call that return the root at the least simplify his first example to \" get_scene_node \" .", "i have not dig into the code fully yet so i do not know the structure , admittedly", "be there no way to reference node with something like", "desirednode ' or ' get_root->myrootnoe->desirednode ' obviously there be reason why this ca n't happen as i be sure it have be think of several time , but it would be kinda cool", "maybe i do not know enough about the syntax to even be talk , but it be a first impression that i be sure many developer move over be go to see"], "issue_sim": [0.25584158301353455, 0.239874929189682, 0.49414122104644775, 0.43498316407203674, 0.20560653507709503, 0.5047764182090759, 0.08414299786090851, 0.2454131841659546], "prob": [0.08833364397287369, 0.0035700174048542976, 0.0053017111495137215, 0.4702208936214447, 0.011082377284765244, 0.0046311235055327415, 0.3571220636367798, 0.10578829050064087]}, {"target": [11], "doc": ["i agree with eska014", "there be basically two reason why you would want to have such a find_node-function , and those be a ) you be write procedural code or b ) you be write component , and both be not encourage in godot", "a procedure be a sequence of command that alter its surrounding", "if your class acquire the tree and modify it it be technically not object orient , it be procedural , since the function in a class be suppose to alter their own state only  , that be what make they method rather than procedure", "a component on the other hand be a class that impose requirement on its environment", "if you be acquire node outside of the current scene in order to read datum from they and react to they you be write code that will only work in a game where the scene tree have the node you be search for", "object orientation be so successful because it help avoid bug and create reusable code", "if you stick to the rule that method should only modify the member of the class they be in you be make your debugging session a lot easy because you know that if an object end up in a faulty state it can only be one of the class 's method fault", "the issue with component on the other hand be that the requirement they impose make it hard to test and reuse they , because any such requirement have to be fulfil by any future project you intend to reuse the component in , and component ca n't be run on their own", "that be especially a red flag in godot where there be a button that allow you to run and test every scene individually", "you mention that reference node especially as the tree mutate be a major barrier , and as well it should", "it be because scene that reference external node impose requirement on the scene structure , so change in the environment could lead to bug in the scene and therefore affect how the scene itself work .", "if you stick to aggregation you wo n't need to touch your scene unless it be the functionality of the scene itself that be suppose to change", "but from the view of someone who intend to use a scene it be completely encapsulate and you do n't need to care about how it work apart from the public interface", "every engine and every language have its own focus", "for example in unity you can add an attribute to a class declaration to express that one component can only be attach to a gameobject that also have a different component", "unity have that feature because it focus on component", "in godot such a requirement be n't necessary , because if you want to express that your object should always have a certain combination of child you just create a scene with these child", "instead of explicitly declare requirement you declare object and hide those requirement as an implementation detail", "i be a teacher as well and use godot for my introductory course , and it be because of the fact that it have more tool that encourage correct use of object orientation  and less feature that help you evade oop than other engine", "if you want to go more into detail you can send i a message and we 'll talk about our course some more", "i be always interested in how other teacher teach game development"], "issue_sim": [0.0500066876411438, 0.44169431924819946, 0.09847834706306458, 0.40797334909439087, 0.16023939847946167, 0.5980896949768066, 0.317564457654953, 0.37457650899887085, 0.2109842598438263, 0.20011427998542786, 0.5165708065032959, 0.3916240632534027, 0.2575571537017822, 0.2092360258102417, 0.19714659452438354, 0.46304774284362793, 0.3092643618583679, 0.45641764998435974, 0.35749369859695435, 0.4843670725822449, 0.08438451588153839, 0.24338270723819733], "prob": [0.003485986730083823, 0.25385743379592896, 0.00015168690879363567, 0.07125458866357803, 0.00015908756176941097, 0.10755686461925507, 9.701221279101446e-05, 0.007421203888952732, 0.005411568563431501, 0.00028836855199187994, 0.0001681602152530104, 0.00667667668312788, 0.00027043730369769037, 0.010350382886826992, 2.0345598386484198e-05, 0.003152545541524887, 5.104624960949877e-06, 0.007608579937368631, 5.469268944580108e-05, 0.04225892946124077, 0.0002906481677200645, 0.00012081727618351579]}, {"target": [9], "doc": ["let i answer one question that would probably come up next : what do you do if your code need to call a function in a node that ca n't be part of the same scene", "let 's say you be write a player and a ui widget", "the widget be suppose to display the player 's health , and when the player be hit it need to be update", "so the player need to inform the ui , which sound like a perfect use case for get_tree", "get_node or something similar", "so what do you do if you be n't allow to use get_tree  or get_parent  or get_node", "a signal be a function call that be bind at runtime", "declare a function require you to specify the code that be run when the function be call and allow you to call that function", "declare a signal do n't require you to specify the code but still allow you to call it", "so all you need to do be replace the function that modify the health bar from inside the player scene with one that emit a signal , connect the signal to the health bar and have it update itself .", "that way both the player and the health bar work on their own , and when connect by a common parent scene they also work together", "you can see that principle at work all throughout the godot api", "for example button have signal for when they be press , because they be write by people that do n't know anything about your game , so how could they have know which code to run when the button be press", "that be why they have to use signal instead so that you can choose which function to bind to the function call"], "issue_sim": [0.49380940198898315, 0.09244348108768463, 0.14407402276992798, 0.19251452386379242, 0.12274753302335739, 0.09346652776002884, 0.3026082515716553, 0.23833662271499634, 0.3449346423149109, 0.2664908766746521, 0.1409270465373993, 0.22518986463546753, 0.11976881325244904, 0.19081135094165802], "prob": [0.3185576796531677, 0.006136677227914333, 0.008602953515946865, 0.0013653096975758672, 5.685612268280238e-05, 0.007130532991141081, 6.143147038528696e-05, 0.002896761056035757, 0.000585219357162714, 0.04905206710100174, 0.008955483324825764, 0.00012484760372899473, 0.16157548129558563, 0.003116752253845334]}, {"target": [0], "doc": ["group be good for thing like that , instead of find random - locate node with expensive search function ."], "issue_sim": [0.34212207794189453], "prob": [0.9999113082885742]}, {"target": [10], "doc": ["sure , <tag> be a little bit short than <tag> , but it still miss the mark for beginner get into godot , and these be folk that should n't be ignore", "i mean , if you can write \" root / myrootnode \" and not even flinch at how obviously counter - intuitive that string be to a beginner , then you 've get to the point where you have entirely take it for grant", "and write the name \" myrootnode \" make it non - portable", "get the last child of root be more portable  , but that be way hairy", "to anyone who challenge a different way of do something as against the \" rule of godot \" , you sound like you be far from the mentality of a teacher or be apathetic to beginner", "part of the learn curve toward do thing the \" right way \" frequently involve do thing the \" wrong way \" first", "for example , i be grateful for <tag> , because use this to teach spawning node make it much easy to transition to <tag>", "of course , use package scene be most time well than clone a \" mother \" node , but beginner have trouble abstract the idea of a branch of a tree in a totally separate scene", "duplicate thing within a single scene be much more intuitive", "by do thing the \" wrong way \" , we can learn about tree and add child before tackle the more conceptually challenge part", "add a feature like <tag> to find any node in the scene tree wo n't get in the way of those use godot the \" right way , \" but can help beginner get off the ground with godot , make the engine more attractive to teacher .", "something like this go a long way to bring attention to godot"], "issue_sim": [0.2852245569229126, 0.2734981179237366, 0.07573788613080978, 0.33384549617767334, 0.19900712370872498, 0.1906440258026123, 0.3979411721229553, 0.49887099862098694, 0.3273546099662781, 0.30203408002853394, 0.6282665729522705, 0.25539886951446533], "prob": [0.10544966161251068, 0.3969334065914154, 0.002124527934938669, 0.0037537661846727133, 0.262084037065506, 0.001731863827444613, 0.024358460679650307, 0.029273897409439087, 9.477054845774546e-05, 0.00966822449117899, 0.1952245533466339, 0.0005991311045363545]}, {"target": [3], "doc": ["i think you not get the same result when use", "be not unique and get share )", "when i start with godot i create a single scene and put everything inside", "nearly every node have have his own script . so i need to work a lot with get_root  and get_parent  .", "during time i learn that it be a very bad design", "i think you get this kind of problem also in other programming language until you learn to use design pattern", "perhaps documentation should have a part for godot design pattern and there should be also some demo project which be construct that way"], "issue_sim": [0.07534710317850113, 0.09399336576461792, 0.35464316606521606, 0.3328697383403778, 0.18149766325950623, 0.35103774070739746, 0.46898794174194336], "prob": [0.05089327692985535, 0.0030925702303647995, 0.031253963708877563, 0.3398846685886383, 0.0025473011191934347, 0.039036888629198074, 0.08539313822984695]}, {"target": [7], "doc": ["this discussion be pretty weird", "here be my take on it to clear some misunderstanding", "* get_node  will throw an error if the node be not find , you can see it in the debugger", "it do n't fail silently", "* as state above , in <number> % of case you rely on the node be there", "you build the scene yourself , so it be not like it be go to disappear", "* if you want to make code optional depend on the availability of a node , you can call has_node  before get_node in very rare situation where you would would like to check", "i do n't really think the api could be far improve , but we could make the documentation well if something be misunderstood ."], "issue_sim": [0.010657811537384987, -0.014129867777228355, 0.4614056348800659, 0.015452113002538681, 0.37430283427238464, 0.19636787474155426, 0.48715895414352417, 0.14954769611358643], "prob": [0.01787310279905796, 0.003671943908557296, 0.11685699224472046, 0.0037555082235485315, 0.029257183894515038, 0.014557966031134129, 0.39185935258865356, 0.1273827999830246]}, {"target": [2], "doc": ["a common case scenario be set the node path in the script editor- with autocompletion catch the error as you type , then much later in the process you or someone else change the parent / child relationship of a node or rename the node in godot - break all script that have those path to it", "i 've be think of implement an addon that solve the issue , but have n't settle on a solution - not sure how to good approach it", "godot 's script editor could receive signal every time a node have be move in the hierarchy or renamed-   it would really help if it automatically try at least to update any break path for the user in   the attach script .", "perhaps it could store the node 's unique id with every path , and if a path become unreachable , it could try to resolve it by find the node again by it be i d", "but then it would need to store the i d be somewhere too", "would be cool if the nodepath resource have that ability", "of course have to iterate through all attach script and correct outdated path could be expensive", "you also have the complication of have relative and full path to node - so even approach it as an addon be hard", "just try to think of way around this"], "issue_sim": [0.5916919708251953, 0.20227345824241638, 0.5098304152488708, 0.5005937218666077, 0.07851213961839676, 0.1187918484210968, 0.23246964812278748, 0.3243318200111389, 0.01721828430891037], "prob": [0.43744876980781555, 0.21090061962604523, 0.18838471174240112, 0.09604769945144653, 0.0004763262695632875, 0.0008290233090519905, 0.03320421651005745, 0.03347572684288025, 0.0011918802047148347]}, {"target": [0], "doc": ["automatically change path name when a scene be edit may sound like a good idea when you be use the intend workflow where for every node in a scene there be one distinct script  , but some people like to use one script on different node in different scene or even attach and detach script at runtime", "in these case it would probably lead to quite inconsistent result if the editor try to identify which path should be modify and which one should n't ."], "issue_sim": [0.510077714920044, 0.28099068999290466], "prob": [0.7382528781890869, 0.3385036289691925]}, {"target": [0], "doc": ["in my opinion , there might be a few other way to make clear that a statement be to be trigger once , one could even argue we be add an entirely new component to gdscript  .", "the benefit of these syntax scheme might be that you can theoretically do they on _ any _ statement in the code"], "issue_sim": [0.4327705502510071, 0.30893123149871826], "prob": [0.8563085794448853, 0.05660033971071243]}, {"target": [2], "doc": ["i like this syntax too :", "i suggest it to be an option that you append to an if case , because that be how other software with the feature do it", "but it could just as well be a new type of a condition block that you put event in in order to force their execution only one time when it become true . a trigger !", "for example we could nest the event under a trigger , which could be nest under an if case or other type condition check :", "it be good to note that the trigger once will trigger the event once when a condition be meet", "but it will also trigger once again if the condition become false and then true again", "trigger once force it to execute one time when meet", "it be not limit to trigger it only one time in the life cycle of the application", "instead it limit it to execute one time in the sequence of frame in which the condition be true", "we could call it ' the trigger operator '", "in any case - whoever implement it should decide what the good syntax would be"], "issue_sim": [0.20500779151916504, 0.3170435428619385, 0.543667733669281, 0.39129096269607544, 0.4527345299720764, 0.3961929976940155, 0.4043618440628052, 0.35754701495170593, 0.49946582317352295, 0.18017688393592834, 0.2898412346839905], "prob": [0.033513907343149185, 0.3393026292324066, 0.6842976808547974, 0.2412152886390686, 0.09839367866516113, 0.007177146151661873, 0.002132207388058305, 0.005536715034395456, 0.017912941053509712, 0.0008440451929345727, 0.040701836347579956]}, {"target": [3], "doc": ["while this be cool and i be not dismiss the possibility of such functionality , i ca n't see any implementation of this that do not include a variable to keep track of execution", "so at good  this be a syntactic sugar for an underlying boolean flag", "it be the way you do n't want to do that look clunky just under the hood , which might be good per se", "you also have to consider in the syntax something reset the trigger upon some condition .", "if you want to play a sound when hit , you likely want to play the sound once but also in every hit", "so when the sound be finish you should reset the trigger so it can be play again", "that require an identifier for the trigger and a way to reset it  ` )"], "issue_sim": [0.3559689521789551, 0.25090932846069336, 0.15579354763031006, 0.43560391664505005, 0.2740068733692169, 0.3347562849521637, 0.30345553159713745], "prob": [0.7341918349266052, 0.007820756174623966, 0.15199342370033264, 0.20397131145000458, 0.013249305076897144, 0.02462136372923851, 0.011005701497197151]}, {"target": [0], "doc": ["the whole point of it be not to have to start and stop it via boolean - that weight be take away by this feature .", "a trigger mean that whatever be inside it trigger one time and switch itself off", "but it keep track of the if case that s you give to the trigger - whether if be true or false and decide when to trigger once again", "if it keep track then no - you do not have to make the programmer reset their trigger", "the trigger will know when to reset itself because it keep track when what s parse to it have become false again"], "issue_sim": [0.30491915345191956, 0.41598546504974365, 0.3658697009086609, 0.3699858784675598, 0.36972126364707947], "prob": [0.34999120235443115, 0.010578853078186512, 0.518782377243042, 0.048840321600437164, 0.027271563187241554]}, {"target": [7], "doc": ["@ace - dragon not sure if i would ever use it in some of the case", "the for case for example i ca not come up with why i would need a trigger once", "we can already trigger once in a for case , even when it continue iterate", "the for case be not like the if case - it run once , iterate through a list and get the job do", "do not cycle every frame when i use it - that would be expensive", "perhaps i have not use it in other way", "i do not know", "the goal of the trigger be to address the need to limit the execution of event to one time - while their condition be true for more than one frame .", "that usually happen in simple if case - something that be continuously check every frame", "about the syntax , i think that in term of actually get this implement , a trigger once would make more sense in @vnen 's approach", "and if you want to use it the way you do , we could still nest it like this :", "i be assume that if the syntax work the way you want it , more internal part of gdscript in godot will have to be touch to get it to work"], "issue_sim": [0.07093054801225662, 0.4144592881202698, 0.416072815656662, 0.4308568835258484, 0.2895967364311218, 0.04322582483291626, -0.07227317988872528, 0.5342358946800232, 0.3802083134651184, 0.47309041023254395, 0.19039857387542725, 0.35680389404296875], "prob": [0.00024425442097708583, 0.0007143351249396801, 0.0009048007195815444, 0.006678822450339794, 0.00018893230298999697, 3.165471935062669e-05, 0.00011720661859726533, 0.2540833652019501, 3.2710639061406255e-05, 0.0013489023549482226, 0.0002372305898461491, 0.16848193109035492]}, {"target": [17], "doc": ["as i say , this be unpreceded in programming language that i know , so i be try to understand what be be propose here", "let i comment on the usage suggestion by @ace - dragon :", "how be that suppose to work", "only run the loop once", "if so it be not a loop", "if it be a loop , it wo n't run only once", "same thing apply to a <tag> loop", "this be possible with my suggestion , but require a bit of repetition :", "and how be this suppose to work too :", "do you realize that <tag> stop the loop", "if it stop always in the first iteration , it 'll have only one iteration", "if it be suppose to stop only if condition be <tag> in the first iteration , it mean that <tag> have also to keep track of an iteration counter", "actually , every <tag> will have to keep track of this and use if there be some <tag> inside eventually", "for this there be well alternative syntax , such as :", "this loop counter be much more useful than the op , but also imply a high memory allocation and usage", "while i can see a great value in thought process from non - programmer , you all   have to understand that in the end this be all an algorithm", "so if we be to add such suggestion , we do have to think of a program that solve the problem in a general fashion and use the structure provide by the underlie platform", "we need to build a basis for the high - level language use the low - level barebone , which be not always easy , viable or even possible", "also , i want to see real use case to the proposal , not \" someone might sometime need something like this perhaps \"  )", "@blurymind i can see that the code you link use an identifier , so it know what trigger to check or reset", "it indeed do need an identifier , as i say in my first post , even if it be internal", "but i personally ca n't see a way for this to actually work without an explicit identifier , which make my syntax proposal bogus", "maybe a thing like <tag> be more viable , but again this need to be properly think", "and i be pretty sure i can solve this with a gdscript singleton although in a clunkier fashion"], "issue_sim": [0.26101821660995483, 0.03788906708359718, 0.08835820108652115, 0.24086818099021912, 0.18569442629814148, 0.3663746416568756, 0.21633663773536682, 0.2553202509880066, 0.0080760158598423, 0.10724768042564392, 0.2998603582382202, 0.47615569829940796, 0.2750406563282013, 0.15304434299468994, 0.19917336106300354, 0.24731425940990448, 0.19899795949459076, 0.20083551108837128, 0.2157168686389923, 0.37801337242126465, 0.15307393670082092, 0.29226550459861755, 0.14200708270072937, 0.30027589201927185], "prob": [0.08395060896873474, 0.0063937632367014885, 3.151148484903388e-05, 1.3895621123083401e-05, 2.1017973267589696e-05, 0.00012600066838786006, 0.0002961384307127446, 0.00043393170926719904, 3.5397875763010234e-05, 1.3592691175290383e-05, 0.0002732783032115549, 0.04697645083069801, 0.0005206140922382474, 0.00016941528883762658, 0.000999519252218306, 0.007989585399627686, 0.020139088854193687, 0.0034686720464378595, 0.008644000627100468, 1.8043034287984483e-05, 0.00043367454782128334, 0.0599895715713501, 0.0004986633430235088, 0.011069170199334621]}, {"target": [5], "doc": ["another example be unreal 's blueprint system , which have a * * do once * * node :", "i think you could look at it be source code if you wish - i believe it be write in c++", "it seem to work almost exactly as we think ours should", "if godot be really plan to do a visual scripting in the future , have this operator in gdscript in advance would be useful to have under the hood", "even without a visual scripting system , it be damn useful in term of control flow with less code and creation of new boolean variable all over the place", "a key point of this feature be that the   programmer should not have to create a new boolean variable and keep track of it .", "instead the trigger would do that for we under the hood"], "issue_sim": [0.1780223846435547, 0.18894553184509277, 0.0041716378182172775, 0.30535781383514404, 0.4586658477783203, 0.4065598249435425, 0.1241767555475235], "prob": [0.07797170430421829, 0.1709151566028595, 0.003067287616431713, 0.26329174637794495, 0.14159254729747772, 0.21804532408714294, 0.003613678039982915]}, {"target": [2], "doc": ["how you compile a product use the product you have yet to compile be a", "little confuse , but i appreciate the result", "anyway , run android x86. on my nettybook , so i 'll take a crack at a dirty port and see what happen .", "on apr <number> , <number> 11:34 am , \" theoxd \" notifications@github"], "issue_sim": [0.3089389204978943, -0.03003159537911415, 0.44492781162261963, -0.10071708261966705], "prob": [0.3466087877750397, 0.01455212663859129, 0.580994188785553, 0.1529119908809662]}, {"target": [0], "doc": ["i do not try , but compile godot editor for arm linux would be well !", "due to chromebook release with arm processor"], "issue_sim": [0.43864548206329346, 0.15893638134002686], "prob": [0.8002545833587646, 0.14633522927761078]}, {"target": [0], "doc": ["please note that while they be the same architecture , compile it for rasberry pie will not allow it to run on android"], "issue_sim": [0.514664888381958], "prob": [0.9999831914901733]}, {"target": [1], "doc": ["from a correspondence on <appname> :", "basically godot can compile game to android , but the actual editor do not have a port yet .", "with the rise of android base tablet , i see more and more people use their tablet with a keyboard for work", "as an owner of an android galaxy note 10", "1 and someone who spend <number> hour travel on the train every work day , i start contemplate use that time to do some coding", "unfortunately there be not many option at the moment , because most game engine have a huge footprint", "the only i find that work well be love2d , but to develop for it you do not have nice thing such as code autocompletion on android", "i think that have the editor also work on mobile device would be a great way to take advantage of it be small footprint and bring to those platform something that be currently not very available for they", "@reduz   say it be not difficult to do , and work would be welcome", "here be love2d on the google play store btw", "have godot at the playstore will give it more exposure , as there be currently no competition - apart of love2d", "there be seriously no other game engine editor on there atm"], "issue_sim": [0.0856580138206482, 0.6783380508422852, 0.2729065716266632, 0.27744317054748535, 0.18494407832622528, 0.3472599983215332, 0.45469146966934204, 0.34266018867492676, 0.06712475419044495, 0.2587890028953552, 0.28542324900627136, 0.3720616102218628], "prob": [4.28877183367149e-06, 0.451402872800827, 0.008123738691210747, 0.0025982337538152933, 0.03813928738236427, 0.00032380729680880904, 0.1330912709236145, 0.5347403883934021, 1.2335016208453453e-06, 2.0510117337835254e-06, 0.0018331932369619608, 2.0024614059366286e-05]}, {"target": [0], "doc": ["well , you will obviusly not be able to run the game", "on we d , sep <number> , <number> at 1:26 pm , punto- notifications@github"], "issue_sim": [0.29034507274627686, -0.04990468919277191], "prob": [0.5554757118225098, 0.34005293250083923]}, {"target": [0], "doc": ["that be true , to spawn a process that run your game you 'd have to do some. intent / activity trickery that be too annoying to even think about", ":p  , and we register a", "player to open that url scheme in android", ") but the app could launch in", "\" project manager \" mode , and just let you run or edit every time you launch", "on <number> september <number> at 13:29 , juan linietsky notifications@github"], "issue_sim": [0.28533411026000977, -0.050847914069890976, 0.25664353370666504, 0.3494628667831421, 0.2614293396472931, -0.011053393594920635], "prob": [0.8689274191856384, 0.022654177621006966, 0.022007957100868225, 0.02129967138171196, 0.06821335852146149, 0.017524385824799538]}, {"target": [0], "doc": ["how do you even compile it on android ? the thing do not even have a terminal"], "issue_sim": [0.47877511382102966], "prob": [0.9999376535415649]}, {"target": [0], "doc": ["not interested in such a format , instead i prefer we focus on our internal. animation tool and support everything require .", "on sun , sep <number> , <number> at 6:39 am , todor imreorov notifications@github"], "issue_sim": [0.3274577260017395, -0.011318652890622616], "prob": [0.8436254858970642, 0.19212093949317932]}, {"target": [2], "doc": ["i would be happy when godot get mesh deformation", "i guess the json format be something consider far down the line when godot have those miss feature", "i think it would be well to make an importer for dragonbones file  instead of spine  .", "dragonbones editor can import spine json animation datum and convert it to dragonbone animation datum too"], "issue_sim": [0.28836822509765625, 0.3504824936389923, 0.22767215967178345, 0.5133920311927795], "prob": [0.005069651175290346, 0.05079377815127373, 0.9374212622642517, 0.0009861586149781942]}, {"target": [2], "doc": ["@reduz   also consider @ndee85 who have a blender animation tool that export to godot currently", "he want to add mesh deformation to it 's exporter", "if godot can use the open json format that dragonbone have , @ndee85 will not have to write several exporter so different game engine can use his tool - animation make with it will work on unity and all the other 2d game engine that dragonbone currently support , as well as godot !", "otherwise you be ask to make an exporter exclusive to godot and if he want to support the other game engine that can use dragonbone datum , he will have to do another exporter for dragonbone"], "issue_sim": [0.4905211329460144, 0.21336837112903595, 0.6693376302719116, 0.4132961928844452], "prob": [0.011889750137925148, 0.10245341807603836, 0.7840461730957031, 0.45844972133636475]}, {"target": [2], "doc": ["@reduz look forward to it", "the dragonbone editor can convert spine2d animation to dragonbone animation anyways", "the benefit here be that dragonbone editor be free , the spec be open source and their runtime be not lock user to any license", "the problem with it right now be the sparse english documentation / tutorial"], "issue_sim": [-0.00959453359246254, 0.43227797746658325, 0.36614519357681274, 0.04598179832100868], "prob": [0.003997936379164457, 0.03773020580410957, 0.5384666919708252, 0.0028674809727817774]}, {"target": [0], "doc": ["i see that , but that be kind of out of scope of \" let 's create a new standard for export animation \" , be n't it ?", ":) so my point be that this issue should probably be close , as it outlive its scope"], "issue_sim": [0.36904269456863403, 0.060017555952072144], "prob": [0.9528357982635498, 0.02193659543991089]}, {"target": [0], "doc": ["if everyone use the same json data structure to store animation , it will be less work for everyone to write new runtime / exporter / importer .", "it will also motivate more animation software devs to support it", "the reason i be push for dragonbones , be that it already have good support / community , it be open source and be document :)", "@reduz i know mesh deformation be not do yet , i guess my issue ticket here be for the future , when godot support it- to make an importer  for json dragonbone animation datum file type", "the advantage of have it in a file be that other software such as dragonbone editor and even blender can edit it / overwrite it / etc - not just godot", "blender be much well suit   for animation authoring- it have a much well graph editor and dopesheet , much more advanced rigging tool"], "issue_sim": [0.546993613243103, 0.33134374022483826, 0.21933192014694214, 0.5388809442520142, 0.41959911584854126, 0.4009731113910675], "prob": [0.7153087854385376, 0.003498296020552516, 0.42931416630744934, 0.00945242214947939, 0.0455285981297493, 0.009386618621647358]}, {"target": [0], "doc": ["we just need a dragonbones importer , which can be do in 3.0 .", "this request be much simple and have nothing to do with the title nor the original post", "i do n't think godot have power to enforce an animation format standard anyway"], "issue_sim": [0.10837272554636002, 0.0319635346531868, 0.33816587924957275], "prob": [0.9867377877235413, 0.003997717518359423, 0.009346343576908112]}, {"target": [15], "doc": ["@igorskuhar no need to get personal , i have not say you be dumb or annoying and focus only on the information in your post", "it make no sense to i because you be compare having skin to not have it", "everyone be request to get it - in this and other issue , it be already on the roadmap", "it have be push <number> or <number> time already", "to i it would make more sense to compare whether to have it be author build into godot editor vs rely on external tool to author the animation", "basically what be miss be the ability to have free form deformation of sprite , turn they into a mesh that be bind to an armature", "your pro and con list be pretty much how it be at the moment", "i think @reduz be go to keep all the pro , but get rid of the con", "the question be should godot rely on external tool to create the asset and get only the ability to integrate they", "or should godot have it be own editor for this type of asset - be able to turn a sprite into a mesh , apply skin weight to it and animate it - all in godot", "i think that there be no point in even discuss it , as @reduz already say that godot will be go with the integrate approach and later on perhaps will get ability to import spine2d asset", "this issue be to advocate support for one open format for cutout animation- dragonbones - to rival spine2d and all the other proprietary one that be lock user to license", "whether godot have an importer for it , use it internally as the way to store the animation , can author it or not author it - it all depend on godot devs and how they decide to go with the design", "i personally think that if godot and other open source game engine unite , we will have a big community support the open standard and that will make it strong .", "thus why i be advocate to use it as a way to store the animation or at least have an importer for it in godot", "if you use dragonbones as the file format for cutout animation in godot , you will be able to have user make their animation in blender or dragonbone editor - before godot get freeform animation editing tool integrate", "the dragonbone json text file be basically just a collection of dictionary and array with the animation data- it be pretty straightforward"], "issue_sim": [-0.0703415721654892, 0.09826524555683136, 0.03712858259677887, 0.03939494118094444, 0.3594592809677124, 0.3750230669975281, -0.027511274442076683, 0.10664649307727814, 0.3411409854888916, 0.5065969824790955, 0.3149581849575043, 0.42427554726600647, 0.4567880928516388, 0.43755507469177246, 0.42784690856933594, 0.6057966947555542, 0.3695281744003296], "prob": [0.00012986906222067773, 0.00016330216021742672, 0.0002882783010136336, 0.00014798145275563002, 0.09599804878234863, 0.03061542846262455, 0.0002863932750187814, 0.00032330432441085577, 0.00806670542806387, 0.2973973751068115, 0.008432427421212196, 0.029768360778689384, 0.01060313917696476, 0.044106729328632355, 0.0016000503674149513, 0.2622157037258148, 0.0014953692443668842]}, {"target": [0], "doc": ["i think it would be more user - friendly to provide only one <tag> class with a <tag> method .", "a sensible default would be choose and the user would be able to switch to another with a constant in the form of <tag>", "it would be nice as well to have useful overload like for instance :", "- <tag> as a shorthand for <tag> ;", "- and <tag> as a shorthand for <tag>", "and maybe rename <tag> to just <tag> because every method be return a <tag>", "since the only exception be <tag> , that be the only method name need a suffix", "at last , i be not sure about the convenience method <tag>", "it be just syntactic sugar , be n't it", "and with my proposal you could just wrtite <tag>", "i hope you find my suggestion useful"], "issue_sim": [0.003876475617289543, -0.022654183208942413, -0.12684987485408783, 0.004754163324832916, 0.010485880076885223, 0.08719294518232346, 0.02738487720489502, 0.05009021610021591, -0.040435150265693665, -0.026584018021821976, 0.06197717785835266], "prob": [0.12386175990104675, 0.21078483760356903, 0.038652073591947556, 0.05698906630277634, 0.015951208770275116, 0.11226386576890945, 0.05318303406238556, 0.02388208732008934, 0.00735983531922102, 0.012263700366020203, 0.003756237216293812]}, {"target": [3], "doc": ["thank a lot for the comment", "here be my thought :", "* concern a <tag> method : sure ,", "it be doable and i think i agree that this would be more \" user friendly \"", "i be honestly unsure about this point", "i think it be very odd to allow change the algorithm on the fly and it would increase the coupling between the rng class", "but when i think about the idea as whole , think about how to use it , there be a lot to like in it", "i would n't refuse to implement the change", "let 's wait for more opinion", "* <tag> already work as you suggest", "i implement this via default parameter , instead of different overload , but the behavior be exactly the same", "* about change the method name : i like your suggestion , but i think i 'll wait for more opinion before change", "i be expect some bikeshedde here :-)", "* about <tag> : i think use it express the intent more clearly than the alternative"], "issue_sim": [0.0819215327501297, 0.16819852590560913, 0.06069211661815643, -0.007792580872774124, 0.0578727200627327, -0.09544827044010162, 0.008294396102428436, 0.07022497057914734, 0.007847776636481285, 0.0010750498622655869, -0.019289737567305565, 0.021502504125237465, 0.03144340589642525, -0.015055472031235695], "prob": [0.00013025038060732186, 0.0001303355093114078, 8.851423444866668e-06, 0.03463396430015564, 1.3725612916459795e-05, 0.037341292947530746, 0.016826126724481583, 0.00044425640953704715, 0.0002493506472092122, 6.340089748846367e-05, 0.016761688515543938, 0.0036732645239681005, 0.02129369229078293, 0.008520865812897682]}, {"target": [6], "doc": ["to i , so far , the generic random class look good , except you 'll need to drop all reference to stl", "it open up the possibility for easily build rng module", "however , i do n't think provide multiple algorithm be a good idea", "yes , there be trade - off , but user do n't know about these", "there be an entire academic field around rng  , and having talk to expert who implement rng hardware , i know for sure this be not easy .", "there be standard randomness test suite , and some of the algorithm include fail they already", "i do n't see any algorithm in that list , that be qualitatively well than pcg in any regard , so i personally do n't really see the point of include a zoo of prng in the core", "i think there should only be two rng implementation in the core", "a good prng  , and a good hardware rng", "these be different rng qualitatively , and i do n't think godot need to provide a bunch of implementation for each"], "issue_sim": [-0.14680686593055725, -0.04657360911369324, 0.0062388889491558075, 0.03158316761255264, -0.036863185465335846, 0.022975478321313858, 0.023878416046500206, 0.011981035582721233, -0.07215496152639389, -0.07593576610088348], "prob": [0.05449816957116127, 0.0005848963628523052, 0.008990781381726265, 0.0327959842979908, 0.34005454182624817, 0.002085304819047451, 0.21559607982635498, 0.00026848798734135926, 8.904619608074427e-05, 0.037078194320201874]}, {"target": [1], "doc": ["i do n't remember <tag> value above the monitor 's refresh rate cause any issue", "that say , it would be helpful to have a function to retreive the monitor 's refresh rate , but the implementation be quite os - specific and would have to be do for every desktop platform ."], "issue_sim": [0.46702009439468384, 0.4859170913696289], "prob": [0.03266311064362526, 0.9852232933044434]}, {"target": [7], "doc": ["@calinou yeah , i just get do plug in my old 60hz monitor to test on my <number> fixed_fps game", "jitter be still very apparent", "i do test it on my 144hz monitor by just switch it to 60hz in setting , but just want to make sure with an actual physically different monitor", "basically i be curious should n't the fixed_fps adjust automatically base on the user 's refresh rate already", "for the smoothness performance", "i mean , if the fixed_fps be default to a delta time of 0", "0167  i finally get where all the jitter report be come from", "because once i set the fixed_fps to the same as my monitor 's refresh rate , it all disappear and godot 's renderer feel as smooth as butter ...", "e : this be with vsync on btw"], "issue_sim": [0.5649892091751099, 0.2887275815010071, 0.6021222472190857, 0.4036719799041748, 0.15732832252979279, 0.2091011106967926, 0.3160442113876343, 0.4538014233112335, 0.46078363060951233], "prob": [0.0058485763147473335, 0.0011297079036012292, 0.1623031049966812, 0.14135527610778809, 0.002962172031402588, 0.0101699810475111, 0.00731462799012661, 0.6206804513931274, 0.0014055026695132256]}, {"target": [1], "doc": ["this be the physics iteration per second step right", "if so this defeat the purpose which be to let you have a fix step iteration , interpolate / extrapolate the node 's physics state to obtain a visual position in frame update or move your stuff there manually ."], "issue_sim": [0.28598055243492126, 0.4066491425037384], "prob": [0.0020828398410230875, 0.9946489930152893]}, {"target": [3], "doc": ["be this the fix timestep jitter when more / less fix step happen compare to the previous frame", "if so , the issue be that godot do n't interpolate between the previous<->new state when there be a fix / idle time deficit -- how be that go by the way", "change fix fps per user / machine be probably not a good idea", "different delta will make physics and your code behave differently , cause an inconsistent experience and limit your test coverage", "fix timestep be and should be completely independent of the monitor refresh rate"], "issue_sim": [0.3266773819923401, 0.3540310263633728, 0.3888782262802124, 0.36149269342422485, 0.5129570960998535], "prob": [0.05561317875981331, 0.7449325919151306, 0.007829136215150356, 0.1326093077659607, 0.018055718392133713]}, {"target": [10], "doc": ["okay , thank you guy", "so here be the deal after i do some testing", "i be now use a kinematicbody2d that utilize _ process instead of _ fixed_process to move the character", "this work flawlessly on both 60hz and 144hz with no jitter whatsoever", "the only problem now be when your character on a 144hz monitor push against a collision shape", "the kinematicbody2d go back n forth and create a jitter", "to fix that , you need to set fixed_fps to <number>", "also , another way to fix that , set the force_fps to <number>", "but if you set the force_fps to <number> , then there be jitter when you move", "and if you set the fixed_fps to <number> , the godot user who do n't have a 144hz monitor will experience jitter", "we need a way to programmatically get the user 's monitor refresh rate and use it to set setting in godot .", "or game can not be ship and work with 144hz and 60hz monitor", "that be a big problem"], "issue_sim": [0.01221274584531784, -0.011264386586844921, 0.11830508708953857, 0.5163617730140686, 0.5134102702140808, 0.16591855883598328, 0.14213058352470398, 0.07236124575138092, 0.3262467682361603, 0.6290520429611206, 0.5839786529541016, 0.5071114301681519, 0.04117094352841377], "prob": [0.004320941865444183, 0.00013473529543261975, 0.001157349324785173, 0.0013696816749870777, 0.0009325822466053069, 0.0009443810558877885, 0.0002686333318706602, 0.0009133427520282567, 0.0008214836707338691, 0.006962392013520002, 0.45822012424468994, 0.0009194790618494153, 6.953789852559566e-05]}, {"target": [1], "doc": ["it be a possibility , but it be really difficult without be able to see the", "my intuition tell i jitter should not be visible , and that it. might be something else that be at fault", "on sun , jul <number> , <number> at 2:12 pm , raymoo < notifications@github", "com > write :"], "issue_sim": [0.03334750980138779, 0.2710714638233185, 0.056351035833358765, 0.01777241937816143], "prob": [0.08419471234083176, 0.5570515990257263, 0.08313914388418198, 0.0009072368848137558]}, {"target": [0], "doc": ["i do n't think it be worth support such old graphic chipset  , especially since we be move forward with godot 3.0 's renderer  .", "you might have well luck on linux by the way ; those chipset tend to have new opengl there", "do you test your change on android / ios / html5 , and make sure they do n't break thing there"], "issue_sim": [0.46634340286254883, 0.4724884331226349, 0.1746189296245575], "prob": [0.6258034110069275, 0.13273189961910248, 0.14115415513515472]}, {"target": [3], "doc": ["well , at least it should display  before crash", "~~we should also test for this <number> function individually", "all these function be from the  extension , which supersede", "so we could test for these extension at the same time than we test for the 2.1 version .", "though , accord to the spec , there be some little difference between the ext and arb version", "edit : into the godot source code , i 've find no difference between the way the arb version of these function be use , and the way the ext version should be use", "edit2 : though do n't think it be a good strategy to replace arb function by their ext counterpart in a hardcoded way like you propose , because there might be some implementation that might support the arb extension  , and not the old ext extension"], "issue_sim": [0.24887415766716003, 0.08768299221992493, 0.07385732233524323, 0.14327242970466614, 0.09116803854703903, 0.36969196796417236, 0.1920970231294632], "prob": [0.0002922808052971959, 7.408466626657173e-05, 0.00023246833006851375, 0.6030634045600891, 0.037975091487169266, 0.6598017811775208, 0.6005906462669373]}, {"target": [0], "doc": ["yeah , maybe there be some other opengl extension that be not well support or which have some limitation"], "issue_sim": [0.40584009885787964], "prob": [0.9997830986976624]}, {"target": [0], "doc": ["this be not c , care to explain what they would have that a normal global scope var would n't have ?"], "issue_sim": [0.1470847874879837], "prob": [0.9999841451644897]}, {"target": [0], "doc": ["i disagree -- think without global variable make thing much clean ."], "issue_sim": [0.02370269037783146], "prob": [0.9999651908874512]}, {"target": [0], "doc": ["with class level mean those variable that belong to a class  , not to instance or any scope , these be use sometimes like for global behaviour change or static pool of thing", "of course that tend to make a mess here and there , autoload script or node can be well organize and call group for mass change .", "be kind of pointless for the way godot work but could be nice to have they as option some day"], "issue_sim": [0.2054644078016281, 0.12442091852426529, 0.3201383948326111], "prob": [0.70168137550354, 0.8028839230537415, 0.002640591934323311]}, {"target": [2], "doc": ["i have the feeling @raould 's idea be not understand well , for example i have a function for calculate perlin noise here which start with :", "the problem here be whenever i call this function it have to create the variable p , then remove it from memory after finish , however i be call this function very frequently , but this function be take almost <number> second to finish , i be try to optimize the function , first thing come to my mind be , remove the variable out side of the function , which do not make it global variable , it still will be static variable belong to the class , the thing be , at least my ide be not allow i to define", "so so far i do n't see the point of implement new script language with custom grammer , but it would be an improvement to allow static variable"], "issue_sim": [0.22320538759231567, 0.32922011613845825, 0.30687379837036133], "prob": [0.38150259852409363, 0.3072231113910675, 0.3055458068847656]}, {"target": [3], "doc": ["@bevinhex why not use a <tag> in this case", "constant be \" static \" by nature", "in any case , if you need local state , create a new object", "i do n't see it a problem to use object when you need more persistent datum ."], "issue_sim": [0.1277158558368683, 0.25858527421951294, 0.1205313578248024, 0.14078150689601898], "prob": [0.0008286889642477036, 0.05216818302869797, 0.004185958299785852, 0.9672685265541077]}, {"target": [4], "doc": ["if static var be make part of the script , then yes : they 'll be destroy as soon as the script be unload", "thread safety also get in the way", "there be no true concept of \" global \" in godot", "autoload be not truly global , it be just add to the scene tree", "so add persistent static variable would require a new setup just for that , which imo be not worth it", "if you need persistent state that be always available , just make an autoload"], "issue_sim": [0.21797189116477966, -0.03613024204969406, 0.2362557202577591, 0.15178468823432922, 0.19537538290023804, 0.16281095147132874], "prob": [0.5991978049278259, 0.0012681634398177266, 8.508046448696405e-05, 0.004011749755591154, 0.05383624508976936, 0.0077759623527526855]}, {"target": [0], "doc": ["with name script , static var may be finally useful ."], "issue_sim": [0.36585378646850586], "prob": [0.9998003840446472]}, {"target": [0], "doc": ["static var will allow to make real singleton , autoloade script and scene be not singleton and wo n't   be replace by one  , it may also help to translate quickly structure from other engine / framework ."], "issue_sim": [0.33149170875549316], "prob": [0.9999922513961792]}, {"target": [1], "doc": ["the close thing for variable be to use <tag> to lead to a function that either do nothing or print a warning", "but no , no true private variable or function ."], "issue_sim": [0.4967479407787323, 0.2514874041080475], "prob": [0.027870848774909973, 0.9881165027618408]}, {"target": [2], "doc": ["@chaosus you should provide argument to explain why private variable be necessary", "otherwise it be unlikely someone will get to work on this", "private variable be here to help encapsulate datum and prevent coupling with other class - it prevent other class from access these variable .", "if you do n't access they in the first place the problem be solve as well", "in both case - use the private keyword or writing use a convention - you have to learn when and how to make variable private , when and how you should be able to access they", "you have to learn to design your class so that you can change the internal later without break their interface and vice - versa", "i think that be your big source of trouble when it come to code architecture", "regard python , it work for million of python developer", "there be a mechanism to make variable \" private \" , that prevent direct access , and it be simple : write two lead underscore instead of one", "but i 've yet to see someone use it", "it be not be available in js until recently either", "there be probably other language like that", "i be not say it should n't be in gdscript - i really do n't mind if other people have a good use for the feature", "i be just not convince it be that useful", "godot could just not list variable with a leading _ or two in autocompletion"], "issue_sim": [0.27521422505378723, 0.20356658101081848, 0.3547641932964325, 0.17006227374076843, 0.4184398055076599, 0.15598830580711365, 0.21777570247650146, 0.17376808822155, 0.31332722306251526, -0.02627604268491268, 0.19200493395328522, 0.1974794566631317, 0.18022304773330688, 0.03342428058385849, 0.4385089874267578], "prob": [0.002980116056278348, 0.0011677818838506937, 0.24604907631874084, 0.01937662437558174, 0.4789806604385376, 0.03159752115607262, 0.008908669464290142, 0.0032047429122030735, 0.058539364486932755, 0.0010602972470223904, 0.001527403830550611, 0.0015117547009140253, 0.14714515209197998, 0.0010081232758238912, 0.007182745728641748]}, {"target": [0], "doc": ["i just do not wanna see an internal method with intellisense in gdscript , and make it more like c # and other statical type language", "yeah , i agree its difficult to implement and require new keyword , too much effort for very tiny result", "the solution with \" _ _ \" prefix be partially solve the problem , thank ,"], "issue_sim": [0.40994346141815186, 0.30840110778808594, 0.19493955373764038], "prob": [0.507680356502533, 0.13170315325260162, 0.11663774400949478]}, {"target": [1], "doc": ["i know this be close and archive already  , but access modifier be a pretty important feature in any programming language", "if i want to create a new node addon for godot and my new node have internal state variable that should not be modify outside of the node , there be nothing prevent that from happen .", "i understand that you can use leading underscore to mimic this feature , but it still do not prevent access which be the whole point of access modifier", "in my opinion this be a pretty big deal as there be no way to control the way in which other interact with your object"], "issue_sim": [0.37657105922698975, 0.3691379427909851, 0.42655569314956665, 0.2111445665359497], "prob": [0.13259218633174896, 0.7335705161094666, 0.21092955768108368, 0.04809613525867462]}, {"target": [14], "doc": ["i be definitely pro private function and variable as well", "yes , we do have a convention for private use a _ in front of a method name but the very same convention be use for virtual function", "so if i see an underscore it could mean either \" do by no means touch that function", "\" or \" overwrite that function", "that be hella dangerous , honestly", "if i be work alone or in a very small team on a small project , it do n't weight in too much because i know what function be mean to be use and what function be for internal usage only", "but with grow team , this get more and more difficult", "people work with class they do n't write themselves all the time and i since i be a person who write a lot of small internal function to make thing work i really want to be able to prevent people to call these function , because if they use those it might lead to unintentional behavior and bug and it cost time to fix these thing once mistake be do", "and despite a common convention , these thing * will * be happen in a large team , because they after all * be * callable from outside", "last but not least ; auto completion", "i be someone who use this a lot to learn what a class can do", "i just put that '", "' at the end and see what function pop up", "if something sound useful , i use it", "it would be much clean if it would n't be clutter with all those function that be not suppose to be call anyways .", "besides - and again - i still do n't know whether these _ name function be private or virtual"], "issue_sim": [0.3350600004196167, 0.3573232889175415, 0.37053489685058594, 0.15920530259609222, -0.006301619112491608, 0.31001853942871094, -0.06286729872226715, 0.4041130542755127, 0.06622855365276337, -0.024670403450727463, 0.1550341695547104, 0.026652175933122635, 0.11664701998233795, 0.12888790667057037, 0.249365895986557, 0.27303066849708557], "prob": [0.0004776761052198708, 0.43260565400123596, 0.005594282411038876, 0.00033443208667449653, 0.0007395618013106287, 0.513346254825592, 0.00029770133551210165, 0.10977425426244736, 0.043808773159980774, 0.00016198006051126868, 0.004882211331278086, 2.003958979912568e-05, 0.00012054280523443595, 4.461821663426235e-05, 0.29202523827552795, 0.0025234324857592583]}, {"target": [4], "doc": ["also , private variable can even be useful on a personal project", "there be sometimes period of time i can not work on the game that i be work on , so i start forget what some of my function do", "or , i forget which one i should and should not use", "private variable would be great with this", "it would make sure that a variable or function can not be access outside of a node , and when i come back to a project i could guess how to use a variable and not have to read through all of my code completely again .", "i second what byteron and dylmeadow say as well", "they just write their post well enough and say exactly what i be think", "just want to add my two cent"], "issue_sim": [0.31743764877319336, 0.19744862616062164, 0.023553388193249702, 0.295668363571167, 0.520724892616272, 0.0002017403021454811, 0.10935434699058533, -0.021466851234436035], "prob": [0.015325046144425869, 0.8562408685684204, 0.021639380604028702, 0.0025049238465726376, 0.899878203868866, 0.00490631302818656, 0.05494842305779457, 0.004239805042743683]}, {"target": [2], "doc": ["i 've personally never encounter a time where i * absolutely need * to prevent people from editing variable or access a function", "any time where i would want to tell people not to mess with something unless they know what they be do , i prefix its name with an <tag>", "i would not object to a keyword  that would simply hide the variable / function from auto - completion .", "i just do n't think prevent access entirely be need"], "issue_sim": [0.36167681217193604, 0.22313076257705688, 0.5262449979782104, 0.09401054680347443], "prob": [0.2084043323993683, 0.5904170870780945, 0.18762396275997162, 0.003653116524219513]}, {"target": [1], "doc": ["gdscript feel quite c++-ish to i despite the fact that it be a dynamic language", "when i switch from write code in c++ to gdscript i miss those access modifier .", "that be say , gdscript be miss full support for oop indeed"], "issue_sim": [0.20773322880268097, 0.28211188316345215, 0.14462602138519287], "prob": [0.3158295750617981, 0.4634310305118561, 0.04356035217642784]}, {"target": [1], "doc": ["i be for the <tag> keyword , it wo n't even break compatibility .", "instead , make <tag> and <tag> private by use <tag> , would change thing for a few use it for other reason"], "issue_sim": [0.22582337260246277, 0.18351362645626068], "prob": [0.5085251927375793, 0.5901287198066711]}, {"target": [0], "doc": ["i think the \" good \" solution would be to optionally link to llvm , gdscript could be compile to llvm - ir and then even be jit'ed while develop / prototyping .", "llvm can build library for maaaaany different platform , so that might be the simple way to go without ship an entire c compiler", "* * thaaaaaat say * * : llvm be a pretty huge dependency", "it be about <number> mo on my linux distro", "like i say , it could be make an optional dependency , but that would require some work from the load side", "i think in itself it be a nice idea , the real problem be not compile to c or something but to actually generate the code for all the platform you want to export to , c + a c compiler be one option , llvm would be another and manually generate machine code  yet another", "it be not trivial but should be quite do - able", "the main problem be that it most likely would require we to add a huge dependency"], "issue_sim": [0.46791693568229675, 0.46498358249664307, 0.38698244094848633, 0.16524264216423035, 0.18830294907093048, 0.5071397423744202, 0.19303548336029053, 0.1847928762435913], "prob": [0.8369982242584229, 0.0912487655878067, 0.0012957928702235222, 0.010884495452046394, 0.11607383191585541, 0.5952585935592651, 0.0021682828664779663, 0.005512687377631664]}, {"target": [0], "doc": ["that be why i be think a more portable c compiler like tiny c which could be use which be way small in size and support multiple platform .", "a retargettable compiler like lcc would be the good tho but i think it have licensing issue", "ah man i be start to think be more of a headache than be worth"], "issue_sim": [0.3773837983608246, 0.37457627058029175, 0.09257395565509796], "prob": [0.9863265752792358, 0.021345950663089752, 0.008220520801842213]}, {"target": [0], "doc": ["generate c code should be pretty easy , it would be interesting to apply some global type inference on the gdscript code in question .", "because it would all be do at export time there could be a lot more effort involve in figure out type", "unresolvable method signature could be make type generic and instantiate accordingly", "that would be quite the undertaking , but i be pretty certain that it would yield in a huge performance increase overall", "i think the big question be how cross - platform export can be make as painless as possible", "the pick toolchain  would be pretty important", "there be still some problem with well window compatibility , but i think we can rule this out later on"], "issue_sim": [0.41787639260292053, 0.2533659338951111, 0.2975781559944153, 0.3441365361213684, 0.25354909896850586, 0.22607964277267456, 0.12386249750852585], "prob": [0.48949432373046875, 0.08153803646564484, 0.00384319550357759, 0.05388996750116348, 0.1018836721777916, 0.00043914010166190565, 0.014139866456389427]}, {"target": [6], "doc": ["there be alternative to llvm", "llvm be a huge dependency and be actually large than godot", "it 'd be well if we use something else instead", "include clang as well be just suicide", "c code be very easy to compile , so there be a ton of small c compiler available", "a fast approach would be compile gdscript bytecode to machine code directly", "godot be portable , so an ir like llvm which generate machine code for we would be use , though that 'd still be pretty hard to do , so translate to c sound well ."], "issue_sim": [0.3313271403312683, 0.45560067892074585, 0.12844155728816986, 0.1805424988269806, 0.43067049980163574, 0.5823994278907776, 0.43256518244743347], "prob": [0.011045461520552635, 0.21493417024612427, 0.0028592683374881744, 0.0012323884293437004, 0.016789307817816734, 0.0012934592086821795, 0.660121738910675]}, {"target": [4], "doc": ["gdnative be already integrate too", "mono be integrate in c # version only", "i guess it be rare to find a developer without a c compiler instal on his machine", "i do n't understand where be the problem to add a so common dependency", "for android export you must enter the path of jdk in the setting , and other path for external thing , why not enter the path of gcc or mingw ?"], "issue_sim": [0.09207285940647125, 0.21746477484703064, 0.28803735971450806, 0.25840163230895996, 0.27335426211357117], "prob": [0.0037228052970021963, 0.11746757477521896, 0.0771041288971901, 0.010937436483800411, 0.6554034352302551]}, {"target": [6], "doc": ["can this llvm dependency compile to * all * target platform from the same host", "if not , then it break expectation in the cross - platform export system", "though it be somewhat a concern , the size be not much of the problem , what get it be that godot be suppose to be cross - platform , and usually compiler have a single target", "so we have to ship compiler to all platform , which be not really feasible", "i do n't have any problem if it be an * optional * external dependency", "as i say before :", "it be easy to just convert it to source code and let the user provide the toolchain on their own .", "this way it can be use with different compiler and linker"], "issue_sim": [0.39586371183395386, 0.1985078603029251, 0.4014386236667633, 0.41023361682891846, 0.20662908256053925, 0.016926493495702744, 0.428569495677948, 0.34215500950813293], "prob": [0.0397774875164032, 0.047794047743082047, 0.6896935701370239, 0.02289525792002678, 0.011226262897253036, 0.0009448715136386454, 0.3522948622703552, 0.004852697718888521]}, {"target": [2], "doc": ["i think this be pointless , because :", "<number> ) game be always distribute with executable", "if you want to exploit godot to do something malicious , you can do. anyway , it be not that protect", "i think as a sandbox , webassembly will work much well in the future", "on tue , feb <number> , <number> at 7:28 pm , emmanuel leblond < notifications@github"], "issue_sim": [0.013801159337162971, 0.3044538199901581, 0.3881590962409973, 0.3449710011482239, -0.032909806817770004], "prob": [0.04718824848532677, 0.04705682769417763, 0.5845243334770203, 0.06058543547987938, 0.024408215656876564]}, {"target": [0], "doc": ["and even if you protect it , someone will find the way to bypass your protection in no time .", "not worth the effort imo"], "issue_sim": [0.171537846326828, 0.047927338629961014], "prob": [0.995248019695282, 0.0004900317289866507]}, {"target": [0], "doc": ["i think , all we developer need to make modding be a quick and simple { gd , visual , etc?}script sandbox , and to be let to decide which class and singleton it can access  .", "that should be enough for most case , and in the bad situation you be go to have a global mock each real class or something like it"], "issue_sim": [0.4894465208053589, 0.20904198288917542], "prob": [0.8139613270759583, 0.22710959613323212]}, {"target": [0], "doc": ["i would prefer white list rather than sandbox approach - basically a method to load script from <url> with custom define api , singleton etc ."], "issue_sim": [0.48664233088493347], "prob": [0.9999912977218628]}, {"target": [4], "doc": ["in the workflow i post early , ipropose to have the <tag> path resolve just like <tag> but with an high priority", "a solution to control what could be modde would be to add a <tag> flag to resource , enable such high priority", "the trouble i smell be a modde script could be able to do monkey patch on regular resource , hence modify they even if it be not allow to", "i do n't think so far gdscript support runtime modification of class  , but you could mess with the node instance parameter anyway", "in the end , i think the sandbox feature can be achieve to protect the user 's computer from untrusted code run into godot but it can not help protect vanilla game 's assets&code .", "the reason be what a mod can modify be really game - specific so provide a generic way to do that would be too complexe to implement and cumbersome to use"], "issue_sim": [0.1461842805147171, 0.3486531376838684, 0.23751677572727203, 0.2893912196159363, 0.6175277233123779, 0.4487896263599396], "prob": [0.000563163252081722, 0.01621743105351925, 0.02591109275817871, 0.06098048761487007, 0.23089934885501862, 0.05376158282160759]}, {"target": [2], "doc": ["i definitely agree with that", "i believe that it be simply a risk that the user take when instal a mod that it could potentially do funky stuff to the game", "now that i be look back at your previous post , i just realize that you mean to restrict _ all _ script in the game , because most game would run just fine with the sandbox restriction .", "actually , the reason that i be worried about patch <tag> be because i be think that you would only restrict <tag> script", "before godot run a script , it would check it be resource path and put the script in sandbox mode if necessary", "that way , any code in <tag> would have the full gdscript api while any code in <tag> would have the limitation that you mention", "this would be even less intrusive for developer because it do n't change anything for <tag> code", "i have n't check out out the current implementation for run script , though , so i be not sure how easy that would be to set up", "restrict all script would probably be easy"], "issue_sim": [0.04738512635231018, 0.38159602880477905, 0.4746597111225128, 0.22347377240657806, 0.37775224447250366, 0.3789426386356354, 0.23459142446517944, 0.30086448788642883, 0.3620205223560333], "prob": [0.0003775914665311575, 0.012893838807940483, 0.19706451892852783, 0.004591782111674547, 0.002974070841446519, 0.04602834954857826, 0.0006768574821762741, 0.07081735879182816, 9.386561578139663e-05]}, {"target": [3], "doc": ["have to agree with @willnationsdev and the other", "afaik , most popular modde game have no sandboxes", "minecraft mod , skyrim mod , you mostly depend on the mod author", "i think solid modding support be more important than sandboxe ."], "issue_sim": [-0.009605691768229008, 0.21123240888118744, 0.2500931918621063, 0.255191445350647], "prob": [0.026332905516028404, 0.1809646040201187, 0.17266754806041718, 0.2771604657173157]}, {"target": [0], "doc": ["i like it , i do not know for the implementation behind but in the gdscript code it would look a lot clean than what it look like now .", "especially for the setget example"], "issue_sim": [0.15034033358097076, 0.001012963242828846], "prob": [0.9761867523193359, 0.00112708390224725]}, {"target": [0], "doc": ["this be very useful , but it should allow single line statement for readability .", "<tag> should be allow", "otherwise , this add a ton of newline and would in this case waste the useful of onready", "would be useful to apply the same annotation to several statement", "also , a colon could be use to indicate where the annotation end and where the affected statement begin , to be consistent with the rest of gdscript"], "issue_sim": [0.3034183382987976, 0.06926101446151733, 0.1987536996603012, 0.46588853001594543, 0.3333967924118042], "prob": [0.8709635734558105, 0.001008190680295229, 0.008993810974061489, 0.0012150054099038243, 0.31789156794548035]}, {"target": [1], "doc": ["tentatively put on the 3", "i 'd really like to see this implement soon than later to provide usability enhancement to the editor ."], "issue_sim": [0.017251189798116684, 0.23046785593032837], "prob": [0.05155085772275925, 0.9469702243804932]}, {"target": [2], "doc": ["why be    gdscript 's syntax be modify so heavily", "it be originally design to be simple , easy to learn and intuitive", "i fear with all these new addition  it will become very confuse for new developer .", "for example , if a new person to godot be to watch a tutorial and see the code that be in likelakers2 's post , i 'd imagine that would make their head explode", "if anything they 'd have to ask bunch of question about it / how it work , etc", "i totally understand everyone 's love for gds and how the contributor want to make it well , etc", "i just feel like there might be a possible disconnect between actual game devs , and the contributor", "not everyone need to utilize these feature", "i just fear that gds might stray far and far away from its simplicity , that be all", "it be already * * more * * than enough", "also , have <number> line   for a export keyword be very cumbersome , compare to just   specify everything in one line", "for example : <tag> be so much more cleaner", "and regard to point # <number> , this can be do in the   editor afaik", "also , imo , have annotation all over the place in code to ' disable certain warning ' could lead to very messy code"], "issue_sim": [0.24480891227722168, 0.10961303114891052, 0.19871604442596436, 0.2848682999610901, 0.04072641208767891, 0.12621355056762695, 0.016418948769569397, 0.09493404626846313, 0.07323045283555984, 0.08326232433319092, 0.2638232707977295, 0.09195339679718018, 0.10574811697006226, 0.5058275461196899], "prob": [0.01228543370962143, 0.002806681441143155, 0.05185386538505554, 0.30311575531959534, 0.010782643221318722, 0.0039164661429822445, 0.01040278933942318, 0.0003355639928486198, 0.0035689782816916704, 0.0010176555952057242, 0.0547136552631855, 0.0010307645425200462, 0.0010192578192800283, 0.13843244314193726]}, {"target": [0], "doc": ["most  gdscript syntax change be compatible with old code .", "the main goal be to increase productivity of developer use gdscript , e", "* <tag> statement allow for switch - case statement  and even improve upon that by allow people to match array and dictionary with ease", "* <tag> variable  concretize a pattern which be often use , namely initialize variable in <tag>", "* type gdscript allow developer to finally rest know that no wrong - type error will happen , and let they benefit from well autocomplete at the same time", "it be optional , so newcomer do n't need to learn it for their first game", "this be an open community", "game devs be welcome to come and express their opinion , just as you do", "at any rate , quite a bit of time will pass before annotation become a reality", "if it be already good enough , we would n't receive feature request for it", "the syntax be not finalize yet", "it be quite probable that it wo n't replace <tag> and <tag> keyword immediately"], "issue_sim": [0.30254030227661133, 0.06606213748455048, 0.25117164850234985, 0.27444708347320557, 0.19836807250976562, 0.19733887910842896, 0.021455245092511177, -0.09314703941345215, 0.23911702632904053, 0.23727959394454956, 0.25927963852882385, 0.24901160597801208], "prob": [0.6426234245300293, 0.020417729392647743, 0.09232361614704132, 0.004348705057054758, 0.18249653279781342, 0.03320184722542763, 0.0008354037418030202, 0.03183766454458237, 0.04804036393761635, 0.028674354776740074, 0.0008881158428266644, 0.10130749642848969]}, {"target": [0], "doc": ["annotation be a good way of configuration injection .", "but seperate configuration and code may be a more clean approach imo", "may be add they like as header file be more helpfull"], "issue_sim": [0.5002715587615967, 0.188958078622818, 0.2222249060869217], "prob": [0.9936057329177856, 0.002345290267840028, 0.021614141762256622]}, {"target": [0], "doc": ["i do n't want to have a bunch of annotation for every field , property and method", "i would rather have more keyword", "if people do n't like a ton of keyword we can remove some of they"], "issue_sim": [0.46470412611961365, 0.1727682501077652, 0.22012777626514435], "prob": [0.6510381102561951, 0.017003023996949196, 0.3252829313278198]}, {"target": [1], "doc": ["i be not quite sure i think extrapolate the position be a good idea", "i 've implement some  render interpolation for my own mean in godot , and i think that a physics delay of one frame be acceptable even in quick - reaction - time game .", "extrapolation do n't really resolve this issue but merely hide it , for example two body that collide may render as penetrate far than they should", "this could be do as an option , of course , to toggle between interpolation , extrapolation and none"], "issue_sim": [0.10176590085029602, 0.4857672452926636, 0.3442106246948242, 0.24929016828536987], "prob": [0.05308673530817032, 0.6823086738586426, 0.14531268179416656, 0.01925039291381836]}, {"target": [1], "doc": ["in my opinion , this be separate from <url> because the other issue be presumably cause by driver bug ,", "whereas this be an ' expect jitter ' cause by fix our physics timestep ."], "issue_sim": [0.21448451280593872, 0.388626366853714], "prob": [0.07517222315073013, 0.9762439131736755]}, {"target": [0], "doc": ["without understand how the engine 's source code be structure , it be not trivial  to implement this by modify the engine , so here be a gdscript interpolation implementation .", "i update the <tag> file from the provide example project to do interpolation between the previous and current position on the sprite", "that way , the actual physics be untouched but the movement appear to be smooth", "i expect this same approach should work for anything , provide that your character scene be structure in the same way", "the ' sprite ' can probably be replace with any type of drawable node -- in fact , i do n't yet see why this would n't also work in 3d", "if you attach a camera to your character , you 'd probably want to make it a child of the drawable node , rather than the ' physics body ' node", "i have n't try to use this in a sample game yet , but the movement look smooth", "the only problem be when the sprite reach the edge of the screen , i \" teleport \" it back to the other side , and the ' interpolation ' often draw the sprite in the middle of the screen when this happen", "this could probably be overcome with a flag being set for every fix process update say whether or not the character have \" teleport \" , and not perform the interpolation  in that case"], "issue_sim": [0.2849547266960144, 0.5346423387527466, 0.3551761507987976, 0.24646387994289398, 0.3594081699848175, 0.41217806935310364, 0.26160934567451477, 0.568509042263031, 0.36974620819091797], "prob": [0.3754252791404724, 0.0832497850060463, 0.013258567079901695, 0.01978888176381588, 0.14317333698272705, 0.04741550609469414, 0.0022141446825116873, 0.16418036818504333, 0.1470109522342682]}, {"target": [0], "doc": ["i think it be worth to mention that as far as i understand this issue  , this problem be very much reproducible / noticeable even on 60hz screen by set physics fps inside project setting to something below 60hz  ."], "issue_sim": [0.38057422637939453], "prob": [0.9999953508377075]}, {"target": [0], "doc": ["err , follow up on my last update , it seem that my interpolation script do work -- the issue i be see be an unrelated graphic driver bug .", "the problem be non - existent on a different pc", "@kubecz3k good point -- i should have include that in the reproduction step -- it make the issue easy to see"], "issue_sim": [0.3317908048629761, 0.041038915514945984, 0.11313128471374512], "prob": [0.9809870719909668, 0.003649379126727581, 0.33861956000328064]}, {"target": [1], "doc": ["i would expect that. <tag> <tag> <tag>", "print \" hello \" if either a or b evaluate to true", "i think it would make more sense to write"], "issue_sim": [0.2095201313495636, 0.4947398602962494, 0.1671120822429657], "prob": [0.23522213101387024, 0.16079387068748474, 0.07454803586006165]}, {"target": [0], "doc": ["i be also not aware that python and lua support such a syntax , but at first sight it seem highly confuse to i", "what would be the output of <tag>", "imo it make more sense to stay consistent and treat <tag> and <tag> as conditional in all situation , such they should always resolve to true or false .", "what you suggest in the op can be achieve with <tag> , which be imo clear than <tag>"], "issue_sim": [0.5155335664749146, 0.16022491455078125, 0.41473788022994995, 0.1682048887014389], "prob": [0.17774821817874908, 0.007340635173022747, 0.4484737813472748, 0.016547903418540955]}, {"target": [4], "doc": ["<tag> would print \" hello \" , and <tag> would print null , just as in python and lua", "the logic behind be that the operator do n't return true or false , but the last evaluate argument", "however if you use comparison operator in the expression  then you 'll get boolean as usual", "i 've mostly use this in lua , where ternary do n't exist <url>", "i be just do the suggestion because i 've see this technique use not only in lua , but also in javascript , and the fact python support it could mean it could have be request and use for a reason .", "i be ok with explicit ternary , just want to know the community opinion", "edit : another point be that the first operand be evaluate only once"], "issue_sim": [0.5646252632141113, 0.4577326774597168, 0.41937410831451416, 0.48240548372268677, 0.5085415244102478, 0.14875183999538422, 0.4254991412162781], "prob": [0.15462706983089447, 0.0417194627225399, 0.06048255413770676, 0.0009655854664742947, 0.7674082517623901, 0.03748037666082382, 0.005907715763896704]}, {"target": [0], "doc": ["i still do n't see the real in - game use for this , since this would fail :"], "issue_sim": [0.11840628832578659], "prob": [0.9999377727508545]}, {"target": [0], "doc": ["i find it very confuse .", "you can simply do :", "or , to be more explicit :"], "issue_sim": [0.056177012622356415, 0.10419998317956924, 0.05626501142978668], "prob": [0.8209672570228577, 0.014121186919510365, 0.06364216655492783]}, {"target": [1], "doc": ["i be against use the <tag> keyword for this", "<tag> be a boolean operation , it be already take .", "i propose use <tag> like c # do"], "issue_sim": [0.11722935736179352, 0.30349254608154297, 0.160398930311203], "prob": [0.01863284967839718, 0.9952046871185303, 0.005633591208606958]}, {"target": [1], "doc": ["what be wrong with c++ 's ternary operator   syntax", "it be great , easy and intuitive ."], "issue_sim": [0.502519965171814, 0.07745383679866791], "prob": [0.18605345487594604, 0.6622921228408813]}, {"target": [0], "doc": ["burley brdf be a pain for light due to the add light .", "for some object maybe , but not environment", "unreal do not use it either", "on sun , oct <number> , <number> at 5:45 am , przemysaw go  b < notifications@github"], "issue_sim": [0.11953388899564743, 0.21487027406692505, 0.1314205676317215, -0.028538335114717484], "prob": [0.16711458563804626, 0.05527974292635918, 0.017245642840862274, 0.3493219017982483]}, {"target": [0], "doc": ["actually i take it back , i realize it should work fine due to backlight. not present due to shadow mapping anyway .", "i be ok with switch lambert and", "on sun , oct <number> , <number> at 7:48 am , juan linietsky < reduzio@gmail", "com > write :"], "issue_sim": [0.2752695679664612, 0.0935298278927803, -0.013543268665671349, -0.0005013751797378063], "prob": [0.8377541303634644, 0.05003993585705757, 0.11859086900949478, 0.009856224060058594]}, {"target": [2], "doc": ["nevermind , i think my test be not break but it be", "here light pass through an object due to how burley work", "in an ideal world it should work but , in this case , due to how shadow mapping work  it fail , as object get light anyway ."], "issue_sim": [0.05752735212445259, 0.23074233531951904, 0.309895783662796], "prob": [0.08304671943187714, 0.009096885100007057, 0.9724105000495911]}, {"target": [0], "doc": ["here be another example of burley not work .. as light be add in direction it do not come from , shadow mapping break ..", "i think it probably make sense for a path tracer  , as shadow do not exist , but for regular real time render its not that suitable", "i would use it for standalone object mostly when they do not break"], "issue_sim": [0.2237740308046341, 0.34960728883743286, 0.1796712577342987], "prob": [0.7057285904884338, 0.3633630871772766, 0.008844157680869102]}, {"target": [1], "doc": ["wait this ca n't be true", "right now , lambert add n.l  to light whereas burley add f n.l where f be a finite  symmetric function of f.", "you can interpret this as burley just * modulate * lambert , in a gentle way", "so when lambert give no or small contribution , burley would do the same"], "issue_sim": [-0.025094062089920044, 0.0328572578728199, 0.07214010506868362, 0.11875711381435394], "prob": [0.01815798319876194, 0.8462424278259277, 0.046861905604600906, 0.08009680360555649]}, {"target": [0], "doc": ["and that would hold for any brdf function f which do n't start diverge at grazing angle"], "issue_sim": [0.04351980239152908], "prob": [0.9999260902404785]}, {"target": [0], "doc": ["in the sense that it be that just i imagine artist  would typically use blender or substance painter and godot default would probably surprise they"], "issue_sim": [0.7376325130462646], "prob": [0.9999539852142334]}, {"target": [3], "doc": ["please do consult other developer", "maybe from other application", "they may have be in the ui oss business for year", "the thing i notice about godot be that it be like it come out of the cave without know the late / modern / advance trend with the ui ... please update ... if start over be the key ,"], "issue_sim": [0.14404231309890747, 0.12099914252758026, 0.14137323200702667, 0.1104278415441513], "prob": [0.07364000380039215, 0.044734809547662735, 0.04457581788301468, 0.5455463528633118]}, {"target": [1], "doc": ["dude i be not stupid ,", "if you know other application that can dock a. separate process be my guest , as neither unreal or unity do this .", "on we d , aug <number> , <number> at 10:28 pm , manson mamaril notifications@github"], "issue_sim": [0.02703108638525009, 0.4483906924724579, 0.15398356318473816], "prob": [0.03402922675013542, 0.8472819328308105, 0.08554719388484955]}, {"target": [0], "doc": ["as i say , godot run the game in a separate process , while unity and. unreal do not .", "if you can find for i information on how to dock a", "separate process in another opengl app , that work in all platform , i", "promise that i will implement it", "on we d , aug <number> , <number> at 11:14 pm , manson mamaril notifications@github"], "issue_sim": [0.22933676838874817, 0.34250569343566895, 0.2863021492958069, 0.006606654264032841, 0.14284655451774597], "prob": [0.9854991436004639, 0.005897026974707842, 0.010112990625202656, 0.0037664957344532013, 0.004688714165240526]}, {"target": [1], "doc": ["i would n't mind implement it , but i seriously doubt this be possible", "maybe it be though through the compositing api in the different os. version , but it be definitely not that easy", "on we d , aug <number> , <number> at 11:21 pm , manson mamaril notifications@github"], "issue_sim": [0.07598468661308289, 0.1478813737630844, 0.12256047129631042], "prob": [0.17827314138412476, 0.7915904521942139, 0.009249833412468433]}, {"target": [0], "doc": ["it be simple to do the way godot do it , and also have some advantage such. as well remote debugging and live editing", "on we d , aug <number> , <number> at 11:37 pm , manson mamaril notifications@github"], "issue_sim": [0.3893413245677948, 0.1744958907365799], "prob": [0.8962635397911072, 0.03682650625705719]}, {"target": [0], "doc": ["* * technically * * it be good ... as the original post say it be well to be able to undock ... and add minimize button and close", "like unity and adobe", "to cater to <number> - monitor and easy customization", "float window from adobe :", "workspace preset from adobe :"], "issue_sim": [0.35843947529792786, 0.17172546684741974, 0.24395498633384705, 0.3751705586910248, 0.24039742350578308], "prob": [0.9843465089797974, 0.01499638520181179, 0.09801411628723145, 0.0021066213957965374, 0.002081667771562934]}, {"target": [3], "doc": ["@mamarilmanson comment <number> day ago", "really , it be about trend now", "i do n't think so", "i would rather prefer godot 's devs to work on some new function or get few more bug squash out or let they take time and rewrite audio engine - if they really have no other thing to do ;) - than to resolve not existent \" fashion \" ui problem , that be suppose to make godot look \" modern \" .", "run the game in separate window be completely fine , especially if you can now run your game on android and edit it real - time"], "issue_sim": [0.03286894038319588, -0.14524857699871063, -0.021795686334371567, 0.30621081590652466, 0.37139445543289185], "prob": [0.010761677287518978, 0.011456593871116638, 0.0165814571082592, 0.9630124568939209, 0.2797676622867584]}, {"target": [0], "doc": ["i honestly do n't give two fuck about modern trend , and usability wise i do n't really see any advantage of have your game in a dock window .", "it be one of those feature that i would add if it be easy to do , but not worth the effort otherwise", "in the case of unity , if you have a single monitor , it be unusable when they be split in two and in the case of unreal , the editor window be replace by the game", "so in the end , it be the same thing", "you be always focus in one of the window anyway , so do alt - tab wo n't kill you", "it just work fine", "as i say before , i worry the most about actual usability issue of people work on project and use godot , not so much about   those who say they would use if it work this way or another , or if it support c # , drag & drop , etc", "i need good example of how usability be a problem in the current way and how the new way make it well , argument such as \" unity do it this way and i like it \" or \" this way use more modern convention \" do n't work in my book even if valid", "you need to get more technical and refer to real , actual problem with exist use case"], "issue_sim": [0.354503333568573, 0.11304883658885956, 0.5016136169433594, -0.08143117278814316, 0.3971366882324219, -0.016076920554041862, 0.1771642118692398, 0.2655196189880371, 0.03304198384284973], "prob": [0.10309385508298874, 0.006000884342938662, 0.2103891670703888, 0.0002437809744151309, 0.0022329697385430336, 2.7546018827706575e-05, 0.1674104779958725, 0.08199892938137054, 0.0005863230326212943]}, {"target": [0], "doc": ["ca n't you just remove unused asteroid from the scene  and add they back  when need ?"], "issue_sim": [0.4578089416027069], "prob": [0.999966025352478]}, {"target": [1], "doc": ["@akien - mga ,", "it generate overhead  , because they be complex entity .", "that be why i need this \" simulated \" parameter", "the root of the asteroid tree be a rigidbody2d"], "issue_sim": [-0.0051452964544296265, 0.05841758847236633, 0.12704303860664368, 0.45080018043518066], "prob": [0.009657924063503742, 0.9277839660644531, 0.04876181110739708, 0.04945344105362892]}, {"target": [0], "doc": ["i change rigidbody mode to mode_static , but it be not ignore by the physics system , and i deactivate collision node too .", "it keep lag a lot because it be not ignore by the physics system"], "issue_sim": [0.4462106227874756, 0.23986126482486725], "prob": [0.8687958717346191, 0.04175793379545212]}, {"target": [0], "doc": ["this property be not require since be easy avoid collision .", "these be tree possible soluzion", "remove it from the scene", "set layer and mask to <number>"], "issue_sim": [0.29619964957237244, 0.0819157138466835, 0.172256737947464, 0.14814493060112], "prob": [0.8722801208496094, 0.03761836886405945, 0.03113228641450405, 0.2523406445980072]}, {"target": [1], "doc": ["@andreacatania , i apply the second option , and still lag", "it will not collide because i disable the collider and mask and layer be set to <number> .", "if you need access to the source code i can give it to you by a private way to see and test it"], "issue_sim": [0.029116187244653702, 0.4435052275657654, 0.1597733199596405], "prob": [0.006058024242520332, 0.6216694712638855, 0.38690388202667236]}, {"target": [1], "doc": ["i see the profiler and it say the main problem be the physics system .", "the object set with mask and layer <number> be not completely remove from physics system , be still process internally and generate lot of lag"], "issue_sim": [0.23338623344898224, 0.350528359413147], "prob": [0.5427764654159546, 0.5657098889350891]}, {"target": [0], "doc": ["i honestly do n't think the physics engine would lag with only <number> entity", "can you copy - paste the code you use in the <tag>"], "issue_sim": [0.2794649004936218, 0.09861361980438232], "prob": [0.5801107287406921, 0.19498653709888458]}, {"target": [0], "doc": ["why do you change the theme that much , i like the customization concept , but you do a lot of change to the new theme  you should have leave the theme as it be and then we could improved if need it", ", the new theme that you propose , look in my opinion really strange and incomplete , it still use old element that do not fit , and look like a windows <number> program with really sharp edge", "or maybe i do not understand what be you do , be that another theme that be not suppose to be the new default"], "issue_sim": [-0.030057724565267563, -0.00880722887814045, -0.011682147160172462], "prob": [0.7093232870101929, 0.7594102621078491, 0.02005375549197197]}, {"target": [1], "doc": ["@djrm yes , some art resource be not adopt yet", "the reason why i do it like this be that we ca n't change color for each ui element with texture .", "i hope you to understand for it", "i would like to contact to you before this pr , but for personal reason , i be in hurry", "i be sorry for that"], "issue_sim": [0.02220616489648819, -0.0021388595923781395, -0.06317265331745148, -0.02044387347996235, 0.1354997754096985], "prob": [0.02397129125893116, 0.8904763460159302, 0.019170211628079414, 0.3719884753227234, 0.013963998295366764]}, {"target": [0], "doc": ["i understand that people want to customize the engine color , but first thing it can be do with texture  , and second i think that the people that be go tho change the color of the engine be minimal", "it be simply not worth it to restrict the theme to be simple box in favor to color customization that just a few people will use"], "issue_sim": [-0.05218842625617981, -0.023422040045261383], "prob": [0.8822522759437561, 0.47852978110313416]}, {"target": [4], "doc": ["how hard would it be to add modulate color for texture and provide a couple of default variable : background color , foreground color , highlight color to use in a theme", "so a style box have an addition property : <tag> which than can be set to <tag>", "or a flat style box can use <tag> as the border color", "this would be some additional work but would allow for tremendous customisation", "we could use djrm 's stylboxes which be really nice and we just change the color to white/ different grey value and give they a modulate color base on the expose variable .", "that would be an amazing addition to the editor in general and would also apply for any user create theme", "@volzhs what be your thought on that", "how hard would you estimate be it be implementation"], "issue_sim": [-0.03629162162542343, -0.018865015357732773, -0.045317184180021286, 0.04256202653050423, -0.023900050669908524, -0.05729980766773224, 0.011491872370243073, 0.038995832204818726], "prob": [0.8240868449211121, 0.1333797723054886, 0.0008353974553756416, 0.0004834372375626117, 0.5642951130867004, 0.0012235045433044434, 8.625119818361782e-08, 0.0015324585838243365]}, {"target": [1], "doc": ["@toger5 i be do that when i be create the theme , the only problem be that sometimes you need to modulate use two color , for example in input , the background need to modulate to the bg color and the line need to modulate to the highlight color , i thing it could be solve by render two texture or use a custom shader", "but i m not sure if it be worth the effort , as i say we could offer <number> variation , i really do not think it be good to offer the full range of color i mean we will do this just for someone who want the engine to be green and purple .", "most people eante gray - ish variation , we could offer dark - grey , standard , and light - grey"], "issue_sim": [-0.035301342606544495, -0.0035753920674324036, -0.028959158807992935], "prob": [0.8536595106124878, 0.4271796643733978, 0.06453156471252441]}, {"target": [1], "doc": ["i think the main point of this pr that change theme color , or make a theme in general , be a tedious task", "as i say in another issue , make / modde a theme in a modular way  should be make easy rather than try to add special customizer for the build - in editor theme .", "@toger5 modulate be not always enough , you might need more core color , and it require the base texture to be black and white otherwise color will badly blend"], "issue_sim": [-0.0254826582968235, -0.06509928405284882, 0.01778683252632618], "prob": [0.5808497071266174, 0.7904731035232544, 0.2717127501964569]}, {"target": [1], "doc": ["why i revert your commit for new theme be that it change default theme a lot as i say before", "old default theme be very useful when make prototype .", "this be most important reason", "so i need to revert it , could not change one by one", "i know and feel what you have do be great", "but it do not provide proper visual than old one for general", "how about find a way to look well , base on this"], "issue_sim": [-0.054693855345249176, 0.01167966052889824, 0.2275686264038086, 0.029153812676668167, -0.05118158459663391, 0.013335663825273514, -0.03502664342522621], "prob": [0.22377221286296844, 0.9394655227661133, 0.0005916947848163545, 0.04465144872665405, 0.002971172332763672, 0.030337493866682053, 0.021767232567071915]}, {"target": [1], "doc": ["@akien - mga yeah , i understand that however , the way @volzhs be implement the color customization be what cause the problem here , since the way that be do be this pr do not allow the   use of textured widget", "i completely agree with have the old theme for game prototyping but to sacrifice the editor theme to have color customization be simply not worth it . maybe"], "issue_sim": [-0.041633300483226776, 0.007357880473136902], "prob": [0.15849730372428894, 0.9741820096969604]}, {"target": [2], "doc": ["@djrm , @volzhs although i really love the color customisation i also agree that it be not worth it", "there be a couple of grey value which make sense : very dark  , blueish grey  , saddle light grey  )", "to give full color variation will just waste time play around and only have benefit for the crazy ppl under we who like all green or pink .", "after see the approach with adapt the background color to the window color  i still see benefit to allow full color variation for some ui element", "also look at the discussion for the highlight color i also see some advantage in the full variation", "this be why i would love to see the option to give optional access to some color of a", "tres theme and the default theme", "but i agree it be not worth for sacrifice the really good look theme we have right now", "in @djrm current default theme it would be enough to just give access to the three different grey value", "this would solve most controversial and would look amazing", "everyone who want even more customisation can install another"], "issue_sim": [0.07243572175502777, 0.012355631217360497, -0.02617446519434452, 0.043949469923973083, -0.00036233291029930115, 0.06390970945358276, -0.017376504838466644, 0.06731200218200684, -0.06672851741313934, -0.053252868354320526, 0.012334412895143032], "prob": [0.0022492939606308937, 0.228389173746109, 0.7713369727134705, 0.03711283579468727, 0.005067871883511543, 0.047651804983615875, 0.00022736756363883615, 0.005067440681159496, 0.0016775797121226788, 0.003971097990870476, 0.0012054479448124766]}, {"target": [0], "doc": ["for game prototyping in general you do not use theme .. people prefer the. simple anchor system and stuff like texturebutton ..", "on may <number> , <number> 3:03 am , \" n - pigeon \" < notifications@github", "com > write :"], "issue_sim": [-0.06870120763778687, -0.02737845480442047, 0.1558493673801422], "prob": [0.9504092931747437, 0.23327602446079254, 0.001257269294001162]}, {"target": [0], "doc": ["well , i think it be the expect behavior .", "you should be get an error like this in the console so you get a clue on what be go on :"], "issue_sim": [-0.00044774264097213745, 0.2153286635875702], "prob": [0.9901032447814941, 0.007221846841275692]}, {"target": [0], "doc": ["i think thread should still start even if there be no parameter define in the thread method signature .", "not start the thread at all lead to confusion if you do n't see / understand the error message", "often you just do n't need an argument pass to your thread", "- if no argument be give and the signature do n't have any parameter define", "no error and start the thread", "- if argument be give in the <tag> method but no parameter be define", "show an error , or even well crash the game with an error", "- if no argument be give but a parameter be define", "run the thread with the parameter be <tag> or <tag>"], "issue_sim": [0.4249475300312042, 0.40683573484420776, 0.25733959674835205, 0.3419896364212036, 0.26436179876327515, 0.4560459852218628, 0.17323037981987, 0.345831960439682, 0.2824009358882904], "prob": [0.2318926900625229, 0.05951681360602379, 0.02320074662566185, 0.0620705746114254, 0.001426534727215767, 0.016325751319527626, 0.006441356614232063, 0.013699776493012905, 0.007151593919843435]}, {"target": [0], "doc": ["i think it should match the default function call behavior : if the number of argument in the call do n't match the function arity , the game should break and the debugger open with an error .", "imo set the parameter to <tag> at the engine 's may lead to confusion too , especially because godot still ca n't debug inside thread"], "issue_sim": [0.4184781312942505, 0.37754905223846436], "prob": [0.7849836945533752, 0.222154900431633]}, {"target": [0], "doc": ["yes , but even if you call <tag> without pass argument to the thread , the thread 's method be still be call with one parameter , because the argument be pass as an array .", "this be too confuse imo", "be it possible to pass the argument as real parameter  to the thread method"], "issue_sim": [0.48799169063568115, 0.08656834065914154, 0.427029550075531], "prob": [0.9310641884803772, 0.012481659650802612, 0.0674789771437645]}, {"target": [0], "doc": ["i think that it be a good idea to allow multiple and no parameter , rn you must run in on a \" compatibility \" function that execute the final wanted function with your correct  argument , so the good would be to pass argument as an array :"], "issue_sim": [0.4100423753261566], "prob": [0.9999779462814331]}, {"target": [1], "doc": ["personally i be fine with sconstruct , it work perfectly for i on my mac / win setup", "but i do agree with you , cmake would be a great addition since it be much well maintain ."], "issue_sim": [0.29427000880241394, 0.413616418838501], "prob": [0.25848349928855896, 0.7177254557609558]}, {"target": [1], "doc": ["see issue # <number> <url>", "build system be way too complex and migrate it at this point would take. week .", "also , i do n't like cmake , if i be to switch , i 'd rather use a", "build system with a real scripting language", "on sat , feb <number> , <number> at 12:37 am , marynate notifications@github"], "issue_sim": [0.0272225234657526, 0.3491291105747223, 0.5675498247146606, 0.35880783200263977, -0.030545007437467575], "prob": [0.00984277855604887, 0.6768779754638672, 0.2057742029428482, 0.025852221995592117, 0.14721845090389252]}, {"target": [8], "doc": ["perhaps the tutorial for scon compilation , on the wiki , be just not thorough", "if this be truly the case , i welcome anyone to show i how to correctly compile use scon in window", "i instal python 2", "7 32bit , then scon 2", "i set the environment variable and alias for window up", "then i do as the instruction say and run \" scons", "bat bin / godot", "exe \" from the godot directory in c", "no luck , it be not compatible with new version of visual studio .", "it could not find my vs <number> install and i have no interest in instal multiple copy of vs on my system", "if you know how to get scon to recognize vs <number> then please post how to do this", "so then i do a work around with mingw", "it work like a charm after i manually modify the build file to include the correct directory for lib and header file", "i should not have to do this with a build system", "it should just work", "if you use scon then at least include a find routine in the build system for find the dependency in mingw", "i unfortunately do not know scon well enough to write such a routine", "i deal in cmake and c mainly", "personally i do n't mind use mingw , i prefer it actually", "i just should not be force to modify the build file to get it to work", "if anyone have any suggestion for make this process easy on window then please post it in the godot wiki where it may be of use", "otherwise i will just go ahead with my own cmake write up", "it will take a while , but will be worth it for more up to date window system"], "issue_sim": [0.336189329624176, 0.4567081034183502, 0.2453806847333908, 0.06805911660194397, 0.3343846797943115, 0.32231882214546204, 0.07093656808137894, 0.2509133219718933, 0.4286457300186157, 0.4488948583602905, 0.23391124606132507, 0.540147066116333, 0.5118336081504822, 0.4796818494796753, 0.06715227663516998, 0.6235677599906921, 0.1698417067527771, 0.4680100381374359, 0.4152779281139374, 0.4967845678329468, 0.30988556146621704, 0.5604207515716553, 0.2623335123062134], "prob": [0.05262091010808945, 0.01393673475831747, 0.000738989096134901, 0.0016330264043062925, 0.001784209394827485, 0.0014141617575660348, 0.00011578600242501125, 0.00046988754183985293, 0.03212035447359085, 0.03544355183839798, 0.01566818542778492, 0.0001493234740337357, 0.02034139819443226, 8.329165575560182e-05, 2.35826191783417e-05, 0.0018986338982358575, 9.347697050543502e-05, 2.7793288609245792e-05, 0.00024777569342404604, 0.0008416724158450961, 0.06946485489606857, 7.638616807525977e-05, 0.003591724205762148]}, {"target": [0], "doc": ["if we be go to change build system , i 'd rather it be to waf than to cmake .", "and @caitp seem to be work on that now , so let 's wait to see how that go"], "issue_sim": [0.6584208011627197, 0.11060409247875214], "prob": [0.7913111448287964, 0.07682795077562332]}, {"target": [0], "doc": ["scon work great for i os osx but personally i second the opinion to have cmake only because i 'd like to be able to generate xcode project as i be as ide man .", "any suggestion on how to generate xcode project file with scon as the build system"], "issue_sim": [0.5397533774375916, 0.45219549536705017], "prob": [0.8627851605415344, 0.0697893351316452]}, {"target": [0], "doc": ["please let it be cmake that win out and not stick with scon or waf , what ever that be , since i can only think of one obscure project that even use it .", "use something that more people would know how to use like cmake , i would rather have anything other then waf , even the old auto - tool or even stick with scons"], "issue_sim": [0.5036268830299377, 0.5889177918434143], "prob": [0.7845868468284607, 0.26186826825141907]}, {"target": [1], "doc": ["if something be work do n't change it", "it be more important to improve the quality of current system   than make a new one .", "scon be beyond from perfect , but it work", "my <number> cent :", "- some function have more than <number> line", "- the be blank line without reason", "- line beyond <number> character", "py need to be splitte", "- string template need to be move to file for readability", "- please , move the build code to a new folder", "this be only for the build script but it can be apply to all the code"], "issue_sim": [0.1563938409090042, 0.13139933347702026, 0.158817857503891, 0.06445647776126862, 0.03736099600791931, 0.06691646575927734, 0.014641385525465012, 0.06002986058592796, 0.25232788920402527, 0.3502393066883087, 0.3650470972061157], "prob": [0.0427958182990551, 0.5797995924949646, 0.016101451590657234, 0.0012068110518157482, 0.031178250908851624, 0.0043894522823393345, 0.0030576165299862623, 0.0025870800018310547, 0.2207350879907608, 0.005821069702506065, 0.031100401654839516]}, {"target": [0], "doc": ["also , such build - in script be go to be expose as plain text once export , which in most case not desire imo , and they can not be encrypt  ."], "issue_sim": [0.30574285984039307], "prob": [0.9999953508377075]}, {"target": [0], "doc": ["i think the feature be great and should not be remove .", "but indeed it might be good to add a warning in the documentation to avoid problem"], "issue_sim": [0.17804908752441406, 0.2321665734052658], "prob": [0.9864925742149353, 0.004307916853576899]}, {"target": [1], "doc": ["i like the build - in script also", "it be pretty useful when need a very simple script _  _ or just for testing ."], "issue_sim": [0.3372868597507477, 0.22574523091316223], "prob": [0.04819631576538086, 0.9177727103233337]}, {"target": [0], "doc": ["i also think we should remove build - in script in 4.0 due to the various limitation and their bad vcs - ability .", "this would mean it be no long possible to distribute single \" component \" file that include everything  , but that do n't seem to be a goal for most people anyway"], "issue_sim": [0.283346951007843, 0.22526207566261292], "prob": [0.4894915223121643, 0.5584957003593445]}, {"target": [0], "doc": ["i love in - build script simply because i do n't need to care where to save the script file .", "additionally , the scene file be self - contain and safe to pass around", "however , i can see the problem in - build script cause , and i agree on the vcs issue as well", "if we remove build - in script , i would suggest  that godot take full control on where to store these script in a standardized way", "so the user do n't have take care as of where to store all the script belong to one scene", "even more useful when rename node  , or \" save branch as scene \" , in which case the script of the extract scene need to be move to an appropriate folder to comply with the to be define standard", "in my mind , this be a way to keep most of the comfort and modularity build - in script provide"], "issue_sim": [0.418283611536026, 0.1769421398639679, 0.3538011312484741, 0.5045711994171143, 0.32376015186309814, 0.352142870426178, 0.316494345664978], "prob": [0.5073096752166748, 0.0030245278030633926, 0.0036611459217965603, 0.0055391802452504635, 0.004344914574176073, 0.4867120087146759, 0.06961102038621902]}, {"target": [1], "doc": ["please do n't remove build - in script", "the project folder be already a mess with metadata for every image and there be time there be just not sane to add new file to it when a <number> - line builtin script do the job .", "not all logic have to be reusable and manage as separate file", "some script can be literal one - liner", "not to mention project use they heavily will be _ fatally cripple _ by this", "the maintenance cost would be plain absurd", "there be already plenty of work to be do to port a project from 3", "i do n't want year of work to go down the drain again", "i know some of the developer have an aversion to builtin , but consider user too", "if there be a feature offer for i to use and i deem it convenient to use , it be my right to use it , whatever the limitation be", "with that i mean that i ponder the pro and con and decide that it be still the way to go", "have they just yank out from my grasp do n't seem very fair"], "issue_sim": [0.41497963666915894, 0.5390584468841553, 0.16906636953353882, 0.17951634526252747, 0.20725905895233154, 0.08708193898200989, 0.14677605032920837, 0.06943412870168686, 0.23450890183448792, 0.12160664796829224, 0.03411500155925751, 0.031048808246850967], "prob": [0.00045387251884676516, 0.7282819747924805, 0.0028892054688185453, 1.272463305213023e-05, 0.0008847631397657096, 0.009027882479131222, 0.00015576262376271188, 0.00011027989239664748, 0.005598916206508875, 0.17486260831356049, 0.054792605340480804, 0.021425066515803337]}, {"target": [3], "doc": ["specially for ui element that do n't require much more than initialize some icon or text label or change a color base on it be use for an enemy or a player character , or just very simple effect to show stuff like damage number progressively write themselves , or something like a generic lightweight life bar with its own simple _ draw  routine", "of course i be not go to put extremely complex logic as builtin , but for ui element , very minor effect , maybe a timer that just need a nudge , an icon that fade in / out for emphasis", "there be really not much of a point to pollute the folder far with such scrap", "once support be go , all those element would need * * manual review * * , and they be a lot . the time investment be brutal and there be always a chance of forget something and then you just ca n't figure out why the thing be not right .  ."], "issue_sim": [0.27526023983955383, 0.2760787010192871, 0.1603592336177826, 0.21917572617530823], "prob": [0.5273544788360596, 0.2138938456773758, 0.0022064459044486284, 0.21287694573402405]}, {"target": [4], "doc": ["i mean , i be try to provide a counterpoint , since it be assume no one care / want this", "my project be a rpg , mean it be very heavy on menu and small interface node that provide info that need to be reuse frequently", "use the favor method mean your folder , no matter how tidy you try to keep they , be always go to have double the number of element that it should have , and when the project grow large it be not trivial and complicate navigation", "those little convenience save time and avoid distraction", "if it end up be a final decision , some tool that can decouple and link the builtin to separate script file should be ideal ."], "issue_sim": [0.13245758414268494, 0.2647399604320526, 0.3499886095523834, 0.04270114004611969, 0.31436073780059814], "prob": [0.007605586666613817, 0.008263406343758106, 0.5085484385490417, 2.537948421377223e-05, 0.11324659734964371]}, {"target": [3], "doc": ["my <number> cent on this :", "if you be make a big enough project , you be go to end up with a lot of script  in your project folder anyway", "stuff one - liner into build - in could spare you a couple of file in the project directory but in the end it would n't be much difference", "remove build - in could also theoretically promote well project dir organization as the place where you could put a script in a fire - and - forget manner would be go , which would make you actually think of where to put it ."], "issue_sim": [0.04700600728392601, 0.34249866008758545, 0.39845070242881775, 0.3158860504627228], "prob": [0.008141854777932167, 0.21972058713436127, 0.3316163420677185, 0.47207051515579224]}, {"target": [1], "doc": ["i would just like to point out another possible way to deal with build - in script : make they work", "i do like to use build - in script in my current project , simply because they make scene self - contain .", "you can easily extract node from my big game scene and store they to a good place without have to worry about where all the script end up", "it be easy to share scene to other project too", "you do n't need to worry about where to save script file , so create a new script be a no - brainer", "no need to organize and no need to re - organize be a big plus for build - in"], "issue_sim": [0.3922232389450073, 0.5169517993927002, 0.295106440782547, 0.06026153266429901, 0.36639678478240967, 0.09540702402591705], "prob": [0.027849828824400902, 0.8284745216369629, 0.015367950312793255, 4.717283809441142e-05, 0.05265006795525551, 0.004489006008952856]}, {"target": [0], "doc": ["if only disable filtering do n't make thing bad"], "issue_sim": [0.14551189541816711], "prob": [0.9988549947738647]}, {"target": [1], "doc": ["honestly , i be out of option", "with filtering i have artifact , without filter sprite become complete shit during movement , zoom out make art look like shit and blow up pixel art to 1.5x size make it look bad .", "on top of all this game stutter despite > <number> fps which look more and more like some fuckup in the engine", "joke aside , i be really bummed because of godot right now"], "issue_sim": [-0.10559266805648804, 0.39218249917030334, 0.18259865045547485, -0.006278900429606438], "prob": [0.0015198036562651396, 0.9410331845283508, 0.008909571915864944, 0.002489162143319845]}, {"target": [1], "doc": ["at this point i do n't think this be godot fault anymore", "after vsync be. implement it do no long depend on godot ..", "on mar <number> , <number> 7:17 pm , \" arcfutahito \" < notifications@github", "com > write :"], "issue_sim": [0.03593337535858154, 0.24037696421146393, -0.00272297952324152, -0.0577186681330204], "prob": [0.10473034530878067, 0.8633555173873901, 0.23880121111869812, 0.00680223572999239]}, {"target": [0], "doc": ["vsync turn off or limit fps will always result in stutter", "leave vsync on and do not limit fps", "on mon , mar <number> , <number> at 7:34 pm , arcfutahito < notifications@github"], "issue_sim": [0.18659912049770355, 0.16798734664916992, 0.02768702805042267], "prob": [0.14709490537643433, 0.06480337679386139, 0.3737422227859497]}, {"target": [1], "doc": ["although vsync should take care of that so you do n't use all your fpu", "honestly godot do nothing special on it , i suggest you pay attention in. your other game , as general when a lot of thing go on on screen its. difficult to notice stuttering but it be still there", "on mon , mar <number> , <number> at 8:19 pm , juan linietsky < reduzio@gmail", "com > write :"], "issue_sim": [0.1908324658870697, 0.20812144875526428, 0.02909332886338234, -0.0577186681330204], "prob": [0.0313587449491024, 0.9204689264297485, 0.0045715803280472755, 0.0001863956858869642]}, {"target": [0], "doc": ["in case the <tag> path be occupy , a unique name should be create to avoid overwrite a potential other addon with the same name .", "it could easily be do by append a number to the name just like do when duplicate node"], "issue_sim": [0.20163044333457947, 0.17234721779823303], "prob": [0.8706148266792297, 0.018436292186379433]}, {"target": [0], "doc": ["i disagree , if we do this the path inside scene would be totally break ."], "issue_sim": [0.06217235326766968], "prob": [0.9999748468399048]}, {"target": [3], "doc": ["i do n't see why they should be more broken than with <tag>", "do you expect people to pack their scene in the root folder of their repo , but code they to expect path start with <tag>", "either we fix path ourselves on install , or we do n't promise that absolute path would work", "i be still not sure what would have hardcode path though , as we exclude template already ."], "issue_sim": [-0.038362085819244385, 0.4158982038497925, 0.32856136560440063, 0.2624608874320984], "prob": [0.011874462477862835, 0.4254661798477173, 0.009542725048959255, 0.8119974136352539]}, {"target": [0], "doc": ["which also mean that people will choose not to install the readme.md or license file to avoid overwrite their own / that of another plugin , and thus miss potentially important info in the readme .", "md , and potentially violate the license if it be one that require to distribute the full license text and it be not hardcode in the plugin 's file"], "issue_sim": [0.32315778732299805, 0.3536306619644165], "prob": [0.7948738932609558, 0.4873732626438141]}, {"target": [1], "doc": ["as mention initially , i think there be no well solution than to unzip each asset in its own folder , and let the user manage their filesystem themselves", "there be nothing i dislike more than self - extract archive that pollute my project tree .", "i 'd be for instal all asset to <tag> and let people do what they want with the content they download there", "some might want to keep it there for traceability , other might prefer to move the file individually to wherever they would be most sensible in their project"], "issue_sim": [0.3865226209163666, 0.2457638680934906, 0.19486720860004425, 0.1176672950387001], "prob": [0.4448293149471283, 0.09644012153148651, 0.10576114058494568, 0.15738122165203094]}, {"target": [0], "doc": ["i 'd be for let the user choose his own target folder , with probably some per - asset default ."], "issue_sim": [0.30589014291763306], "prob": [0.9999823570251465]}, {"target": [1], "doc": ["if what you be try to accomplish be  ,", "you 'll have a hard time in any engine .", "you already can do what you want use  and some programming , albeit it be not easy", "separate the body in areas", "make a <tag> variable in thing use to attack  , and when it enter an area just get it use <tag>", "to apply realistic force , i be not so sure since i be not use to 3d", "but i would guess you 'd have to use different rigidbodies for each member and pin they to the torso"], "issue_sim": [0.1317085325717926, 0.11375582963228226, 0.09575017541646957, 0.12277428060770035, 0.3432561159133911, 0.3193066120147705, 0.161217600107193], "prob": [0.00673300214111805, 0.9196789860725403, 0.006246498785912991, 0.0006029133801348507, 0.08863098919391632, 0.009906262159347534, 0.023937467485666275]}, {"target": [3], "doc": ["@mateusak that video look super cool", "but in fact , there be multiple much simple system in unity that could provide similar effect also , like :", "and it be quite straight forward to creat hitboxe / hurtboxe for a skeleton in unity , since each collider could detect collision , and unity auto create a ragdoll like godot do with <tag> :", "as i write in the issue description , godot can make a ragdoll in a similar manner as in unity , but the result rig can not be use in the same manner since in godot , physical bone or collision shape can not detect collision nor be able to be physically act upon in a direct manner .", "as to your suggestion , i guess attach either <tag> or <tag> to each major bone would work  for the hit detection part", "but i doubt hit such a node would cause its parent bone  to move though"], "issue_sim": [0.11709462106227875, 0.29309314489364624, 0.4736912250518799, 0.5948525667190552, 0.4012945294380188, 0.3399125337600708], "prob": [5.1964128942927346e-05, 0.05245106667280197, 0.41616445779800415, 0.14776137471199036, 0.002712046029046178, 0.0008355710888281465]}, {"target": [0], "doc": ["the main problem be , in order for the a character rig to react to physical impact in such a manner , it need to move only the affected part of its joint .", "say , you attach a rigid body node to either a physical bone or bone attachement of your rig 's head", "but i doubt if the character would jerk its head when you call <tag> on that rigidbody , because the rigidbody be a child of the head bone , not vice versa", "and also , have to attach a rigid body or area node for each major bone would be problematic itself , as it be inconvenient and would make the rig setup still more cluttered than as it be now  , and most importantly , it could be bad for performance too since we be essentially double the number of collider"], "issue_sim": [0.3877248167991638, 0.3056986331939697, 0.3386242389678955, 0.32345515489578247], "prob": [0.6808145046234131, 0.0022067048121243715, 0.16141904890537262, 0.21176885068416595]}, {"target": [0], "doc": ["by the way , i search up a couple of tutorial video on unity 's ragdoll wizard to confirm what i remember , and it seem that they indeed attach collider and rigidbody component for each bone which make it easy to detect a collision  and apply arbitrary force on that specfic part of the rig :"], "issue_sim": [0.5133326053619385], "prob": [0.9999746084213257]}, {"target": [3], "doc": ["@mysticfall the <tag> signal return the node that collide", "from there you can access anything you want , give you be creative enough", "it seem you be worried about clutter and performance", "clutter can be reduce if you make the area a child of your already exist node .", "about performance , do n't worry , you need around <number> areas to divide the human body ; that be not nearly enough to cause performance issue , even if you have more than one player"], "issue_sim": [0.3066761791706085, 0.06351763755083084, -0.027234412729740143, 0.21592509746551514, 0.16865980625152588], "prob": [1.1075485417677555e-05, 0.03115469217300415, 0.0003903516917489469, 0.7522999048233032, 0.4807724356651306]}, {"target": [2], "doc": ["@mysticfall i apologize for not be clear , and i realize i may have be rude", "what i mean for non - issue be that godot have be use to make very complicated game , so there be a way already , that be why i tell you q&a would help you more", "now on to why what you propose ca n't be implement ; collisionshapes be a gimmick .", "it have no function by itself : it only specify an area that be use by a body", "the equivalent to a unity collisionshape in godot be an area", "that be why i say it wo n't cause a performance issue", "in unity do you worry on how many collisionshapes do you have", "and as i 've say before , you do n't need an area for each of these", "a human body can be divide in <number> part ; <number> upper arm , <number> low arm , upper torso , low torso , <number> upper leg , <number> low leg , head"], "issue_sim": [-0.05515144765377045, 0.27841779589653015, 0.10778959840536118, 0.23646309971809387, 0.2502135932445526, -0.012331651523709297, 0.2003902941942215, 0.04260297492146492, 0.15015676617622375], "prob": [0.00734754791483283, 0.40885433554649353, 0.22019720077514648, 0.005407672841101885, 0.0024460076820105314, 0.0033465183805674314, 0.004980284254997969, 0.017308028414845467, 0.300629585981369]}, {"target": [0], "doc": ["i can see how i can attach an additional area node to each major physical bone , and use it to detect collision .", "but let 's assume we have a two character fist fighting in a game , each have such an area  node on its fist and head", "so , let 's say the character a 's fist have ' enter ' an area node attach to the character b 's head bone", "i will certainly receive a <tag> signal from the event , but how would you use that information", "as i say above , <tag> only report the node instance that have enter its bind", "so how _ exactly _ you would know the exact global position where the hit have occur , and what velocity the character a 's fist have , and also with much force", "you already say the node would somehow provide all such information with its property , but even i be not entirely a newcomer to godot myself , i could n't find any way to do that", "so if you know how to obtain such information , please tell i with a specific instruction", "and let 's say somehow you manage to extract that information from the impact , then what now", "i have no idea how to convey that force to the character b 's head bone , so that it would jerk backward realistically , since it be not even a rigid body so you ca n't use <tag>", "you may consider use the ragdoll system , but the hit have already happen in the past so start physics simulation now would n't do any good either", "and as you may know , it be not usually practical to keep an active ragdoll when the character be move around in a kinematic mode", "if you believe <tag> node attach to a physical bone  could be move that way without have to resort to a premade hit animation , again i 'd be grateful if you could give i a specific instruction , rather than a vague statement that it would somehow work", ": by the way , an equivalent of godot 's <tag> in unity be call <tag>", "and while i be not much knowledgeable about make 3d game yet , i think i 've hear enough time from various different source how have too many , dynamic , or overly complex collider / collision shape would affect the performance negatively", "if they be really overhead free as you seem to believe , people would n't even bother to use primitive collision shape in most case , as they can simply generate a trimesh or convex collision shape out of the actual mesh itself , which would provide the most accurate contact information"], "issue_sim": [0.45028722286224365, 0.3468828797340393, 0.32210415601730347, 0.18919238448143005, 0.2666960060596466, 0.45850446820259094, 0.3503423035144806, 0.08310919255018234, 0.22874270379543304, 0.41739267110824585, 0.4921020567417145, 0.38261356949806213, 0.5146119594573975, 0.3586360216140747, 0.4199860095977783, 0.3632088303565979], "prob": [0.7867516279220581, 0.1279561072587967, 0.012031079269945621, 0.000478199974168092, 7.708212797297165e-05, 0.12184154242277145, 0.11828604340553284, 2.2435573555412702e-05, 2.984964885399677e-05, 0.013209719210863113, 0.0013754020910710096, 0.000799239962361753, 0.03502803295850754, 0.00020665724878199399, 0.1562052220106125, 0.07939167320728302]}, {"target": [2], "doc": ["@andreacatania i still do n't get how my problem would be easily solve by use an <tag> node , and that be what @mateusak have be say in this thread mostly", "anyway , i think i already know how to construct a ragdoll which be more or less the same in both godot and unity", "my main point , however , be in unity the ragdoll creation process make each bone an actual rigid body with a collider , so <number> ) it can easily detect a collision on itself and <number> ) we can easily apply an arbitrary impulse on it , and both of those thing be provide out - of - the box .", "with godot 's current <tag> implementation , however , there be no easy way for a <tag> to detect a collision  , and it also lack an api to apply an arbitrary force to it , like <tag>", "i do n't see how such limitation could be easily solve by use any exist node type godot provide , include <tag>"], "issue_sim": [0.2635393738746643, 0.4129970073699951, 0.5765691995620728, 0.45167630910873413, 0.31852859258651733], "prob": [0.03263184428215027, 0.1903625726699829, 0.3582685589790344, 0.24645915627479553, 0.09311291575431824]}, {"target": [0], "doc": ["be n't <tag> mean to be a short version ?"], "issue_sim": [0.03568798303604126], "prob": [0.9999983310699463]}, {"target": [1], "doc": ["who need a short version of a deprecate method", "clear be well than short imo  .", "i could rename <tag> to just <tag> though"], "issue_sim": [-0.019528884440660477, -0.0546136349439621, 0.03870696946978569], "prob": [0.7611402869224548, 0.23808196187019348, 0.14017707109451294]}, {"target": [1], "doc": ["that be what i be ask in op ;)", "there be only the documentation mention it be deprecate , but i do n't know what replace it and how to get rid of it without lose its functionality in the core gui node ."], "issue_sim": [-0.04231349751353264, -0.010541282594203949], "prob": [0.14408475160598755, 0.9706320762634277]}, {"target": [1], "doc": ["imo <tag> , definitely", "<tag> be too long .", "why not <tag> though"], "issue_sim": [0.034500300884246826, 0.005805695429444313, -0.026067271828651428], "prob": [0.12193029373884201, 0.6075004935264587, 0.11414570361375809]}, {"target": [0], "doc": ["alright , the api be now <tag> to translate the string , and <tag> instead of <tag> to enable it , for consistency ."], "issue_sim": [0.05492139980196953], "prob": [0.9999886751174927]}, {"target": [0], "doc": ["tr  make a lot more sense for in - game content , i vote for that too .", "on fri , aug <number> , <number> at 11:01 am , ignacio etcheverry <", "com > write :"], "issue_sim": [0.009544549509882927, 0.01620250567793846, 0.1558493673801422], "prob": [0.8731991648674011, 0.23181968927383423, 0.05642205849289894]}, {"target": [1], "doc": ["i think have two name for the same thing be a bad idea", "between that and having only <tag> i 'd choose only <tag>  <tag> localize  ` ) ."], "issue_sim": [-0.07333024591207504, 0.005566194653511047], "prob": [0.31471797823905945, 0.8879015445709229]}, {"target": [0], "doc": ["of course it be a bad idea , because it reduce code consistency and make people wonder if those name actually mean the same or do something different .", "add a short alternative for every method now , if it be a good idea", "if there be a \" short alternative \" make it the default and the only option", "in this specific case , it be not even an alternative to begin with"], "issue_sim": [-0.03414680063724518, -0.05375678464770317, 0.04107849299907684, 0.05582299828529358], "prob": [0.8237482309341431, 0.09389150887727737, 0.23094461858272552, 0.07042409479618073]}, {"target": [1], "doc": ["there be also a point about consistency aka coherency , which you omit", "there be no upside for have two name , but there be downside add on top of downside of each name , and this alone make it a bad idea .", "no , you make a general statement", "if you really think what you write , i wonder how you work with godot codebase which have close to no documentation", "i doubt that you thoroughly go through implementation of every method before use it", "most likely you look at the name , the signature , and exist use of a method and deduce what it do from that", "if it be not enough , you go through implementation", "this work well as long as api design be meaningful and method do n't have suprise side effect", "php be a good example of bad design - you will be surprised what \" simple \" procedure such as <tag> or <tag> do and you have to memorize documentation of every procedure to not shoot yourself in the foot", "i understand that , but for something use very often it be worth have a short name , because it save time reading and writing", "because it be use very often , people learn what it do from the first day , and they be not go to be surprised or confuse by what it mean"], "issue_sim": [-0.05340690165758133, -0.02260829508304596, 0.07395881414413452, -0.05096939206123352, 0.0025730375200510025, 0.01094304770231247, -0.044292207807302475, 0.08874049782752991, -0.024723388254642487, -0.038740187883377075, -0.048836398869752884], "prob": [0.011884668841958046, 0.14427827298641205, 0.00014367721450980753, 0.033549707382917404, 0.0005343598313629627, 0.01162007637321949, 0.00012047162454109639, 0.0029027429409325123, 0.07730459421873093, 0.008127803914248943, 0.06605102121829987]}, {"target": [0], "doc": ["mark it as a bug as we be therefore likely expose to all the security vulnerability announce since 1.0.1h .", "note that there be also a 1", "2 branch now , with 1", "2d be the late release", "maintain a build - in dependency such as openssl will always be a pain though if we try to ensure that security vulnerability be patch in a timely manner", "it could be of course that many of those vulnerability be not expose to godot 's api , but that be still bad press after the recent press exposure of thing like heartblee"], "issue_sim": [0.3301679491996765, 0.017062805593013763, 0.07241496443748474, 0.14802993834018707, 0.6332107186317444, 0.3121088743209839], "prob": [0.6231582760810852, 0.00022592728782910854, 0.0018484076717868447, 0.0005012612091377378, 0.30612102150917053, 0.3047173023223877]}, {"target": [0], "doc": ["argh update openssl and get it to compile on every single platform be. such a giant pain in the ass", "on fri , nov <number> , <number> at 8:35 am , r  mi verschelde notifications@github"], "issue_sim": [0.5403878092765808, 0.05939596891403198], "prob": [0.9163979887962341, 0.023809591308236122]}, {"target": [0], "doc": ["you can try to get change you do to the openssl source code merge upstream , that way you do n't have to repeat they every time you update .", "also note that the openssl 1", "1 line will cease to be support with security update on dec <number> this year , so good to switch to 1"], "issue_sim": [0.5506731271743774, 0.46901410818099976, 0.3503168821334839], "prob": [0.9748338460922241, 0.0005743580986745656, 0.19818691909313202]}, {"target": [0], "doc": ["please use git submodule against <url>. that will remove some of maintenance pain .", "on sat , mar <number> , <number> at 7:10 am , est31 notifications@github"], "issue_sim": [0.25891661643981934, -0.06620702147483826], "prob": [0.8259694576263428, 0.19413739442825317]}, {"target": [7], "doc": ["but again , i think dynamic solution would be prefer for distro", "static way should only be use for binary on site", "distro maintainer should have a way to build against their system openssl", "this allow forget about openssl update problem", "i 'd also be very happy have separate binary for distro", ", as fedora prefer to be very different from", "other in more than one aspect", "also i think that dlopen - base solution should be research as possible. way to overcome library issue .", "on sat , mar <number> , <number> at 7:29 am , sergey lapin slapinid@gmail"], "issue_sim": [0.24626609683036804, 0.06964810192584991, 0.5246705412864685, 0.5081430077552795, 0.3268016576766968, 0.16295325756072998, -0.08270712196826935, 0.2424875646829605, 0.021612288430333138], "prob": [0.24143049120903015, 0.0020602268632501364, 0.008509799838066101, 0.00014418268983718008, 0.0120608014985919, 0.0013206313597038388, 0.00019120499200653285, 0.7814755439758301, 0.00044447131222113967]}, {"target": [0], "doc": ["apparently all google play developer be get a notification that their godot game be vulnerable to logjam attack and cve-2015 - <number>", "while this be likely not true per se  , we need to fix this asap to silence those warning ."], "issue_sim": [0.2412361353635788, 0.15803301334381104], "prob": [0.6450321674346924, 0.3968501091003418]}, {"target": [2], "doc": ["cpu can do 3d too", "but cpu be much slow do realtime rendering stuff , 2d or 3d", "also godot rendering be mostly sprite base , so gpu be the choice ."], "issue_sim": [0.37990373373031616, 0.55582195520401, 0.582474946975708], "prob": [0.003828527173027396, 0.01514114998281002, 0.9855183362960815]}, {"target": [1], "doc": ["it be not really viable to do any kind of software render for game in <number>", "most polished game , even 2d one , will end up use fancy particle effect  and shader  and these be not doable with reasonable performance use only software rendering ."], "issue_sim": [0.34346845746040344, 0.5829427242279053], "prob": [0.45610520243644714, 0.6372114419937134]}, {"target": [4], "doc": ["@honix why sprite base rendering require gpu", "as far as i remember , there be no sprite object in opengl specification", "only texture with no memory control , with no room for optimization like in quake or second reality on pixel level", "cpu may be slow relatively , but if it be still <number> fps against <number> fps on gpu , then it do n't matter", "for sprite base rendering , the primary concern may be speed of system memory .", "but watch hd video on my pc tell i that it be not a problem", "@calinou do n't you think that require modern gpu for * * all * * 2d game , just because * * some * * 2d game want to use fancy 3d effect be somewhat wrong", "i would like to see those * feature * optional and have a choice to raise my system requirement only if i really need they", "this should be also true if i want my 2d game to use fancy effect that require opengl 4", "0 , new vulcan specification , or unique capability of google pixel or some hardware ai rendering module"], "issue_sim": [0.4631607234477997, 0.45115095376968384, 0.40935635566711426, 0.42789939045906067, 0.3788525462150574, 0.10822486877441406, 0.6276732683181763, 0.12017597258090973, 0.5254433155059814, 0.34611427783966064], "prob": [1.0723182640504092e-05, 0.00042069671326316893, 0.025427909567952156, 0.0011422905372455716, 0.5137884616851807, 0.00017196951375808567, 6.754476999049075e-06, 5.003948535886593e-05, 7.22464537830092e-05, 0.0030985348857939243]}, {"target": [0], "doc": ["there be zero benefit of use cpu to render 2d , and zero hardware without. gpu support .", "this be never go to happen", "on mon , may <number> , <number> at 8:20 am , anatoly techtonik < notifications@github"], "issue_sim": [0.5509766340255737, -0.04314177855849266, -0.021446239203214645], "prob": [0.9945231676101685, 0.0005736316670663655, 0.07503580302000046]}, {"target": [3], "doc": ["this issue be deep that its title , but i be not go to become over - defensive", "yes , maybe the title be misleading", "i do n't mean that game engine will run fine without graphic card at all", "i mean that if game engine architecture give this option to developer , it be more flexible to adapt to any graphic card and platform peculiarity , and not just the rigid opengl 3.0 support .", "i be just think that there be engine like of klei entertainment that give a good performance in 2d where other engine be equally sluggish in 2d and 3d", "just a random link about sdk that promise to get to assembly optimization as need <url>", "back in the day people tune their game to specific graphic card , and there be no internet to sync the effort , and game be fast for that hardware", "internet should have be add something , like distribute competence to implement and test specific feature / optimization on specific graphic card , but i do n't see it happen", "game engine attract a lot of developer , much more than project like <url> that try to close this issue for opengl", "i just wish there could be a great framework / constructor for such effort in 2d space"], "issue_sim": [-0.05695547163486481, -0.019139068201184273, 0.4923352897167206, 0.6095767021179199, 0.6052303910255432, 0.3369256854057312, 0.32140251994132996, 0.3954686224460602, 0.563364565372467, 0.4235200583934784], "prob": [0.01861284114420414, 0.002687945496290922, 0.008943636901676655, 0.6035946607589722, 0.015340864658355713, 0.0008538291440345347, 0.023050477728247643, 0.046237342059612274, 0.009204057976603508, 0.0010059269843623042]}, {"target": [0], "doc": ["there be 2d abstraction and you can make a visualserver that do 2d in the. cpu , but it 'll probably be very difficult to mix that with accelerate 3d.", "on <number> may <number> at 14:13 , ferenc arn < notifications@github", "com > write :"], "issue_sim": [0.6798135638237, -0.06310080736875534, -0.042158834636211395], "prob": [0.9972944855690002, 0.0035657749976962805, 0.004301133565604687]}, {"target": [1], "doc": ["if you be serious :", "because this turn people off and may mean i ca n't use godot for teaching , at school , or at work , because this be see as unprofessional , childish and thus frown upon ."], "issue_sim": [0.07023924589157104, 0.2567960321903229], "prob": [0.007317393086850643, 0.9973132014274597]}, {"target": [0], "doc": ["the point be that godot want to be a professional game engine , use in serious project by company , and see to be as credible as any other engine .", "neither unity nor ue4 will throw word like \" shit \" and \" wtf \" at you", "wo n't even get into \" retarded \""], "issue_sim": [0.1671474426984787, 0.2098158895969391, 0.0974845439195633], "prob": [0.8758712410926819, 0.15518617630004883, 0.020833324640989304]}, {"target": [0], "doc": ["at most i will agree to remove the vulgar language  in engine message , humor will not hurt anyone and do not make something \" unprofessional \" if \" professionalism \" even mean something ."], "issue_sim": [0.4078592360019684], "prob": [0.9999533891677856]}, {"target": [6], "doc": ["there be source code and there be user - face message", "i <number> % agree the latter should avoid vulgarity , humor , or for that matter , ambiguity", "what do \" ok :( \" even mean", "source code be another thing entirely", "have a look at the linux source code sometime - this be what programmer do , even professional one", "it be invisible to the userbase , and hardly worth raise a fuss over", "i also agree , there be no excuse for use derogatory language anywhere in the project .", "the two use of \" retarded \" be easily remove with a pr"], "issue_sim": [0.22918951511383057, 0.3292005658149719, -0.026405327022075653, -0.03862345218658447, 0.1605599820613861, 0.047489166259765625, 0.23398883640766144, 0.16706323623657227], "prob": [0.06961771100759506, 0.16958218812942505, 0.01054266095161438, 0.012230332009494305, 0.5249442458152771, 0.042665887624025345, 0.211589053273201, 0.02964950166642666]}, {"target": [1], "doc": ["@mhilbrunner well to have healthy discussion it would be the good to see first what we be talk about :) i be use editor a lot and i be probably just get use to those thing since i ca n't really recall if they be in the ui or not", "also your ' for education use ' argument   be very convincing in my eye"], "issue_sim": [0.43842634558677673, 0.02374185621738434], "prob": [0.6574075818061829, 0.2500457167625427]}, {"target": [0], "doc": ["perhaps an interesting tidbit : last i try the internal node of graphedit show up in the scene tree , and can be modify .", "but this also totally break graphedit"], "issue_sim": [0.044261906296014786, 0.08435423672199249], "prob": [0.9619399309158325, 0.07439184933900833]}, {"target": [2], "doc": ["i play around with this after look at the issue link in the op", "as mention in the op , they be not suppose to be meddle with", "they be * * vital * * for their parent node type  to _ function _ .", "no , but i think those be specific case that need to be deal with", "a developer can simply create a node and use it as a container to put their node in", "then <tag> the child in there", "if they really want to loop through the child and remove they", "the developer can also call <tag> on the parent node , and it will not cause the crash", "the developer can also use", "also , some gui nodes it be quite obvious they have internal node", "maybe an option to toggle the internal node in the editor node list could help", "the real solution though   imo , be for godot not to silently crash when an internal node be free'd", "not sure how to fix that , since they be not suppose to be free'd", "other people might have a well solution , though"], "issue_sim": [0.021857544779777527, 0.014287954196333885, -0.03513781726360321, 0.05561249703168869, -0.0321473628282547, 0.054894253611564636, -0.0569879524409771, 0.05896477401256561, 0.019082751125097275, -0.08711490035057068, -0.06505108624696732, 0.031924664974212646, 0.028270874172449112, 0.023229215294122696], "prob": [0.01657821610569954, 0.03690464049577713, 0.28665947914123535, 0.026101114228367805, 0.006459514610469341, 0.0013768099015578628, 0.0020978187676519156, 0.00909087061882019, 0.0030693395528942347, 0.00625258544459939, 0.018088892102241516, 0.03229043632745743, 0.028132108971476555, 0.002788115292787552]}, {"target": [1], "doc": ["i be , personally , against this", "internal node be still node and their access should be the same as any other node .", "you can already distinguish internal node from other nothe because those internal node ' <tag> property will be <tag>", "i think this be more of a documentation issue", "if anything , the only modification i 'd do be to change <tag> to <tag> and only return node with an <tag> property if <tag> be <tag>"], "issue_sim": [0.1307419091463089, -0.06150278449058533, 0.014265473932027817, 0.0921887755393982, 0.055127181112766266], "prob": [0.0014376825420185924, 0.9548000693321228, 0.16917280852794647, 1.155240443040384e-05, 0.40203315019607544]}, {"target": [2], "doc": ["actually , it could be <tag> by default and <tag> in binding", "that mean null check everywhere the crash might happen", "it would negatively impact performance  and fail node be useless anyways .", "the idea of this pr be to make some node less obvious to access and more importantly - impossible to access accidentally , which only lead to confusion and unexpected behavior"], "issue_sim": [0.08664333820343018, -0.013464830815792084, 0.10485472530126572, 0.006069871596992016], "prob": [0.23402895033359528, 0.007958713918924332, 0.5827024579048157, 0.5515114665031433]}, {"target": [0], "doc": ["i just push a commit that add <tag> parameter to  all method that use node index .", "in code it be <tag> by default and in binding it be <tag>", "here be a tiny project for comparison of how <tag> etc", "behave with colorpicker :", "try it with 3", "1 and this pr", "what be leave to do be :", "- add internal to other control that should use they"], "issue_sim": [0.02964847907423973, 0.011429116129875183, -0.018289845436811447, -0.03320852667093277, 0.08012226223945618, 0.05925724655389786, -0.07370321452617645, -0.05111207813024521], "prob": [0.908848226070404, 0.3413289189338684, 0.03307526931166649, 0.008082096464931965, 0.006347266491502523, 0.016376188024878502, 0.0527762807905674, 0.09355898201465607]}, {"target": [1], "doc": ["as thing work right now , if you extend the animation beyond the last keyframe , then you will get a smooth transition back to the first one", "but i can see your point , it would be nice to have an option for the animation to backtrack along every key to the beginning when it reach the end  ."], "issue_sim": [0.6083898544311523, 0.4202744960784912], "prob": [0.21817314624786377, 0.6880724430084229]}, {"target": [0], "doc": ["even if the keyframe be at the length of the animation , thing get weird because it set the frame back to <number> instead of whatever the keyframe be .", "it might not be noticeable in all case , but i definitely notice it in some", "@okamstudio i 'd agree with an extra interpolation mode that do n't blend beginning to end", "would appreciate if it be the default as well , since it be the normal behavior"], "issue_sim": [0.7076075673103333, 0.08968352526426315, 0.2637704014778137, 0.23385906219482422], "prob": [0.9721588492393494, 0.07302690297365189, 0.0001220760605065152, 0.006741231307387352]}, {"target": [3], "doc": ["if there be a frame keyframe at the very end of the animation track , the", "expect behavior be that it wo n't interpolate when it loop , so it should", "disable automatically in those case", "however , i 'd prefer it as an option. anyhow , because i can see other use case where interpolation be only. desire inside the iteration and not between loop .", "on apr <number> , <number> 12:17 pm , \" christian dannie storgaard \" <", "com > write :"], "issue_sim": [0.5611602067947388, 0.3931852877140045, 0.14963838458061218, 0.41340795159339905, 1.5492551028728485e-05, -0.05017407238483429], "prob": [0.17642858624458313, 0.14260542392730713, 0.0009561877814121544, 0.49249571561813354, 0.0149114103987813, 0.006744151469320059]}, {"target": [2], "doc": ["what be the status on this issue", "i actually never notice it ,", "i guess i 'll have to check my animation to see if they be not actually behave as i intend they to  ."], "issue_sim": [0.04756587743759155, 0.10006572306156158, 0.2608507573604584], "prob": [0.06519697606563568, 0.00888682808727026, 0.9482930898666382]}, {"target": [0], "doc": ["this only do one step of newton , iirc it be n't too accurate  .", "it might be preferable in some circumstance to leave the default sqrt behavior , or at least run a few iteration of <tag>", "_ disclaimer : i do scientific computation , maybe this be more than sufficient in game"], "issue_sim": [0.06824386119842529, 0.020191097632050514, 0.0480734258890152], "prob": [0.4539530575275421, 0.7491875290870667, 0.020889028906822205]}, {"target": [0], "doc": ["it be use successfully in commercial game since quake <number>  ."], "issue_sim": [0.021118521690368652], "prob": [0.9999990463256836]}, {"target": [1], "doc": ["probably not a good option , but just in the interest of rounded discussion , worth mention there be also inverse square root in simd instruction set , which afaik be fast and more accurate :", "however there be lot of downside too - it require all the usual boiler plate for detect what be support and select a code path  .", "and it only seem to get significantly fast when you be do a bunch of these at a time", "so it probably do n't make a lot of sense unless godot have a general framework for use simd", "anyway question i 'd be wonder : : think :", "- be there any bit of code where profiling have indicate this as a bottleneck", "- be there any implication of change the accuracy in other bit of code", "if this be a problem"], "issue_sim": [-0.01702318899333477, 0.019345363602042198, 0.02212706208229065, -0.07318733632564545, 0.03971788287162781, -0.053666383028030396, 0.10600143671035767, 0.21895428001880646], "prob": [0.11283361166715622, 0.33761557936668396, 0.01744883507490158, 0.03782619163393974, 0.018100889399647713, 0.010577520355582237, 0.0026365509256720543, 0.00574107188731432]}, {"target": [0], "doc": ["@lawnjelly it really depend on the game you be make", "my profile datum show that this be use a lot in cpuparticles2d for example and that be how i get to it .", "if you do a point and click type of game , it probably wo n't help you much"], "issue_sim": [-0.029773611575365067, -0.09397673606872559, -0.04280506446957588], "prob": [0.000979693024419248, 0.9922581315040588, 0.43169575929641724]}, {"target": [1], "doc": ["yeah i be oppose to inaccuracy in a _ basic _ function like <tag>", "the function offer by godot should be accurate up to machine precision by default , and you should _ choose _ to trade accuracy for speed _ only if _ you need it .", "the good option be to expose <tag> and other such \" hack , \" but let the user or specific piece of code use it when need , i", ", replace call to <tag> with <tag> where need instead of modify <tag> itself"], "issue_sim": [0.08703114092350006, 0.10181548446416855, 0.04752581939101219, 0.017923515290021896], "prob": [0.12087913602590561, 0.8229899406433105, 0.23894871771335602, 0.07415947318077087]}, {"target": [1], "doc": ["@calinou in game you need speed by default to keep those <number> fps run", "i 've never hear a complaint about normalize vector be 0.1 % off but lot about slow game .", "if you ever need > 99", "9 % accuracy you can normalize your vector use the math sqrt function"], "issue_sim": [-0.005972203798592091, 0.03013061359524727, -0.04148055985569954, 0.1072450801730156], "prob": [0.030879778787493706, 0.9798720479011536, 0.02078939601778984, 0.1360798329114914]}, {"target": [1], "doc": ["i be specifically test its use with normalize in vector3", "although the fastsqrt may be fast than sqrt , that do n't mean it will be the fast approach in the context of the whole function  .", "in the context of the vector3::normalize , the crucial thing be that the cpu can do everything at once", "i test this myself yesterday in another context", "the difference between do this operation :", "consider you want to divide a vector3 by a", "i be expect approach  to be fast", "in fact , when profile , although the multiply be marginally quick than the divide , the extra divide at the beginning translate to an extra op , whereas the rest can be do with simd", "so the actual result i find be that approach  be a similar speed to  in the case of non - inline , and in the case of inline ,  be many time fast than", "this be the opposite to what i be expect", "a similar thing may be happen in the vector3::normalize", "not because of the fast sqrt itself , but because it end up split into more operation"], "issue_sim": [0.016789548099040985, 0.03642783313989639, -0.050331853330135345, 0.11591102927923203, 0.0648689791560173, -0.02701745554804802, 0.06748349964618683, 0.010348500683903694, 0.07061713933944702, 0.05890066176652908, -0.11246083676815033, 0.0451311357319355], "prob": [0.007795544341206551, 0.1737852692604065, 0.3096688687801361, 0.00254080630838871, 0.007847296074032784, 0.015119476243853569, 0.0010276397224515676, 0.7080621719360352, 0.5057342052459717, 0.0028193865437060595, 0.019766900688409805, 0.02248324826359749]}, {"target": [1], "doc": ["i do not think this be a good idea", "have infinite view be cumbersome for most use case .", "regard each point :", "that be not true , most of the time the system account the node size , like with the tilemap node for example", "if this do not work then it be a bug", "this almost never happen , it be a rare use case that can be workarounde by enter the value in the inspector", "well it avoid you to get lose into a void of empty space", "zoom in and out might help , but on laptop without a mouse this be a little bit cumbersome , as set the zoom be less precise than with a mouse"], "issue_sim": [0.006596516817808151, 0.35639965534210205, 0.039723969995975494, 0.44228172302246094, 0.07476811856031418, 0.2123127579689026, 0.03966791555285454, 0.13880190253257751], "prob": [0.005817566066980362, 0.020798759534955025, 0.001648538513109088, 0.08529979735612869, 0.011251100338995457, 0.10797261446714401, 0.0006779497489333153, 0.4020111560821533]}, {"target": [0], "doc": ["that be say it might be provide as an option"], "issue_sim": [0.024143636226654053], "prob": [0.9999703168869019]}, {"target": [0], "doc": ["i try it early today , it do not account for collision shape ; try it with a sprite a few month back , and it do not account for that either .", "sure , it could be fix , but it seem like work for something that be not very useful ; assume it do account for these thing , i still ca n't move the view far out to place node in a natural manner", "it happen to i a lot when build a large level", "while true i can just enter value , it defeat the purpose of a visual editor", "i do n't think your average user be randomly move their view to a point where they might get lose , as their attention be focus on where the action be , and the action be n't empty space", "if this logic hold , the 3d view should also receive limitation on where you can look and where you can move the camera base on where node be , as you could also get lose there -- but i do n't think anyone have this issue , at least not which be easily fix by the above mention feature , such as double - click a node to focus the view", "it be go to be cumbersome not have a mouse any which way it happen", "further criticism : this feature have no setting to control it , from what i can tell", "i ca n't turn it off", "i ca n't set how far the limit will extend from the furth node", "also : it favor the bottom of the origin , rather than the center , so even if you do zoom out , you can see plenty below , but almost none above", "there should most certainly be a way to control this"], "issue_sim": [0.11026029288768768, 0.35448575019836426, 0.1643347144126892, 0.2026890367269516, 0.2500026822090149, 0.6742441654205322, 0.08096648752689362, 0.18050216138362885, 0.013172261416912079, 0.45375293493270874, 0.23858031630516052, 0.14190462231636047], "prob": [0.24879348278045654, 0.40556350350379944, 0.0016700560227036476, 0.038964591920375824, 0.2672320008277893, 0.10320521146059036, 0.0015965582570061088, 0.0034623038955032825, 0.00038346261135302484, 0.002564390655606985, 0.06492841988801956, 0.001205478678457439]}, {"target": [0], "doc": ["i also find this annoying , especially in the -x and -y as note by mateusak .", "i tend to put a few dummy sprite on far reach just to free up the navigation space", "have n't notice this kind of restrictive behaviour in other 2d application"], "issue_sim": [0.12020862102508545, 0.329365611076355, 0.1248588040471077], "prob": [0.754824161529541, 0.1413479745388031, 0.033532269299030304]}, {"target": [2], "doc": ["maybe we could increase the limit , and center the view when you unzoom , so that the -x and -y be more accessible", "but i see definitely no point in make those infinite", "there be no use case in get lose at  coordinate when your game be at  .", "but as i say , we could make it an option for those who find it useful"], "issue_sim": [0.44675546884536743, 0.17310470342636108, 0.20250475406646729, 0.12306469678878784], "prob": [0.2597319781780243, 0.004193306900560856, 0.9514279365539551, 0.0011663628974929452]}, {"target": [1], "doc": ["@groud this sound good", "an option for the limit be unlock would be very useful ."], "issue_sim": [-0.044879086315631866, 0.23542332649230957], "prob": [0.08568279445171356, 0.9666194915771484]}, {"target": [2], "doc": ["i do n't think compare a 2d game engine layout to a 2d image editor be at all a good comparison", "when create a 2d level you generally do n't know how large your game area will be  , and the size of the boundary will expand as you progressively add to   the level", "whereas in an image editor you know your canvas or document size from the outset and there would be little reason to add to the outside of these initial boundary .", "a well comparison be to the other popular 2d game engine", "gms and unity both allow you to freely pan without restriction", "construct have the side scroll bar , but these dynamically resize if i remember correctly", "i also use a trackpad some of the time , and just use either the hotkey or the + - arrow to zoom in and out with no issue", "also the option to frame up the select object be right there in the view menu , so the user do n't have to hit the f key", "the good solution would be to have the limit unlock as a user define option as you mention in an early comment"], "issue_sim": [0.13414070010185242, 0.3307352662086487, 0.2973717451095581, 0.06498605012893677, 0.0722474604845047, 0.34536898136138916, 0.1592145562171936, 0.28173381090164185, 0.31539490818977356], "prob": [0.004273117985576391, 0.35325196385383606, 0.7527317404747009, 0.00010779708827612922, 0.0011699487222358584, 0.002365445252507925, 0.04236621782183647, 0.02698463201522827, 0.012869269587099552]}, {"target": [0], "doc": ["look good to i , but i think \" close tab above \" and \" close tab below \" would be easy to understand ."], "issue_sim": [-0.01943584904074669], "prob": [0.9999966621398926]}, {"target": [1], "doc": ["honestly that be too much", "there be little use case for that , and it bloat a menu already overcrowded ."], "issue_sim": [0.017501819878816605, -0.04864049702882767], "prob": [0.005523755680769682, 0.9999023675918579]}, {"target": [0], "doc": ["i like this option , i often open large amount of script and have hard time to close some of they quickly"], "issue_sim": [0.011838860809803009], "prob": [0.9999804496765137]}, {"target": [3], "doc": ["well , you select they all and close they all at the same time", "a common workflow should be select the first in the list , shift+click on the last and close all select", "these \" close above \" or \" close below \" be too specific", "there be already <number> option to close script , add more be bloat to i ."], "issue_sim": [-0.007293068803846836, -0.028759261593222618, 0.018142586573958397, -0.03302915021777153], "prob": [0.0309648048132658, 0.7034802436828613, 0.0061413985677063465, 0.5809667706489563]}, {"target": [1], "doc": ["that probably need to be implement then", "multiple selection on script to close they be a far more common functionality than add an ad - hoc \" close above / below \" option ."], "issue_sim": [-0.007726382929831743, -0.0184450913220644], "prob": [0.020863451063632965, 0.9993605017662048]}, {"target": [0], "doc": ["firefox have a similar feature when right - click tab , but it only let you close tab to the right  ."], "issue_sim": [0.06906695663928986], "prob": [0.9999980926513672]}, {"target": [0], "doc": ["look like current tabcontainer which use for the script list be not allow user to multi - select item , this feature should be add , or it should be change to itemlist", "@calinou all browser allow it today , in vivaldi browser its possible in two direction"], "issue_sim": [-0.05824153497815132, 0.0034461989998817444], "prob": [0.9825282692909241, 0.014623218216001987]}, {"target": [1], "doc": ["i also think it be way too specific and rarely necessary to implement as option", "i already find that we have too many confuse close option , i would n't add two more .", "otherwise the next option will be \" close every other tab \" and \" close fibonacci tab \" ;)", "implement multi - select of tab to close they with ctrl+w or a right click > close would be well"], "issue_sim": [0.05130219832062721, 0.04280634969472885, 0.050986431539058685, -0.06766575574874878], "prob": [0.08169142156839371, 0.6996647119522095, 0.12183019518852234, 0.10960351675748825]}, {"target": [1], "doc": ["i guess it come from \" close tab to right \" on chrome or firefox", "it be really useful for a browser because it seem to clear unnecessary tab while continue to search .", "i be not sure for edit source code", "maybe it help to close tab under a certain path , like \" <url> / unknown/"], "issue_sim": [0.028315730392932892, -0.007418990135192871, 0.10083683580160141, 0.017061438411474228], "prob": [0.15028159320354462, 0.8412123918533325, 0.028711587190628052, 0.14071564376354218]}, {"target": [0], "doc": ["either this or it should be make clear that there be magic happen when a game run"], "issue_sim": [0.19718393683433533], "prob": [0.9988811612129211]}, {"target": [0], "doc": ["or maybe it should be make into <tag> , and <tag> should remove all group start with <tag>"], "issue_sim": [0.4054662883281708], "prob": [0.9989303946495056]}, {"target": [0], "doc": ["as long as the developer get only the group that he himself put in , do n't really matter how the internal of <tag> work .", "it be a good idea to have <tag> remove everything start with <tag> or maybe even <tag> in case someone decide for whatever reason to use a group name start with <tag>", "do this would n't change much in term of the internal of gd"], "issue_sim": [0.3668988347053528, 0.34644949436187744, 0.10219357907772064], "prob": [0.6388804316520691, 0.2125847041606903, 0.027851607650518417]}, {"target": [0], "doc": ["i be against complicate what s work fine , if we want something untouched by engine internal we could add an extra system to scene tree with functionality identical to group but call it something like tag instead ."], "issue_sim": [0.4898475110530853], "prob": [0.9998555183410645]}, {"target": [2], "doc": ["why would anyone want to duplicate exist functionality", "that do n't make any sense", "and in any case the only \" touch of the engine internal \" would be impose a standardized naming convention , which there be n't at the moment & just strip the internal group so they be not accessible from the editor .", "i do n't know about you , but this make sense to i"], "issue_sim": [0.14026787877082825, 0.08324339240789413, 0.30524545907974243, 0.009215579368174076], "prob": [0.012628039345145226, 0.0350697785615921, 0.944355309009552, 0.023189270868897438]}, {"target": [0], "doc": ["on the other hand idle_process group should be unnecessary to begin with"], "issue_sim": [0.19961319863796234], "prob": [0.9998390674591064]}, {"target": [0], "doc": ["one way to solve this could be e.g. change the editor logic so it always have an additional , hidden root node .", "or just adapt your node format to possibly contain nothing , and the load of the scene editor to be happy with possibly load up nothing"], "issue_sim": [0.2728455662727356, 0.33999431133270264], "prob": [0.7526905536651611, 0.210837259888649]}, {"target": [0], "doc": ["i think in this case it 'd make more sense  to alter the alert message so that it be intuitive and understandable for a beginner .", "because save a blank scene be kind of useless , you can just make a new blank scene in the editor no problem"], "issue_sim": [0.19946414232254028, 0.48671722412109375], "prob": [0.7692832946777344, 0.14917625486850739]}, {"target": [1], "doc": ["there be two reason why not allow save blank scene be a bad idea :", "you should never in any situation bother the user with an error / warning for a special case that be * just there because some oddity of the internal handling * unless you * * really need to * * .", "however , this error message have absolutely no use except to spare the editor from handle this special case , therefore it should go", "human be a creature of habit", "when they start a level and look at the empty scene , save be an automatic reaction at some point", "nobody bother at this point with ponder whether they have already add something - also , they might already have a level name in mind no matter the state of the scene which they want to reserve with \" save as", "an error message at this point be just jarring", "so i beg to differ , be able to save a blank scene with an error be absolutely not useless at all", "the error throw people off , and also people might save just to reserve the name and add stuff later"], "issue_sim": [0.3284364342689514, 0.2453548014163971, 0.3254067301750183, 0.005694377236068249, 0.2870388627052307, 0.2356831133365631, 0.2761908173561096, 0.3775029182434082, 0.2351817786693573], "prob": [0.010366970673203468, 0.44213810563087463, 0.031580884009599686, 0.0010230009211227298, 0.03922886773943901, 0.0731368288397789, 0.0014523350400850177, 0.02760803885757923, 0.013008898124098778]}, {"target": [0], "doc": ["allow it be not possible because it do not make any sense . i suggest. you read the step by step tutorial .", "on tue , jan <number> , <number> at 12:11 am , jacob speicher < notifications@github"], "issue_sim": [0.2781359851360321, -0.06805431842803955], "prob": [0.9877917170524597, 0.00040099199395626783]}, {"target": [1], "doc": ["@reduz i just explain why it do make a lot of sense  from a usability standpoint", "i be aware technically it might not be a useful thing to do , but the problem here be user expectation and unexpected needless error message , not whether it make a lot of sense to do this .", "edit : might not actually have mention it be indeed somewhat useless technically : smile : but as i just explain here , that be n't the point of the ticket"], "issue_sim": [0.12325309216976166, 0.36663785576820374, 0.15353067219257355], "prob": [0.003848538501188159, 0.5426082015037537, 0.5828421711921692]}, {"target": [1], "doc": ["sorry , i do not agree", "it will be always well from a usability standpoint that user be not allow to do useless thing .", "even if he or she do not understand the error , it be good feedback to make sure the user understand that an action be not correct", "if you think it be confuse , maybe the text can be change , but the error make total sense"], "issue_sim": [0.04477126896381378, 0.18227477371692657, 0.31744712591171265, 0.17571869492530823], "prob": [0.00048814169713295996, 0.9478363990783691, 0.05232800543308258, 0.003916680812835693]}, {"target": [0], "doc": ["it be not useless because it reserve a name for the level and i can just hit ctrl+s while far ponder the level and add thing  .", "it be a useful planning tool , some people work like that", "technically an empty node might be useless , but if you really ca n't save an empty node and you really do n't want that to be possible , why do your editor then start up with an invalid unsaveable state", "again i be not make this up that pretty much all editor allow you to hit instant save in whatever intiial empty state they be in , so this be a basic user expectation", "please note i be not say this be a major issue or anything , and i fully understand if you be argue this be n't worth the time to fix", "however , say this be useful or even user - friendly behavior be imho not very meaningful", "edit : my brain fart some grammar a bit", "edit <number> : also you be right that useless action should be prevent - but for proper usability and ui design , the user should have clearly be prevent from enter an unsaveable state of a scene in the first place , and not be prevent from * save the scene * once it happen to be in such a state  since that sort of trigger a panic mode as a first gut reaction", "prevent save at any point imho be kind of an evil thing , and never desirable for a good user experience - even if in this specific case nothing be really lose except for the name , but it be still somewhat unexpected and do have the potential for some unnecessary initial confusion"], "issue_sim": [0.17556878924369812, -0.03070906363427639, 0.3345036804676056, 0.2933824956417084, 0.16181999444961548, 0.1318945735692978, 0.08315350860357285, 0.43920814990997314, 0.3401934504508972], "prob": [0.04068906605243683, 0.11191485822200775, 0.11679402738809586, 0.1632833182811737, 0.04636743292212486, 0.004893076606094837, 0.0008410370792262256, 0.06168428063392639, 0.1290895938873291]}, {"target": [1], "doc": ["would n't it be well if we show a big add node button instead of the 2d/3d viewport", "or maybe , when you click new scene , we might let you directly choose a root node , so you have nothing empty to save anyway ?"], "issue_sim": [0.20499634742736816, 0.3798721432685852], "prob": [0.44171133637428284, 0.664602518081665]}, {"target": [0], "doc": ["or eventually inform user that be impossible to save empty scene and propose to save scene with generic <tag> as root ."], "issue_sim": [0.4389234781265259], "prob": [0.9999827146530151]}, {"target": [1], "doc": ["why not make a dummy node", "this node would only be use specifically for save empty scene .", "then everything would work perfectly fine , it could even be load and put inside another node at runtime", "as soon as in the ui of the scene editor the user add an actual proper node , that one be save instead", "as for @neikeq i think none of what you say be good reason for this behavior , since the main problem be that no other editor i have ever see do n't immediately allow save a fresh empty project", "it do n't really matter if internally you have a good reason , it be always gon na stump and confuse newcomer", "therefore , unless it really ca n't be do differently without large refactoring or too much add complexity , it be simply unfavorable for usability to stick to the current behavior"], "issue_sim": [0.20779892802238464, 0.4104428291320801, 0.23873625695705414, 0.3788713216781616, 0.4289253354072571, 0.225296750664711, 0.20686018466949463], "prob": [0.0033547491766512394, 0.3521304130554199, 0.024920348078012466, 0.10274689644575119, 0.21231885254383087, 0.005140773952007294, 0.127416729927063]}, {"target": [0], "doc": ["no , we be not go through the pain of make a dummy transitional node just to allow the convenience of save empty scene .", "we be develop a tool for developer , they can cope with this minimal inconvenience and we do n't have to implement bogus feature just for a one - time quality of life improvement"], "issue_sim": [0.33443504571914673, 0.15398862957954407], "prob": [0.6827454566955566, 0.5407209992408752]}, {"target": [0], "doc": ["i be not for a full swap as i think it be still pretty common to switch between 2d and script , or 3d and script respectively .", "but i agree that i have n't get use to the play button to the far right yet either :)", "there be proposal to put all of they in the middle which look quite good imo ; the only drawback be that there be nothing to the right then ;)"], "issue_sim": [0.24676407873630524, 0.2714332640171051, 0.19806070625782013], "prob": [0.8584243059158325, 0.010194571688771248, 0.710045337677002]}, {"target": [0], "doc": ["this be discuss a lot before in many issue and people agree that the new way be well  .", "if you want to be truly effective you should use keyboard shortcut"], "issue_sim": [0.17254000902175903, 0.19127775728702545], "prob": [0.9429912567138672, 0.0025868306402117014]}, {"target": [0], "doc": ["imo this would be ideal , and we just get rid of the \" main screen \" editor plugin .", "asset lib can go somewhere else or be a float window , it wo n't change much", "it be some work though"], "issue_sim": [0.37029027938842773, 0.2696535587310791, 0.09291413426399231], "prob": [0.8376345038414001, 0.09435950964689255, 0.031900569796562195]}, {"target": [0], "doc": ["i find script / view menu on the top bar easy to \" aim for \" , rather than be in the menu bar where there can be quite a lot of menu sometimes .", "but that must be because i get use to it , so it feel natural"], "issue_sim": [0.3000819981098175, 0.1831953078508377], "prob": [0.9334572553634644, 0.005615933798253536]}, {"target": [7], "doc": ["i be not an expert in this matter , but be we certain that the performance of gdscript would be inadquate for create game with decent visual quality", "i know that gdscript be slow compare to other popular language , but if i be not mistaken , raw speed of a bind language do n't affect the overall performance that much , so even when gdscript be <number> time slow than some other language , it 'd probably translate to less than <number> fps boost in normal case , unless the game be unusually calculation heavy , like a simulation", "again , my actual experience on this matter be quite minimal so i be mostly say this from my gut feeling", "but i be more familiar with optimize server application and i 've see many similar argument in that field before", "there be many people who think write a server application in something like c would boost the performance significantly , but normally it be not the case because the big bottleneck in such a type of system be find in i / o , and the time spend in actual business code be quite fractional compare to it", "so it be my understanding that a similar rule would apply to video game performance as well , mean that the large bottleneck would be find else where than the game logic , possibly in thing like render pipeline or physics simulation", "and in that case , replace gdscript with something that can run <number> time fast would only result in a marginal performance gain", "i think , in that case , it 'd be much well to try to optimize gdscript where it be unreasonably slow than to replace it with something else , since the benefit would hardly justify all the resource the task would take .", "and if what i suppose above be true , than probably we should add a section in the documentation , explain our user how the raw speed of a bind language relate to the overall game performance , since i believe this to be a recur topic in such community like reddit  or our discord server"], "issue_sim": [0.30765190720558167, 0.43766409158706665, 0.01773046888411045, 0.18519063293933868, 0.4333907961845398, 0.2439890056848526, 0.16503003239631653, 0.2752382159233093, 0.34839141368865967], "prob": [0.1891976147890091, 0.13675440847873688, 0.000548847543541342, 0.0023935511708259583, 0.047702472656965256, 0.04468896985054016, 0.0007094998145475984, 0.022000674158334732, 0.055401112884283066]}, {"target": [8], "doc": ["@mysticfall actually gdscript perform really bad make even simple calculation", "for example , apply cellular automata to a 20x20 array on gdscript take 0", "in c # , it take 0s", "combine cellular automata , prim 's algorithm , a * , delaunay and permutation to create a basic procedurally generate 20x20 map take 23 in gdscript", "it take on average 0", "04s in c #", "now , imagine make a game like terraria in gdscript", "you simply ca n't do it and expect it to perform reasonably", "you say of replace gdscript ; that be not what i want . i love gdscript and it be definitely more than useful for most thing . it be definitely a wonderful tool to have .", "the thing be sometimes you need that boost , and when that time come currently you have two option : c # or c++", "neither of which interact with gdscript without hassle", "i find difficult to believe a dynamic language could improve that much more that it would compare to c #", "if it be possible , i 'll happily close this thread and run yell through the street about the wonder of today 's technology"], "issue_sim": [0.14439356327056885, 0.14456048607826233, 0.19188807904720306, 0.1914294809103012, 0.03989069163799286, 0.15501724183559418, 0.18780624866485596, 0.14763188362121582, 0.28036755323410034, 0.3519413471221924, 0.055557701736688614, 0.3484870195388794, 0.17655545473098755], "prob": [0.015187414363026619, 0.01987491175532341, 0.001816828385926783, 0.13612405955791473, 0.0014015104388818145, 0.0025388565845787525, 0.0015199946938082576, 0.0073391143232584, 0.8617089986801147, 0.005272984504699707, 0.0029016034677624702, 0.003992877434939146, 0.05118497833609581]}, {"target": [2], "doc": ["there be work plan on the gdscript compiler to bring jit compilation and performance improvement with the optional static typing", "with gdnative available  i do n't see the devs create a new language from scratch while there be so much work to do besides that", "i do n't see the need for it either with all the available option and the front - end language delegate so much work to the back - end : yes gdscript might be the same speed as interpret python right now , but if you rely on the editor , build - in node , physics , etc . , you be delegate a lot of work to the engine ."], "issue_sim": [0.3111726641654968, 0.48763808608055115, 0.4005042612552643], "prob": [0.018534161150455475, 0.04060946777462959, 0.7829425930976868]}, {"target": [5], "doc": ["gdscript already have an optional static typing", "it do n't improve performance for now but if i remember correctly @vnen be write about multiple idea to improve it in the future", "jit be also mention in the old roadmap but that will come most likely much later in the godot 's timeline", "there be also this person who post in the <appname> group who work on the gdscript to gdnative compiler : [ <url>", "so maybe something cool will come out of it", "consider all of this i do n't think that another official custom language be viable because the engine itself be already really big and add more module would make it even hard to manage ."], "issue_sim": [0.2721918821334839, 0.26393380761146545, 0.3221426010131836, 0.1720489263534546, 0.10620733350515366, 0.547987699508667], "prob": [0.0014029910089448094, 0.02970839850604534, 0.007227087393403053, 0.02595071867108345, 0.001764131709933281, 0.7210464477539062]}, {"target": [9], "doc": ["hello @mateusak , allow i to disagree with your very first sentence :", "aaa games often struggle with problem that be not relate to the game logic : their problem be , in general , how do i render this huge scene at 60fps", "this kind of computation be already do in a language with well perfomance  inside of godot", "what if i have something that do a lot of computation", "how do i handle that", "well , in that case gdnative be your friend", "i do not have experience with that myself but i do know someone that port a part of his game to gdnative to gain performance", "i be very much against * yet another language *", "there be already enough support", "although i do understand where this suggestion be come from , i think that godot have more pressing issue to take care of , and make another language be not worth the developer time investment ."], "issue_sim": [0.09192243963479996, 0.24884283542633057, 0.41392409801483154, 0.10750091075897217, -0.008273204788565636, 0.04398993030190468, 0.1909342259168625, 0.3255874514579773, 0.20091921091079712, 0.48456645011901855], "prob": [0.0054663377813994884, 0.5509710907936096, 0.03837895020842552, 0.0009414626401849091, 0.0021147155202925205, 0.0025678137317299843, 0.1557646244764328, 0.0024049105122685432, 0.0038879020139575005, 0.5657087564468384]}, {"target": [1], "doc": ["@qbieshay @aaronfranke i know this community would n't accept a new language the moment i begin write", "i just use it to raise awareness to an actual problem ; when you need a high performant language that need no conversion to gdscript and can easily and costlessly cowork with it , what do you do ?", "maybe the answer be improve gdscript , make the performant language itself", "maybe it be make a hybrid out of gdscript", "maybe make write gdnative c++ as easy as write gdscript", "maybe remove gdscript entirely and add a new static and performant yet easy to prototype language", "maybe there be already a feature like that and i be miss it", "i do n't know the in and out of this engine like many of you do", "but there be , however , a problem , lady and gentleman", "what to do about it"], "issue_sim": [0.3905089497566223, 0.4153270423412323, 0.3020506501197815, 0.07801882922649384, 0.4252479672431946, 0.41479256749153137, 0.11864887177944183, 0.18915900588035583, 0.0473020002245903, -0.03155720606446266], "prob": [0.04407560080289841, 0.6384682655334473, 0.0048392945900559425, 0.001181863364763558, 0.0017428570427000523, 0.013975612819194794, 0.007540117017924786, 0.04465122148394585, 0.0026071006432175636, 0.00043754931539297104]}, {"target": [3], "doc": ["i develop mainly procedural generate game", "those can be do on gdscript on a small scale , but sometimes you need more", "but if you use any of the available option you ca n't really use gdscript together with they", "there be a lot of thing you need to translate between the two , call function from each other cost a lot and be generally hard to setup and maintain  .", "i just wanna use gdscript goddammit"], "issue_sim": [0.22991301119327545, 0.09232185781002045, 0.18843455612659454, 0.2872379422187805, 0.09414205700159073], "prob": [0.00292985700070858, 0.3069600760936737, 0.05306355282664299, 0.46859875321388245, 0.001387573080137372]}, {"target": [2], "doc": ["i do see it , i do not understand why we have to have it and why we can not manage these file ourselves like we use to in 2", "i do not see how it help the workflow ,", "and to be honest i would rather manage the .mesh and these other file and their dependency myself in a more clean / understandable fashion and be able to make sure godot never do that again .", "as an example i use to store all my obj file in a separated directory and every godot project that use the say obj file would have a", "mesh file look up to that directory / file  so that if i modify that one file it would be update on all my godot project", "dae file and texture", "having control over these file allow more fine control and less duplicated content too in that case", "this be just an example but i feel it be always good to let the user manage all his file if he   want to", "i really like that about godot , it do not force you into a way of do thing", "i really think this be the one thing that it do well than any other engine out there please do not throw that away"], "issue_sim": [0.3042224645614624, 0.10308095812797546, 0.3472330868244171, 0.49993056058883667, 0.49287909269332886, 0.16917471587657928, 0.28097012639045715, 0.34206315875053406, 0.2516818642616272, 0.22322732210159302], "prob": [0.39615800976753235, 8.572595106670633e-05, 0.83344566822052, 0.00290341186337173, 0.0004665959277190268, 2.1951405869913287e-05, 0.0002754968882072717, 0.0034290459007024765, 0.0028298685792833567, 0.012335156090557575]}, {"target": [0], "doc": ["you do n't have to , you can safely .gitignore the .import/ folder ."], "issue_sim": [0.28912484645843506], "prob": [0.9999929666519165]}, {"target": [0], "doc": ["why do n't you create a directory and use a <tag> file to block import ."], "issue_sim": [0.3587357997894287], "prob": [0.999998927116394]}, {"target": [3], "doc": ["i have no clue what be your problem here", "the import folder store the import setting of your asset , setting that can should be change through the import tab .", "this folder be hide because the user should use the import tab to modify those file , and not modify they by hand", "and if a user really need to change something by hand , for debug reason , he should understand that it be not the way you be usually suppose to deal   with this file", "so hide the folder be well , avoid misuse from typical user"], "issue_sim": [0.05381925031542778, 0.30074796080589294, 0.444519579410553, 0.3652595579624176, 0.37245261669158936], "prob": [0.008169329725205898, 0.5531718134880066, 0.1644006371498108, 0.5301048159599304, 0.003960995469242334]}, {"target": [3], "doc": ["and in general , i completely disagree", "one of godot 's strength be its ability to hide the complexity of make a game to the user", "there be no point in make every technical consideration available , this be definitely the bad ux you can offer", "godot be a simple software , i do n't want user to wonder \" what be this import folder about ? \"", "- > in the general case , you never have to modify it , so we hide it", "however , i think all those technical thing should be well document , so that if user ask \" what be the import folder for", "\" , they should find an answer easily"], "issue_sim": [0.09936469048261642, 0.27577391266822815, 0.16960325837135315, 0.4967957139015198, 0.21931272745132446, 0.41973984241485596, -0.04238402098417282], "prob": [0.008123334497213364, 0.07884669303894043, 0.05456453934311867, 0.804989218711853, 0.026526717469096184, 0.021578075364232063, 0.00021716274204663932]}, {"target": [22], "doc": ["as i say it be not make thing simple to just move they away and hide they in a corner", "to i that be a cheap solution", "it be just like hide your toy under your bed as a child it be still messy , and it make find your toy that more complex afterward", "when you design a good tool you do n't usually make it so that there be only one way to use it", "i feel like these statement :", "be a proof that you think it be a good idea to force the user into one way of do thing which be not godot 's way before we use to have complete control over our file and content", "you may not care have full control over your file and the way the engine use / sort they", "as much as i respect the fact that you might want to keep that away from you and not manage your file by hand i would like to point out that it may not be the case of everyone and that some people include myself pretty much adopt this engine for its filesystem and the level of control it provide", "* * all i ask be a way to disable the automatic creation / use of that directory and file and be able to do thing manually like i use to before", "in the engine as it be right now i   can not import a file from outside my project so have share resource between multiple project or different", "mesh file for one model", "it seem to be \" not the way the user be suppose to \" well sorry that be the way i like to work i like clean / dry / minimal and flexible tool", "i use to have my", "dae outside of my project and within the project i would import they as", "scn or else and then work with these file move they around instantiate they etc", "dae file as well as other file would be untouched and keep outside of the scope of the project", "i understand you may say it be not your way , or whatever", "yet i have no unnecessary duplication and a very dry and clean project overall with well define directory understandable and self choose naming convention and no zombie file", "and yes the engine generate zombie file now", "i understand that you might feel like it be just some guy that refuse to adapt and be be picky , i be ask you to keep an open mind on that matter", "in the end this issue be underline a real opinion over what direction the engine be take and how it may be hurt it", "in my case this be really something that can drive i away , as much as i love work on this engine full user control mean everything to i", "as a matter of fact indeed we disagree on one important point i think user * * should * * be wonder \" what be this import folder about ? \" .", "the more people wonder and the more people look at how it work the cleaner and the well it become and the well people get at use it and take advantage of it"], "issue_sim": [0.2507131099700928, 0.05636729672551155, 0.1397077441215515, 0.1935604214668274, -0.03766058757901192, 0.5093079805374146, 0.3143596351146698, 0.5160788893699646, 0.39101308584213257, 0.3946842551231384, 0.1826690435409546, 0.27288931608200073, 0.04932362586259842, 0.24640421569347382, 0.21023523807525635, 0.3545258641242981, 0.13443982601165771, 0.35831499099731445, 0.18907275795936584, 0.13927507400512695, 0.28570473194122314, 0.31073254346847534, 0.44863319396972656, 0.09388265013694763], "prob": [0.002841339213773608, 3.5111981560476124e-05, 0.0232989564538002, 2.2177206119522452e-05, 5.22794425705797e-06, 0.03119737282395363, 3.6647772503783926e-05, 0.5470853447914124, 0.0002403053076704964, 5.364809476304799e-05, 1.111238674411652e-07, 0.0035313398111611605, 5.037018127040938e-07, 3.6394328617461724e-06, 4.811290637007914e-07, 0.00010181975812884048, 9.278717811866954e-07, 0.00017508929886389524, 3.517290565469011e-07, 0.0032284001354128122, 0.0001116677449317649, 0.00047825873480178416, 0.002826490206643939, 0.09232725203037262]}, {"target": [0], "doc": ["well no , godot do not allow you to do whatever you want with your file structure , that be it .", "the way you have to organize your file be part of godot 's design", "godot need a project", "godot file and an import folder", "you remove they , your project do not work", "exactly like git require a", "git folder , a", "gitignore and so on , it be part of the software design", "yes you do , if you provide several way of deal with a specific problem , you make it hard to anyone understand how to make something", "a good software design just provide you with a single and easy way to deal with your problem", "but if there be no use case in make this more flexible , there be no reason to do it", "well , you might prefer that yeah , but once again this be a design decision", "if you want to import a file , it should be in the project folder", "and allow to load file from outside have be discuss several time", "~~they be not zombie file , import file describe how your asset should be import", "they contain several important information", "such as the filter you apply on sprite or thing like that , they be more like metadata file than a cache", "edit : sorry , @bojidar - bg   explain i that the <tag> folder contain in fact cache file , so my first comment be false", "but the reasoning behind it be still valid"], "issue_sim": [0.33306580781936646, 0.25686314702033997, 0.2306649088859558, 0.3941507935523987, 0.22056114673614502, -0.0027495473623275757, 0.18633368611335754, 0.2518027126789093, 0.1355164498090744, 0.24002890288829803, 0.22892159223556519, 0.15490829944610596, 0.31916844844818115, 0.1564192920923233, 0.44336891174316406, 0.008385514840483665, 0.24699747562408447, 0.3792625069618225, 0.07339892536401749], "prob": [0.014861428178846836, 0.001863557379692793, 0.00041113627958111465, 0.0009635963360778987, 0.003400298999622464, 0.0034432816319167614, 0.010077498853206635, 0.14597362279891968, 0.22226959466934204, 0.004697622265666723, 0.011833734810352325, 0.018517086282372475, 0.0066650668159127235, 0.0019925995729863644, 0.0791201964020729, 0.0005405385745689273, 0.03661506995558739, 0.0029224238824099302, 0.008196216076612473]}, {"target": [10], "doc": ["just to mention , this be not quite correct", "actually <tag> file store the import setting in a", "ini - esque format , while the <tag> folder store cache import file", "the user be n't require to use the import tab , just as he be n't require to use the editor to write", "but , fact be , it be much simple to use the import tab and the editor , as compare to edit by hand .", "the idea behind the new import system be to make import much less painful", "in the previous version , you have to worry about remembering to import file , while the new version import automatically for you", "now , there be likely some case in which manual import be need", "we would like to support only automatic import now , for the sake of consistency , so we would view such case as more - or - less bug", "similar to package management solution , you do n't really want the user to have to mess around with file manually , when there be an automatic and  bug - free method available", "so , remove the import folder for the sake of not have an import folder , or give an option to manually import for the sake of manual import be a no - go", "as  , you have to mention the problem you have , instead of just rant how the new version be bad and the old one be well"], "issue_sim": [0.031092528253793716, 0.24256764352321625, 0.391510009765625, 0.2187834531068802, 0.13808834552764893, 0.30380839109420776, 0.2704436182975769, 0.12171050161123276, 0.18611502647399902, 0.3898612856864929, 0.46119773387908936, 0.21422484517097473], "prob": [0.0009983160998672247, 0.004537636414170265, 0.0663902759552002, 0.040531352162361145, 0.17603260278701782, 0.0002669923414941877, 0.009415657259523869, 0.00024950323859229684, 0.019994571805000305, 0.014281871728599072, 0.1155843734741211, 0.031627267599105835]}, {"target": [4], "doc": ["step to reproduce : add an asset remove it after the import directory be create : watch how the import directory still have the file inside it", "these information be important yes let i play with they", "you like to hide your toy under your bed i like they sorted and in box that i manage myself why ca not we have it both way", "yes it be what i be talk about how bad this design decision be and how it affect flexibility and user control in the end", "you want meta data file look at unity3d they do it and that be the reason i come to godot i want a open source and simple and minimalist engine , with no meta file and shadow area that you should not look at , with full user control", "you be take that away", "the problem i have : i want to be able to import my asset from where i want the way i want .", "i would like to avoid have duplicate file"], "issue_sim": [0.4298669993877411, 0.1014140397310257, 0.24064411222934723, 0.33065637946128845, 0.5401169657707214, 0.01080300472676754, 0.31829410791397095, 0.30910900235176086], "prob": [0.03132057189941406, 0.0016300220740959048, 0.4188992381095886, 0.04763928800821304, 0.34001728892326355, 8.906811126507819e-05, 0.13228879868984222, 0.00020495169155765325]}, {"target": [2], "doc": ["i be not say i want you to remove the", "import thing if you feel it be a great improvement for beginner so be it", "i just want a way to import my file from outside and manage they myself if i want to , like a enable manual import checkbox in the setting or something .", "just like granularity you can have multiple level of abstraction without have they conflict with each other at all", "i really like godot 's way to have its own mesh file and import resource file  that he work with and the original file to stay untouched in a different place", "i feel it be a workflow that have great potential and be both clean and datum safe", "then to i find and sort these import resource be not more complex than sort other file", "it be just that within the engine i work with mesh file and texture file not with the original file which i think be ok since that be the way it work"], "issue_sim": [0.158864364027977, 0.1747300922870636, 0.39903050661087036, 0.21091684699058533, 0.5057607293128967, 0.16122916340827942, 0.20908457040786743, 0.38550710678100586], "prob": [0.004141370765864849, 0.011719204485416412, 0.5106069445610046, 0.0004748744540847838, 0.06819078326225281, 0.00019846898794639856, 0.0009768682066351175, 0.0504596084356308]}, {"target": [0], "doc": ["if your need be to import file form outside the project folder , create a symbolic link should work ."], "issue_sim": [0.3470286428928375], "prob": [0.999995231628418]}, {"target": [4], "doc": ["it could be resume that way :", "behind the curtain the engine use and work on \" copy file \"  and leave the original file untouched", "people get confuse because they see two file", "a decision be make to hide away the copy to make it less confuse", "i do believe from that perspective if we have to hide one file maybe it should have be the original from within the editor as it be not the file we work on / with in here", "the engine really do not need the original file anymore since it be import and be up to date it use the copy", "thus reflect more accurately what be really happen behind the curtain and make it easy to understand at the same time .", "that way you do n't even have to create a", "import folder you just hide", "obj file inside the editor and only show their automatically import copy", "user can still drag one or multiple", "obj file at drop they in their project it would keep the file in place and create a import copy", "mesh file that the user can manage and work with in their project", "that way you have the same level of complexity  while make sure user know from the get go what be happen and what they be really do / manipulate", "you would also avoid have to add thing like \" change may be lose \" alert in the editor or even forbid change altogether because they would simply not risk be lose", "basically be honest with your user about what be happen would avoid a lot of mislead information and confuse work around or unneeded restriction", "work on copy in a datum safe way be a great thing godot do lets just embrace and make the most of it", "if that make more sense"], "issue_sim": [-0.0499223917722702, 0.30347537994384766, 0.06409421563148499, 0.2925395965576172, 0.513329267501831, 0.3492189645767212, 0.042880937457084656, 0.0031262338161468506, 0.3563006520271301, 0.33030131459236145, 0.03572621941566467, 0.44563356041908264, 0.28810393810272217, 0.20556066930294037, 0.26171621680259705, 0.2081792652606964, 0.29966408014297485, 0.007074028253555298], "prob": [0.00014843609824310988, 4.648297908715904e-05, 0.0005476637743413448, 0.0031558803748339415, 0.07727757841348648, 0.0006366203306242824, 0.1918565332889557, 1.1179130524396896e-05, 1.0773998155855224e-06, 1.6171529750863556e-06, 1.4680642834719038e-06, 1.5965988495736383e-05, 3.854864917229861e-05, 0.049294695258140564, 0.05806674435734749, 0.00536378426477313, 9.696058987174183e-05, 1.2511892236943822e-05]}, {"target": [0], "doc": ["well that be the point of have your own extension , it mean you can use they to store and have that extra level of cached information as well as make the datum more digest for the engine .", "these godot extension be the reason we do not have to have that", "import directory in the first place in previous version", "people can be unhappy that godot use its own extension and it look like it be what motivate this change in design", "but that be the way it be and i find it way cleaner and more honest", "have application specific extension be also a very common way to deal with that problem actually a lot of good software do have their own extension  why not a game engine since when be that a problem", "if people want to work only with their raw file  that be just never go to happen they be just not sufficient and adapt enough , the clean solution to that problem be to get your own extension the way godot do", "hide they away in a different place wo not change that fact", "but it open the way to more shadowy and less efficient meta file and all the messy stuff that come with they", "i understand it be something people , come from engine that use meta file to handle that problem , might at first be ask : \" why we need our own extension \"", "and can be a bit salty about", "now if you tell they that this be either have application specific extension or have disgusting meta file all over the place they might understand why godot 's way be more honest and clean and why they might want to stick with it", "now people come from other engine like unity might be accustom of have unclear and polluted filesystem this be not my case as i pretty much ditch unity over godot because of these meta file ,   and unclear / inefficient way of deal with my asset , godot be just so much clean about it", "now i understand there be a switch in the design direction and we be on the edge of ditch extension for the meta way of do thing", "i rarely ever speak up but i feel this be sufficiently important for i that i have to", "sorry if i annoy you you guy be free to take it or not", "i know how critic can be tough to take at the same time if we never express our opinion"], "issue_sim": [0.2969077229499817, 0.11777079105377197, 0.3028497099876404, 0.27961888909339905, 0.13370415568351746, 0.411815345287323, 0.3039292097091675, 0.18305213749408722, 0.2368997037410736, 0.3920440673828125, 0.02501695230603218, 0.3627273440361023, 0.5953900814056396, 0.23628927767276764, 0.14058218896389008, 0.1203870177268982, 0.0832706168293953], "prob": [0.2879716753959656, 0.007586643099784851, 0.0038424497470259666, 0.0037609264254570007, 0.002558362204581499, 0.2008046656847, 0.03706173598766327, 1.186338431580225e-05, 0.0017115281661972404, 0.004027530550956726, 5.371521183406003e-06, 0.03412562608718872, 0.021059416234493256, 0.0012330272002145648, 0.0004016221791971475, 4.139472002862021e-05, 0.0003110551042482257]}, {"target": [0], "doc": ["i would like to see integer vector type too , especially when it come to make dictionary index by position .", "have a hasher for point2i and point3i would be good", "not so important , but as part of <url> , why be point2i not name vector2i instead"], "issue_sim": [0.4212739169597626, 0.22975312173366547, 0.13621002435684204], "prob": [0.6994886994361877, 0.06119379773736, 0.18591079115867615]}, {"target": [1], "doc": ["~~i have create a c # implementation of this", "not only be they more precise for integer , and useful with dictionary and other integer coordinate / grid , but we can also perform more optimization with they , such as bitwise operation for modulus .", "~~however , i believe that <tag> and <tag> be well name", "we be already create a new name , <tag> instead of <tag> , so why include <tag>", "while it could be useful to have other variant , such as <tag> , <tag> , and <tag> , it would make the most since to start with <tag> and make it the default"], "issue_sim": [0.19356819987297058, 0.46146896481513977, 0.26062798500061035, 0.24573339521884918, 0.3440287411212921], "prob": [0.0002156249975087121, 0.7314749956130981, 0.0012408419279381633, 0.009047338739037514, 0.577081561088562]}, {"target": [1], "doc": ["all godot vector type be float by default , and in the c++ backend there be already <tag>  and <tag>", "have a new gdscript / c # <tag> that be int would be quite inconsistent ."], "issue_sim": [0.4934185743331909, 0.34380340576171875], "prob": [0.16504396498203278, 0.9159963726997375]}, {"target": [2], "doc": ["typedef vector2 size2 ;", "typedef vector2 point2 ;", "this just seem to needlessly add confusion , no ?"], "issue_sim": [0.2492256462574005, 0.2500743865966797, 0.15403157472610474], "prob": [0.3556302487850189, 0.0850258395075798, 0.39138737320899963]}, {"target": [1], "doc": ["no it be pretty useful", "once you know there be the same thing it help understand what a vector be about .", "it be use a lot in the backend code"], "issue_sim": [0.011064741760492325, 0.16337129473686218, 0.03976511210203171], "prob": [0.07520835846662521, 0.9140803813934326, 0.0835341289639473]}, {"target": [2], "doc": ["well sometimes it helpful , sometime less", "when the name be not descriptive enough , it might worth check it type", "but anyway that be not very harmful , both three naming be quite explicit so i think it be well to keep thing how they be ."], "issue_sim": [-0.04687391221523285, 0.11497925221920013, 0.04103579744696617], "prob": [0.037138860672712326, 0.04561474919319153, 0.9332379102706909]}, {"target": [1], "doc": ["definitely , integer comparison seem very necessary to i", "point2i / vector2i would be a great addition to gdscript ."], "issue_sim": [0.198042094707489, 0.1387176215648651], "prob": [0.05121695250272751, 0.9157670140266418]}, {"target": [5], "doc": ["i see two main reason to use they :", "- when perform math , you know what you will get", "float vector may give you decimal result that you do n't want , force you to explicitly floor they all the time", "- an api expect integer vector be easy to understand than one that end up accept float", "sometimes you really expect integer and it force you again to floor the input inside the function , otherwise you can end up with unseen bug such as have decimal in a dictionary index with vector", "another more marginal case be that integer allow more straightforward math  as well as bit operation without require cast or heavy float - base function .", "in engine side , int be also fast to process but i assume that last bit be consider negligible", "you can work around those obviously , but it be an annoyance we have to live with"], "issue_sim": [0.015503734350204468, 0.12437720596790314, 0.4299132525920868, 0.4594317078590393, 0.4441441595554352, 0.4872942864894867, 0.1399490237236023, 0.08286924660205841], "prob": [0.0004858841421082616, 0.0003999310720246285, 0.07358378171920776, 0.0006323127308860421, 0.3849988281726837, 0.19041086733341217, 0.0010380089515820146, 0.006795336492359638]}]}
