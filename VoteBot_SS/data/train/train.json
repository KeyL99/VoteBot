{"dataset": [{"target": [0], "doc": ["at most i will agree to remove the vulgar language  in engine message , humor will not hurt anyone and do not make something \" unprofessional \" if \" professionalism \" even mean something ."], "issue_sim": [0.4078592360019684], "prob": [0.9999533891677856]}, {"target": [2], "doc": ["i want to check in and see if there be any possibility of progress here , since the type system get some nice upgrade recently", "this be the close i 've ever be able to come at type es6 mixin correctly , which unfortunately still have a pretty high cost on both the definition and use side :", "not only would the <tag> type operator be helpful for shorten this like @artazor 's example , but it 'd be much well if we could omit the extra interface declaration and get at the infer return type of the mixin .", "maybe something like :"], "issue_sim": [0.209584042429924, 0.28195106983184814, 0.43401414155960083, 0.17313851416110992], "prob": [0.2344001680612564, 0.5614346861839294, 0.4376455247402191, 2.810603655234445e-05]}, {"target": [0], "doc": ["it be a nice idea but in my opinion the javascript transition object be a really powerful feature because you can can hook each state of the animation , pause it etc .", "i do n't know enough vuejs , do you think it be a big effort to implement an extension of transition in order to apply it on any property"], "issue_sim": [0.5016634464263916, 0.5404763221740723], "prob": [0.5558772087097168, 0.3598545789718628]}, {"target": [0], "doc": ["* * technically * * it be good ... as the original post say it be well to be able to undock ... and add minimize button and close", "like unity and adobe", "to cater to <number> - monitor and easy customization", "float window from adobe :", "workspace preset from adobe :"], "issue_sim": [0.35843947529792786, 0.17172546684741974, 0.24395498633384705, 0.3751705586910248, 0.24039742350578308], "prob": [0.9843465089797974, 0.01499638520181179, 0.09801411628723145, 0.0021066213957965374, 0.002081667771562934]}, {"target": [2], "doc": ["my personal opinion be that i would be fine add a power operator", "it would certainly not be high on my priority list , but since @gimly be already offer to contribute the work , i do n't see any major downside to enable this capability", "for the syntax , i think i prefer <tag> only because it enable add more operator in the future without run out of symbol or remember what which one mean what ."], "issue_sim": [0.2925392985343933, 0.2380419224500656, 0.41995447874069214], "prob": [0.16323257982730865, 0.4512615203857422, 0.6535689234733582]}, {"target": [1], "doc": ["it be not really viable to do any kind of software render for game in <number>", "most polished game , even 2d one , will end up use fancy particle effect  and shader  and these be not doable with reasonable performance use only software rendering ."], "issue_sim": [0.34346845746040344, 0.5829427242279053], "prob": [0.45610520243644714, 0.6372114419937134]}, {"target": [2], "doc": ["that wo n't help if the arg be specify by position but at least it a ) give a way to specify that you really want to match * just * by name and b ) give a more correct name for the parameter", "conceivably this could be a break change if a script do not use the <tag> parameter and there just happen to be a process with a name that correspond to a pid you want stop", "that say , it be pretty uncommon to run across process with a name that parse as a integer .   and the workaround be simple - use the <tag> parameter .", "i 'd be willing to risk the back compat issue for the convenience provide", "btw why not give <tag> the same treatment", "make a new nameorid parameter and make it the default parameterset", "it annoy i that gps default to name but spps default to pid", "i be always forget to specify the -name parameter to stop - process when i want to stop all instance of an app"], "issue_sim": [0.6199148297309875, 0.5942343473434448, 0.5904996395111084, 0.06122169271111488, 0.06556905806064606, 0.38464850187301636, 0.3251953721046448, 0.4614938497543335], "prob": [0.27959877252578735, 0.5280776619911194, 0.20315039157867432, 0.005898484960198402, 0.00030496553517878056, 0.003007472027093172, 0.0070747449062764645, 0.02090148814022541]}, {"target": [1], "doc": ["@lzybkr we  * must * be able to produce module like this one :", "we either need a way to ship \" core \" _ and _ \" full \" module to the gallery  , or we need a solution for load the right one from a module package contain both .", "not to mention that if you build a * * binary module * * you have to take a dependency on  , which be * cross compile * -- force the binary module to cross - compile", "it be therefore * impossible * , as thing stand , to ship a cross - platform binary module the way you describe", "we have to package both module as submodule into one module package , and use a script module _ facade _ to do os detection and load the right one", "net <number> ship , and a _ well way _ get sort out , we be go to be knee deep in hack for this"], "issue_sim": [0.23759132623672485, 0.4456600546836853, 0.47664299607276917, 0.35707104206085205, 0.4784301221370697, 0.09040369093418121], "prob": [0.0010167827131226659, 0.6825594902038574, 0.26144805550575256, 0.005563959013670683, 0.11455199122428894, 0.042254265397787094]}, {"target": [4], "doc": ["i just find a case which <tag> may make sense", "you can see the dev console", "every time you click on a tab , all other tab will re - render because they depend on <tag>", "they think they need to re - render , but in fact they do n't", "so in this case , even all the prop be the same , the component will still update itself .", "if we want to optimize the performance , <tag> or a react - like <tag> may be helpful"], "issue_sim": [0.04441859573125839, 0.08120665699243546, 0.21700367331504822, 0.14347931742668152, 0.43657636642456055, 0.36395227909088135], "prob": [0.02337067760527134, 0.013036981225013733, 0.47885623574256897, 0.02540111541748047, 0.17453521490097046, 0.047307711094617844]}, {"target": [0], "doc": ["also , such build - in script be go to be expose as plain text once export , which in most case not desire imo , and they can not be encrypt  ."], "issue_sim": [0.30574285984039307], "prob": [0.9999953508377075]}, {"target": [1], "doc": ["a few thing that i know of :", "determine outgoing call of a function be difficult", "- use reference , we ca n't distinguish function call from other reference to that function"], "issue_sim": [0.1277921348810196, 0.032783590257167816, 0.04260926693677902], "prob": [0.0738547071814537, 0.1576225459575653, 0.9631068706512451]}, {"target": [0], "doc": ["actually it be , because we have the ability to configure different build type and folder to contain .", "it be just a configuration of a specific build name", "we be inject build behavior base on configuration"], "issue_sim": [0.2742066979408264, 0.2656650245189667, 0.25744593143463135], "prob": [0.9533369541168213, 0.0020984678994864225, 0.009298947639763355]}, {"target": [5], "doc": ["@calinou portability be n't a big concern if those library be use - they support plenty of architecture  and besides , the interpreter could always be use as a fallback", "llvm ir would actually make static typing easy to adopt", "if c # support be implement by link either against mono or coreclr , those both include jits so this issue will be solve automatically", "i can understand why c #  but for those purpose , the jvm would probably bring well performance than either mono or coreclr", "after java <number> , i personally do n't think most people would object to it instead of c #  , and use the jvm give access to plenty of neat functional language than c # like clojure , scala and kotlin anyway", "also llvm make it possible to use c++ in a jitted fashion", "unreal engine also use c++ for scripting , so i do n't think that would be too weird", "c++14  be quite a small language even compare to java and c # , if use properly"], "issue_sim": [0.4394555687904358, 0.49922114610671997, 0.33145976066589355, 0.5615249276161194, 0.5549536943435669, 0.5886787176132202, 0.5048958659172058, 0.49018990993499756], "prob": [0.0026728673838078976, 0.002373036229982972, 0.2891668379306793, 0.06495457887649536, 0.3427026867866516, 0.005933935288339853, 0.06797465682029724, 0.007062133867293596]}, {"target": [2], "doc": ["the library be modular and have many entry point to accommodate a specific use - case ; but this be besides the point of this feature request and i wo n't be go into the detail of it", "normally , this should n't be an issue as webpack have chunk and async load", "the inconvenience be in the fact that vue have an async component loader but <tag> be n't a function so it be evaluate before the async component be load .", "ask to make <tag> take in a function seem like a reasonable feature request that could have other benefit", "thank for try to help but i be not look for solution to a problem  and would like for this issue to be regard simply as a feature request"], "issue_sim": [0.2414701133966446, 0.48817873001098633, 0.44404423236846924, 0.16727617383003235, 0.22091931104660034], "prob": [0.8951035737991333, 0.0008936365484260023, 0.6175293326377869, 0.0008546109311282635, 0.014480889774858952]}, {"target": [2], "doc": ["my primary concern be  real - world usefulness and  consistency", "for i , @mjbvz 's actual user experience trump most other consideration", "i be fine with never have tab - stop ; i 'd be reluctant to have tab - stop conditionally unless it be _ really _ clear when you should expect they ."], "issue_sim": [0.00966600514948368, 0.006373686715960503, 0.36669808626174927], "prob": [0.1183462142944336, 0.015449604950845242, 0.8181808590888977]}, {"target": [1], "doc": ["can we have feature like", "<tag> to manual update value match with .html file . when i use update on <tag> ?", "i just use enter key on the form and it trigger submit but not update value", "that so confuse for i", "i try <tag> but it seem not update from <tag> to <tag>"], "issue_sim": [0.11488877981901169, 0.3130713701248169, 0.5540999174118042, -0.07246725261211395, 0.22337114810943604], "prob": [0.016094865277409554, 0.7669819593429565, 0.06355619430541992, 0.010876539163291454, 0.4336567521095276]}, {"target": [2], "doc": ["honestly i think it be good how it be", "but that could just be because i be used to it", "the way i see it \" free \" already imply that it will be immediately go , and queue_free mean that it will be put in a list to free at a later time ."], "issue_sim": [0.1118311882019043, 0.12893559038639069, 0.20085409283638], "prob": [0.007033650763332844, 0.0037388617638498545, 0.9898698925971985]}, {"target": [1], "doc": ["there be two reason why not allow save blank scene be a bad idea :", "you should never in any situation bother the user with an error / warning for a special case that be * just there because some oddity of the internal handling * unless you * * really need to * * .", "however , this error message have absolutely no use except to spare the editor from handle this special case , therefore it should go", "human be a creature of habit", "when they start a level and look at the empty scene , save be an automatic reaction at some point", "nobody bother at this point with ponder whether they have already add something - also , they might already have a level name in mind no matter the state of the scene which they want to reserve with \" save as", "an error message at this point be just jarring", "so i beg to differ , be able to save a blank scene with an error be absolutely not useless at all", "the error throw people off , and also people might save just to reserve the name and add stuff later"], "issue_sim": [0.3284364342689514, 0.2453548014163971, 0.3254067301750183, 0.005694377236068249, 0.2870388627052307, 0.2356831133365631, 0.2761908173561096, 0.3775029182434082, 0.2351817786693573], "prob": [0.010366970673203468, 0.44213810563087463, 0.031580884009599686, 0.0010230009211227298, 0.03922886773943901, 0.0731368288397789, 0.0014523350400850177, 0.02760803885757923, 0.013008898124098778]}, {"target": [1], "doc": ["for future reference :", "a workaround for this issue can be have by move the <tag> to a non - compile dependency , such as  .", "big drawback of this , apart from it be confusingly non - standard , be that type wo n't get import", "that can be work around by manually import the type"], "issue_sim": [-0.05689001828432083, 0.4365360140800476, 0.19586361944675446, 0.3552144169807434], "prob": [0.011220091953873634, 0.9077919721603394, 0.20196077227592468, 0.059995137155056]}, {"target": [1], "doc": ["i use azure as an example ;", "it be also fail for the module i really want , invokebuild ."], "issue_sim": [0.12319020181894302, 0.21111805737018585], "prob": [0.118541419506073, 0.9712072014808655]}, {"target": [3], "doc": ["i think i can agree with all of that", "we should document those caveat with <tag> and/or <tag> option to avoid confusion , though", "i be sure some user will still run into it , but as long as it be clearly document i do n't see an issue with it", "it be essentially an opt - in behaviour to relax aggressiveness of quote value base on criterion or just not use quote at all , so i think it make sense to allow it and document the potential pitfall with suggestion of how to avoid they"], "issue_sim": [0.050675034523010254, 0.1970721185207367, 0.1946258246898651, 0.4395868480205536], "prob": [0.01585063338279724, 0.2571132481098175, 0.05472760275006294, 0.44911664724349976]}, {"target": [0], "doc": ["actually i take it back , i realize it should work fine due to backlight. not present due to shadow mapping anyway .", "i be ok with switch lambert and", "on sun , oct <number> , <number> at 7:48 am , juan linietsky < reduzio@gmail", "com > write :"], "issue_sim": [0.2752695679664612, 0.0935298278927803, -0.013543268665671349, -0.0005013751797378063], "prob": [0.8377541303634644, 0.05003993585705757, 0.11859086900949478, 0.009856224060058594]}, {"target": [2], "doc": ["i be not say i want you to remove the", "import thing if you feel it be a great improvement for beginner so be it", "i just want a way to import my file from outside and manage they myself if i want to , like a enable manual import checkbox in the setting or something .", "just like granularity you can have multiple level of abstraction without have they conflict with each other at all", "i really like godot 's way to have its own mesh file and import resource file  that he work with and the original file to stay untouched in a different place", "i feel it be a workflow that have great potential and be both clean and datum safe", "then to i find and sort these import resource be not more complex than sort other file", "it be just that within the engine i work with mesh file and texture file not with the original file which i think be ok since that be the way it work"], "issue_sim": [0.158864364027977, 0.1747300922870636, 0.39903050661087036, 0.21091684699058533, 0.5057607293128967, 0.16122916340827942, 0.20908457040786743, 0.38550710678100586], "prob": [0.004141370765864849, 0.011719204485416412, 0.5106069445610046, 0.0004748744540847838, 0.06819078326225281, 0.00019846898794639856, 0.0009768682066351175, 0.0504596084356308]}, {"target": [0], "doc": ["as have be mention , this be not a simple solution due to file encode potentially make it tricky to determine what \" x character from the end \" actually _ be _ .", "i be sure you or someone else could probably implement this as a feature if its behaviour could be concretely define", "without a concrete definition of exactly what you be after , we 'll just be talk in circle and not really get anywhere , however"], "issue_sim": [0.43876945972442627, 0.29506754875183105, 0.15035733580589294], "prob": [0.7637876272201538, 0.3437306880950928, 0.08690691739320755]}, {"target": [1], "doc": ["@luwenjin <tag> be es6 only", "other than that you can make a custom method <tag> and use that :", "or , with support for es5 browser :"], "issue_sim": [0.35377800464630127, 0.23559054732322693, 0.3085314929485321], "prob": [0.0029097851365804672, 0.8868516087532043, 0.22410394251346588]}, {"target": [0], "doc": ["well , if the child properly declare the prop , i would expect to see it in $ prop , not $ attrs , and that be what be happen ."], "issue_sim": [0.22124865651130676], "prob": [0.9999866485595703]}, {"target": [0], "doc": ["this be not c , care to explain what they would have that a normal global scope var would n't have ?"], "issue_sim": [0.1470847874879837], "prob": [0.9999841451644897]}, {"target": [0], "doc": ["most  gdscript syntax change be compatible with old code .", "the main goal be to increase productivity of developer use gdscript , e", "* <tag> statement allow for switch - case statement  and even improve upon that by allow people to match array and dictionary with ease", "* <tag> variable  concretize a pattern which be often use , namely initialize variable in <tag>", "* type gdscript allow developer to finally rest know that no wrong - type error will happen , and let they benefit from well autocomplete at the same time", "it be optional , so newcomer do n't need to learn it for their first game", "this be an open community", "game devs be welcome to come and express their opinion , just as you do", "at any rate , quite a bit of time will pass before annotation become a reality", "if it be already good enough , we would n't receive feature request for it", "the syntax be not finalize yet", "it be quite probable that it wo n't replace <tag> and <tag> keyword immediately"], "issue_sim": [0.30254030227661133, 0.06606213748455048, 0.25117164850234985, 0.27444708347320557, 0.19836807250976562, 0.19733887910842896, 0.021455245092511177, -0.09314703941345215, 0.23911702632904053, 0.23727959394454956, 0.25927963852882385, 0.24901160597801208], "prob": [0.6426234245300293, 0.020417729392647743, 0.09232361614704132, 0.004348705057054758, 0.18249653279781342, 0.03320184722542763, 0.0008354037418030202, 0.03183766454458237, 0.04804036393761635, 0.028674354776740074, 0.0008881158428266644, 0.10130749642848969]}, {"target": [2], "doc": ["ok , maybe i will see if i can call $ watch in my decorator definition , but i need to learn more about decorator first", "for the time be have a dedicated method for each <tag> be not too much extra effort", "but i still think it would be quite easy to add support for the component option <tag> to be an array , and this would also cover the case where someone might want to have two watcher with different option  for the same key ."], "issue_sim": [0.5711911916732788, 0.1595398634672165, 0.5042648911476135], "prob": [0.43730825185775757, 0.005650387145578861, 0.7177708148956299]}, {"target": [0], "doc": ["i have the same use case - when a user open a home page i want to show a load spinner meanwhile check if there be any update :", "<tag> <tag> available <tag> available <tag> <tag>", "or a well alternative i guess would be an observable which emit whenever an update be detect"], "issue_sim": [0.5303381085395813, 0.09483736753463745, 0.4619098901748657], "prob": [0.7320295572280884, 0.02895968034863472, 0.7809599041938782]}, {"target": [1], "doc": ["you understand people want easy right", "easy be easy for you to provode. and support than accurate be .", "there be no reason get - content can have a -l n option to importantly show", "just the last n character", "no reason except flawed design choice", "on tue , nov <number> , <number> , 11:50 michael klement < notifications@github"], "issue_sim": [0.105910524725914, 0.049117960035800934, 0.17776593565940857, 0.1917506754398346, 0.09100557863712311, 0.0351899117231369], "prob": [0.08215533196926117, 0.7037099599838257, 0.05127445608377457, 0.002075812080875039, 0.0029526427388191223, 0.11660290509462357]}, {"target": [1], "doc": ["technical , due to how the diff algorithm be write", "it be obviously possible to update it , but it take significant change to the current algorithm  ."], "issue_sim": [-0.09364981204271317, 0.11387366056442261], "prob": [0.057444747537374496, 0.8904381990432739]}, {"target": [0], "doc": ["i understand your argument and as @adrienverge say , it be sad this use - case be not support yet .", "but thank for the help and support you provide with this issue , very appreciated : +1 :"], "issue_sim": [0.19409240782260895, 0.022338971495628357], "prob": [0.7788232564926147, 0.3153054714202881]}, {"target": [0], "doc": ["on top of that be the combination of button and anchor , which be separate \" interaction \" in term of semantic .", "- anchor for navigation", "- button for action", "by nest they , and even put a heading inside of the anchor , a user with a screen reader will be totally confuse", "he wo n't even realize that it be an anchor which will trigger a navigation", "* * please do n't do thing like this * *"], "issue_sim": [0.2392156422138214, 0.2750798165798187, 0.08577021956443787, 0.13677646219730377, 0.2516390085220337, 0.030235465615987778], "prob": [0.7854545712471008, 0.028027450665831566, 0.015061598271131516, 0.3212181627750397, 0.045168597251176834, 0.006793886888772249]}, {"target": [1], "doc": ["while we be at it", "i think the on the resource page , the box contain each resource have weak clickability too .", "perhaps we could solve that too"], "issue_sim": [0.009586961008608341, 0.27190524339675903, 0.008993259631097317], "prob": [0.06708331406116486, 0.9192982912063599, 0.029562318697571754]}, {"target": [1], "doc": ["i 'd also like to advocate that this be implement", "use object to namespace and group function be much more convenient than prefix .", "not only be it clean , but it also allow for ide to fold the method as well", "as a workaround for now , this can be accomplish by use function instead of object :", "and then these can be use like <tag>", "not perfect , but it still give the organizational benefit", "@yyx990803 it be be a couple year , have your opinion change at all"], "issue_sim": [0.19985713064670563, 0.37182751297950745, 0.23424498736858368, 0.5666856169700623, 0.17599284648895264, 0.07834364473819733, 0.09407610446214676], "prob": [0.00924641266465187, 0.8703629970550537, 0.532676637172699, 0.06819899380207062, 0.0007455407758243382, 0.016429921612143517, 0.002294498262926936]}, {"target": [0], "doc": ["i just push a commit that add <tag> parameter to  all method that use node index .", "in code it be <tag> by default and in binding it be <tag>", "here be a tiny project for comparison of how <tag> etc", "behave with colorpicker :", "try it with 3", "1 and this pr", "what be leave to do be :", "- add internal to other control that should use they"], "issue_sim": [0.02964847907423973, 0.011429116129875183, -0.018289845436811447, -0.03320852667093277, 0.08012226223945618, 0.05925724655389786, -0.07370321452617645, -0.05111207813024521], "prob": [0.908848226070404, 0.3413289189338684, 0.03307526931166649, 0.008082096464931965, 0.006347266491502523, 0.016376188024878502, 0.0527762807905674, 0.09355898201465607]}, {"target": [1], "doc": ["@reduz that would be the module developer ' problem , not ours", "so not a big issue , since even now , the module have to be compile for every single platform ."], "issue_sim": [0.42005401849746704, 0.5185079574584961], "prob": [0.015557554550468922, 0.9488920569419861]}, {"target": [5], "doc": ["you most certainly * can * splat to native command", "the catch be that native _ switch _ command do n't accept \" true \" value ;-)", "could just as easily be :", "i do n't like line continuation character", "i wish we do n't have the one we have", "one problem with line continuation character be that the only reason for they to exist be to enable people to stay within some arbitrary line width .", "next thing you know you 've get people try to make a <number> character file path somehow fit on <number> character line by split it into many string and append they together -- as if that actually _ improve _ readability"], "issue_sim": [0.14564695954322815, 0.2784954309463501, 0.07600794732570648, 0.338821679353714, 0.0728939101099968, 0.3045870065689087, 0.4118415415287018], "prob": [0.004702001344412565, 0.3257642388343811, 0.0030637881718575954, 0.0015172173734754324, 0.01464877836406231, 0.42390763759613037, 0.29467278718948364]}, {"target": [1], "doc": ["@codincat in this case the tab be force to update because they have slot child", "technically , this mean if you implement a <tag> for your tab that solely depend on the <tag> prop , it will be incorrect because the slot child may have change and be not account for .", "it can lead to subtle bug when the slot content of your tab component change", "in react , if you use a pure component for this purpose , it will also always re - render because the <tag> prop always get new reactelement reference , so a shallow compare will consider they different", "of course , you * can * try to diff the child nod in a custom <tag> , but it be unlikely to be correct for all edge case - plus at that point it be not much different from just re - render the contain component"], "issue_sim": [0.3518494665622711, 0.27816611528396606, 0.4010264277458191, 0.484963983297348, 0.3400042653083801], "prob": [0.0005666260258294642, 0.6688970923423767, 0.01024180743843317, 0.06838325411081314, 0.10879426449537277]}, {"target": [1], "doc": ["i think you be separate out logic that should n't be separate", "<tag> and <tag> behavior should match when send over unencrypted .", "i think that be where my confusion be come in", "have one error by default and the other give a warning would be inconsistent", "so either both error , both warn , or both ask confirmation", "maybe that be what your 3rd proposal about <tag> be about", "also , you be not propose remove the <tag> parameter right , just clean up the code on how it use"], "issue_sim": [0.05863408371806145, 0.4806968569755554, 0.0048353951424360275, 0.13757134974002838, 0.16376464068889618, 0.10536448657512665, 0.28942278027534485], "prob": [0.07272177934646606, 0.3148995637893677, 0.0033086463809013367, 0.010419081896543503, 0.0072653815150260925, 0.017077406868338585, 0.1654466688632965]}, {"target": [2], "doc": ["a common case scenario be set the node path in the script editor- with autocompletion catch the error as you type , then much later in the process you or someone else change the parent / child relationship of a node or rename the node in godot - break all script that have those path to it", "i 've be think of implement an addon that solve the issue , but have n't settle on a solution - not sure how to good approach it", "godot 's script editor could receive signal every time a node have be move in the hierarchy or renamed-   it would really help if it automatically try at least to update any break path for the user in   the attach script .", "perhaps it could store the node 's unique id with every path , and if a path become unreachable , it could try to resolve it by find the node again by it be i d", "but then it would need to store the i d be somewhere too", "would be cool if the nodepath resource have that ability", "of course have to iterate through all attach script and correct outdated path could be expensive", "you also have the complication of have relative and full path to node - so even approach it as an addon be hard", "just try to think of way around this"], "issue_sim": [0.5916919708251953, 0.20227345824241638, 0.5098304152488708, 0.5005937218666077, 0.07851213961839676, 0.1187918484210968, 0.23246964812278748, 0.3243318200111389, 0.01721828430891037], "prob": [0.43744876980781555, 0.21090061962604523, 0.18838471174240112, 0.09604769945144653, 0.0004763262695632875, 0.0008290233090519905, 0.03320421651005745, 0.03347572684288025, 0.0011918802047148347]}, {"target": [2], "doc": ["no sort be not a valid verb", "if we use it in an own module and import it , we get :", "i think there be no comprehensible reason to not allow sort as an approve verb .", "kind regard , thomas"], "issue_sim": [0.2630382776260376, 0.15296310186386108, 0.33802056312561035, 0.10708709806203842], "prob": [0.0063871098682284355, 0.5659900903701782, 0.724420428276062, 0.006054262164980173]}, {"target": [1], "doc": ["@cristian - mocanu - mob what be the meaning for angular compiler to generate non - typescript / javascript code", "angular itself be write in typescript  , and the template can not work without angular runtime part ."], "issue_sim": [0.610485315322876, 0.6671815514564514], "prob": [0.058667492121458054, 0.8617489337921143]}, {"target": [0], "doc": ["it look like you be look for <tag> : <url>"], "issue_sim": [0.1019224226474762], "prob": [0.9996912479400635]}, {"target": [4], "doc": ["my original motivation be do gamedev with godot for teenager", "not everybody have access to a pc , but nearly everybody have access to a tablet or smartphone .", "and be able to create a game and then show it off to your friend on the same device be pretty cool", "also , you can attach keyboard , mouse and screen to phone", "i do n't think you 'll be able to do full blown gamedev in the subway but you can definitely work on some last minute change or try out simple concept"], "issue_sim": [0.056323714554309845, -0.003573087975382805, 0.07073988020420074, -0.028483279049396515, 0.08508020639419556], "prob": [0.04065535590052605, 0.521774172782898, 0.1576450765132904, 0.03855924308300018, 0.395110160112381]}, {"target": [6], "doc": ["well maybe , but how many of they be able to understand event sheets but not visualscripte", "you be say that \" those guy be stick with the engine they use because of how much they love this approach and believe i - many of they have try blueprint in unity , unreal and other engines- include godot \" , but you be actually the first one to ask that", "if this be a popular demand , yes we could add it to the core", "but until now it be not", "for i , we already cover all the use case", "at least for a state - of - the - art and professional game engine", "and as we do n't target kid or hobbyist but company , it be not worth spend time on it .", "fusion <number> , construct or even rpgmaker focus on another audience , even if beautiful game have be make with they only a tiny part of they be professional project"], "issue_sim": [0.19105935096740723, 0.23171938955783844, 0.12354724109172821, 0.04241982847452164, 0.19293998181819916, 0.15206819772720337, 0.04813024401664734, 0.2989841103553772], "prob": [0.28249120712280273, 0.3518953025341034, 0.00824001431465149, 0.0028276778757572174, 0.0033952314406633377, 0.0040319133549928665, 0.08617639541625977, 0.07397923618555069]}, {"target": [2], "doc": ["i have no idea why you would think that", "visualscripting have nothing to do with state machine", "visualscripting should be simple than gdscript for artist / game devs .", "i have to admit it be not really for now , probably that a bunch of node might be simplify / make more appealing", "but honestly , you be wrong thinking that events sheets be easy to understand than visualscript , to i they be not", "the only thing that actually make the difference in the example you show be the text and the icon that make thing a lot more understandable", "it be the text and icon that make thing more explicit and straightforward , not the vertical organization", "visualscripting would be as understandable if we add such icon , if we make a well gui for most common action , and group the function into pertinent category"], "issue_sim": [-0.05885935574769974, 0.0774400383234024, 0.19739529490470886, 0.2119218409061432, 0.14054591953754425, 0.23730061948299408, 0.18249115347862244, 0.2870680093765259], "prob": [0.006955049000680447, 0.0006117544253356755, 0.0785474106669426, 0.11787940561771393, 0.023485200479626656, 0.09026169031858444, 0.0010184868006035686, 0.08316797763109207]}, {"target": [13], "doc": ["@yyx990803 thank for the reply ,", "i have put together a", "it contain two component", "the first show that the contenteditable updating with no caret jump", "this be because there be no html change to the state , and so vue do not re - render the component", "the second contenteditable component contain html , and when editing display the behavior i describe above", "the dom refresh and the caret jump to the beginning", "you be right that vue be correctly determine which component to re - render", "it be re - render the contenteditable div when the state change", "however in my use case i need an option to stop that automate behavior", "i would like the state to continue update , but for the component to wait to re - render until i want it to refresh", "this be where a <tag> hook would be useful", "i like that vue automate the rendering of the correct component , but i believe it make sense to have an option to circumvent that behavior if desire", "i believe expose such an option / hook would open vue up to the use of contenteditable , provide potential for performance boost , and solve my headache :)"], "issue_sim": [-0.015864143148064613, -0.06680240482091904, 0.1294875144958496, 0.384578675031662, 0.4925026595592499, 0.5457343459129333, 0.4588528871536255, 0.3357880711555481, 0.5264043807983398, 0.2281043827533722, 0.5542474985122681, 0.19803862273693085, 0.5996664762496948, 0.4103344678878784], "prob": [2.4570266759837978e-05, 1.83427837328054e-05, 0.00026474701007828116, 8.399150829063728e-05, 0.002382845850661397, 0.0019403952173888683, 0.0006900911685079336, 0.0006261463277041912, 0.0012927297502756119, 7.222148269647732e-05, 0.6188756823539734, 0.012817651964724064, 0.3344043493270874, 0.19947010278701782]}, {"target": [0], "doc": ["oh , just to support non - prop attribute  .", "i would like to fully support what you can do in vue : <tag>"], "issue_sim": [0.09416458010673523, 0.36191195249557495], "prob": [0.6464794278144836, 0.189896821975708]}, {"target": [0], "doc": ["you can get the component instance from <tag>", "i be use angular 5", "1 , not sure what version this become available"], "issue_sim": [0.49282199144363403, 0.1447886973619461, 0.0755624771118164], "prob": [0.23313277959823608, 0.051508981734514236, 0.3311477303504944]}, {"target": [0], "doc": ["let 's just stick a box round this bit of text to make it stand out from the surround text , but not change the theming to bash style .", "sound ok @alan - agius4"], "issue_sim": [0.3963700532913208, 0.09459208697080612], "prob": [0.956640899181366, 0.01086887065321207]}, {"target": [3], "doc": ["as there be load to unpack here , and i do not want to spam this issue , so i 've write a post with my opinion here : <url>", "tl , dr :", "i be excited and i think it be the right move", "although potentially risky , go all - in class resource for ps7 be a good move because it help focus the effort  . also , that do not mean it ca n't change later .", "json & mof exist because of the lack of metadata in function , i 'd prefer have metadata and be able to use ast", "it also avoid different move part and simplify some of the tooling", "support json in an exist dsc resource would often be break and not backward compatible , while class be", "a fair few explanation about testing , why we be not use class in dsc community resources", "it be long , but i try to provide context", "feel free to reach out  for question and comment"], "issue_sim": [0.07071267813444138, 0.030351802706718445, -0.004879946354776621, 0.1907471865415573, 0.5063079595565796, 0.0434638112783432, 0.49704286456108093, 0.3546923100948334, -0.021842092275619507, 0.08222385495901108], "prob": [0.11579274386167526, 0.002079803729429841, 0.01783180795609951, 0.57997727394104, 0.06130256876349449, 0.02832956425845623, 0.060445237904787064, 0.0234442837536335, 0.0048204283230006695, 0.004556508269160986]}, {"target": [0], "doc": ["why not just maintain an array in your own code and provide vue one watch handler ?", "i do n't think it be hard for either ts user or vanilla vue user"], "issue_sim": [0.4476500153541565, 0.11348124593496323], "prob": [0.5378708243370056, 0.19472099840641022]}, {"target": [0], "doc": ["it bother i that <tag> can be a filter , but it be what it be and we may just have to live with those inconsistency for backwards compatibility sake .", "i think the good we can do be ensure that new cmdlet follow the intend guideline to have consistency as well as promote more <tag> cmdlet remove the need for <tag> to be multi - purpose"], "issue_sim": [0.19391751289367676, 0.38478219509124756], "prob": [0.5239585638046265, 0.5617799758911133]}, {"target": [0], "doc": ["i be not for a full swap as i think it be still pretty common to switch between 2d and script , or 3d and script respectively .", "but i agree that i have n't get use to the play button to the far right yet either :)", "there be proposal to put all of they in the middle which look quite good imo ; the only drawback be that there be nothing to the right then ;)"], "issue_sim": [0.24676407873630524, 0.2714332640171051, 0.19806070625782013], "prob": [0.8584243059158325, 0.010194571688771248, 0.710045337677002]}, {"target": [1], "doc": ["i find the same problem in registry provider", "it seem we have to move the normalization of path and possibly  globbe into provider ."], "issue_sim": [0.23896071314811707, 0.2161533236503601], "prob": [0.01706782355904579, 0.9630011916160583]}, {"target": [1], "doc": ["i think this feature be nice to have in vue", "because some library actually implement this behavior  their own global mixin .", "and also , there be a use case on userland , e", "pass an event bus instance to all descendant"], "issue_sim": [0.33045971393585205, 0.37647902965545654, 0.18405699729919434, 0.3172498643398285], "prob": [0.0174097903072834, 0.785630464553833, 0.009101570583879948, 0.004744596779346466]}, {"target": [1], "doc": ["put in another way , compute property be not reusable", "you can use factory function + mixin as a * * work around * * , but the usability and readability do n't compare ."], "issue_sim": [0.3045859932899475, 0.38923200964927673], "prob": [0.00972434226423502, 0.9323793649673462]}, {"target": [0], "doc": ["worth note that change the behaviour so that only forward slash work on unix would potentially break a lot of otherwise cross - platform script , and would mean that powershell <number> on windows support unix - style path , but powershell <number> on unix do not support windows - style path  ."], "issue_sim": [0.6389243602752686], "prob": [0.9999722242355347]}, {"target": [2], "doc": ["i have the feeling @raould 's idea be not understand well , for example i have a function for calculate perlin noise here which start with :", "the problem here be whenever i call this function it have to create the variable p , then remove it from memory after finish , however i be call this function very frequently , but this function be take almost <number> second to finish , i be try to optimize the function , first thing come to my mind be , remove the variable out side of the function , which do not make it global variable , it still will be static variable belong to the class , the thing be , at least my ide be not allow i to define", "so so far i do n't see the point of implement new script language with custom grammer , but it would be an improvement to allow static variable"], "issue_sim": [0.22320538759231567, 0.32922011613845825, 0.30687379837036133], "prob": [0.38150259852409363, 0.3072231113910675, 0.3055458068847656]}, {"target": [0], "doc": ["my general view be that <tag> , by default , be expect to log your input and the output and should resemble what you would see at the console .", "anything more than that should require the use of a parameter or switch", "where behavior change  be need to accomplish this , we 'll need to determine the impact to the user and decide on a case - by - base basis"], "issue_sim": [0.21423712372779846, 0.13937567174434662, 0.2043372392654419], "prob": [0.930962085723877, 0.001624181168153882, 0.4627425968647003]}, {"target": [0], "doc": ["get support for ngoninit in the service would help a lot , assume ngoninit be execute after the current service be do construct , and be available for di ."], "issue_sim": [0.4644453525543213], "prob": [0.9999628067016602]}, {"target": [2], "doc": ["@posva , for compute one property such as i do in my example , i would probably use @nickmessing 's suggestion , * currently *", "if i need more complexity / functionality , i tend to use component for that", "i agree with you that component be the most powerful option  ) , but for some case it might feel a bit overkill .", "- one or maybe two computation : <tag> or <tag>", "- two or more : @nickmesse 's suggestion", "- more than a few property , use of any other view model functionality  , own template , etc : component"], "issue_sim": [0.46179330348968506, 0.3456892967224121, 0.25780412554740906, 0.10424937307834625, 0.03196042776107788, 0.2980222702026367], "prob": [0.01765810139477253, 0.008035527542233467, 0.47403088212013245, 0.0005778998020105064, 1.77394679212739e-06, 0.028952840715646744]}, {"target": [2], "doc": ["@jbrantly would an es6 version of the package really be different from a non - es6 typing in term of how the end - user can use it", "can you give an example of such a difference", "because i think that if the typing simply follow the style of the package itself  , the user of the library can already choose to use old or new style import , and the compiler will do the ' conversion ' for you .", "so it would only really matter if you want your typing to work on e", "4 or low , but i be not sure that be worth the trouble"], "issue_sim": [0.3727496862411499, 0.02429870329797268, 0.39883920550346375, 0.1127917543053627, -0.03714770823717117], "prob": [0.01474255695939064, 0.008474869653582573, 0.9469391107559204, 0.0027892100624740124, 0.0034158045891672373]}, {"target": [1], "doc": ["sorry , i do not agree", "it will be always well from a usability standpoint that user be not allow to do useless thing .", "even if he or she do not understand the error , it be good feedback to make sure the user understand that an action be not correct", "if you think it be confuse , maybe the text can be change , but the error make total sense"], "issue_sim": [0.04477126896381378, 0.18227477371692657, 0.31744712591171265, 0.17571869492530823], "prob": [0.00048814169713295996, 0.9478363990783691, 0.05232800543308258, 0.003916680812835693]}, {"target": [0], "doc": ["there may be some other factor go on here , i 've create an example that use <tag> inside a vue - router and it work in chrome  and not firefox  .", "error in firefox :", "this be actually the issue that i be have and i trace it to the code that my pr be for , however i do not see what would cause the difference between browser", "a different decorator would be a possibility , however may not be require if this issue be resolve"], "issue_sim": [0.21614202857017517, 0.22737950086593628, 0.2423636019229889, 0.2565002739429474], "prob": [0.4292397201061249, 7.474742596969008e-05, 0.34681782126426697, 0.0022772091906517744]}, {"target": [1], "doc": ["i be sorry , but i understand you as that you think they should be the same", "but even we forget about the fact how it be in ts 2.1 these two expression be in fact different  for any type without index signature .", "so i can ask the same question : why", "and if they be different for type w/o index - signature why should they be same for type w / index - signature"], "issue_sim": [0.05635499209165573, 0.31637758016586304, 0.00388423353433609, 0.30998727679252625], "prob": [0.24147248268127441, 0.433104932308197, 0.010030991397798061, 0.4280562102794647]}, {"target": [0], "doc": ["we discuss this in our triage meeting and have decide that since this have very little community support and would open up the localization tooling to more complexity we will not implement this ."], "issue_sim": [0.1868390142917633], "prob": [0.9999740123748779]}, {"target": [5], "doc": ["yes , that be why i say :", "that be only important for when something like <appname> get this information from the page", "it do n't matter on the client", "the title and theme be two example of metadata that _ do _ matter on the client", "this be why it be important that handling of metadata be correct _ both _ on the client _ and _ on the server", "project like vue - meta matter because they prevent many devs \" reinvent the wheel \" of have declarative updating of page metadata , which be handle in a consistent way both on the client and with server - side rendering .", "for example , if you have a list of item and when a user click on one you want a page with more detail to open , you want it to open instantly since you already have the datum  or very quickly because you just need to grab a couple of small bit of datum", "but , you also want this data page to be directly - accessible", "in a ssr app the user would get this page pre - render with all the correct page metadata , which should be the same as if the user get there instantly from click a list item", "in that case , the page should also have the correct metadata apply", "that be just one example"], "issue_sim": [-0.03629300743341446, 0.18789324164390564, 0.1388544738292694, 0.21433889865875244, 0.39776450395584106, 0.5878556370735168, 0.2335626780986786, 0.10338827222585678, 0.39927127957344055, 0.3396615982055664, -0.08085940778255463], "prob": [0.06186472252011299, 0.021080084145069122, 0.0057711550034582615, 0.02305656298995018, 0.11645327508449554, 0.41370829939842224, 0.16629277169704437, 0.0008603204623796046, 0.05741391330957413, 0.002325605833902955, 0.000373171700630337]}, {"target": [2], "doc": ["the first step have just be complete and ship in babel 7", "blog post : <url>", "this new transform eliminate the need for user have to add <tag> in scope of their js file in order for jsx to work , as it be inject by the transform .", "there be some talk in the pr of why this be n't solve with pragma :", "i be not familiar with the internal of this pr , i be just an enthused bystander but i think change would be something like :", "- when the <tag> compiler option be set to <tag> or <tag> , do n't throw a warning if you use jsx but <tag> be not in scope - as the import to the jsx factory function would be add by a further transform step", "- add a new value to the jsx compiler option <tag>  , that will transform code in a similar manner to <tag> as discuss in <url>"], "issue_sim": [0.05360599607229233, 0.0730859786272049, 0.5584802627563477, 0.1897880584001541, 0.19724659621715546, 0.6299498081207275, 0.598143994808197], "prob": [0.044818345457315445, 0.004799937829375267, 0.6146193742752075, 0.010156521573662758, 0.2710528075695038, 0.15148019790649414, 0.1033521294593811]}, {"target": [0], "doc": ["the intent be that you do n't use <tag> as an <tag> or a <tag> until you 've use a type assertion or other mechanism to actually \" decide \" which thing <tag> be .", "if we jam on _ all _ the property of <tag> and <tag> , you 'd have a sort of nonsense object -- imagine code like this :", "the other option on the table be to not have those property _ at all _ , but there be concern that this make code like <tag> too annoying to write", "i could n't come up with a more clear way to write this rule ; the paren here be just for explanatory purpose", "consider code like this :"], "issue_sim": [0.368857204914093, 0.31263288855552673, 0.32926636934280396, 0.17905724048614502, 0.15769758820533752], "prob": [0.5620183944702148, 0.2954648435115814, 0.27079203724861145, 0.09790214151144028, 0.0012400884879752994]}, {"target": [0], "doc": ["we do n't use command prompt because it prevent the user from copy the command example and paste it directly into the command shell .", "that do n't apply here - it be a syntax statement , not a command example", "i like the style"], "issue_sim": [0.5479174256324768, 0.4411737322807312, 0.11709704250097275], "prob": [0.9834340810775757, 0.06138347089290619, 0.0012897311244159937]}, {"target": [1], "doc": ["although vsync should take care of that so you do n't use all your fpu", "honestly godot do nothing special on it , i suggest you pay attention in. your other game , as general when a lot of thing go on on screen its. difficult to notice stuttering but it be still there", "on mon , mar <number> , <number> at 8:19 pm , juan linietsky < reduzio@gmail", "com > write :"], "issue_sim": [0.1908324658870697, 0.20812144875526428, 0.02909332886338234, -0.0577186681330204], "prob": [0.0313587449491024, 0.9204689264297485, 0.0045715803280472755, 0.0001863956858869642]}, {"target": [2], "doc": ["@aaronfranke  ) , basically the same thing as  , have a completely different use - case from interface * precisely * because they include implementation of the method", "if an interface give a default implementation , then it would n't really * be * an interface anymore", "trait / mixins be present in php , ruby , d , rust , haxe , scala , and * many other language *  , so they should already be widely familiar with people who have a broad repertoire of programming language familiarity .", "if we be to implement interface  , it would effectively just be a way of specify function signature and then require that the relevant gdscript script implement those function signature , with trait include"], "issue_sim": [0.2588760256767273, 0.15254735946655273, 0.2953011989593506, 0.4316917657852173], "prob": [0.012967229820787907, 0.5823686122894287, 0.3837219178676605, 0.1732284277677536]}, {"target": [0], "doc": ["i think the \" good \" solution would be to optionally link to llvm , gdscript could be compile to llvm - ir and then even be jit'ed while develop / prototyping .", "llvm can build library for maaaaany different platform , so that might be the simple way to go without ship an entire c compiler", "* * thaaaaaat say * * : llvm be a pretty huge dependency", "it be about <number> mo on my linux distro", "like i say , it could be make an optional dependency , but that would require some work from the load side", "i think in itself it be a nice idea , the real problem be not compile to c or something but to actually generate the code for all the platform you want to export to , c + a c compiler be one option , llvm would be another and manually generate machine code  yet another", "it be not trivial but should be quite do - able", "the main problem be that it most likely would require we to add a huge dependency"], "issue_sim": [0.46791693568229675, 0.46498358249664307, 0.38698244094848633, 0.16524264216423035, 0.18830294907093048, 0.5071397423744202, 0.19303548336029053, 0.1847928762435913], "prob": [0.8369982242584229, 0.0912487655878067, 0.0012957928702235222, 0.010884495452046394, 0.11607383191585541, 0.5952585935592651, 0.0021682828664779663, 0.005512687377631664]}, {"target": [0], "doc": ["i think this be because the vnode of the slot will always ref to the last render htmlelement , so only the last get patch ."], "issue_sim": [0.269873708486557], "prob": [0.9999679327011108]}, {"target": [0], "doc": ["i see that , but that be kind of out of scope of \" let 's create a new standard for export animation \" , be n't it ?", ":) so my point be that this issue should probably be close , as it outlive its scope"], "issue_sim": [0.36904269456863403, 0.060017555952072144], "prob": [0.9528357982635498, 0.02193659543991089]}, {"target": [8], "doc": ["there   one ambiguity that need to be clear up in order to allow drop <tag>", "consider two path entry :", "the former value be a relative path , while the latter be an unrooted path", "currently , both of these be resolve to the same location , relative to <tag>", "in the absence of a <tag> , i think it   fairly clear that the value for the <tag> mapping should be resolve relative to the tsconfig", "json location , as all other relative path in tsconfig", "it   less clear what should happen with the value for the <tag> mapping", "without an explicit base , it look like we could do a node_module search for <tag>", "this could be a useful feature , but be fairly asymmetrical from how resolution work with <tag> ."], "issue_sim": [0.07213055342435837, 0.14976570010185242, 0.29239606857299805, 0.11794576048851013, 0.3820061683654785, 0.43154793977737427, 0.2174079269170761, 0.1781000941991806, 0.2166091501712799], "prob": [0.033807072788476944, 1.0038279469881672e-05, 0.0012287606950849295, 0.007103562355041504, 0.6647363901138306, 0.00020387944823596627, 0.002554988721385598, 0.0030225198715925217, 0.6114434599876404]}, {"target": [1], "doc": ["i do n't think so", "it should be consider a difference of syntax between shell .", "how a shell parse argument to pass to binary be up to that shell and there be only similarity between shell", "powershell * as a shell * will have a different method for parse and pass argument to binary then bash , cmd , etc", "that would be expect", "what one shell deem an important token another may deem irrelevant", "internally , powershell be consistent :"], "issue_sim": [0.026119500398635864, 0.35052937269210815, 0.25913798809051514, 0.44758790731430054, 0.0009352304041385651, 0.19247910380363464, 0.23999804258346558], "prob": [0.04804791510105133, 0.5302202105522156, 0.27905288338661194, 0.6137111783027649, 0.014078914187848568, 0.05677451938390732, 0.0012944741174578667]}, {"target": [3], "doc": ["@mlc - mlapis   thank you", "yes , i be patch directly in to dom", "i be add your unsave code to dom  everytime you type in vscode", "i be not touch anything to angular , i just borrow it be compiler to complie it directly in my plugin ."], "issue_sim": [0.042093805968761444, 0.240450918674469, 0.38570278882980347, 0.39376676082611084], "prob": [0.004134184680879116, 0.038719385862350464, 0.06458494067192078, 0.6076017618179321]}, {"target": [1], "doc": ["which seem to be work", "but since it be so difficult to get it do and there be hardly anything find about provide config to a lazy loaded feature module", "i be still wonder what would be a well way to provide <tag> to a feature module      = > or should n't we do that at all", "@mgechev , or @igorminar do you have any solution / idea / insight"], "issue_sim": [0.018655722960829735, 0.3905683159828186, 0.37897008657455444, 0.21004080772399902], "prob": [0.03434661030769348, 0.4103778600692749, 0.6291477084159851, 0.0018893249798566103]}, {"target": [0], "doc": ["my guess be that <tag> should be set - this be very similar to a prior issue where input event be unexpectedly happen on different input than expect when use ngfor .", "this be due to how change detection work i believe , so give that the other issue be close , i would expect this to be reject as a user error as well"], "issue_sim": [0.4457158148288727, 0.37091830372810364], "prob": [0.7026306390762329, 0.4560781717300415]}, {"target": [0], "doc": ["you can just use. <tag> ` ts. @viewchildren routerlinks : querylist < routerlink > ;. ngafterviewinit  {. console.log ;. }"], "issue_sim": [0.4594290554523468], "prob": [0.9996722936630249]}, {"target": [3], "doc": ["definitely a bug imo - the <tag> signature be :", "<tag> <tag> notfoundvalue <tag> notfoundvalue <tag> undefined <tag> injector", "and <tag> be :", "so , nodeinjector implement the deprecate signature , not the current one .", "i should add that the <tag>  do correctly implement the <tag> api with <tag>", "<tag> and <tag> also do n't correctly implement the   <tag> api", "here be a karma test suite that demonstrate the bug :"], "issue_sim": [0.16374975442886353, 0.3825100064277649, 0.1102115660905838, 0.20434999465942383, 0.5801756381988525, 0.4565078914165497, 0.05413980036973953], "prob": [0.000880965031683445, 0.08426506817340851, 0.00971839390695095, 0.3999256491661072, 0.0184234157204628, 0.010135470889508724, 5.67686183785554e-05]}, {"target": [0], "doc": ["the problem be that vue as a front - end library run not only in electron - when run in browser , we can not consistently detect what os the app be run in , so we ca n't perform the platform check as you do in your first example inside the library itself .", "you will have to do it in userland code anyway", "instead , i 'd suggest create a reusable function wrapper :", "then in component that need this functionality :", "edit : maybe it be * * possible * * to sniff the os from <tag> , but i be really not sure if that be a good idea"], "issue_sim": [0.2408592849969864, 0.18943743407726288, 0.26590675115585327, 0.12371896207332611, 0.2511380910873413], "prob": [0.6045357584953308, 0.06474179774522781, 0.02242187410593033, 0.001692725345492363, 0.6296792030334473]}, {"target": [0], "doc": ["eh , mark yourself as ' implement an interface / trait ' also should fulfill an <tag> test though , which be convenient to test functionality of something ."], "issue_sim": [0.26573437452316284], "prob": [0.9999798536300659]}, {"target": [3], "doc": ["please do consult other developer", "maybe from other application", "they may have be in the ui oss business for year", "the thing i notice about godot be that it be like it come out of the cave without know the late / modern / advance trend with the ui ... please update ... if start over be the key ,"], "issue_sim": [0.14404231309890747, 0.12099914252758026, 0.14137323200702667, 0.1104278415441513], "prob": [0.07364000380039215, 0.044734809547662735, 0.04457581788301468, 0.5455463528633118]}, {"target": [3], "doc": ["@pkozlowski - opensource totally understand , and your point about class name be well take", "i agree with @choeller that use the selector would be easy and work well in most case", "it would also be clear in most case that it be n't a standard exportas because of the selector syntax", "consider , then , the proposal to be : if exportas be not specify for a directive , default the value to its selector ."], "issue_sim": [0.21644526720046997, 0.16485774517059326, 0.26721999049186707, 0.47575944662094116], "prob": [0.0008863250841386616, 0.0302609670907259, 0.2332872599363327, 0.7973578572273254]}, {"target": [2], "doc": ["should it be other way around", "since powershell explicit cast use <tag> :", "i would expect that implicit cast to parameter type should also use <tag> ."], "issue_sim": [-0.016059869900345802, 0.5333133935928345, 0.37598085403442383], "prob": [0.010550657287240028, 0.014093223959207535, 0.9800711274147034]}, {"target": [2], "doc": ["@igorminar , yes i can , - just for the clarity of the experiment", "if there substitute any value , nothing will change - i d will be delete", "\" not check any validation \" - <tag> remove without the presence of malicious code"], "issue_sim": [0.06099129468202591, 0.18038597702980042, 0.48477914929389954], "prob": [0.08700892329216003, 0.18372072279453278, 0.4193795323371887]}, {"target": [0], "doc": ["no , it should work , z will output the iso8601 basic format in this case"], "issue_sim": [0.3080643117427826], "prob": [0.9987708926200867]}, {"target": [1], "doc": ["@amcasey be correct , but it sound like @ilcallo   concern be  that", "type discover by the auto - import provider would leak into type checking , negate any carefully define project boundary and <tag>/<tag>/<tag> configuration setting", "that   not the case  ny type discover by the auto - import provider be isolate into a separate type checker , so this pr have zero effect on compilation or error expose by your editor", "even if type within the auto - import provider conflict , those error will never be surface", "@ilcallo do i understand your concern correctly , and do my answer address it", "edit : i think this comment be on my pr , not on the original issue , which might be a source of confusion", "some of the approach discuss here _ would _ have create the problem i just describe , but we have pretty much settle on an approach that avoid it , which be in progress here : <url>"], "issue_sim": [0.09683766216039658, 0.3144828975200653, 0.4051405191421509, 0.2534867525100708, 0.0724351778626442, 0.03252117335796356, 0.19782134890556335], "prob": [0.0032032416202127934, 0.4801775813102722, 0.5007897615432739, 0.009525575675070286, 0.0020571970380842686, 0.0022971834987401962, 0.3056473433971405]}, {"target": [2], "doc": ["the reason that i like stay within some \" arbitrary line width \" be because a lot of devs run portrait monitor", "have a <number> or <number> character limit mean that my code fit in the width of the window", "i would love to have a switch to enable a line terminator as oppose to implement yet another continuation character ."], "issue_sim": [0.12659664452075958, 0.24037989974021912, 0.372251957654953], "prob": [0.19641603529453278, 0.031427860260009766, 0.8565353155136108]}, {"target": [0], "doc": ["i 'll close this issue since it do n't collect a sufficient number of vote and do n't align with an exist project on the roadmap ."], "issue_sim": [0.19732990860939026], "prob": [0.9999692440032959]}, {"target": [2], "doc": ["@billti   the problem that the global renaming prevent to find reference locally to import part", "because renaming rely on \" find all reference \" behaviour", "the question be it useful in a current module to click on import part to find all reference and obtain the reference for the import type in the whole project instead of only in the current module .", "to find local reference be very frequently use operation , but i can not do it with current behavior and i be stick with the \" find and replace \" dialog to look for the text", "and implement my suggestion the bug # <number>"], "issue_sim": [0.5531449317932129, 0.34239843487739563, 0.5223609805107117, 0.3554948568344116, 0.06918330490589142], "prob": [0.004583979025483131, 0.016757680103182793, 0.600182831287384, 0.48355308175086975, 0.0021478680428117514]}, {"target": [2], "doc": ["this code should be support on all browser , give <url>", "i appreciate the <tag> flag when do development , but this do n't help when our ci block deploy when there be a compile error , and there be no option to disable error on line  )", "i strongly object to the <tag> tag here , since a well design would be to avoid trigger a compile error at all .", "the post workaround be unnecessarily verbose"], "issue_sim": [0.21505384147167206, 0.47604697942733765, 0.45999252796173096, 0.2470996379852295], "prob": [0.02356378734111786, 0.8103382587432861, 0.15778294205665588, 0.01277631800621748]}, {"target": [1], "doc": ["i be also in favor of es2015 +", "as you say , this be not to please stylistic preference but to solve transpilation constraint .", "and through time this problem will hopefully solve itself when the ecosystem as a whole have move towards esm"], "issue_sim": [0.11723741888999939, 0.19337129592895508, 0.1441301852464676], "prob": [0.02245270274579525, 0.8529964685440063, 0.11697988212108612]}, {"target": [0], "doc": ["i be go to ask in # <number> about plan for update the xdscresourcedesigner module , however base on this change , i guess there be no need ."], "issue_sim": [0.27344846725463867], "prob": [0.999921441078186]}, {"target": [0], "doc": ["in the meantime i 've transition fully away from vue 's own event mechanism , since i need the callback to be async and also queue .", "i guess we can close this issue , but maybe <tag> would still be useful to other", "here be my <tag> : <url>"], "issue_sim": [0.32497841119766235, 0.28367477655410767, -0.053833212703466415], "prob": [0.9043173789978027, 0.13750852644443512, 0.0335356704890728]}, {"target": [3], "doc": ["@willydee can you address @jelbourn last point with respect to accessibility", "here another thread on the issue as well <url>", "in fact , have an anchor inside another anchor isn even valid html", "note that interactive also mean focusable - interactive control shouldn have focus able descendant either : <url>", "this feature seem like it would encourage less accessible component .", "<tag> routerlink <tag> router", "navigate <tag> routerlink <tag> routerlink <tag> null <tag> mouseover<tag>mouseout<tag>focus <tag> event", "stoppropagation ` , which doesn work in your specific use - case but would for many other"], "issue_sim": [0.21078284084796906, 0.07747216522693634, 0.35955899953842163, 0.3448563814163208, 0.09647136926651001, 0.1815255582332611, 0.5445597171783447, 0.1952194720506668], "prob": [0.011556115001440048, 0.10106071084737778, 0.0640542134642601, 0.15188415348529816, 0.31031855940818787, 0.001518766744993627, 0.006893699988722801, 0.03153414651751518]}, {"target": [10], "doc": ["thank you very much for the link", "i miss that in my search to see if it have be discuss before", "please forgive my lack of expertise , but i be struggle to understand the explanation give on that link issue", "if you  have time , could you please :", "- explain what be mean by \" the type that be instantiate by the reference \"", "- give an example show why this be require \" to support property declaration use type this \"", "i should also point out that  the semantic i desire be possible use non - member function", "in the below code snippet , the variable have the type i expect :", "<tag> <tag> v2 <tag> a & b <tag> <tag>", "<tag> <tag> d <tag> extendable & b & c <tag> <tag>", "however , \" this typing \" appear to be largely motivate by \" fluent api \" and the above code remove this syntactic nicety .", "particularly the second example get ugly quite fast without method chain", "do i understand correctly that \" function declaration this type support \" would allow i to get the fluent api syntax with the semantic i desire", "this be a not - yet - implement feature , right"], "issue_sim": [-0.032739121466875076, 0.05317440629005432, 0.01732884719967842, -0.08326372504234314, 0.2764679193496704, 0.3904373049736023, 0.3230603337287903, 0.4748607873916626, 0.34899020195007324, 0.32190564274787903, 0.39881807565689087, 0.045899897813797, 0.49306824803352356, 0.21484960615634918], "prob": [0.03241702541708946, 0.2782476842403412, 0.23582373559474945, 0.002929446753114462, 0.012214147485792637, 0.011861573904752731, 0.0661669671535492, 0.0032115948852151632, 0.0015323752304539084, 0.0014543788274750113, 0.07161761820316315, 0.0009586777887307107, 0.08092434704303741, 0.006308118347078562]}, {"target": [0], "doc": ["however , the first question that come to my mind be unit testing for class resource", "we do n't yet have an effective way to test class in powershell", "be n't this a block factor"], "issue_sim": [0.23247195780277252, 0.4522322416305542, -0.04010754078626633], "prob": [0.5823083519935608, 0.09788424521684647, 0.09206663817167282]}, {"target": [0], "doc": ["note that <tag> already work , because powershell happily convert this <tag> literal to an <tag> during parameter bind .", "powershell 's flexible automatic type conversion can be confuse at time , but by and large they be very useful - i do n't think we should introduce any artificial restriction here", "_ any _ new feature complicate back - port - it be the price of innovation", "there be many case already where feature have be add later  , and there be no way around know what feature where introduce when if you want to target early version too", "now we may have to think about how to \" batch \" new feature couple with semantic versioning so that it do n't become too complex to keep track of what feature be introduce when , but that be a separate discussion"], "issue_sim": [0.45852676033973694, 0.43263310194015503, 0.10321439802646637, 0.22161906957626343, 0.2821860909461975], "prob": [0.37152543663978577, 0.25266194343566895, 0.0010040136985480785, 0.19106431305408478, 0.31464487314224243]}, {"target": [0], "doc": ["queue_free mean that execution of free be not happen until next frame where all queue object free , i do not think its a good idea to rename it .", "force_free instead free look more well"], "issue_sim": [0.316932737827301, 0.09592773765325546], "prob": [0.8960988521575928, 0.0004027827235404402]}, {"target": [0], "doc": ["of course we can do the same thing by explicitly pass value to prop but i think we sometimes need such implicit data propagation .", "in my case , for example , i be write  and it have component for shape  render on canvas", "the shape component have to be descendant of context component that have canvas dom element", "when the datum of shape component be update , i have to notify to context component through an event bus to re - render the canvas", "to do so , i need such react 's context - like feature to propagate an event bus because <number> ) it be quite verbose to write prop for all shape component , <number> ) it need its own event bus instance for each context component instance and <number> ) i do n't want to manage this on global state management as this be local view 's concern"], "issue_sim": [0.4212888181209564, 0.4066038429737091, 0.4320693612098694, 0.3969384431838989, 0.5726454257965088], "prob": [0.6582786440849304, 0.01406839583069086, 0.007423920091241598, 0.1017807349562645, 0.38816744089126587]}, {"target": [0], "doc": ["i do n't think we can simply strip ets member automatically as there be case where you want those include .", "perhaps we can have a <tag> switch"], "issue_sim": [0.11892400681972504, 0.06973253190517426], "prob": [0.9271121621131897, 0.031124060973525047]}, {"target": [1], "doc": ["oh , the use case be clear to i :", "you do n't want to <tag> if the component be n't listen to the event because build the payload for the event be expensive"], "issue_sim": [0.12471722066402435, 0.4551498293876648], "prob": [0.05547011271119118, 0.9279983639717102]}, {"target": [0], "doc": ["you be problem be more related to the fact , that you be call the myservice too early .", "i just move your httpclient call away from the constructor to a new function", "inside the functio you then call the api behind", "then everything be work fine", "be carefull with call thing directly in the constructor", "in angular some part of the app be not yet there due to the boostrapping"], "issue_sim": [0.10465232282876968, 0.567309558391571, 0.25586891174316406, -0.06392967700958252, 0.4213419556617737, 0.37748831510543823], "prob": [0.886970043182373, 0.021355193108320236, 0.004662318620830774, 0.0014666201313957572, 0.03660208731889725, 0.014128013513982296]}, {"target": [2], "doc": ["it be more one use case : <url>", "it do n't work with jsdoc type without <tag>", "i use json schema in most of my backend and i have to create jsdoc type for payload manually every time ."], "issue_sim": [0.08697456866502762, 0.34237006306648254, 0.3438006639480591], "prob": [0.003323961980640888, 0.012838286347687244, 0.9157510995864868]}, {"target": [0], "doc": ["i do not think we should switch to use position , as that would be a disruptive change that all editor tsserver today have not ask for .", "we should look into way where we can enable position along with line / col"], "issue_sim": [0.3078724443912506, 0.37077048420906067], "prob": [0.9758761525154114, 0.013156802393496037]}, {"target": [0], "doc": ["regardless of the size the directive  , anything to do more code - splitting would be nice ."], "issue_sim": [0.5097216963768005], "prob": [0.9999725818634033]}, {"target": [0], "doc": ["copy w/ color work fine w/o padding , <tag> in psreadline handle it cleanly ."], "issue_sim": [0.3203672766685486], "prob": [0.9999836683273315]}, {"target": [0], "doc": ["so what do you think about extend the <tag> directive to accept a array of object , just like the one pass to <tag> in my", "i think its quite nice to have the listener definition in the template"], "issue_sim": [0.4115809500217438, 0.27909404039382935], "prob": [0.8677858114242554, 0.005733046680688858]}, {"target": [1], "doc": ["probably not a good option , but just in the interest of rounded discussion , worth mention there be also inverse square root in simd instruction set , which afaik be fast and more accurate :", "however there be lot of downside too - it require all the usual boiler plate for detect what be support and select a code path  .", "and it only seem to get significantly fast when you be do a bunch of these at a time", "so it probably do n't make a lot of sense unless godot have a general framework for use simd", "anyway question i 'd be wonder : : think :", "- be there any bit of code where profiling have indicate this as a bottleneck", "- be there any implication of change the accuracy in other bit of code", "if this be a problem"], "issue_sim": [-0.01702318899333477, 0.019345363602042198, 0.02212706208229065, -0.07318733632564545, 0.03971788287162781, -0.053666383028030396, 0.10600143671035767, 0.21895428001880646], "prob": [0.11283361166715622, 0.33761557936668396, 0.01744883507490158, 0.03782619163393974, 0.018100889399647713, 0.010577520355582237, 0.0026365509256720543, 0.00574107188731432]}, {"target": [3], "doc": ["but really , the type do n't make sense", "you be try to do this :", "the compiler correctly complain about both the assignment , since neither <tag> nor <tag> can satisfy the type <tag>", "the valid value of the type <tag> need to be simultaneously a <tag> and <tag> , which be n't possible .", "it sound to i like you be actually look for a way to take an interface of normal property and produce an interface that have a subset of property miss or optional , like  or something like flow 's type operator  )", "so hypothetically where <tag> be the type subtraction operator , you 'd write something like :"], "issue_sim": [0.013075216673314571, 0.055763594806194305, 0.3661454916000366, 0.25635862350463867, 0.28845110535621643, 0.22574648261070251], "prob": [0.006395770702511072, 0.006308786105364561, 0.1552697718143463, 0.22402408719062805, 0.2720150053501129, 0.009571300819516182]}, {"target": [1], "doc": ["sorry for not be clear", "what i mean to say be powershell already respect xdg spec for linux and macos . we should extend that to windows as well .", "module when then go in <tag> which would address the issue"], "issue_sim": [-0.001613423228263855, 0.3605937957763672, 0.014480587095022202], "prob": [0.005732747260481119, 0.9952364563941956, 0.041652850806713104]}, {"target": [0], "doc": ["there be a repo on the other thread that show this in action , not work as it should"], "issue_sim": [0.29407840967178345], "prob": [0.9999184608459473]}, {"target": [2], "doc": ["to sure i get it", "not only intersection , but union too :", "i get it : any sub - type - expression    of the type - expression be assert against should be a valid target of a type guard :"], "issue_sim": [0.02407529018819332, 0.13683268427848816, 0.3837421238422394], "prob": [0.16099825501441956, 0.10812046378850937, 0.6763217449188232]}, {"target": [1], "doc": ["i have to agree with @vitaly - t", "to i , it would make a lot of sense in the context of vector math to perform operation that read like you be work on an object  instead of work with array  .", "the big plus to i would be readability"], "issue_sim": [0.0671750009059906, 0.25794222950935364, 0.07383677363395691], "prob": [0.0005765706882812083, 0.9823355078697205, 0.009823366068303585]}, {"target": [0], "doc": ["i would like to * * show to the user that a more recent version be publish * * , even if the update be not available to use  .", "< p align=\"center \" >", "< img width=\"412 \" alt=\"dowloading_update2 \" src=\"<url> - images", "com/97092/82044829 - 5acbc100 - 96ae-11ea-8629 - d3af9c44d834", "it be frustrating when you have fix a bug , and your user test again , not know that even though they reload in their browser , they still run the previous version while the new be be download", "like suggest by @kylealandavi and @bobdankert , i would like that <tag> return a promise boolean", "an alternative would be to get an observable event when we start download the update"], "issue_sim": [0.39787715673446655, -0.012123586609959602, -0.057884059846401215, 0.07489045709371567, 0.3023338317871094, 0.6217893958091736, 0.39970171451568604], "prob": [0.5509623885154724, 0.0031981547363102436, 0.0012239656643941998, 0.08092682808637619, 0.970112681388855, 1.7829548596637323e-05, 0.05979283154010773]}, {"target": [2], "doc": ["@mightyjam that be a relative path , so it be fine", "we do not always use node module resolution for your package  , and it stand to reason that we 'd use the same module resolution for your configuration as for your other file", "which lead to the issue that it become possible to not know what module resolution scheme to use to find your configuration until we have find your configuration , which be an issue ."], "issue_sim": [0.19061966240406036, 0.29138171672821045, 0.3719633221626282], "prob": [0.004141355399042368, 0.7841507792472839, 0.7297357320785522]}, {"target": [1], "doc": ["@felixfbecker sorry , i 'll try to clarify what i mean", "instead of implement <tag> , you could let <tag> host the language service , and you would n't need to care about how it satisfy that interface .", "your language server process would rely on pass message to / from tsserver , which be inherently async"], "issue_sim": [-0.01851586252450943, 0.41104838252067566, 0.31194624304771423], "prob": [0.01166967861354351, 0.8799833655357361, 0.3013239800930023]}, {"target": [1], "doc": ["honestly , i be out of option", "with filtering i have artifact , without filter sprite become complete shit during movement , zoom out make art look like shit and blow up pixel art to 1.5x size make it look bad .", "on top of all this game stutter despite > <number> fps which look more and more like some fuckup in the engine", "joke aside , i be really bummed because of godot right now"], "issue_sim": [-0.10559266805648804, 0.39218249917030334, 0.18259865045547485, -0.006278900429606438], "prob": [0.0015198036562651396, 0.9410331845283508, 0.008909571915864944, 0.002489162143319845]}, {"target": [1], "doc": ["tbh this change would come anyway , so well to do it now and stick with it", "for 3d there be not that many tut so now the change will do less damage than in one , two year later ."], "issue_sim": [0.0879690945148468, 0.26286107301712036], "prob": [0.08295868337154388, 0.8276861310005188]}, {"target": [0], "doc": ["i do n't see the difference . in both case the route have to exist in the application , in both case the decision be make at runtime .", "the guard can easily defer the logic to a cached result that you eagerly calculate if for some reason this be absolutely necessary", "either way the request feature of make route inaccessible at runtime base on logic from a service already exist", "i 'd really love to see an actual , concrete example of something you 'd want to achieve with this feature  as maybe that make it easy to discuss if or why this be n't possible with the exist feature set and , if so , how this feature could be shape"], "issue_sim": [0.23829513788223267, 0.23285529017448425, 0.40279483795166016, 0.20961631834506989], "prob": [0.3675463795661926, 0.04449036344885826, 0.019492853432893753, 0.6647364497184753]}, {"target": [1], "doc": ["<tag> and <tag> do have an observable difference - they can be differentiate by <tag> or the plain <tag> operator", "so i think it be well for ts to continue treat <tag> to mean a _ require _ <tag> property of <tag> type , and <tag> to mean an optional <tag> property ."], "issue_sim": [0.37911540269851685, 0.3813157081604004], "prob": [0.0826740637421608, 0.9548161625862122]}, {"target": [2], "doc": ["nashorn directly map js to jvm bytecode , implementation now may not great enough as v8", "i believe thing will get well", "it be valuable to make vue.js ssr not bond to a specific javascript runtime .", "define some abstract interface and provide node", "js implementation as default will be great"], "issue_sim": [0.519963264465332, 0.03375136852264404, 0.4332432746887207, 0.24210982024669647, 0.42811107635498047], "prob": [0.035523172467947006, 0.06933522969484329, 0.9138070344924927, 0.010960026644170284, 0.023722384124994278]}, {"target": [6], "doc": ["can this llvm dependency compile to * all * target platform from the same host", "if not , then it break expectation in the cross - platform export system", "though it be somewhat a concern , the size be not much of the problem , what get it be that godot be suppose to be cross - platform , and usually compiler have a single target", "so we have to ship compiler to all platform , which be not really feasible", "i do n't have any problem if it be an * optional * external dependency", "as i say before :", "it be easy to just convert it to source code and let the user provide the toolchain on their own .", "this way it can be use with different compiler and linker"], "issue_sim": [0.39586371183395386, 0.1985078603029251, 0.4014386236667633, 0.41023361682891846, 0.20662908256053925, 0.016926493495702744, 0.428569495677948, 0.34215500950813293], "prob": [0.0397774875164032, 0.047794047743082047, 0.6896935701370239, 0.02289525792002678, 0.011226262897253036, 0.0009448715136386454, 0.3522948622703552, 0.004852697718888521]}, {"target": [0], "doc": ["well , you will obviusly not be able to run the game", "on we d , sep <number> , <number> at 1:26 pm , punto- notifications@github"], "issue_sim": [0.29034507274627686, -0.04990468919277191], "prob": [0.5554757118225098, 0.34005293250083923]}, {"target": [1], "doc": ["@fkolar to bind to what", "that component and its template work as pair .", "the template can bind only to the public property / method of its component class", "and html template be compile to js", "so it have the sense to talk about change a value , but not the target itself"], "issue_sim": [0.19602805376052856, 0.145300954580307, 0.34151649475097656, 0.31031155586242676, 0.1805567890405655], "prob": [0.00640547601506114, 0.7375847101211548, 0.04193707928061485, 0.03555852174758911, 0.07277517765760422]}, {"target": [1], "doc": ["new user should read what a method do before use it", "also queue_free be actually quite descriptive in my opinion ,", "of course as everything it need you to know waht it do and when you should use it"], "issue_sim": [0.19908712804317474, 0.11029446870088577, 0.056810446083545685], "prob": [0.007148489356040955, 0.026217415928840637, 0.7834625840187073]}, {"target": [8], "doc": ["my 2c : as they be define in atscript now , annotation have a couple of nasty problem", "they do n't compose", "if you need to add <number> annotation to <number> field , and they only differ sligtly by one parameter , you will need to copy - paste all <number> field , <number> time", "you ca n't abstract they behind a single annotation", "a factory function be more appropriate - that way they wo not have to be define as class", "they be passive and therefore limit in power", "the standard practice in js be to wrap function / object / property use other function , e", "angular , ember and other framework already do this kind of wrapping", "if annotation be add to the language , i 'd think they should reflect this . its quite easy to implement passive annotation on top of it .", "one of the tc39 proposal mention in the document above work like this", "its  and i think that s what atscript , typescript and es7 should aim for"], "issue_sim": [0.37931448221206665, 0.03591247648000717, 0.344500869512558, 0.35413533449172974, 0.1648574322462082, 0.006029363721609116, 0.38264065980911255, 0.3512307405471802, 0.5414086580276489, 0.18485179543495178, 0.3401869535446167], "prob": [0.046269409358501434, 0.0030443700961768627, 0.23630310595035553, 0.0010519354837015271, 0.0018475290853530169, 0.00027360275271348655, 0.007769524119794369, 0.0012554115382954478, 0.27625152468681335, 0.0011029306333512068, 0.0346716046333313]}, {"target": [0], "doc": ["that be why i be think a more portable c compiler like tiny c which could be use which be way small in size and support multiple platform .", "a retargettable compiler like lcc would be the good tho but i think it have licensing issue", "ah man i be start to think be more of a headache than be worth"], "issue_sim": [0.3773837983608246, 0.37457627058029175, 0.09257395565509796], "prob": [0.9863265752792358, 0.021345950663089752, 0.008220520801842213]}, {"target": [5], "doc": ["not an issue ,   because source file ca n't have the same name , so the combination of name and type be all the compiler need to know", "what about multiple function in one file", "still there be no collision because you ca n't have duplicate function in one file ,   so the fully qualified name of an export function would be", "unique addressiblity mean that the compiler can find everything", "we would n't need ngmodule at all", "think about how easy it would be to simply import from a namespace like this only where a component , directive , class , service need it .", "typescript already use intellisense to traverse the node_module library , so it be able to rely only on npm package repository", "it be only when we compile and get error because the angular compiler expect to see ngmodule import and we 've have n't take care of that import", "angular already use decorator which be just special class know to angular", "this mean that angular have everything it need right now"], "issue_sim": [0.34067457914352417, 0.26881861686706543, 0.3114297389984131, 0.21070575714111328, 0.15849411487579346, 0.584033191204071, 0.6111342906951904, 0.6288774013519287, 0.6336488127708435, 0.383531391620636], "prob": [0.4583336412906647, 0.00038834201404824853, 0.023732539266347885, 0.00024373247288167477, 0.0003650023718364537, 0.23342061042785645, 0.005022249184548855, 0.1567188948392868, 0.0054330164566636086, 7.510569412261248e-05]}, {"target": [0], "doc": ["that example should be improve a bit to work also in aot mode and not only in jit because this code <tag> ."], "issue_sim": [0.30228525400161743], "prob": [0.9999946355819702]}, {"target": [0], "doc": ["the only way to have they wait for each other be to have component - less , path - less route level where you can define each level of dependent resolve .", "but it lead to several other issue , like secondary route that do n't work because of the path - less parent , performance impact , as each level be be resolve in series , routerlinks you have to edit each time , as '", "/ ' go up one router config level , and not actually the url , like you would expect", "imho , the router , though rewrite several time , still be n't design well for big application", "it be even hard to find good example on how to use resolve in the official doc", "it be like they just put it there because ui - router have they", "resolve should be prefer over inject service into component"], "issue_sim": [0.47806695103645325, 0.37244388461112976, 0.2522866427898407, 0.22687843441963196, 0.3408140540122986, 0.06024404615163803, 0.368106484413147], "prob": [0.536549985408783, 0.6967148184776306, 0.052565157413482666, 0.04340400546789169, 0.0017800817731767893, 0.010858666151762009, 0.0003747265145648271]}, {"target": [0], "doc": ["other than this be how it use to work in ts , why should these two be different ?"], "issue_sim": [0.1076694056391716], "prob": [0.9999430179595947]}, {"target": [12], "doc": ["this nice bit of syntactic sugar be an odd thing not to have imo", "apart from issue where it have direct utility , e", "an iteratee derive from a semi - complex expression , where the need to refer to it twice add cruft and introduce the possibility of bug if the two reference go out of sync", "an iteratee that can not be declare empty just by reference length", "it also have value as a way of nudge one towards good practice", "@sirlancelot say that any time he think he need <tag> it turn out he do n't understand the problem fully", "for i it be the exact opposite : many time i 've code up a list only to realize that the design would misdirect the user in the case where the list be blank", "i have find that a fallback be need more often than not", "and of course @sirlancelot 's ption 1", "is exactly equivalent to the function of <tag>", "it be just slightly more verbose , and hence slightly less idiomatic - look", "the idea , to i , be that if a pattern be universally consider right and good , and it come up often , that pattern ought to have the simple syntax it reasonably can", "i 'll also add that give how many template language * do * have a feature like this , the absence of such a feature in vue become confuse .", "i mean , that be how i wind up here"], "issue_sim": [0.20843243598937988, 0.013431629166007042, 0.20252910256385803, 0.09792546182870865, 0.039130352437496185, 0.12813442945480347, 0.4479355216026306, 0.1803520768880844, 0.03701930493116379, 0.10314051806926727, 0.260498046875, 0.23005974292755127, 0.4144667983055115, 0.0063560036942362785], "prob": [0.004259358160197735, 0.0061317384243011475, 0.18095196783542633, 0.011945618316531181, 0.000953810173086822, 0.0012419612612575293, 0.20870894193649292, 0.002492027124390006, 0.00024514785036444664, 0.00043888037907890975, 0.0010938876075670123, 0.07281364500522614, 0.06636081635951996, 0.004580304492264986]}, {"target": [1], "doc": ["conceivably we could do something similar", "however , valuetype encompass _ all _ struct and may be an unsuitable reference as json only have a handful of standard representation", "we can simply refer to the spec and account for each type that it have a scalar value form for , and treat all other as they be normally treat , i would think ?"], "issue_sim": [0.02306346595287323, 0.25401124358177185, 0.198236882686615], "prob": [0.012182856909930706, 0.6332470774650574, 0.738634467124939]}, {"target": [1], "doc": ["@mathieutu look good , but what about use something like :", "it check if the <tag> method have be overwrite without compare value . i think this would be well for performance ."], "issue_sim": [0.17081652581691742, 0.4233659505844116], "prob": [0.028810206800699234, 0.8902536034584045]}, {"target": [1], "doc": ["@markekraus nice , i be completely unaware of <tag>", "if invoke with <tag> we can use it directly from powershell already :"], "issue_sim": [0.13993923366069794, 0.5238652229309082], "prob": [0.008991864509880543, 0.93007892370224]}, {"target": [3], "doc": ["i have no clue what be your problem here", "the import folder store the import setting of your asset , setting that can should be change through the import tab .", "this folder be hide because the user should use the import tab to modify those file , and not modify they by hand", "and if a user really need to change something by hand , for debug reason , he should understand that it be not the way you be usually suppose to deal   with this file", "so hide the folder be well , avoid misuse from typical user"], "issue_sim": [0.05381925031542778, 0.30074796080589294, 0.444519579410553, 0.3652595579624176, 0.37245261669158936], "prob": [0.008169329725205898, 0.5531718134880066, 0.1644006371498108, 0.5301048159599304, 0.003960995469242334]}, {"target": [6], "doc": ["this risk to become a flame war", "the log be so long that people will repeat the same question or topic instead of read it", "there be not much technical stuff remain to discuss either", "the future of godot in term of scripting be pretty clear already :", "- gdscript will stay as the main language and there be plan or idea to optimize it", "0 , c # will be support as a scripting alternative", "we will provide separate binary to avoid force the extra size cause by the mono runtime on people that wo n't use it .", "- dlscript be also on the work", "it will allow people to use share library for scripting", "these library can be write in any language that support c linkage and share library", "it be not clear yet if it will be ready for 3", "- do n't forget there will be visual scripting in 3", "if someone plan to contribute something else , this wo n't be the right place to discuss that either", "i think this issue can and should be close"], "issue_sim": [0.04916226491332054, 0.10138321667909622, 0.04930385947227478, 0.388643741607666, 0.23038911819458008, 0.3018146753311157, 0.2417992651462555, -0.004556945525109768, 0.3504260778427124, 0.3352341651916504, 0.022478517144918442, 0.22362996637821198, 0.0616355761885643, 0.03763877600431442], "prob": [0.0015525707276538014, 0.031387872993946075, 0.014787359163165092, 0.18725121021270752, 0.11656061559915543, 0.011166888289153576, 0.16700373589992523, 0.0020995717495679855, 0.005017714109271765, 0.006233202759176493, 0.0036115122493356466, 0.004787672311067581, 0.028643770143389702, 0.003427621442824602]}, {"target": [7], "doc": ["you be make this * * way * * too complicated", "there be no need for any functionality to be add in order to remove the default alias -- even a set to say which module to import would be overkill when we have profile script", "i be not try to get the alia _ feature _ remove", "i use alias , and i want to keep use they", "i do n't want to loose the ability to change the name of command", "i just want to clean out the default and give _ exist user _ an easy way to load the alias they be use to", "in an ideal world , i want to do all of that without break anything more , although obviously we 'll need user to add the <tag> line to their profile", "the main point be to ensure we never _ again _ break people 's experience by such a silly trivial change as remove a build - in alia .", "i honestly do n't think you can get a new set add to module manifest", "we still do n't have a set to indicate the support * * edition * * or * * operating system * * , nevermind something as meta as whether the author think the module should be use interactively"], "issue_sim": [0.06048616021871567, 0.5408269166946411, 0.11529116332530975, 0.3327106833457947, 0.22149138152599335, 0.37220120429992676, 0.2811088263988495, 0.06817498803138733, 0.3479365110397339, 0.3824233114719391], "prob": [0.0009277964127250016, 0.4536120593547821, 0.0016871385741978884, 0.003240145742893219, 0.00695047527551651, 0.06256427615880966, 0.16724595427513123, 0.10022354871034622, 0.001785685890354216, 0.33701571822166443]}, {"target": [2], "doc": ["@groud would be great if we could test godot 's visual script in a school environment - with kid learn basic code concept", "one of construct2 's big selling point have be to teach kid code and they have be sell a special educational license for year", "my argument be that visual script in godot at the moment be not very inviting to non - coder and do n't really help people learn how to code - because its approach be purely state machine centric and basic programming concept get even more complicated with additional nodegraph centric rule on top .", "experience programmer be really not the good audience to sell this to- because they would see the event sheet as a simplification of what we already have - gdscript and will see blueprint as a new tool that could be use as a state machine by designer", "i would love to try to write a basic event sheet addon in gdscript ,   i be really not experience enough to make a native script addon", "if that be possible and you have some pointer where to start - i would love to hear they", "maybe if there be enough interest somebody might make it in nativescript"], "issue_sim": [0.3833681344985962, 0.16561070084571838, 0.4266923666000366, 0.4070185720920563, 0.41481292247772217, 0.09125913679599762, 0.11128035187721252], "prob": [0.006264952942728996, 0.18443280458450317, 0.2686383128166199, 0.13048256933689117, 0.013823562301695347, 0.005254462361335754, 0.0013508101692423224]}, {"target": [0], "doc": ["it be design to work with the <tag> as an input property , so include it be currently require .", "it be probably go to stay this way for a while in term of priority because of how the benefit weigh against the actual work", "i 'll keep it open for now"], "issue_sim": [0.28845107555389404, 0.08415904641151428, 0.04566378891468048], "prob": [0.9705169796943665, 0.038462165743112564, 0.0023947430308908224]}, {"target": [1], "doc": ["@mhilbrunner well to have healthy discussion it would be the good to see first what we be talk about :) i be use editor a lot and i be probably just get use to those thing since i ca n't really recall if they be in the ui or not", "also your ' for education use ' argument   be very convincing in my eye"], "issue_sim": [0.43842634558677673, 0.02374185621738434], "prob": [0.6574075818061829, 0.2500457167625427]}, {"target": [4], "doc": ["how hard would it be to add modulate color for texture and provide a couple of default variable : background color , foreground color , highlight color to use in a theme", "so a style box have an addition property : <tag> which than can be set to <tag>", "or a flat style box can use <tag> as the border color", "this would be some additional work but would allow for tremendous customisation", "we could use djrm 's stylboxes which be really nice and we just change the color to white/ different grey value and give they a modulate color base on the expose variable .", "that would be an amazing addition to the editor in general and would also apply for any user create theme", "@volzhs what be your thought on that", "how hard would you estimate be it be implementation"], "issue_sim": [-0.03629162162542343, -0.018865015357732773, -0.045317184180021286, 0.04256202653050423, -0.023900050669908524, -0.05729980766773224, 0.011491872370243073, 0.038995832204818726], "prob": [0.8240868449211121, 0.1333797723054886, 0.0008353974553756416, 0.0004834372375626117, 0.5642951130867004, 0.0012235045433044434, 8.625119818361782e-08, 0.0015324585838243365]}, {"target": [0], "doc": ["here we be talk about dynamic load in any case , otherwise you 'd still have to recompile godot in order to write module , and in that case how would that be different from the current approach ?"], "issue_sim": [0.4635758399963379], "prob": [0.9999247789382935]}, {"target": [3], "doc": ["regard flicker in ssr - we can only do so much to avoid it", "preboot will not stop flicker", "last week i debug a site where a google analytic experiment script be cause client to hide it be body till it be ready and be cause a flicker", "we be go to have a schematic to set <tag> as the setting for ssr app .", "this eliminate one easy source of flicker", "but there may be more - we will keep try to locate they and add way to avoid they"], "issue_sim": [0.1304006576538086, 0.13072216510772705, 0.21602970361709595, 0.11102006584405899, 0.10742484778165817, 0.06685677915811539], "prob": [0.03482617437839508, 0.007388286292552948, 0.21236355602741241, 0.14443336427211761, 0.0010324025060981512, 0.04102480784058571]}, {"target": [0], "doc": ["close this as i believe it be possible to implement portals in vue 2.x in userland with current feature set .", "if anyone be interested in it , keep an eye on @linusborg 's repo"], "issue_sim": [0.4864043891429901, 0.08638361096382141], "prob": [0.8320791125297546, 0.07773812115192413]}, {"target": [1], "doc": ["@codedarigan i understand it have benefit and i be not deny they , but i sincerely believe that the cost outweigh they", "add to this that pretty much we have no significant complain from gdscript user , who prefer the current approach , so it would force they to an unwanted worfklow and type more code in a language that be intend to just write quick and dirty stuff fast .  .", "this be why i mean that they can exist as metadata for script language binding , and we could even add they for gdnative c++", "just not add they for core c++ engine"], "issue_sim": [0.033299826085567474, 0.31263047456741333, 0.3547833561897278, 0.341116726398468], "prob": [0.12832017242908478, 0.8408726453781128, 0.02580222859978676, 0.00025475904112681746]}, {"target": [0], "doc": ["do i understand correctly that <tag> be kind of replacement of support decorator and if we generate it we should not generate code for decorator in the js code ?"], "issue_sim": [0.5193110704421997], "prob": [0.9999480247497559]}, {"target": [5], "doc": ["@spock123 : let i start by say that i have no idea how the angular compiler work", "that say , the request be not for angular compiler to support kotlin directly , but rather to step aside and not be so tightly couple to typescript", "this would allow any language that compile to javascript to be support", "some time ago , i find some information about how to use angular with plain javascript", "i ca n't tell if the info apply to angularjs or angular , because of the very bad decision to keep the same name , even though it be a totally different framework", "to reiterate , angular should work with plain javascript .", "when that be possible , then angular will be able to work with any language that compile to javascript , include kotlin", "someone more knowledgeable than i please add a comment state :", "- whether angular support plain javascript * * instead of * * typescript", "- if so , how to do it", "- it not , what need to change in angular to support this"], "issue_sim": [0.5686771869659424, 0.6941351890563965, 0.4531101584434509, 0.5751364827156067, 0.48980912566185, 0.5751240253448486, 0.6268637180328369, 0.01626000367105007, 0.6868167519569397, -0.01846458949148655, 0.48586031794548035], "prob": [6.753309571649879e-05, 0.5306295156478882, 0.007862486876547337, 1.4757139069843106e-05, 0.2239704579114914, 0.13381201028823853, 0.001248253509402275, 0.000446612189989537, 5.930129418629804e-07, 1.166482161352178e-05, 0.0011103006545454264]}, {"target": [0], "doc": ["actually , this work on current typescript and any nightly - it be only appear if you enable <tag> as i mention in the original issue .", "you can try copy my original snippet into typescript and you 'll see it actually work"], "issue_sim": [0.6188478469848633, 0.47722551226615906], "prob": [0.8553759455680847, 0.11052701622247696]}, {"target": [3], "doc": ["+1 for custom modifier", "i come from an angular background , and just start with vue , and see this thread", "i feel it would really help have something like angular 's parser and formatter , in vue too", "if i could do something like v - model.dateformat and result in something like mm / dd / yyyy , it would be really cool .", "edit : look like it reiterate on what @restored18 say", "+1 to you too"], "issue_sim": [0.29207494854927063, 0.19699138402938843, 0.30557122826576233, 0.23432396352291107, 0.03441085293889046, 0.04673713445663452], "prob": [0.0014983339933678508, 0.07951588183641434, 0.3725087344646454, 0.6686357259750366, 0.00806890707463026, 0.003676644992083311]}, {"target": [0], "doc": ["it would be very useful , especially with some kind of a cms , where all the relevant component would be send with json asynchronically , and the whole composite tree would be build up at runtime with dynamic component ."], "issue_sim": [0.5474347472190857], "prob": [0.999994158744812]}, {"target": [11], "doc": ["thank for the pointer", "quick summary on what be relevant for this issue :", "the link proposal be reject because it be too complex , and many use case it be originally think for can now be solve use other feature like indexed and conditional type", "it be still not possible to infer the type of all possible expression", "two interesting use case that be still not possible be to access infer return type of generic or overloaded function", "this proposal would solve the former , but not the latter", "i do n't know the code base , but i imagine this proposal would be relatively easy to implement , at least when compare to # <number>", "when i write <tag> , i mean that as <tag> , not <tag>", "to elaborate , let 's reconsider the <tag> example", "<tag> have type <tag>", "then <tag> have type <tag> , and <tag> would return exactly that", "i guess what i be try to say be that <tag> narrow the type of a function on the expression level , and use <tag> you can access the type of that expression .", "as i say , this be really just take what already happen in call like <tag> , but decouple the generics - bind syntax from the function call syntax", "that be another interesting possibility i have n't think about", "it rely on type - level function call be implement , and use typeof to lift the result expression to the type level", "the advantage of such a type - call syntax would be that you do n't need <tag> anymore", "on the other hand , you have to provide type for all argument even if the return type do n't depend on they", "to access the infer return type <tag> for <tag> with call syntax you need <tag> , whereas with type argument you need <tag>", "so one need extra <tag> and <tag> symbol , while the other need the <tag> helper", "when overload resolution be out of play , i would like to come back to <tag> for a moment : would that really be so wrong", "i only think about it on the expression level , but i think it would work on the type level as well", "i understand that <tag> be not a generic type in the same way as promise < t > would be , since the type variable of the function signature be still free", "but be n't that exactly the reason it make sense to provide it with one", "<tag> be essentially a higher - kinded type , and by provide it with a <tag> , we could get an ordinary type <tag>"], "issue_sim": [0.04735841602087021, -0.0050070397555828094, 0.43132394552230835, 0.3124436140060425, 0.5970887541770935, 0.2188572883605957, 0.370817631483078, 0.12616793811321259, 0.09554695338010788, 0.33638566732406616, 0.3375741243362427, 0.44834157824516296, 0.5971518754959106, 0.11544520407915115, 0.4687212109565735, 0.485024094581604, 0.4056951701641083, 0.5666515231132507, 0.19647270441055298, 0.14458057284355164, 0.26026588678359985, 0.5745385885238647, 0.15201476216316223, 0.36147841811180115], "prob": [1.8091363017447293e-05, 1.2317510481807403e-05, 0.11078047752380371, 6.002834652463207e-06, 0.00025571411242708564, 1.1437823559390381e-05, 0.00030577954021282494, 6.976235908950912e-06, 0.0005211831303313375, 2.1790335722471355e-06, 5.468574272526894e-06, 0.004621639382094145, 0.003282252699136734, 4.0265244933834765e-06, 0.00011675574205582961, 0.000138853196403943, 0.0002578520798124373, 0.00014419847866520286, 4.820782123715617e-06, 0.0016016960144042969, 3.966322401538491e-05, 0.016330726444721222, 0.0011761017376556993, 0.034996453672647476]}, {"target": [1], "doc": ["all godot vector type be float by default , and in the c++ backend there be already <tag>  and <tag>", "have a new gdscript / c # <tag> that be int would be quite inconsistent ."], "issue_sim": [0.4934185743331909, 0.34380340576171875], "prob": [0.16504396498203278, 0.9159963726997375]}, {"target": [2], "doc": ["trivial for some magic for other , i would argue all build - in map and conditional type be trivial to write but that do not make they any less useful", "have a common set of type make code easy to understand across project", "<tag> be also simple to understand for new typescript devs and they do n't have to do conditional type math when look at a definition , they just care about the behavior of the type ."], "issue_sim": [0.2626454830169678, 0.28045228123664856, 0.4941875636577606], "prob": [0.7253687381744385, 0.005766387563198805, 0.6258065700531006]}, {"target": [2], "doc": ["yes , but then llvm would become a dependency so it would make more sense to use llvm for everything", "i do n't think the boost in performance would be small for large game", "maybe for arcade game it would not be noticeable , but in game with a lot of loop and function call it definitely would .", "also , be there a discussion about why c # over java or even c++", "i think c # be a very good language , but the clr and tooling be definitely inferior to the jvm"], "issue_sim": [0.5941466689109802, 0.34254926443099976, 0.18752814829349518, 0.48103445768356323, 0.517886757850647], "prob": [0.14264871180057526, 0.07324226200580597, 0.6666399836540222, 0.0029185947496443987, 0.15904545783996582]}, {"target": [1], "doc": ["@mjbvz , @jrieken : i 've be work on the tsserver api for call hierarchy , and here be what i 've come up with :", "rather than round - trip a <tag> as would be do in the vs code api , vs code would send tsserver the file and location of the declaration relate to the <tag> . we can then use that to determine the declaration from which to find incoming and outgoing call .", "i 've build a prototype of both the vs code support for the tsserver api , as well as the tsserver implementation itself , though i do have a few additional question :", "how should a <tag> be represent as a <tag>", "in ts / js , its frequently the case that the caller of a function be the source file itself :", "i be include source file in the prototype i have build , however i be not certain of the good way to represent the \" name \" of the call hierarchy item :", "the comment for the <tag> property of a <tag> indicate it should be use for something like a signature", "give that this be merely a <tag> , what be the intend format", "since ts / js function / method differ only in signature and not in implementation , do provide the signature even make sense here", "this have be bring up in <url> , but i 'll mention it here as well", "ts / js have several different call convention we should be aware of :", "* <tag>  <tag> newexpression <tag> )", "should we support call hierarchy on method signature in interface", "they obviously would n't have outgoing call , but they could have incoming call", "the vs version of call hierarchy do seem to support this :"], "issue_sim": [0.028152309358119965, 0.007167212665081024, -0.026247885078191757, -0.14715972542762756, -0.07204411923885345, -0.02295532450079918, -0.0664033591747284, -0.020481616258621216, -0.014496136456727982, 0.1289336383342743, 0.06091419979929924, -0.04490957036614418, -0.12478725612163544, 0.052024975419044495, 0.032272860407829285], "prob": [0.06891031563282013, 0.49276819825172424, 0.12739306688308716, 0.0037550588604062796, 0.15135769546031952, 0.1242813691496849, 0.0034758681431412697, 0.000454415479907766, 0.005936962552368641, 0.005537000950425863, 0.004191959742456675, 0.00031871689134277403, 0.004682325758039951, 0.022096944972872734, 0.003954465035349131]}, {"target": [0], "doc": ["that be true , to spawn a process that run your game you 'd have to do some. intent / activity trickery that be too annoying to even think about", ":p  , and we register a", "player to open that url scheme in android", ") but the app could launch in", "\" project manager \" mode , and just let you run or edit every time you launch", "on <number> september <number> at 13:29 , juan linietsky notifications@github"], "issue_sim": [0.28533411026000977, -0.050847914069890976, 0.25664353370666504, 0.3494628667831421, 0.2614293396472931, -0.011053393594920635], "prob": [0.8689274191856384, 0.022654177621006966, 0.022007957100868225, 0.02129967138171196, 0.06821335852146149, 0.017524385824799538]}, {"target": [0], "doc": ["what if the <tag> component be create before <tag> ?", "i think this be a decent work around / pattern , but could fail if you have the follow logic :"], "issue_sim": [0.36604297161102295, 0.2770645022392273], "prob": [0.7325724363327026, 0.3443824052810669]}, {"target": [5], "doc": ["@mhegazy , @kitsonk typescript be widely use by angular <number> developer", "the only compiler that can treeshake angular <number> module be google closure  )", "it be a huge difference for google closure between { ' a ' :", "} and { a :", "} , x and x", "so provide an option to disallow dot access for type with index signature and quote access for type w / out index signature could be really beneficial , the way i see it ."], "issue_sim": [0.30987846851348877, 0.26018622517585754, 0.1320856660604477, 0.039588943123817444, 0.03229944407939911, 0.4571412205696106], "prob": [0.018084291368722916, 0.4218239486217499, 0.013628119602799416, 0.0026786685921251774, 0.009870979934930801, 0.8157972097396851]}, {"target": [4], "doc": ["@jaykul thank for the short and clear thought", "i totally agree that the time have come and we have to complete this story that last two year", "related # <number> # <number>", "base on previous discussion we know that some user want all the windows aliase , some one only part , some one do not want they at all", "we have also come to the conclusion that aliase only make sense in an interactive session and should  be exclude from script .", "so i see a simple solution that we can implement in step :", "create compatibility module :", "- the first only aliase without conflict", "- the second include all alias from previous module and curently exclude windows powershell aliase", "- the third include all windows powershell aliase", "import these module only in the interactive session", "we could add a new set <tag> to a module manifest", "this feature will be useful for all compatibility module and psreadline", "enable an user to choose which compatibility module to download or not to download at all use a configuration file  and gpo", "until we implement the option user can load select compatibility module use their profile file", "add an option to disable / enable alias in script - enhance strict mode  or / and <tag> statement", "add global option  to enable / disable alias in script"], "issue_sim": [-0.08747106790542603, 0.045474451035261154, 0.08926037698984146, 0.21836484968662262, 0.2832217216491699, 0.11558255553245544, 0.38268354535102844, 0.019798945635557175, 0.5426125526428223, 0.4272187054157257, 0.3659610152244568, 0.3309207856655121, 0.27731558680534363, 0.2872636914253235, 0.2167387753725052, 0.3358573317527771, 0.341403603553772], "prob": [0.012246053665876389, 0.012723169289529324, 0.003458924125880003, 0.33543574810028076, 0.5233973860740662, 0.013053049333393574, 0.003341360716149211, 0.0035344301722943783, 0.012804185040295124, 0.004382130224257708, 0.0015405392041429877, 0.0033178236335515976, 0.002581600099802017, 0.019236214458942413, 0.008240020833909512, 0.08103115856647491, 0.0038371249102056026]}, {"target": [0], "doc": ["write custom component be fine but if you want to use a 3rd party custom component like <url> there be no straight forward way to sanitize the masked input to model value except use compute property ."], "issue_sim": [0.4986901879310608], "prob": [0.9995600581169128]}, {"target": [0], "doc": ["please add a repro in plunkr", "ca n't reproduce <url>"], "issue_sim": [0.2771625816822052, 0.1161312386393547], "prob": [0.7249317765235901, 0.038718048483133316]}, {"target": [1], "doc": ["as long as this bug be still present , and we do n't have ngoninit in service i see two solution :", "use a settimeout in the service constructor  <tag> ngoninit <tag>"], "issue_sim": [0.28716132044792175, 0.6279504299163818], "prob": [0.6643704175949097, 0.07420596480369568]}, {"target": [0], "doc": ["be n't <tag> mean to be a short version ?"], "issue_sim": [0.03568798303604126], "prob": [0.9999983310699463]}, {"target": [0], "doc": ["here be another use case , when support promise in <tag> might be useful :. you need to set app base href dynamically use external configuration .", "- in order to get this external configuration you can use <tag>", "- but then , in <tag> of <tag> provider you need to wait for this call to finish to get config", "and since you can only use value there , it be not possible", "seem like currently the only way to do so , be to move config load into <tag> file , and bootstrap application only after all config be load and pass config in extra provider like so    :", "which seem like a hack , especially when app_initializer be use specifically for app initialization , but you ca n't use it in this particular case", "the same issue be describe here : <url>"], "issue_sim": [0.6335130929946899, 0.2670542299747467, 0.4006144106388092, 0.14580243825912476, 0.4172217845916748, 0.3356102406978607, 0.11059737205505371], "prob": [0.8242849707603455, 0.010532070882618427, 0.1800466775894165, 0.009448801167309284, 0.4358982443809509, 0.10057836771011353, 0.001650487189181149]}, {"target": [3], "doc": ["what be the need for such feature", "be there anything this allow that you can not do now", "or do it make some task significantly fast to deal with", "i 'd rather keep gdscript a simple language than add complex feature almost never use ."], "issue_sim": [0.08727794140577316, -0.01103792991489172, 0.10665131360292435, 0.283110648393631], "prob": [0.010419158264994621, 0.010711242444813251, 0.016851654276251793, 0.9590723514556885]}, {"target": [2], "doc": ["it should be possible to autogenerate external declaration dts file from dt type", "i 've be go through and do it by hand for node", "plus , not everything on dt be a node package ."], "issue_sim": [0.24198879301548004, 0.1260966807603836, 0.27577903866767883], "prob": [0.00794990174472332, 0.0035597141832113266, 0.9796149134635925]}, {"target": [1], "doc": ["that be to be expect", "the icu expression get a translation  and the contain message , <tag> get a translation too  ."], "issue_sim": [0.04073936492204666, 0.21765416860580444], "prob": [0.022457467392086983, 0.9735773205757141]}, {"target": [0], "doc": ["it be kind of optional because the editor will deduplicate range anyways - so if it hinder an elegant implementation i wo n't do it ."], "issue_sim": [0.2972069978713989], "prob": [0.9999889135360718]}, {"target": [0], "doc": ["just for precis amd be not yet in the list because they still have n't pass the vulkan conformance test suite , but their driver already work well on the first vulkan game port talos ."], "issue_sim": [0.5884403586387634], "prob": [0.9998519420623779]}, {"target": [0], "doc": ["the ability to change the title seem to i the basic and thus fundamental feature .", "i have a site develop with php and now i be do a kind of practice to re - write it with react  and vue so that i can assess how convenient it would be", "my site be a book collection site , so to change the title of my dynamic page  to reflect the book title this page be on be quite useful", "i also need to update the <tag> and <tag> section to include the title , author , publisher , tag , etc", "just a piece of my thought"], "issue_sim": [0.0270056314766407, 0.39612793922424316, 0.34905028343200684, 0.3170977830886841, 0.00043783336877822876], "prob": [0.11413507163524628, 0.5559134483337402, 0.15385231375694275, 0.0315442830324173, 0.0045674932189285755]}, {"target": [3], "doc": ["thank for the issue", "i agree there be something wrong or at least misleading about this api", "i be not entirely sure what the good solution be though as there be a number of thing to consider", "minimally it seem there should be a way to get access to the \" never \" value you provide in the \" value \" attribute ."], "issue_sim": [0.07044418901205063, 0.15985649824142456, 0.12058538943529129, 0.4101722836494446], "prob": [0.006609718315303326, 0.3935469090938568, 0.23100726306438446, 0.558752715587616]}, {"target": [0], "doc": ["fwiw , i bump into this issue and find that add the service as a dep seem to work for i .", "so in your module , set up your provider like so :", "then , in my constructor i can import it", "i have n't dig deep yet , but it be work , though if you have multiple dep , the order seem to matter", "that be unconfirmed , though"], "issue_sim": [0.2954769730567932, 0.2822139263153076, 0.3703387379646301, -0.01500820554792881, 0.07066012173891068], "prob": [0.8045623302459717, 0.041861966252326965, 0.019382357597351074, 0.428420752286911, 0.007091926410794258]}, {"target": [1], "doc": ["style do not need any aot  , but the angular do need to template for aot compilation", "if you understand the component architecture , you should be able to reuse the code between two different component .", "you need to create an extra component , in your case <tag> , and then include that in accounts-entity"], "issue_sim": [0.4851587116718292, 0.5846319198608398, 0.5179688930511475], "prob": [0.05131141468882561, 0.8738977313041687, 0.018872635439038277]}, {"target": [2], "doc": ["thank @dummdidumm for file this issue", "i be about to post the same thing about a week ago", "not transpile dynamic import be an important aspect to enable for node v12 + in regard to load esm for commonjs target ts effort .", "it will be use for a lot more than load configuration file", "i be an outside contributor ~~attempting~~  to get heroku / salesforce to add esm load capability to their  that be due for launch in the come month", "i have already work out the essential change with a proof of concept that be discuss in the issue link above , but it require a workaround", "oclif be a ts project which target commonjs for release", "one can build cli in commonjs or ts ; my propose change add esm to the mix which be quite relevant as the node ecosystem move to esm", "the least bad workaround i could come up with be the follow :", "<tag> which be use internally to an encapsulate addition for load esm via dynamic import or require for non - esm code -", "as an outside contributor i certainly could not touch the build process , so the above seem to do the trick until a flag can be add to typescript which be certainly desirable"], "issue_sim": [0.10133901983499527, 0.022120457142591476, 0.5343637466430664, 0.2138187289237976, 0.27165350317955017, 0.28042086958885193, 0.23667141795158386, 0.48510390520095825, 0.13181453943252563, 0.5000321865081787, 0.4348522424697876], "prob": [0.0018364033894613385, 0.001032914617098868, 0.11933440715074539, 0.0021235637832432985, 0.10538091510534286, 0.008321914821863174, 0.0006195568130351603, 0.08330881595611572, 0.0005928649916313589, 0.03363064303994179, 0.20180641114711761]}, {"target": [5], "doc": ["another example be unreal 's blueprint system , which have a * * do once * * node :", "i think you could look at it be source code if you wish - i believe it be write in c++", "it seem to work almost exactly as we think ours should", "if godot be really plan to do a visual scripting in the future , have this operator in gdscript in advance would be useful to have under the hood", "even without a visual scripting system , it be damn useful in term of control flow with less code and creation of new boolean variable all over the place", "a key point of this feature be that the   programmer should not have to create a new boolean variable and keep track of it .", "instead the trigger would do that for we under the hood"], "issue_sim": [0.1780223846435547, 0.18894553184509277, 0.0041716378182172775, 0.30535781383514404, 0.4586658477783203, 0.4065598249435425, 0.1241767555475235], "prob": [0.07797170430421829, 0.1709151566028595, 0.003067287616431713, 0.26329174637794495, 0.14159254729747772, 0.21804532408714294, 0.003613678039982915]}, {"target": [0], "doc": ["i find it very confuse .", "you can simply do :", "or , to be more explicit :"], "issue_sim": [0.056177012622356415, 0.10419998317956924, 0.05626501142978668], "prob": [0.8209672570228577, 0.014121186919510365, 0.06364216655492783]}, {"target": [0], "doc": ["imo it will bring more confusion than profit .", "ca n't see any problem use <tag> here", "to my pov it be just like \" i want it to look like a real input \"", "way too subjective :)"], "issue_sim": [0.012195935472846031, 0.09945153445005417, 0.030765067785978317, -0.07145120948553085], "prob": [0.9846990704536438, 0.0007893489091657102, 0.049880433827638626, 0.004444890655577183]}, {"target": [1], "doc": ["the current update notification workflow be indeed less than ideal", "fwiw , you can have a little more control by call  explicitly  .", "while <tag> do not report whether an update be find or not  it allow you to know when a check happen", "then by subscribe to <tag> you can know whether a new version have be detect", "if a new version be detect , it will be download and emit on <tag> before the promise return by <tag> resolve", "so , that could be use to emulate your \" a new version finish download \" event", "if the promise return by <tag> resolve without a value be emit on <tag> , this can mean two thing :", "there be no update available", "there be an error while check or download the update", "there be no straight - forward way to distinguish the two , but if an error occur the sw would have enter a degraded mode", "so , you can determine what happen by request <tag> parse it manually for the sw state with somthe like :", "you can read more about the available debug option", "i be go to leave it open as a feature request , but it be not a high priority", "if anyone want to take it on , i would be happy to help / review"], "issue_sim": [0.30988720059394836, 0.2589927315711975, 0.32867705821990967, 0.37464720010757446, 0.5456599593162537, 0.3096386194229126, 0.2983260154724121, 0.08060040324926376, 0.17370697855949402, 0.19337591528892517, 0.39470577239990234, 0.042750097811222076, 0.22085098922252655, 0.12311480194330215], "prob": [0.012069741263985634, 0.04013364017009735, 0.04880528897047043, 0.04655662924051285, 0.014732340350747108, 0.0014301500050351024, 0.05338529124855995, 4.507086850935593e-05, 0.0002254649589303881, 0.022931883111596107, 0.009188680909574032, 0.00021895102690905333, 0.004093271680176258, 0.0005005283164791763]}, {"target": [0], "doc": ["just for curiosity ... what be print when you inject <tag> into the ' configservice ` ?", "import { location } from ' @angular / common ' ;"], "issue_sim": [0.153842955827713, 0.28223901987075806], "prob": [0.939918041229248, 0.019139744341373444]}, {"target": [0], "doc": ["it be primarily about pass <tag> through , though allow empty array can also help with dynamically construct parameter list ;", "i 've add an example to the initial post , base on"], "issue_sim": [0.4363252818584442, -0.015703432261943817], "prob": [0.8898804783821106, 0.009374801069498062]}, {"target": [2], "doc": ["i have similar relate problem as your", "fyi , i have explore  , and", "i be pleased to have a work poc with the late reactjs and angular <number> component within an angular app shell with angular extension elements", "the different web component be able to interface with each other and for the angular component , only a minor configuration change and code change at app.module.ts .", "so the app shell will need to house the common library use by reactjs and angular component , so that the web component can be lean to be lazy loaded", "this help i in my micro - frontends application design", "hope it work for you"], "issue_sim": [-0.06910181045532227, -0.005792491137981415, 0.7527766823768616, 0.6604347825050354, 0.636278510093689, 0.1911146640777588, 0.044866882264614105], "prob": [0.048263050615787506, 0.04291889816522598, 0.5088212490081787, 0.5396414995193481, 0.41479095816612244, 0.007271028123795986, 0.002606611233204603]}, {"target": [1], "doc": ["@nickmesse thank so much ,", "that do seem to work , but i ca n't seem to make the follow work without a vue warn about directly mutate the <tag> value <tag> prop .", "ideally i would n't want to and do not want to add another <tag> value <tag> to the data section or similar as it would seem redundant", "be there a way of achieve this simple component without get too verbose"], "issue_sim": [-0.047297023236751556, 0.4507349729537964, 0.27118465304374695, 0.4191102683544159], "prob": [2.2479649487650022e-05, 0.9361003637313843, 0.28922298550605774, 0.001363404211588204]}, {"target": [2], "doc": ["@yyx990803 i be also concerned about enlarge api for convenience , but since <tag> also handle the case of iteration through object that be n't array , i would indeed value a <tag> or <tag> directive", "g an object property do not have a direct <tag> property etc", "the fact that an iterator be empty seem very much symmetrical to v - if / v - else to i .", "in my current case , i iterate through property  without necessarily need to express in the template how the iterator be implement", "since v - for have to iterate anyway , extend it to keep a boolean  and render an ' empty ' branch if the loop content be never touch after iteration should be helpful , straightforward and more performant than call object", "length even if the template include an understanding of the iterator implementation", "empty iterator branch also have precedence in all other template language i use so far", "the current way seem quite clumsy  and it wo n't really get any well when use a component method on this either"], "issue_sim": [0.4524776339530945, 0.02258414216339588, 0.304340124130249, 0.44712743163108826, 0.43068182468414307, 0.30745449662208557, 0.4021676182746887, 0.20297642052173615], "prob": [0.0046315910294651985, 0.0027100201696157455, 0.09055505692958832, 0.06265434622764587, 0.5483203530311584, 0.008254487998783588, 0.003301431192085147, 0.022904466837644577]}, {"target": [6], "doc": ["thank , @tbosch , though i admit i be not totally clear on what you mean about use <tag>", "typically , even when i use <tag> , it be do at the same point everything else about the testing module be be configure", "the above seem like it be just as much a candidate for cache / reuse the compile result", "so maybe you be talk about some less common way of use the <tag> method", "if so , maybe provide a way for we to indicate that we want to cache / reuse the compile result even if <tag> be use ?", "either something like :", "basically , i think the cached compile result should still be an option even if <tag> be use , as long as the developer indicate that the test module configuration be n't change between spec run", "let i know if that make sense"], "issue_sim": [0.12341438978910446, 0.4598774015903473, 0.3777405023574829, 0.03788572922348976, 0.4811621904373169, 0.0017731981351971626, 0.5727508068084717, 0.06861786544322968], "prob": [0.0038935067132115364, 0.19039054214954376, 0.011867044493556023, 0.004740708041936159, 0.650627613067627, 0.012204742059111595, 0.5987486839294434, 0.0014100876869633794]}, {"target": [0], "doc": ["i understand that people want to customize the engine color , but first thing it can be do with texture  , and second i think that the people that be go tho change the color of the engine be minimal", "it be simply not worth it to restrict the theme to be simple box in favor to color customization that just a few people will use"], "issue_sim": [-0.05218842625617981, -0.023422040045261383], "prob": [0.8822522759437561, 0.47852978110313416]}, {"target": [1], "doc": ["@yyx990803 it could be a bootstrap 's problem , but at the same time bootstrap also  to use <tag> on display property", "vue should n't change the default behaviour , and bootstrap ca n't remove <tag> from its utility", "but i still like @posva suggestion of add an option like <tag> for those who want to use it .", "another option could be add a * * new global configuration property * * for this :"], "issue_sim": [0.564566969871521, 0.44600605964660645, 0.09819847345352173, 0.17653195559978485], "prob": [0.028549188748002052, 0.36789435148239136, 0.4623371660709381, 0.022389870136976242]}, {"target": [0], "doc": ["why do you change the theme that much , i like the customization concept , but you do a lot of change to the new theme  you should have leave the theme as it be and then we could improved if need it", ", the new theme that you propose , look in my opinion really strange and incomplete , it still use old element that do not fit , and look like a windows <number> program with really sharp edge", "or maybe i do not understand what be you do , be that another theme that be not suppose to be the new default"], "issue_sim": [-0.030057724565267563, -0.00880722887814045, -0.011682147160172462], "prob": [0.7093232870101929, 0.7594102621078491, 0.02005375549197197]}, {"target": [1], "doc": ["i think the main point of this pr that change theme color , or make a theme in general , be a tedious task", "as i say in another issue , make / modde a theme in a modular way  should be make easy rather than try to add special customizer for the build - in editor theme .", "@toger5 modulate be not always enough , you might need more core color , and it require the base texture to be black and white otherwise color will badly blend"], "issue_sim": [-0.0254826582968235, -0.06509928405284882, 0.01778683252632618], "prob": [0.5808497071266174, 0.7904731035232544, 0.2717127501964569]}, {"target": [0], "doc": ["the react css style can be handle with a type annotation on the constant :"], "issue_sim": [0.4522378444671631], "prob": [0.9999110698699951]}, {"target": [0], "doc": ["either this or it should be make clear that there be magic happen when a game run"], "issue_sim": [0.19718393683433533], "prob": [0.9988811612129211]}, {"target": [0], "doc": ["well , i think it be the expect behavior .", "you should be get an error like this in the console so you get a clue on what be go on :"], "issue_sim": [-0.00044774264097213745, 0.2153286635875702], "prob": [0.9901032447814941, 0.007221846841275692]}, {"target": [0], "doc": ["a quick and dirty fix use directive :"], "issue_sim": [0.27343612909317017], "prob": [0.9994571805000305]}, {"target": [1], "doc": ["yes i remember we discuss this", "after try it myself though , i really do n't like how all the tab stop get highlight along with the code i type in the method body :", "i end up press <tag> right away to cancel out of the snippet right away"], "issue_sim": [-0.002149653621017933, 0.5711275935173035, 0.24811770021915436], "prob": [0.027351832017302513, 0.8156187534332275, 0.0526852160692215]}, {"target": [0], "doc": ["one thing everyone should understand about <tag> be that it always treat its content as statement , not as expression .", "that mean that standard collection unroll behavior apply , when expression supply as first  element of pipeline"], "issue_sim": [0.255772203207016, 0.20860028266906738], "prob": [0.7418695688247681, 0.1753687560558319]}, {"target": [3], "doc": ["@mlc - mlapis i find that issue before i file this one", "but that thread focus on load module outside the router , it mimic the behavior of what the router do with the advantage you can also inject provider", "what i be look for be a solution with the router", "i just want a decoupling between my feature libs and my applications , but those feature lib need to run inside a context of an application , and that context need to deliver some configuration to my feature library ."], "issue_sim": [0.057851314544677734, 0.2985530495643616, 0.2179286777973175, 0.5744420289993286], "prob": [0.00014417032070923597, 0.7539851665496826, 0.0009478587890043855, 0.9489841461181641]}, {"target": [1], "doc": ["@reduz i just explain why it do make a lot of sense  from a usability standpoint", "i be aware technically it might not be a useful thing to do , but the problem here be user expectation and unexpected needless error message , not whether it make a lot of sense to do this .", "edit : might not actually have mention it be indeed somewhat useless technically : smile : but as i just explain here , that be n't the point of the ticket"], "issue_sim": [0.12325309216976166, 0.36663785576820374, 0.15353067219257355], "prob": [0.003848538501188159, 0.5426082015037537, 0.5828421711921692]}, {"target": [0], "doc": ["well no , godot do not allow you to do whatever you want with your file structure , that be it .", "the way you have to organize your file be part of godot 's design", "godot need a project", "godot file and an import folder", "you remove they , your project do not work", "exactly like git require a", "git folder , a", "gitignore and so on , it be part of the software design", "yes you do , if you provide several way of deal with a specific problem , you make it hard to anyone understand how to make something", "a good software design just provide you with a single and easy way to deal with your problem", "but if there be no use case in make this more flexible , there be no reason to do it", "well , you might prefer that yeah , but once again this be a design decision", "if you want to import a file , it should be in the project folder", "and allow to load file from outside have be discuss several time", "~~they be not zombie file , import file describe how your asset should be import", "they contain several important information", "such as the filter you apply on sprite or thing like that , they be more like metadata file than a cache", "edit : sorry , @bojidar - bg   explain i that the <tag> folder contain in fact cache file , so my first comment be false", "but the reasoning behind it be still valid"], "issue_sim": [0.33306580781936646, 0.25686314702033997, 0.2306649088859558, 0.3941507935523987, 0.22056114673614502, -0.0027495473623275757, 0.18633368611335754, 0.2518027126789093, 0.1355164498090744, 0.24002890288829803, 0.22892159223556519, 0.15490829944610596, 0.31916844844818115, 0.1564192920923233, 0.44336891174316406, 0.008385514840483665, 0.24699747562408447, 0.3792625069618225, 0.07339892536401749], "prob": [0.014861428178846836, 0.001863557379692793, 0.00041113627958111465, 0.0009635963360778987, 0.003400298999622464, 0.0034432816319167614, 0.010077498853206635, 0.14597362279891968, 0.22226959466934204, 0.004697622265666723, 0.011833734810352325, 0.018517086282372475, 0.0066650668159127235, 0.0019925995729863644, 0.0791201964020729, 0.0005405385745689273, 0.03661506995558739, 0.0029224238824099302, 0.008196216076612473]}, {"target": [6], "doc": ["to i , so far , the generic random class look good , except you 'll need to drop all reference to stl", "it open up the possibility for easily build rng module", "however , i do n't think provide multiple algorithm be a good idea", "yes , there be trade - off , but user do n't know about these", "there be an entire academic field around rng  , and having talk to expert who implement rng hardware , i know for sure this be not easy .", "there be standard randomness test suite , and some of the algorithm include fail they already", "i do n't see any algorithm in that list , that be qualitatively well than pcg in any regard , so i personally do n't really see the point of include a zoo of prng in the core", "i think there should only be two rng implementation in the core", "a good prng  , and a good hardware rng", "these be different rng qualitatively , and i do n't think godot need to provide a bunch of implementation for each"], "issue_sim": [-0.14680686593055725, -0.04657360911369324, 0.0062388889491558075, 0.03158316761255264, -0.036863185465335846, 0.022975478321313858, 0.023878416046500206, 0.011981035582721233, -0.07215496152639389, -0.07593576610088348], "prob": [0.05449816957116127, 0.0005848963628523052, 0.008990781381726265, 0.0327959842979908, 0.34005454182624817, 0.002085304819047451, 0.21559607982635498, 0.00026848798734135926, 8.904619608074427e-05, 0.037078194320201874]}, {"target": [0], "doc": ["i 'd vote in favor of <tag> and <tag>  .", "not <tag> though , then well leave it as - be"], "issue_sim": [0.17773114144802094, 0.1912560611963272], "prob": [0.7340640425682068, 0.11620505899190903]}, {"target": [0], "doc": ["you can use dynamic <tag> to load a lazily - load module and during instantiate of that module , you can pass an injector , which you can modify before  , so you have those injection available in constructor of any part of such a lazily - load module ."], "issue_sim": [0.4972984790802002], "prob": [0.9996094107627869]}, {"target": [0], "doc": ["that be probably what we will do in the future - but for now we want to focus on provide a good , stable and performant node - base ssr solution first ."], "issue_sim": [0.30575329065322876], "prob": [0.9999209642410278]}, {"target": [1], "doc": ["@lzybkr have you consider pack the shim in a set of module in the gallery maintain by microsoft while portable module specify the dependency in their manifest as a require module rather than custom tag", "to i this look like the classic problem of share a dynamic library and a good solution be a package manager .", "msbuild do not have a package manager  but powershell do"], "issue_sim": [0.5457284450531006, 0.36640042066574097, 0.6281284093856812], "prob": [0.004931270610541105, 0.9718238115310669, 0.024285975843667984]}, {"target": [1], "doc": ["the object in the pipeline be a complex business object and we need a sort-**algorithm * * to calculate it be right , \" natural order \"", "because powershell be use in more and more use case  , i think it be the natural development to have more complex object which need their own sort-?command .", "our powershell module offer the business logic to the user , so he can just work with the business object"], "issue_sim": [0.3525891602039337, 0.4122018814086914, 0.43941181898117065], "prob": [0.5234899520874023, 0.903506338596344, 0.0028802924789488316]}, {"target": [0], "doc": ["i do not try , but compile godot editor for arm linux would be well !", "due to chromebook release with arm processor"], "issue_sim": [0.43864548206329346, 0.15893638134002686], "prob": [0.8002545833587646, 0.14633522927761078]}, {"target": [2], "doc": ["@isazonov i be not that concerned about the linktype as it be n't display by default", "i be start to think that the right solution be just to change the default format", "we can keep the current as a non - default view ."], "issue_sim": [0.33973994851112366, 0.30857783555984497, 0.09954249858856201], "prob": [0.00756937637925148, 0.039123836904764175, 0.9735018610954285]}, {"target": [0], "doc": ["at least as an intermediate step , angular might behave as be in case value attribute be miss from checkbox to prevent break exist usage .", "if instead any value attribute be provide , angular should respect it and set the formcontrol", "value accordingly , i", "set it to that of the attribute if check , else set it to undefined and omit it from formgroup"], "issue_sim": [0.6710027456283569, 0.6696591377258301, 0.11253770440816879, 0.5438021421432495], "prob": [0.6348438858985901, 0.07659343630075455, 0.026469776406884193, 0.1457972526550293]}, {"target": [3], "doc": ["i have no objection to have the same behavior on all platform", "my only concern be that it would be well to make such change in a version before lts", "and we need to review windows powershell module before accept the change", "we need to keep current behavior otherwise we _ break _ a design of many script .", "i think we need to have separate issue to discuss redesign the area , i expect it will large discussion because", "there be many contradiction between developer and consumer , between use in script and cmdlet , and so on", "i agree to limit width to <number> char - it be enough to have ~1 char per <number> %", "we need to look on minimal width value too while we be here", "it could raise old question about how often do we need to update the display so that the user do not think about freeze , but again this should be discuss separately", "if we intend to make many improvement in this progress bar area we need to open new meta issue and collect all the discussion there"], "issue_sim": [0.20019236207008362, 0.20258763432502747, 0.18874570727348328, 0.15805062651634216, 0.22305400669574738, 0.09310393035411835, 0.261364221572876, 0.1992691159248352, 0.33270901441574097, 0.44048547744750977], "prob": [0.01903504505753517, 0.07365332543849945, 0.005490672774612904, 0.04341679438948631, 0.003915085922926664, 0.00959605723619461, 0.010944454930722713, 0.005136444233357906, 0.15864644944667816, 0.035983115434646606]}, {"target": [1], "doc": ["@morgul <tag> be still available because the conversion from a number to a string be very straightforward", "that be not the case for other arbitrary type , e.g. date ."], "issue_sim": [0.3695084750652313, 0.3087981343269348], "prob": [0.0005771977012045681, 0.9989898800849915]}, {"target": [0], "doc": ["ca n't this trivially be achieve by model your command as a plain class and have a \" factory injectable \" with some create method that create an instance , pass the dependency to it and then return it ?"], "issue_sim": [0.4967547059059143], "prob": [0.9999792575836182]}, {"target": [0], "doc": ["i personally like this idea , but what i be really after be consistence mostly ."], "issue_sim": [0.11580336093902588], "prob": [0.9997813105583191]}, {"target": [0], "doc": ["i think <tag> should try to stay close to native behavior , and only do value conversion when the user explicitly want it .", "so we 'll keep the current behavior"], "issue_sim": [0.0012652035802602768, 0.018501415848731995], "prob": [0.9824579358100891, 0.0002492258499842137]}, {"target": [2], "doc": ["the problem be not pc support , this will be eventually resolve within a", "the main limitation be adoption on mobile and html5", "as a lot of godot user make game for mobile , we must give priority to. api that work on such platform .", "1 be on the way to", "be widely standardized so they get priority", "also , gles3 be already very powerful and we will be able to enormously", "improve the render quality thank to it", "on fri , feb <number> , <number> at 11:26 am , hubert jarosz notifications@github"], "issue_sim": [0.2439013421535492, 0.17502832412719727, 0.4970543682575226, 0.08832758665084839, 0.11775034666061401, 0.15664082765579224, 0.20344720780849457, -0.005811392329633236], "prob": [0.004224459175020456, 0.0004930530558340251, 0.7330541014671326, 5.4293606808641925e-05, 7.477137114619836e-05, 0.01690182276070118, 0.0005290143308229744, 1.1794417332566809e-05]}, {"target": [0], "doc": ["close as wo n't fix - the complexity here be far too great for the limited utility ."], "issue_sim": [0.0810043215751648], "prob": [0.9999370574951172]}, {"target": [0], "doc": ["we do n't like to replace basic ts declare unless necessary , so we extend the base .", "for that reason i just create a complete type from the mdn doc"], "issue_sim": [0.14305907487869263, 0.30345314741134644], "prob": [0.8367279171943665, 0.08613575994968414]}, {"target": [1], "doc": ["ets be a key and very power feature of powershell", "i believe that any attempt to limit key feature will most likely be reject by the committee as it have do before .", "this have be say even for primitive type", "and i agree with that", "first , it be the current behavior for many year", "second , it be not insurmountable - powershell be so flexible that user can always find workaround , which i understand happen in some of the scenario mention here", "we must be absolutely convinced that this behavior block important script and powershell development in order to change it", "it be important to note what should be say about _ specific _ scenario", "so if a user want to have a frombase64string property on a string in a particular scenario , he must create a new runspace and add it there , not in his profile", "it also imply that the user want this property by default everywhere in this scenario , include serialization", "if it be not , then we need to provide it with <tag>", "as for property come from provider , i believe this should be a feature of the provider as the provider developer design", "this imply that we should not change the default behavior of exist provider , but could provide the ability for user to change this behavior for specific scenario", "as for property come from engine , i believe it be not good practice come from limitation of our formatting system and we should enhance formatting system", "i agree that helper property add exclusively for formatting system should be normally hide but it make no sense to make a break change for the particular serialization   scenario - we should make this only in formatting system enhancement time"], "issue_sim": [0.22627320885658264, 0.11800651252269745, 0.09686824679374695, -0.018604492768645287, 0.1014922484755516, 0.41499391198158264, 0.25045350193977356, -0.1077495813369751, 0.27662864327430725, 0.3817659616470337, 0.05024199187755585, 0.1522175371646881, 0.3117557764053345, 0.08998256921768188, 0.3622215986251831], "prob": [0.0026141765993088484, 0.033162761479616165, 0.0006495480192825198, 0.00035426372778601944, 0.0009689670405350626, 0.07902761548757553, 0.09192508459091187, 0.000820947578176856, 0.14855556190013885, 0.0013556946069002151, 0.0006094190757721663, 0.007167954463511705, 0.01952424831688404, 0.036851074546575546, 0.15278398990631104]}, {"target": [1], "doc": ["i disagree with <tag>", "<tag> will already be present and there be no need to add a second parameter to do the same thing .", "there be already discussion and back and forth on <tag> and i think that debate do not need to be revisit"], "issue_sim": [0.059211522340774536, 0.3234352469444275, 0.009108723141252995], "prob": [0.013228164985775948, 0.7565696835517883, 0.5061119794845581]}, {"target": [0], "doc": ["so this same thing come up in the context of svelte transpilation processhey have to write a custom transformer to re - add back import that be remove because they look unused , but be in fact use in template code , which ts doesn understand .", "move some conversation from # <number> and continue it here", "in # <number> i propose a mode where :"], "issue_sim": [0.4509325623512268, 0.057707782834768295, -0.014385901391506195], "prob": [0.9972737431526184, 0.003736811922863126, 0.0023910978343337774]}, {"target": [2], "doc": ["it use to be available before 2", "you could access the property through ,", "it be remove with the addition of custom model input value , but be a very useful feature and should be back in the framework ."], "issue_sim": [0.11804743111133575, 0.0029658712446689606, 0.41732192039489746], "prob": [0.022569656372070312, 0.08902666717767715, 0.8860195279121399]}, {"target": [4], "doc": ["it would still be <tag> vs <tag>", "<tag> be the nuclear bomb of css specificity : there be nothing above it", "bet on a double <tag> conflict for the application layout be a terrible idea imo", "i do not know the reason why bootstrap <tag> class use <tag> in the first place , but by make this decision , it imply that bootstrap claim the priority on the element visibility state", "vue should not interfere in this priority war , otherwise we would have the opposite problem where a user want to override the style in css but ca n't because of vue ."], "issue_sim": [-0.015498939901590347, 0.3346322178840637, 0.2641924023628235, 0.6294387578964233, 0.554523229598999], "prob": [0.004683331120759249, 0.02870892733335495, 0.028054049238562584, 0.2520252764225006, 0.45590195059776306]}, {"target": [0], "doc": ["so while allow narrow <tag> to <tag> seem pointless in the simple case  , with more complex type expression it make type guard much clear without diminish type safety ."], "issue_sim": [0.3761709928512573], "prob": [0.9999872446060181]}, {"target": [0], "doc": ["that kind of type guard be very error - prone since it depend on the other type in the union not have a property with the same name as an implementation detail :", "allow this would mean you could no long add or rename an object 's internal property without worry about whether it might conflict with a union somewhere"], "issue_sim": [0.4151889979839325, 0.39011892676353455], "prob": [0.8654906749725342, 0.16590020060539246]}, {"target": [0], "doc": ["<tag> be a private and static field inside <tag> class and <tag> be static too .", "as you can create this kind of static field and method in nodejs , it should work in ts", "node allow this way for create singleton pattern", "i do n't understand why ts be show that error"], "issue_sim": [0.3121471405029297, 0.47531816363334656, 0.3269551396369934, 0.170752614736557], "prob": [0.7627684473991394, 0.34661397337913513, 0.004167652688920498, 0.017627840861678123]}, {"target": [1], "doc": ["powershell have more stream than stdout and stderr , but these be only understand from within powershell", "by default , i believe it be expect for the extended stream to be send to stdout from pwsh.exe as it ca n't send it anywhere else .", "try to understand the use case here", "if you do n't want the warning stream , you could just add <tag> into the script", "if you want to redirect those stream to something else , you can do it within the script as well", "be you ask for something like :"], "issue_sim": [0.45895981788635254, 0.36255234479904175, 0.14673760533332825, 0.4601116180419922, 0.3371623158454895, -0.0007433714345097542], "prob": [0.06814268976449966, 0.8842442035675049, 0.00010484545055078343, 0.038907717913389206, 0.02123725600540638, 3.834451126749627e-05]}, {"target": [1], "doc": ["sorry , that comment be a bit rude", "you can modify the prop you pass down .", "i feel like you have n't dig enough your problem but at the same time , to i , it look like you understand more than the average user", "have you ask on the forum or discord to get further help"], "issue_sim": [-0.11997924745082855, 0.20863625407218933, 0.01437750831246376, 0.04907859116792679], "prob": [0.035796716809272766, 0.06963291764259338, 0.4666292667388916, 0.018804192543029785]}, {"target": [0], "doc": ["consider composition over inheritance .", "a component be a piece of code that interact with a view", "there be always a <number> to <number> relationship between they"], "issue_sim": [0.15434810519218445, 0.43456679582595825, 0.07021533697843552], "prob": [0.9929763078689575, 0.03475373238325119, 0.00329679436981678]}, {"target": [0], "doc": ["my good advice if you be concerned with provide meta content to the head would be :. . - add place holder to the html document template like <tag>. - create a store for seo , update with correct datum. - when serve the head of document ect , replace the placeholder with correct datum .", "if use any client base tool , you can use the store datum and update the title as necessary", "if you have any more question or concern let i know"], "issue_sim": [0.45871037244796753, 0.22216001152992249, 0.050701409578323364], "prob": [0.961857795715332, 0.37138739228248596, 0.0018605865770950913]}, {"target": [0], "doc": ["i would like to see integer vector type too , especially when it come to make dictionary index by position .", "have a hasher for point2i and point3i would be good", "not so important , but as part of <url> , why be point2i not name vector2i instead"], "issue_sim": [0.4212739169597626, 0.22975312173366547, 0.13621002435684204], "prob": [0.6994886994361877, 0.06119379773736, 0.18591079115867615]}, {"target": [0], "doc": ["as i can see all attrs be omit  .", "if this issue be still important , i can try to fix it"], "issue_sim": [0.05266476422548294, 0.2174307405948639], "prob": [0.46449774503707886, 0.23630252480506897]}, {"target": [0], "doc": ["even if the keyframe be at the length of the animation , thing get weird because it set the frame back to <number> instead of whatever the keyframe be .", "it might not be noticeable in all case , but i definitely notice it in some", "@okamstudio i 'd agree with an extra interpolation mode that do n't blend beginning to end", "would appreciate if it be the default as well , since it be the normal behavior"], "issue_sim": [0.7076075673103333, 0.08968352526426315, 0.2637704014778137, 0.23385906219482422], "prob": [0.9721588492393494, 0.07302690297365189, 0.0001220760605065152, 0.006741231307387352]}, {"target": [0], "doc": ["the other benefit to direct import of <tag> where it be need be refactore .", "if the data picker component import declaration be at the top of every file that need this component  then that file become self descriptive and can be move around , possibly to a completely different project module , more easily"], "issue_sim": [0.28470176458358765, 0.6160314083099365], "prob": [0.8424743413925171, 0.4473104476928711]}, {"target": [0], "doc": ["ivy 's <tag> only recompile component for which an override have be register , otherwise it be able to reuse prior compilation  ."], "issue_sim": [0.5325800180435181], "prob": [0.9999674558639526]}, {"target": [0], "doc": ["that s simple = do not ever use aliases in script !", "we even have a rule in the static analysis engine psscriptanalyzer <url> warn about this", "powershell engine will not run a script in downlevel version if you be to put in"], "issue_sim": [0.2852039337158203, 0.14815428853034973, 0.5841484665870667], "prob": [0.4979648292064667, 0.19559922814369202, 0.04911230877041817]}, {"target": [0], "doc": ["no feedback receive , but the propose solution with the <tag> be something that work .", "i also add a pr for this behavior , but it have be reject : <url>"], "issue_sim": [0.18622168898582458, 0.2335030436515808], "prob": [0.7573329210281372, 0.33673349022865295]}, {"target": [3], "doc": ["let i describe how i understand how <tag> work", "suppose you have this :", "it be more or less equivalent to :", "so <tag> invoke provide statement , collect all the pipeline output and create array from they .", "notice : it absolutely do not care what kind of object  you write into pipeline , and that be where great power of <tag> be", "_ note special case : <tag>", "i think that in this case <tag> be eliminate as optimization , but that lead to incorrect , imho , result , when <tag> be type", "<tag> return <tag> instead of <tag>", "how be that useful", "it be useful when you work with array of array", "suppose you have follow command :", "if you have <number> line in <tag> , then result will be <tag>", "but if have only <number> line , then result will be <tag> , but not <tag>", "what if you always want to have array of array , regardless of number of line in <tag>", "other example : suppose you want to filter array of row  by some condition , and then find how many be actually satisfy condition", "that be how to do it right :", "the same apply on any other transformation of array of row , for example", "<tag> make this case work especially because it wrap single array write into pipeline into another single element array , which other method , like cast to <tag> , do not do", "so , how do <tag> different from <tag> from above", "right answer : they do not different , both write array into pipeline as single object , and it get wrap by <tag> operator , because it be what that operator do"], "issue_sim": [0.12187039852142334, -0.08328591287136078, 0.056392375379800797, 0.3870668411254883, 0.25195881724357605, 0.051005177199840546, 0.2923637330532074, 0.2810019850730896, -0.008831588551402092, 0.22701390087604523, 0.04656181111931801, 0.09469142556190491, 0.12476619333028793, 0.3093982934951782, 0.22407731413841248, -0.028990155085921288, 0.1252172589302063, 0.5746761560440063, 0.008769739419221878, 0.43342915177345276], "prob": [9.415114618605003e-06, 5.1065006118733436e-05, 4.95234016852919e-05, 0.061090532690286636, 0.06040497124195099, 3.4643148865143303e-06, 0.015606213361024857, 8.535328561265487e-06, 3.107778866251465e-06, 2.304097688465845e-05, 1.894875822472386e-06, 1.8911116512754234e-06, 7.366766567429295e-06, 4.123512553633191e-05, 0.00014199131692294031, 6.754492574145843e-07, 1.1436405657150317e-05, 0.0639643445611, 3.9660685615672264e-06, 0.1908658891916275]}, {"target": [0], "doc": ["for this you can access the snapshot and use a route reuse strategy that always recreate the routed component instead of reuse it .", "you could also use thing like canactivate guard or resolver to fully resolve object and make they available to all component through a service provide on the routed component"], "issue_sim": [0.44686001539230347, 0.5076216459274292], "prob": [0.6465612649917603, 0.2679230868816376]}, {"target": [1], "doc": ["this match the intend design", "this type have the scope of a class / interface , and be not instantiate on every call . this have be discuss before in <url> ."], "issue_sim": [0.11330460011959076, 0.4233536124229431], "prob": [0.004270697943866253, 0.9590860605239868]}, {"target": [0], "doc": ["a zero boilerplate , zero repetition ,  design be doable .", "we just have to look at it carefully", "there be still <number> open issue on the issue log", "the simple angular get the small the issue stack get and the more time we can spend build meaningful thing"], "issue_sim": [0.06712786853313446, 0.13597418367862701, 0.1399361789226532, 0.2876545786857605], "prob": [0.7636696100234985, 0.0014432959724217653, 0.003261180128902197, 0.10430146008729935]}, {"target": [3], "doc": ["this feature be really want for react - native user", "ts postfix rule if", "we use almost reusable module have partial difference about web and native", "now , we must specify alias path for import file have either extension because relative path do n't support change extension   as mention in <url> .", "because of that , though bundle work in webpack configure resolve extension , vscode do n't analyze type   unless use set compileoption 's path like \" ~ / * \" :  , and even if export file in same directory in which locate the file import it , we must specify ' ~/dir1 / dir2 / dir3/", "/target ' the file point to target", "i really have trouble that configuration always more complex as it be"], "issue_sim": [0.37978097796440125, 0.07084640860557556, 0.22741541266441345, 0.44936642050743103, 0.582797646522522, 0.14018815755844116, 0.1312275528907776], "prob": [0.11116908490657806, 0.028035618364810944, 0.01018903311342001, 0.04134538024663925, 0.18573738634586334, 0.010302837938070297, 0.09973818808794022]}, {"target": [0], "doc": ["the binding will give you access to the regular godot reflection api , you do n't have to do anything from godot side", "@zylann i do n't think one of these module will link another one"], "issue_sim": [0.3887009620666504, 0.2778359651565552], "prob": [0.8964614272117615, 0.013603475876152515]}, {"target": [0], "doc": ["there be plenty of way to solve that , for example a directive with a boolean input that when it change to true focus the host .", "or split into small component and use exist viewchild mechanism etc"], "issue_sim": [0.391373872756958, 0.1191706582903862], "prob": [0.8758052587509155, 0.02310432493686676]}, {"target": [0], "doc": ["the route be n't aware that the ngmodule be destroy  , so the di be always return that module and its provider  .", "the data structure be completely wipe though", "i have some custom initialization logic in the constructor of my lazy module , but that constructor be n't be call anymore because no new instance be be make"], "issue_sim": [0.49855107069015503, 0.10452206432819366, 0.4366905391216278], "prob": [0.8323458433151245, 0.011410328559577465, 0.3726585805416107]}, {"target": [1], "doc": ["any update on this", "it just seem bizarre  to _ recompile _ all the component over and over for every spec method .", "obviously , component need to be _ recreate _ between spec method", "but i see no possible reason why the component would need to be _ recompile _ more than once for a give spec"], "issue_sim": [0.05528116971254349, 0.46177244186401367, 0.3231710195541382, 0.40845683217048645], "prob": [0.007210015784949064, 0.8890494108200073, 0.01261364109814167, 0.7338101267814636]}, {"target": [0], "doc": ["this could be useful for spread in argument list , but why would n't you use an object literal instead ?"], "issue_sim": [0.3999476730823517], "prob": [0.9999750852584839]}, {"target": [0], "doc": ["the <tag> and <tag> parameter must be <tag> .", "sorry , i mislead you by my example", "it should be :"], "issue_sim": [0.08251847326755524, -0.013623330742120743, 0.047720663249492645], "prob": [0.8960261940956116, 0.018685713410377502, 0.02391212061047554]}, {"target": [1], "doc": ["as have be mention in the pester issue pester / pester#706  ,", "the reliability of a purely class - base dsc resource will be very difficult to ensure . they be not testable .", "judge from the comment in that thread , fix that will by necessity involve significant reworking / improvement in how class in ps as a whole be handle", "i do n't know about y' all , but the idea that * * all * * dsc resource will be fundamentally impossible to mock and otherwise difficult at good to shore up with proper test make i very uneasy", "if you be go to force folk to use class for dsc , please make they usable", "ps class be so annoying and limit to use in ps that if i find myself need they , i usually move to c # instead anyway", "i do n't think dsc resource author should be force into a frustrating experience"], "issue_sim": [0.09539546072483063, 0.29935726523399353, 0.07672109454870224, 0.2563067674636841, 0.2669838070869446, 0.13533857464790344, 0.31884533166885376], "prob": [0.029893038794398308, 0.17140565812587738, 0.14214734733104706, 0.2595338821411133, 0.010639735497534275, 0.13042107224464417, 0.0031199350487440825]}, {"target": [8], "doc": ["drive - by impression :", "come over from aurelia and durandal i 've find this to be bizarre", "i expect it to just work", "surely update datum from api response query base on user input be a common use - case for compute property", "would the cache of a compute not be desire in these type of use", "why would you be force to re - roll all these feature from scratch when you have a structure which update base on input   and cache the result until they change again", "see a few suggestion to use a hook once at startup to fill datum", "in contrast to my experience where most use - case for these type of update property be the other way around", "you be often query small set out of much large datum - set which would be impractical to load at startup .", "edit : i realise <tag> exist and probably suit these case too", "find it be angularjs style clunky though"], "issue_sim": [0.0037604719400405884, 0.32730379700660706, 0.009939039126038551, 0.4037367105484009, 0.13439816236495972, 0.2374207079410553, 0.08622466772794724, 0.3019125461578369, 0.16800202429294586, 0.025402406230568886, 0.3167582154273987], "prob": [0.0015861019492149353, 0.12299427390098572, 0.002455588895827532, 0.0011434024199843407, 0.008463201113045216, 0.5593352913856506, 0.0017534784274175763, 0.0037990740966051817, 0.05435684695839882, 0.00041828045505099, 0.0004038248735014349]}, {"target": [7], "doc": ["@danielrosenwasser could you expand on why you be against my solution for bind", "do you believe your proposal will be well from a user standpoint", "as a typescript user , i want to use bind in an identical way to javascript", "and have it type as per my previous post", "your proposal would not support this", "for example , use your solution ' bind2 ' , the code would look like :", "and even bad for function with more apply args e", "use bind as describe in my proposal be not only more familiar to people who know javascript , but also allow easy transition from untyped javascript code into properly type typescript ."], "issue_sim": [0.2589207887649536, -0.026331758126616478, 0.4660850763320923, 0.06590723991394043, 0.08109773695468903, 0.2944851517677307, 0.1590939313173294, 0.46805649995803833], "prob": [6.096587094361894e-05, 0.001745849964208901, 0.09413094073534012, 0.00023756854352541268, 0.0007431403500959277, 0.009481697343289852, 0.0003072867984883487, 0.8016394972801208]}, {"target": [0], "doc": ["it be to permit an optimisation that only build a large parameter object for a give event if the event be actually to be receive by the component on which it be emit ."], "issue_sim": [0.5666334629058838], "prob": [0.9999692440032959]}, {"target": [0], "doc": ["i disagree , if we do this the path inside scene would be totally break ."], "issue_sim": [0.06217235326766968], "prob": [0.9999748468399048]}, {"target": [0], "doc": ["there currently be n't a way to implicitly pass down prop .", "- explicitly pass down prop be n't clean for object like store for your application state", "- plugins kind of solve the issue , but they can only be apply globally", "- <tag> be an option , but then you be force to set the datum on the root component"], "issue_sim": [0.2875635027885437, 0.45497822761535645, 0.29780882596969604, 0.3741776943206787], "prob": [0.2584162950515747, 0.13161934912204742, 0.00981284398585558, 0.11385234445333481]}, {"target": [1], "doc": ["@waterplea i be think only emit when the change be from <tag> and vice versa", "this should n't happen that frequently for any given link , right ?"], "issue_sim": [0.23512884974479675, 0.10979437828063965], "prob": [0.26082462072372437, 0.8408397436141968]}, {"target": [1], "doc": ["no it be pretty useful", "once you know there be the same thing it help understand what a vector be about .", "it be use a lot in the backend code"], "issue_sim": [0.011064741760492325, 0.16337129473686218, 0.03976511210203171], "prob": [0.07520835846662521, 0.9140803813934326, 0.0835341289639473]}, {"target": [0], "doc": ["the issue be more general : candeactivate guard be call every time when any guard return urltree and navigationcancel+navigationstart event occur"], "issue_sim": [0.5870108604431152], "prob": [0.9999638795852661]}, {"target": [0], "doc": ["i be just think that you might need to listen to the same set of event in multiple place so this could help to avoid repeat yourself which could cause a lot of other problem .", "put it in in the global config would also make it informant of component", "if you want you could also give they more declarative name like <tag>", "also be the goal here to easily pass multiple event the same function"], "issue_sim": [0.4201759099960327, 0.2389647364616394, 0.24737252295017242, 0.5451861619949341], "prob": [0.9591506719589233, 0.12713254988193512, 0.00506588164716959, 0.010165436193346977]}, {"target": [0], "doc": ["i think that without such a mechanism , component composition via inheritance be inherently break , since it allow no affordance dry up your template .", "the fact that people be use the pug template language workaround be proof enough of this , imo", "the downside , of course , be that it introduce another dependency , and a whole new template language , just for this feature", "i would urge you to re - open discussion on this"], "issue_sim": [0.5692519545555115, 0.3192676901817322, 0.48201096057891846, 0.028854062780737877], "prob": [0.8835778832435608, 0.009726114571094513, 0.07690691202878952, 0.0017325402004644275]}, {"target": [1], "doc": ["work with on demand / lazy module and component be still a pain", "the application and business logic get pollute by load logic  and the need to reflect the module , folder structure in your code .", "so far ivy have n't bring real improvement to this topic", "i really hope ivy fullfill some of the promise they have be make"], "issue_sim": [0.3428608179092407, 0.2876022756099701, 0.025155793875455856, 0.13369044661521912], "prob": [0.10351090133190155, 0.6898429989814758, 0.005452311132103205, 0.14198607206344604]}, {"target": [1], "doc": ["i see the profiler and it say the main problem be the physics system .", "the object set with mask and layer <number> be not completely remove from physics system , be still process internally and generate lot of lag"], "issue_sim": [0.23338623344898224, 0.350528359413147], "prob": [0.5427764654159546, 0.5657098889350891]}, {"target": [0], "doc": ["burley brdf be a pain for light due to the add light .", "for some object maybe , but not environment", "unreal do not use it either", "on sun , oct <number> , <number> at 5:45 am , przemysaw go  b < notifications@github"], "issue_sim": [0.11953388899564743, 0.21487027406692505, 0.1314205676317215, -0.028538335114717484], "prob": [0.16711458563804626, 0.05527974292635918, 0.017245642840862274, 0.3493219017982483]}, {"target": [3], "doc": ["have to agree with @willnationsdev and the other", "afaik , most popular modde game have no sandboxes", "minecraft mod , skyrim mod , you mostly depend on the mod author", "i think solid modding support be more important than sandboxe ."], "issue_sim": [-0.009605691768229008, 0.21123240888118744, 0.2500931918621063, 0.255191445350647], "prob": [0.026332905516028404, 0.1809646040201187, 0.17266754806041718, 0.2771604657173157]}, {"target": [0], "doc": ["i would call it a bug , not a feature : the provide injector clearly do not behave as define by the api documentation :"], "issue_sim": [0.29044976830482483], "prob": [0.9998145699501038]}, {"target": [0], "doc": ["the problem be , that those be exist view to which i have no access , since they be come from a rest service .", "since we be rewrite our client we do not want to maintain both framework jquery and angular", "we want to reach an unique code base without any inconsistency", "i just do n't get the argument behind the entire \" we do n't want to support complex selector \" thing", "it be actually just a logical consequence of the angular2 core concept"], "issue_sim": [0.1909632384777069, 0.36544379591941833, 0.07354514300823212, 0.2580104172229767, 0.45381128787994385], "prob": [0.6879767775535583, 0.04998350515961647, 0.009833726100623608, 0.18956919014453888, 0.040691521018743515]}, {"target": [1], "doc": ["i agree with @allandaemon that queue_free be confuse for beginner who neither understand the idea of a queue nor free memory", "however , i 'd advocate to keep queue_free and free the same , because of compatibility and they be semantically correct to the operation .", "that be say , i would _ also _ very much stand behind create an alias function for queue_free , such as <tag>", "php have both <tag> and <tag> function to do the same thing for example", "this would maintain compatibility and make the engine more intuitive to beginner"], "issue_sim": [0.12952376902103424, 0.20937269926071167, 0.4133852422237396, 0.37641364336013794, 0.14009493589401245], "prob": [5.9014520957134664e-05, 0.7375543117523193, 0.007625664584338665, 0.00010604262934066355, 0.009393256157636642]}, {"target": [0], "doc": ["i mean it will add overhead if implement under <tag> directly .", "i be both hand for <tag>"], "issue_sim": [0.15801307559013367, 0.021693512797355652], "prob": [0.910959005355835, 0.048350319266319275]}, {"target": [2], "doc": ["@reduz   it might not be that frequent , but it can happen , and be certainly possible to do", "i already have module idea in that would rely on this", "otherwise , the same issue that lead godot to support c module would be present in module again ."], "issue_sim": [0.06944580376148224, 0.3059643507003784, 0.4638158977031708], "prob": [0.37677398324012756, 0.0013792382087558508, 0.5514569282531738]}, {"target": [0], "doc": ["also , i would be happy if label - > textlabel . i go to add a node so i can show some text , so i type text in the search bar and of course only richtextlabel show up which remind i that the standard text node do n't actually have text in the name ."], "issue_sim": [0.33691906929016113], "prob": [0.9998376369476318]}, {"target": [1], "doc": ["thank for take this on , @hubuk", "it be definitely a step in the right direction , but other quirk remain , so maybe we can expand the scope of your pr .", "the follow test code contrast the console output of various <tag> / <tag> / <tag> command with respect to what print to the console vs", "what show in the transcript :", "$ null = start - transcript", "write - host ' write - host silentlycontinue '", "write - information ' write - info silentlycontinue '", "write - host ' write - host continue ' -informationaction continue", "write - information ' write - info continue ' -informationaction continue", "write - host ' write - host ignore ' -informationaction ignore", "write - information ' write - info ignore ' -informationaction ignore", "out - host -inputobject ' out - host ' # always print to both the console and the transcript", "* your current pr commendably fix the <tag> behavior in principle , but in the transcript its output be still prefix with <tag> , unlike in the console", "* <tag> output still _ invariably _ end up in the transcript - while <tag> / <tag> work in the _ console _ , it do n't in the transcript", "while fix the quirk be definitely desirable , we also have to ask ourselves whether user may depend on the old behavior , such as expect <tag> output to be there by default", "@stevel - msft , any thought on this and the other issue mention in # <number> with respect to backward compatibility"], "issue_sim": [-0.008420946076512337, 0.14950095117092133, 0.24124258756637573, 0.041309893131256104, 0.2168046236038208, 0.22294756770133972, 0.17797309160232544, 0.26511871814727783, 0.1640845537185669, 0.325155109167099, 0.2908831238746643, 0.15236584842205048, 0.4425109028816223, 0.34991323947906494, 0.3297717571258545, 0.13923275470733643], "prob": [0.002816084073856473, 0.557386040687561, 0.005653647240251303, 0.000666928244754672, 0.00012591126142069697, 8.09367629699409e-05, 0.0005300688790157437, 0.0010030915727838874, 0.0006185342790558934, 0.0003321728727314621, 0.0003022887103725225, 0.005760318133980036, 0.013459889218211174, 0.09784909337759018, 0.10115595906972885, 0.00036413766792975366]}, {"target": [6], "doc": ["to give some technical background on this , there be four operation that we consider flavor of function invocation in the compiler :", "* call expression : <tag>", "* <tag> expression : <tag>", "* tag template : <tag> foo <tag> <tag>", "* decorator : <tag>", "the latter two do not allow explicit type argument", "my feeling be that both should be allow , but give the demand , work to support tag template be reasonable and should have some more priority ."], "issue_sim": [0.2846260368824005, 0.21789661049842834, 0.2591164708137512, 0.4424354135990143, 0.31525295972824097, 0.20464195311069489, 0.27993687987327576], "prob": [0.5203295946121216, 0.001975768944248557, 0.005952885840088129, 0.007548446301370859, 0.00283912499435246, 0.002928683767095208, 0.9888752698898315]}, {"target": [0], "doc": ["@kvprasoon the startup time have be improve already via <url> although there be still additional work we can do to improve it , but it be not a priority for 6", "2 since we be within the \" ballpark \" now", "as for the context menu , the difference be the command line  to start pwsh", "otherwise it should be the same", "it should never take that long to start unless you have a complicated <tag> that be be run on startup"], "issue_sim": [0.06228504702448845, -0.00011171773076057434, 0.2479640245437622, -0.05109596252441406, -0.01223667711019516], "prob": [0.29972532391548157, 0.08373216539621353, 0.1299106478691101, 0.03933371230959892, 0.4928387403488159]}, {"target": [0], "doc": ["hmm , it be an intentional decision that <tag> wouldn change the behavior of elide the actual import name ; it would just keep the module dependency graph as you write it .", "be there any use case for this besides stringified execution"], "issue_sim": [0.4860857129096985, 0.22486968338489532], "prob": [0.9516036510467529, 0.001735095283947885]}, {"target": [0], "doc": ["here be another example of burley not work .. as light be add in direction it do not come from , shadow mapping break ..", "i think it probably make sense for a path tracer  , as shadow do not exist , but for regular real time render its not that suitable", "i would use it for standalone object mostly when they do not break"], "issue_sim": [0.2237740308046341, 0.34960728883743286, 0.1796712577342987], "prob": [0.7057285904884338, 0.3633630871772766, 0.008844157680869102]}, {"target": [3], "doc": ["@rpkilby i think two way filter work out pretty well for this", "the guide actually talk about this <url>", "maybe a more explicit example show <tag> in the doc help out", "i do n't think a modifier be need because two way filter already address this issue"], "issue_sim": [0.04295529052615166, -0.0603618323802948, 0.2561034560203552, 0.16712579131126404], "prob": [0.01753537356853485, 0.06807775795459747, 0.11782099306583405, 0.23703892529010773]}, {"target": [1], "doc": ["in angular <number> you now get a clear error message due to the circular dependency", "since circular dependency be an invalid di setup in angular , there be a clear message now , and this issue do not get much community support as a feature , i be go to close it ."], "issue_sim": [0.45038414001464844, 0.5318642854690552], "prob": [0.2952573001384735, 0.6159746050834656]}, {"target": [3], "doc": ["i try select with <number> - way bind use ngmodel", "the first option be show in select box by default in firefox 45", "1 and ie11 , even though the select value be empty", "it be work as expect in chrome and firefox 47.0.1 , the select box be empty by default - no option be select ."], "issue_sim": [0.3673701286315918, 0.5281621217727661, 0.40700966119766235, 0.5073148012161255], "prob": [0.001664213021285832, 0.08622825890779495, 0.009732840582728386, 0.9562218189239502]}, {"target": [0], "doc": ["in my opinion , there might be a few other way to make clear that a statement be to be trigger once , one could even argue we be add an entirely new component to gdscript  .", "the benefit of these syntax scheme might be that you can theoretically do they on _ any _ statement in the code"], "issue_sim": [0.4327705502510071, 0.30893123149871826], "prob": [0.8563085794448853, 0.05660033971071243]}, {"target": [0], "doc": ["the solution that i give in the gist be modify code from @angular / router ."], "issue_sim": [0.5265696048736572], "prob": [0.9991219639778137]}, {"target": [0], "doc": ["look like it do not work with dynamically create component ."], "issue_sim": [0.2670191526412964], "prob": [0.999832034111023]}, {"target": [1], "doc": ["here be another example i come across where this be an issue :", "the <tag>s be need because of the usage of <tag> , but since <tag> return <tag> , the compiler will error out because of the mismatch of <tag> and <tag> .", "the only solution i could think of be to force the type :"], "issue_sim": [0.019161682575941086, 0.5828933715820312, 0.3406235873699188], "prob": [0.0014089274918660522, 0.9884213209152222, 0.015689918771386147]}, {"target": [0], "doc": ["i have a similar requirement as @bobdankert   , i need to know if an update be available or not .", "any update / workaround on this issue"], "issue_sim": [0.48079371452331543, 0.2752704620361328], "prob": [0.9253137111663818, 0.025244763121008873]}, {"target": [1], "doc": ["oki so one of the example i mention be to iterate through route and add validation", "again the only problem we have be we be not able to use di , so the request feature be to enable di pretty much , in this case a simple logger .", "this be how it currently be , and ~~it works~~  , however in this example we can not use our own logger", "now in order to be able to use the logger we would need di , and this be how we generally create it", "so again , the problem be that we be currently limit to only write code which do n't use any service", "another issue be you need to apply this manually for each individual usage , like this :", "while with the other , you register the service once in root and that s it"], "issue_sim": [0.3572143018245697, 0.3712915778160095, 0.25035226345062256, 0.1893017292022705, 0.19249418377876282, 0.22204454243183136, 0.18832877278327942], "prob": [0.005409335717558861, 0.8338521718978882, 0.015699753537774086, 0.48329368233680725, 0.010525927878916264, 0.0004748499486595392, 0.016796741634607315]}, {"target": [0], "doc": ["no , we be not go through the pain of make a dummy transitional node just to allow the convenience of save empty scene .", "we be develop a tool for developer , they can cope with this minimal inconvenience and we do n't have to implement bogus feature just for a one - time quality of life improvement"], "issue_sim": [0.33443504571914673, 0.15398862957954407], "prob": [0.6827454566955566, 0.5407209992408752]}, {"target": [3], "doc": ["i can as i 've be ask about this in a few context", "today we assume that all require and import have the same end result post - transpilation , as either commonj or esmodule", "however , it be a bit more nuanced because node support the same keyword work differently depend on if you be in an esm context or commonjs context", "so in a commonjs context , you normally ca n't use <tag> , but you can use <tag> to import an esm module :", "what typescript think today be that this import should be switch to a <tag>", "which be what you want for exist case because that be a normal feature of <tag> statement", "it be a signal that the thing you be about to grab be a esm module", "what be tricky be that typescript have no way to disambiguate whether you want <tag> in a cjs context to continue be a <tag> or now stay as a <tag>", "we 'd either need a flag like the above which handle it app wide , or a pragma at the import call - site", "this seem to be hit a few big project because people want to have config file in esm but let the app stay in cjs"], "issue_sim": [-0.015741746872663498, 0.15358364582061768, 0.36526596546173096, 0.5385037660598755, 0.5767028331756592, 0.21991118788719177, 0.1924259066581726, 0.4885048568248749, 0.36675673723220825, 0.2904995083808899], "prob": [0.011201686225831509, 0.11675769835710526, 0.08827421814203262, 0.16904519498348236, 0.0004690586938522756, 0.0004610098258126527, 0.0004245619638822973, 0.1512083113193512, 0.0037189945578575134, 0.01199313998222351]}, {"target": [4], "doc": ["i be not sure this be desirable", "first off , <tag> and <tag> be add to make it easy to pass on these thing from a parent component to a child component , to improve the situation for hoc - like component", "make this work with <tag> be not a goal in this original discussion", "secondly , if we somehow make this work - that you can use <tag> on a component with <tag> on an element * in * that component , it feel to i like we essentially recreate inter - component two - way binding which we originally drop in vue <number> for good reason", "yes , under the hood it be technically still send event and update in the parent , but what happen under the hood never be the problem with <tag> .", "it be that it make data flow hard to follow", "do we re - create this weekness by allow for a seamless <tag> chain through many component down to some nested element in a form", "it feel like we would to i"], "issue_sim": [0.04074708744883537, 0.3683382570743561, 0.27755966782569885, 0.5385492444038391, 0.2598077654838562, 0.0006305351853370667, 0.31837138533592224, 0.004354361444711685], "prob": [0.023780042305588722, 0.32107535004615784, 0.008993343450129032, 0.2212742418050766, 0.04083188995718956, 0.002254370367154479, 0.13015621900558472, 0.0006879221182316542]}, {"target": [1], "doc": ["what metadata be you specifically refer to", "my understanding be that the ngfactories generate in - memory by the jit be equivalent to those of the aot .", "generate the same ngfactories in - memory , the aot should be able to replicate this process", "i have n't read through the aot compiler 's source , though"], "issue_sim": [0.08858079463243484, 0.3973466455936432, 0.38081294298171997, 0.34155988693237305], "prob": [0.0034204015973955393, 0.8335714340209961, 0.002772764302790165, 0.013033650815486908]}, {"target": [0], "doc": ["i think this be a cool feature , as it bring consistency to user generate input - component with very little cost .", "i would suggest a very simple implementation :", "when <tag> be set in the component", "let <tag> be a shorthand for <tag>"], "issue_sim": [0.33910301327705383, 0.22410869598388672, 0.27002543210983276, 0.2297576665878296], "prob": [0.8337407112121582, 0.027825068682432175, 0.14062876999378204, 0.04813448712229729]}, {"target": [0], "doc": ["the propose way look good , but it would impose some restriction to event name", "right now i can use complex event name like \" namespace", "eventname \" or \" action : submit \" etc", "with <tag> those be not possible i guess", "though it may be a good thing", "i agree with @jcoffland , have something like <tag> would be nice"], "issue_sim": [0.18630670011043549, 0.37083423137664795, -0.008842159062623978, 0.12566277384757996, 0.024949051439762115, 0.14136198163032532], "prob": [0.36691781878471375, 0.01831698976457119, 0.0032513008918613195, 0.0021839451510459185, 0.003177141770720482, 0.003181909443810582]}, {"target": [0], "doc": ["change from stdout to stderr be probably too big a break change to take at this point , add a switch to <tag> to enable this be doable if people will actually use it ."], "issue_sim": [0.3925218880176544], "prob": [0.9999662637710571]}, {"target": [5], "doc": ["@chrisvfritz how would that work in render function", "i think maybe it would be well to :", "* provide an option to disable auto - inheritance of attribute for the root node", "* expose those attribute as <tag> , for example", "* use v - bind to add they wherever you like , much like we already show to do with <tag> :", "that would have the add benefit of work practically identical in jsx / render function"], "issue_sim": [0.2113887071609497, 0.022898592054843903, 0.5013191103935242, 0.29989808797836304, 0.21722814440727234, 0.32684260606765747], "prob": [0.013467988930642605, 0.015502152033150196, 0.25620028376579285, 0.009892825037240982, 0.4156038165092468, 0.00863460823893547]}, {"target": [1], "doc": ["we already have this as an option on our roadmap", "however , we will   pospone this until 2.0 be out of the current post - release phase and all work we have leave in the ecosystem for 2.0 be do , because this will involve a considerable amount of work to get right , test and so on", "thank for the poc , seem helpful"], "issue_sim": [0.11411672085523605, 0.13152968883514404, -0.0440194346010685], "prob": [0.01850929856300354, 0.9821277856826782, 0.001694351900368929]}, {"target": [1], "doc": ["angular <number> , i ca n't get it to work with <tag> or <tag> attribute", "it only work if you do n't use the \" object \" syntax and pass a boolean instead , which mean we ca n't use the <tag> attribute ."], "issue_sim": [0.5929594039916992, 0.42045319080352783], "prob": [0.5660120844841003, 0.5550937056541443]}, {"target": [0], "doc": ["allow it be not possible because it do not make any sense . i suggest. you read the step by step tutorial .", "on tue , jan <number> , <number> at 12:11 am , jacob speicher < notifications@github"], "issue_sim": [0.2781359851360321, -0.06805431842803955], "prob": [0.9877917170524597, 0.00040099199395626783]}, {"target": [1], "doc": ["this be a good addition to the language : the amount of complexity that this would add  be small .", "the concept be easy to understand and the compiler should be able to provide good error message hint of why you can not access getter or setter due to scope"], "issue_sim": [0.12849393486976624, 0.5191363096237183], "prob": [0.5822470784187317, 0.6302621364593506]}, {"target": [0], "doc": ["curious - could n't this just be do with custom two - way filter ?", "maybe i be miss something"], "issue_sim": [0.11251376569271088, 0.0161688644438982], "prob": [0.9509015083312988, 0.011581326834857464]}, {"target": [2], "doc": ["@chriskuech can you provide some example json , example powershell code , what you expect , and what you currently see", "newtonsoft support work with json comment but have <number> mode : ignore and load", "though , with how the cmdlet currently operate , it may not be possible to make use of that ."], "issue_sim": [0.48351481556892395, 0.491652250289917, 0.3518165051937103], "prob": [0.036778468638658524, 0.09657978266477585, 0.8560872673988342]}, {"target": [3], "doc": ["the problem be that there be nothing leave to abort by that point", "when you call <tag> , the router transition be complete immediately , the router - view re - render itself with the new component , and the transition hook be only for animate the old child out and the new one in", "that be handle by the transition component , from the router - view 's point of view ,   the change already happen", "you can see that the url change immediately after you start drag , and the old component will be remove as soon as you call do  ."], "issue_sim": [0.13742724061012268, 0.48144567012786865, 0.3994024395942688, 0.5109435319900513], "prob": [0.009428143501281738, 0.7484390735626221, 0.033651936799287796, 0.15251266956329346]}, {"target": [0], "doc": ["make circular dependency in di be not support .", "nothing to do with http"], "issue_sim": [0.39140647649765015, 0.10463956743478775], "prob": [0.8198463320732117, 0.04133939370512962]}, {"target": [16], "doc": ["@weswigham you be absolutely right about not want to leak thing like <tag>", "but i think that be actually relate to a subtly different issue", "in my opinion , a package should not publish the typing of its ' host environment '", "just like no package export <tag> , a package should neither export <tag>", "see bottom part of <url>", "the fact that basically every package do so today , be imo only because there simply be no good way to do it in a well way", "however , note that in my proposal , i think this be actually handle gracefully :", "- ' all ' exist package typing  be of the ' non - proper ' variant , and typically ' include '  their own copy of <tag>", "- when ts 1", "6 be release , we can start make <tag> typing if we want to", "this be opt - in , and we should encourage people to _ not _ reference / export the host typing anymore", "in ' proper external ' typing , people ca n't accidentally create global , unless they directly <tag> other", "but because we have this nice automatic lookup in 1", "6 , there be no need to anymore", "simply <tag> your dependency", "i suppose / hope that when use proper external module / typing , you will never have to write a single <tag> line again , _ unless _ you explicitly want to make a real global", "in the ' non - proper ' variant , my ' mixed mode ' will apply , so stuff will be isolate .", "note how this keep work nicely when mix proper with non - proper / isomorphic : proper external include thing with import  , so they will be isolate as need", "isomorphic can either import or reference , and will stay isolated if they already be", "this do assume that people need to be a bit careful when they start write proper external typing : any use of <tag> be probably a sign of ' bad habit ' , and will indeed cause trouble"], "issue_sim": [0.11953272670507431, 0.09137047827243805, 0.27025455236434937, 0.3584851324558258, -0.03029901161789894, 0.1386321485042572, 0.09896904230117798, 0.2732072174549103, 0.1342194676399231, 0.1360969841480255, 0.14279979467391968, 0.20949327945709229, -0.0018887557089328766, -0.04463832080364227, 0.26483744382858276, 0.4966445565223694, 0.17544791102409363, 0.3001425862312317, 0.25318261981010437, 0.17163848876953125], "prob": [0.0014883645344525576, 0.0004988019936718047, 0.0007171034230850637, 0.008959217928349972, 0.0019399200100451708, 0.03513018414378166, 0.0015031029470264912, 0.03436627984046936, 9.041219163918868e-05, 0.00044731618254445493, 0.0020355035085231066, 0.0144425630569458, 0.00024745342670939863, 0.00031020937603898346, 0.00027707676053978503, 0.10672860592603683, 0.06374191492795944, 0.04158993065357208, 0.0014562138821929693, 0.5135964751243591]}, {"target": [1], "doc": ["imo if you do this it should be a separate directive  , but not the native <tag> rewritten itself .", "the reason be <tag>  should also handle custom event as mention by @lonelyclick  , and all this additional inner - library work be redundant for <number> % <tag> use case"], "issue_sim": [0.4603785276412964, 0.48797789216041565], "prob": [0.4170600175857544, 0.518511176109314]}, {"target": [0], "doc": ["as long as the developer get only the group that he himself put in , do n't really matter how the internal of <tag> work .", "it be a good idea to have <tag> remove everything start with <tag> or maybe even <tag> in case someone decide for whatever reason to use a group name start with <tag>", "do this would n't change much in term of the internal of gd"], "issue_sim": [0.3668988347053528, 0.34644949436187744, 0.10219357907772064], "prob": [0.6388804316520691, 0.2125847041606903, 0.027851607650518417]}, {"target": [1], "doc": ["first of all , i really do n't think introduce a parallel composition mechanism be the way to solve this problem", "in particular , when this be use in conjunction with slot it could lead to a lot of confusion .", "your solution  , i", "a structural component that expose the outline + slot , be imo the proper abstraction for the problem - i 'd like to see an actual example where it become obtrusive as you suggest", "finally , template compilation for functional component , once support , can probably alleviate this problem to some extent"], "issue_sim": [0.15317857265472412, 0.16773110628128052, -0.0002775341272354126, 0.4794977903366089, 0.5247601270675659], "prob": [0.297798216342926, 0.14595918357372284, 0.0001615401852177456, 0.7184028625488281, 0.006131188478320837]}, {"target": [1], "doc": ["@ebelew @kilasuit thank you", "but be there a way to set a know maximum compatible version ?"], "issue_sim": [0.002860208973288536, 0.14802569150924683], "prob": [0.006302508059889078, 0.9487513303756714]}, {"target": [6], "doc": ["there be alternative to llvm", "llvm be a huge dependency and be actually large than godot", "it 'd be well if we use something else instead", "include clang as well be just suicide", "c code be very easy to compile , so there be a ton of small c compiler available", "a fast approach would be compile gdscript bytecode to machine code directly", "godot be portable , so an ir like llvm which generate machine code for we would be use , though that 'd still be pretty hard to do , so translate to c sound well ."], "issue_sim": [0.3313271403312683, 0.45560067892074585, 0.12844155728816986, 0.1805424988269806, 0.43067049980163574, 0.5823994278907776, 0.43256518244743347], "prob": [0.011045461520552635, 0.21493417024612427, 0.0028592683374881744, 0.0012323884293437004, 0.016789307817816734, 0.0012934592086821795, 0.660121738910675]}, {"target": [0], "doc": ["break for user already use a _ value _ attribute on a checkbox * and * use formcontrol * and * rely on the fact that formcontrol do not do anything with the _ value _ attribute .", "it be break as per definition , but real world impact should be near _ null _ since this usage be mostly self - contradictory", "that say , i 'd still prefer do it right , though , just suggest a lenient upgrade path"], "issue_sim": [0.6595208644866943, 0.10279004275798798, 0.09924586117267609], "prob": [0.621887743473053, 0.036977577954530716, 0.12164562195539474]}, {"target": [0], "doc": ["maybe there should be a defaulted parameterset nameorid with this behavior , so that you can specify -name or -id and _ only _ get by name or by i d."], "issue_sim": [0.4639238119125366], "prob": [0.999975323677063]}, {"target": [0], "doc": ["i do n't think be a good practice to require a global package from a module .", "quote npm itself :", "in general , the rule be :", "if you  e instal something that you want to use in your program , use require , then install it locally , at the root of your project", "if you  e instal something that you want to use in your shell , on the command line or something , install it globally , so that its binary end up in your path environment variable"], "issue_sim": [0.23034536838531494, 0.14098942279815674, 0.0783008262515068, 0.3308264911174774, 0.28024065494537354], "prob": [0.9590561389923096, 3.7626305129379034e-05, 5.288714964990504e-05, 0.05690978467464447, 0.39053860306739807]}, {"target": [2], "doc": ["i have a use case for this", "i 'd like to make a kotlin wrapper for angular that use aot", "kotlin compile down to es5 so it would have to use an aot compiler for js", "be this in the work or be it something that wo n't be add"], "issue_sim": [0.16427592933177948, 0.6420356631278992, 0.5480068922042847, 0.055457137525081635], "prob": [0.00855117104947567, 0.2511660158634186, 0.40607166290283203, 0.01609199494123459]}, {"target": [3], "doc": ["it would be nice if \" compileroption \" be an object like <tag> instead of an array of string  .", "this be similar to how the grunt plugin , etc", "- what option should not be honor in a", "for example , i do n't know if anyone will ever want \" watch \" to be a default behavior of run tsc under their project directory , so even if", "tsconfig contain \" watch \" it should be ignore"], "issue_sim": [0.19572924077510834, 0.14074347913265228, 0.06424468755722046, 0.4561913311481476, 0.14637404680252075], "prob": [0.7824103832244873, 0.003785469802096486, 0.0007346929633058608, 0.7799898982048035, 0.0007398187881335616]}, {"target": [0], "doc": ["i 've see thing like this occur in the vs code integrate console , but never in the pwsh console itself .", "do you have anything in your powershell profile script"], "issue_sim": [0.2312772274017334, 0.4915955662727356], "prob": [0.9915599226951599, 0.0011281529441475868]}, {"target": [0], "doc": ["there be n't any problem with the <tag> syntax except that there seem to be some push to deprecate it ."], "issue_sim": [0.2964553236961365], "prob": [0.9999769926071167]}, {"target": [3], "doc": ["@yyx990803 here be a valid use case that support the need for a set", "i do n't want the field to initially be display as invalid on the ui , i add a class to show an input as a valid or invalid element", "the element be only mark as valid or invalid once it be bring into focus , and mark as touch", "i do n't want to have a potentially massive array contain all the time an input have be bring into focus , so the set would be ideal ."], "issue_sim": [0.2801818549633026, 0.2610377073287964, 0.11483952403068542, 0.18292202055454254], "prob": [1.5783356502652168e-05, 0.6382432579994202, 0.0006788086029700935, 0.5090885758399963]}, {"target": [0], "doc": ["the point here be to be able to control the lifecycle of module  , angular do not yet offer this ability .", "the op give here one use case , but i have another one that cause i issue too , i have to manually reset some service provide by a lazy module because they be not destroy once load", "we should be able to control this as in dagger or other di system"], "issue_sim": [0.3339555561542511, 0.5616956949234009, 0.03405243158340454], "prob": [0.42272165417671204, 0.518692135810852, 0.00040750077459961176]}, {"target": [0], "doc": ["a <tag> type accelerator would be well than to do this directly in the web cmdlet just like <tag> ."], "issue_sim": [0.33268973231315613], "prob": [0.999958872795105]}, {"target": [0], "doc": ["there be a <tag> hook , but i think you 'd need to manage animation purely in js , and from an object in a high scope , like an instance of gsap e.g.", "<tag> which would give you option to cancel or reverse animation"], "issue_sim": [0.44632890820503235, 0.3182700276374817], "prob": [0.9318962097167969, 0.025840604677796364]}, {"target": [0], "doc": ["it seem this would be useful if implement a \" check for updates \" button / action in a software .", "typically i be use to click \" check for update \" in a software and get a message back that either there be update available , or there be no update available", "it would seem there be no feedback currently if there be no update available"], "issue_sim": [0.40295884013175964, 0.43410277366638184, 0.4205816984176636], "prob": [0.3697755038738251, 0.4563169777393341, 0.008363156579434872]}, {"target": [1], "doc": ["this be the physics iteration per second step right", "if so this defeat the purpose which be to let you have a fix step iteration , interpolate / extrapolate the node 's physics state to obtain a visual position in frame update or move your stuff there manually ."], "issue_sim": [0.28598055243492126, 0.4066491425037384], "prob": [0.0020828398410230875, 0.9946489930152893]}, {"target": [1], "doc": ["i do n't see how that could be do _ in the progress api _ , assume that change the current assumption of parallelism to an assumption of nest be n't go to be well in general", "i think we would need a progressparent common parameter that would set the parentid for all progress write from within a command that do n't have an _ explicit _ parent .", "otherwise , it would just make a different --but equally invalid-- assumption"], "issue_sim": [0.33512434363365173, 0.29921579360961914, 0.13453593850135803], "prob": [0.7663092017173767, 0.2952638268470764, 0.004781695548444986]}, {"target": [1], "doc": ["this would still be base on node 's resolution strategy , but with platform - specific extension in mind", "it do n't have any of the specific quirk of haste , since that can usually be achieve via path mapping / aliasing ."], "issue_sim": [0.2507897615432739, 0.21420219540596008], "prob": [0.05247747525572777, 0.9618909955024719]}, {"target": [2], "doc": ["if one find oneself write code like this , i think there be a design problem", "this make the code dependent on a very specific node structure", "i would rather put the code in a node local to the node you want to access , and retrieve the node with a relative path from there", "edit : send too early"], "issue_sim": [0.24693560600280762, 0.45091572403907776, 0.565413236618042, 0.04287964850664139], "prob": [0.08870009332895279, 0.03540952503681183, 0.6881032586097717, 0.0009911030065268278]}, {"target": [0], "doc": ["that would still be a break change ."], "issue_sim": [0.059996310621500015], "prob": [0.9999814033508301]}, {"target": [0], "doc": ["<tag> be new general thing for js"], "issue_sim": [0.16948866844177246], "prob": [0.9995785355567932]}, {"target": [1], "doc": ["i think if it be a nice to have feature , since the default way to write component be use the template", "and imho decouple all the rendering function from the component  would be great ."], "issue_sim": [0.5366089344024658, 0.43329161405563354], "prob": [0.262119859457016, 0.3953591287136078]}, {"target": [1], "doc": ["yeah , i think about browser and use <tag> but you be right", "it be get out of the framework scope and more like an idea for a plugin .", "basic wrapper for keyboardevent property be enough for the most of the case", "on the other hand , be this expect behavior of modifier or should be consider as a bug", "jsfiddle demo : <url>", "log for press <tag> <tag>", "cmd + leave press", "<tag> <tag> cmd + shift +   :", "log for press <tag> <tag>", "<tag> <tag> cmd +   :", "log for press <tag> <tag>", "cmd + leave press", "cmd + shift + leave press", "<tag> <tag> shift +   :"], "issue_sim": [0.06436650454998016, 0.1947742998600006, 0.23286311328411102, 0.21631862223148346, 0.15242961049079895, 0.03378152847290039, 0.3164637088775635, 0.3493807315826416, 0.03378152847290039, 0.2769317328929901, 0.03378152847290039, 0.3164637088775635, 0.36068421602249146, 0.2401454746723175], "prob": [0.07405200600624084, 0.3644496500492096, 0.11944432556629181, 0.38795483112335205, 0.0021376442164182663, 0.008672337979078293, 0.012296315282583237, 0.022653212770819664, 0.016620825976133347, 0.0056904517114162445, 0.005057083442807198, 0.005472701042890549, 0.016425970941781998, 0.004672847222536802]}, {"target": [0], "doc": ["i do not perfer .local either but have it the same across all platform would be nice for powershell", "all those team be consistent across their platform , we be not"], "issue_sim": [0.3499366044998169, 0.046202801167964935], "prob": [0.8140794634819031, 0.23859348893165588]}, {"target": [1], "doc": ["i agree that this issue should be reopen", "not sure what <tag> be suppose to do , but i would like a <tag> modifier that set my variable to <tag> in case the input 's trim value be an empty string .", "i 'd love to be able to do that myself in a straightforward way"], "issue_sim": [0.10797066241502762, 0.39694273471832275, 0.10634397715330124], "prob": [0.012831569649279118, 0.9702660441398621, 0.005929690785706043]}, {"target": [1], "doc": ["imho should have remappe the black and white , but", "if anyone have any idea how force <tag> to respect ansi , we could implement on our end ."], "issue_sim": [0.02388753369450569, 0.3017428517341614], "prob": [0.059307076036930084, 0.882390558719635]}, {"target": [4], "doc": ["i use godot professionally for more than a year", "i agree with everything you say , except for :", "if we have this golden opportunity , let 's just rename everything", "that include sprite2d and meshinstance3d", "it be always well a full painful refactor , that many partial painful refactor ."], "issue_sim": [0.24798375368118286, 0.02394719608128071, 0.09475044906139374, -0.06970066577196121, 0.21140748262405396], "prob": [0.01684066839516163, 0.021566735580563545, 0.03462573513388634, 0.004403590690344572, 0.7693846225738525]}, {"target": [5], "doc": ["the idea that you do not need to specify anything", "all file in your folder be part of the compilation", "i can see an \" exclude list \" , but not include", "my preference would be to have the actual structure of ts", "the problem with this be that there be enum value for module and target , and <tag> do not look helpful", "so since we be do a translation step anyways , stick with something standard be simple , like the accrual command line you would use to build on the command line without the tsconfig file .", "i would say , compileroption should just take a string which be the command line , that would be parse"], "issue_sim": [0.02229399047791958, 0.4372752904891968, 0.10405091941356659, 0.19014744460582733, 0.26557791233062744, 0.4047924280166626, 0.36840495467185974], "prob": [0.014933843165636063, 0.007287655025720596, 0.008310550823807716, 0.004721511155366898, 0.06336405128240585, 0.905156672000885, 0.038069240748882294]}, {"target": [0], "doc": ["i think you should focus on reuse component , not template .", "not template , but component be first - class citizen in angular"], "issue_sim": [0.5069925785064697, 0.4554002583026886], "prob": [0.9892483949661255, 0.0018624449148774147]}, {"target": [0], "doc": ["similar issue open all the time and and people insist that they can not justify implementation well people want to use it that be one justification i can also list the bazillion of issue close that ask the same thing xd", "i also find one that justify the use - case really well and refer to es6 specification when it come to map order ->still close ."], "issue_sim": [0.10994075238704681, 0.3459722399711609], "prob": [0.8693235516548157, 0.24924050271511078]}, {"target": [4], "doc": ["in the workflow i post early , ipropose to have the <tag> path resolve just like <tag> but with an high priority", "a solution to control what could be modde would be to add a <tag> flag to resource , enable such high priority", "the trouble i smell be a modde script could be able to do monkey patch on regular resource , hence modify they even if it be not allow to", "i do n't think so far gdscript support runtime modification of class  , but you could mess with the node instance parameter anyway", "in the end , i think the sandbox feature can be achieve to protect the user 's computer from untrusted code run into godot but it can not help protect vanilla game 's assets&code .", "the reason be what a mod can modify be really game - specific so provide a generic way to do that would be too complexe to implement and cumbersome to use"], "issue_sim": [0.1461842805147171, 0.3486531376838684, 0.23751677572727203, 0.2893912196159363, 0.6175277233123779, 0.4487896263599396], "prob": [0.000563163252081722, 0.01621743105351925, 0.02591109275817871, 0.06098048761487007, 0.23089934885501862, 0.05376158282160759]}, {"target": [1], "doc": ["no , i do n't say that , sorry if it look like it", "it be because the array syntax be well that we should deprecate the other one and use the array one everywhere .", "about other library , i simply google virtual dom github and all lib i look from top result have the array syntax"], "issue_sim": [0.09347867965698242, 0.1895686835050583, 0.26322948932647705], "prob": [0.03531794250011444, 0.584701657295227, 0.289032906293869]}, {"target": [10], "doc": ["ok , i think that be fair", "i be hope this feature would achieve preservation of the original js code , i", "avoid dead identifier elimination", "but i see it do not have that ambition so this be not a bug and i will close it", "and having write all this up , i be now think that be an unreasonable assumption on my part", "as background , this issue be detect because we ban the <tag> form  in a build rule that operate after ts->js conversion - and that be errore despite the source code not use that form - but i view that as an \" we \" issue and not convince general argument", "i be also try to test some name - shadow behavior by disable the type - checker but be thwart - again this be not a practical use - case", "answer your question , i think stringified execution be the only practical case", "in this case , it seem there be no way to get typescript to emit  even if you disable the checker", "so instead , when you detect in your test or runtime execution that the code be faulty ,  to prevent the compiler from eliminate it", "imo this be a * * super - mild * * case of break the js+types model because we ca n't passthrough plain js .", "it be an unavoidable transform", "maybe it be also a category mismatch because typescript be kinda do the work of a minifier", "other simplistic form of dead code , such as unused <tag> declaration , be not eliminate", "i appreciate that eliminate type name from the import statement be essential core functionality , and that _ \" not statically detectable as a use value \" _ be a neat heuristic / approximation for achieve that", "fix that whilst preserve isolated 1:1 per - file transpilation seem to require more thought", "i think this be worth think about for the future but it be not an urgent matter"], "issue_sim": [0.02126961760222912, 0.4222659468650818, 0.0730547234416008, 0.07510048151016235, 0.017834410071372986, 0.36936497688293457, 0.4273720383644104, 0.119654580950737, 0.4542027711868286, 0.311798632144928, 0.26544782519340515, 0.11872140318155289, 0.41826170682907104, 0.15266630053520203, 0.38190072774887085, 0.18895864486694336, 0.05605839192867279], "prob": [0.004540595225989819, 0.012816376984119415, 0.0001601766562089324, 0.001935213222168386, 0.018813567236065865, 0.27910295128822327, 0.03144710138440132, 0.0015155449509620667, 0.014243248850107193, 0.0023184262681752443, 0.025457529351115227, 0.00043792364886030555, 0.009152967482805252, 0.003380598733201623, 0.18044544756412506, 0.015088832937180996, 0.011786107905209064]}, {"target": [5], "doc": ["i agree with you @jeff - hykin", "one do n't want to implement a <tag> solution", "but i think @sirlancelot 's post be suggest a workaround for a specific problem that <tag> solve", "in react , whenever state change , it trigger an update -- similar to <tag>", "and the same happen   with a <tag> update", "so in react , the assumption be the same as in vue : that when <tag> or <tag> update , the component re - render", "the question be whether or not your component can bail out of an update", "<tag> allow you to bail out base on the <tag> or <tag>", "now , throttling component update be great  , and so be render once and only once  , but what if i want to to render twice , for example", "these be the sort of totally unforeseeable  arbitrary need that compute bailout of re - render solve", "<tag> be a power tool that allow fine - grain control over component performance by allow the component to bail out of re - render base on arbitrary , compute criterion .", "and while i certainly have a lot to learn about vue and could be wrong , it seem a problem to i that it lack this kind of power tool"], "issue_sim": [-0.02173493057489395, 0.07736440747976303, 0.11995504796504974, 0.5768687725067139, 0.13922390341758728, 0.6141716241836548, 0.30251044034957886, 0.06738025695085526, 0.5149931907653809, 0.07201875746250153, 0.3084923028945923, 0.05211726576089859], "prob": [0.0017571259522810578, 0.003870920743793249, 0.0007410175167024136, 0.004033039323985577, 0.0015192152932286263, 0.12757901847362518, 0.0017825698014348745, 0.007530098780989647, 0.11473064124584198, 0.0056986575946211815, 0.10212511569261551, 0.1328110247850418]}, {"target": [3], "doc": ["that sound nice and catchy", "but i still have n't see any important usecase for directive that be so big that they codesplitte they into their own chunk would be useful", "they be surely not mean to be that big", "if you have big * dependency * that you import inside of your deirective , those could of course be codesplit with <tag> quite easily today .", "so i do n't see a reason for add code to the codebase for something nobody provide an acutal usecase for", "\" it would be nice \" it not a good enough reason"], "issue_sim": [0.06894122809171677, 0.4594417214393616, 0.01653841882944107, 0.272400438785553, 0.35379788279533386, 0.06899675726890564], "prob": [0.0030342857353389263, 0.38014525175094604, 0.007322334684431553, 0.29901012778282166, 0.010245177894830704, 0.00017710027168504894]}, {"target": [8], "doc": ["a possibility be simply the class or function definition be mark as public or private", "not true any time any code or configuration be duplicate , it become a pattern to be refactore base on single responsibility concept of one - time , one - place", "if the pattern be the same then all of it can be refactore", "if the pattern have part , or the other then those a partial refactor", "again not true , all angular decorator be fully and uniquely discoverable base solely on the decorator @ngmodule , @component , @directive , @injector etc", "i be talk about what compiler lexing and parsing can do for we , the miss part of what be not be do here", "as i mention early", "net do n't have any of these issue", "the compiler use namespace to define content within the package use only folder structure and type and classname .", "the ngmodule system therefore do n't need to exist", "the compiler should be able to discover any component in a folder as follow :", "the namespace be :", "note : any of these component could be a model , a class or a function", "fully discoverable and fully unique"], "issue_sim": [0.19346627593040466, 0.3088972568511963, 0.11490026116371155, 0.1462453305721283, 0.5596908330917358, 0.23308858275413513, -0.004157423973083496, 0.09654631465673447, 0.4650086462497711, 0.1420716941356659, 0.3886831998825073, 0.14939439296722412, 0.23518824577331543, 0.11481598764657974], "prob": [0.2768155634403229, 0.07545697689056396, 0.0014496233779937029, 0.010119990445673466, 0.08439633995294571, 0.021877847611904144, 3.1101066269911826e-05, 0.0011921401601284742, 0.07962861657142639, 0.00048219700693152845, 0.04664228856563568, 0.00011250339593971148, 0.009433139115571976, 4.613749115378596e-05]}, {"target": [1], "doc": ["how so when <tag> be the dependency for both", "<tag> have to be instantiate first ."], "issue_sim": [0.342268705368042, 0.18812233209609985], "prob": [0.005379789974540472, 0.9971511960029602]}, {"target": [4], "doc": ["i kind of like what google cloud do where the style be the same for instructional versus one you can copy past directly into the terminal", "they do n't have the green / black color palette we have , however", "how do we feel about have the exist box style for both function api doc and the terminal - > same style , just remove the copy icon when it be not intend to be copy and paste", "i be big on consistency and pattern", "in my mind we either get rid of the black / green style and distinguish terminal code example with the <tag> before it , or we keep the black / green style for terminal and use that for the cli doc as well  .", "another example where they use their regular in - paragraph code styling even if it be terminal command when speak about they : <url>"], "issue_sim": [0.3560219705104828, 0.04777222126722336, 0.40137195587158203, 0.07937401533126831, 0.40388223528862, 0.5212359428405762], "prob": [0.22474750876426697, 0.0351029708981514, 0.2151331603527069, 0.00041625212179496884, 0.38579627871513367, 0.06815960258245468]}, {"target": [2], "doc": ["@daxian - dbw but where i can see that definition of array expression", "before now i always expect it to return new array object each time", "i myself use <tag>  as array copy operator , and i really do not like if it stop copy array at some point in the future ."], "issue_sim": [0.24668487906455994, 0.3250088095664978, 0.4037952721118927], "prob": [0.02978411316871643, 0.034595340490341187, 0.9394382834434509]}, {"target": [0], "doc": ["this just bite i because i have to extend a tsconfig.json in node_module , that itself have to extend a tsconfig.json from a package in node_module .", "but it ca n't , because <tag> be now actually <tag>"], "issue_sim": [0.404640257358551, 0.039289772510528564], "prob": [0.9033277630805969, 0.06245987489819527]}, {"target": [0], "doc": ["have a straightforward way to do this be a must in any decent code design where one need to inject a dependency .", "any update , please"], "issue_sim": [0.4456116855144501, 0.010814154520630836], "prob": [0.9217342138290405, 0.015453348867595196]}, {"target": [0], "doc": ["from design point of view it be responsibility of di configuration to decide whether service be singleton or not , be it lazy or eager , in general you should not change your service class implementation if you want to make it eager or lazy .", "also , application will be break when you try to replace eager service with another lazy implementation and there be no way to detect it", "<tag> should have consistent behavior across all case because it be lifecycle callback", "requirement for <tag> have poor documentation :", "originally we be tell that <tag> be require for service that require injection of other service"], "issue_sim": [0.4997712969779968, 0.482785165309906, 0.24920512735843658, 0.15388242900371552, 0.34348630905151367], "prob": [0.5328583121299744, 0.3400190770626068, 0.0297890342772007, 0.0020650222431868315, 0.07219287753105164]}, {"target": [0], "doc": ["send json today should be easy and i think we should keep json to the json cmdlet and not have it marry to the web cmdlet ."], "issue_sim": [0.4846261143684387], "prob": [0.999933123588562]}, {"target": [4], "doc": ["that be an interesting idea", "a big disadvantage i see with it , though , be that i be then dependent on the provider of that type package to provide high - quality typing in the first place , and then update it every time the source package change", "i be afraid that we 'll have ten of these typed-\\ * package  , just like we have ten of webpack - typescript , gulp - typescript , etc etc package", "on dt , this be much less of a problem because ' anyone ' can contribute , and there be many people to approve the change", "yeah , but that be in my proposal even simple : as soon as the real package have the typing , it will automatically be use over the dt one , no need to change anything"], "issue_sim": [-0.027160752564668655, 0.28465765714645386, 0.42203691601753235, 0.1189669743180275, 0.305072158575058], "prob": [0.0012568638194352388, 0.43666502833366394, 0.13702799379825592, 0.006312187761068344, 0.2181975245475769]}, {"target": [4], "doc": ["thank you for revive the issue @andrewbranch", "i see how svelte need this same _ \" just remove the type \" _ mode", "i like where this be go", "the mode you propose above sound reasonable and will solve the problem", "it mean the whole import statement be either retain or eliminate base on whether it be a type - only import or not .", "there be a potential extension to the above mode", "which be to introduce new syntax for explicit * * type - only identifier * *", "i read this be already support by flow and hegel but can not find support documentation", "i think we would still need your new mode in order to error in the case where <tag> or <tag> have no value export in <tag>", "the benefit of explicit type - only identifier be ergonomic", "it help keep the code dry", "otherwise some people may be disappoint to find they must write two independent import to pull in a value and a type from a module", "please say if you think this extension be well handle in a separate issue - i would be happy to create it"], "issue_sim": [0.04838269203901291, 0.2266719788312912, -0.016021298244595528, 0.06342263519763947, 0.2663787007331848, -0.0662665143609047, 0.24032486975193024, 0.20469608902931213, 0.3556807041168213, 0.14324960112571716, 0.12873665988445282, 0.22756901383399963, 0.32426559925079346], "prob": [0.0007062614313326776, 0.013241441920399666, 0.0017980216071009636, 0.0020636145491153, 0.31649547815322876, 0.0010997364297509193, 0.008202534168958664, 0.008382909931242466, 0.5449551939964294, 0.0008502064156346023, 0.00045319111086428165, 0.048792775720357895, 0.015231916680932045]}, {"target": [0], "doc": ["i always do <tag> in case i need array and it be not obvious if variable be array or not ."], "issue_sim": [0.3641451299190521], "prob": [0.9999901056289673]}, {"target": [0], "doc": ["for the moment , i do n't need to embed python module into powershell , what i need be just use python by exactly the same way on local window machine and remote window machine .", "for my work , i often need to connect to remote machine to do some small debug", "every time must open a rdp session to achieve the goal be not a pleasant way", "and sometimes you can not even open the rdp session as both the <number> session have already be use by other"], "issue_sim": [0.5410481691360474, 0.1019674688577652, 0.1516181081533432, 0.1541569083929062], "prob": [0.9568427801132202, 0.01576930657029152, 0.009202110581099987, 0.2156415432691574]}, {"target": [2], "doc": ["that would be the same as pass prop", "i be still unsure about the utility of a context on vue", "to i it look like the context issue be either solve with a state management library or by inject something to every instance .", "be a plugin that inherit the context from the parent override property what you be look for @sebastiandedeyne"], "issue_sim": [0.25593262910842896, 0.26198774576187134, 0.4488731324672699, 0.36800745129585266], "prob": [0.01696839928627014, 0.21117277443408966, 0.812041163444519, 0.045494455844163895]}, {"target": [1], "doc": ["i do think scon be slow though", "not much slow , but thing like the progress status and the cache make it slow for rebuild  , so i disable those when rebuild .", "it do take a bit to start do stuff , after that it be quite fast", "do n't know if meson will be significantly fast , but if someone be willing to try i be not against it"], "issue_sim": [0.1815989762544632, 0.192108616232872, 0.07467210292816162, 0.2790328860282898], "prob": [0.0006469003274105489, 0.9289186000823975, 0.0035975389182567596, 0.11805280297994614]}, {"target": [22], "doc": ["as i say it be not make thing simple to just move they away and hide they in a corner", "to i that be a cheap solution", "it be just like hide your toy under your bed as a child it be still messy , and it make find your toy that more complex afterward", "when you design a good tool you do n't usually make it so that there be only one way to use it", "i feel like these statement :", "be a proof that you think it be a good idea to force the user into one way of do thing which be not godot 's way before we use to have complete control over our file and content", "you may not care have full control over your file and the way the engine use / sort they", "as much as i respect the fact that you might want to keep that away from you and not manage your file by hand i would like to point out that it may not be the case of everyone and that some people include myself pretty much adopt this engine for its filesystem and the level of control it provide", "* * all i ask be a way to disable the automatic creation / use of that directory and file and be able to do thing manually like i use to before", "in the engine as it be right now i   can not import a file from outside my project so have share resource between multiple project or different", "mesh file for one model", "it seem to be \" not the way the user be suppose to \" well sorry that be the way i like to work i like clean / dry / minimal and flexible tool", "i use to have my", "dae outside of my project and within the project i would import they as", "scn or else and then work with these file move they around instantiate they etc", "dae file as well as other file would be untouched and keep outside of the scope of the project", "i understand you may say it be not your way , or whatever", "yet i have no unnecessary duplication and a very dry and clean project overall with well define directory understandable and self choose naming convention and no zombie file", "and yes the engine generate zombie file now", "i understand that you might feel like it be just some guy that refuse to adapt and be be picky , i be ask you to keep an open mind on that matter", "in the end this issue be underline a real opinion over what direction the engine be take and how it may be hurt it", "in my case this be really something that can drive i away , as much as i love work on this engine full user control mean everything to i", "as a matter of fact indeed we disagree on one important point i think user * * should * * be wonder \" what be this import folder about ? \" .", "the more people wonder and the more people look at how it work the cleaner and the well it become and the well people get at use it and take advantage of it"], "issue_sim": [0.2507131099700928, 0.05636729672551155, 0.1397077441215515, 0.1935604214668274, -0.03766058757901192, 0.5093079805374146, 0.3143596351146698, 0.5160788893699646, 0.39101308584213257, 0.3946842551231384, 0.1826690435409546, 0.27288931608200073, 0.04932362586259842, 0.24640421569347382, 0.21023523807525635, 0.3545258641242981, 0.13443982601165771, 0.35831499099731445, 0.18907275795936584, 0.13927507400512695, 0.28570473194122314, 0.31073254346847534, 0.44863319396972656, 0.09388265013694763], "prob": [0.002841339213773608, 3.5111981560476124e-05, 0.0232989564538002, 2.2177206119522452e-05, 5.22794425705797e-06, 0.03119737282395363, 3.6647772503783926e-05, 0.5470853447914124, 0.0002403053076704964, 5.364809476304799e-05, 1.111238674411652e-07, 0.0035313398111611605, 5.037018127040938e-07, 3.6394328617461724e-06, 4.811290637007914e-07, 0.00010181975812884048, 9.278717811866954e-07, 0.00017508929886389524, 3.517290565469011e-07, 0.0032284001354128122, 0.0001116677449317649, 0.00047825873480178416, 0.002826490206643939, 0.09232725203037262]}, {"target": [3], "doc": ["we exclude it during the initial implementation due to complexity , but leave an error for it in so we could go back and add it later if we need to", "an issue here be that the module resolution strategy we use be determine by your compiler option", "and an <tag> option can be specify just what that module resolution scheme be , which be kind of a circular dependency -", "you must know your module resolution scheme to resolve an <tag> option , but your <tag> option can lead to where you specify some module resolution scheme !"], "issue_sim": [0.16999971866607666, 0.2706180214881897, 0.3273106813430786, 0.31694236397743225], "prob": [0.5896044373512268, 0.026895232498645782, 0.1982840746641159, 0.19287389516830444]}, {"target": [0], "doc": ["please note that while they be the same architecture , compile it for rasberry pie will not allow it to run on android"], "issue_sim": [0.514664888381958], "prob": [0.9999831914901733]}, {"target": [0], "doc": ["automatically change path name when a scene be edit may sound like a good idea when you be use the intend workflow where for every node in a scene there be one distinct script  , but some people like to use one script on different node in different scene or even attach and detach script at runtime", "in these case it would probably lead to quite inconsistent result if the editor try to identify which path should be modify and which one should n't ."], "issue_sim": [0.510077714920044, 0.28099068999290466], "prob": [0.7382528781890869, 0.3385036289691925]}, {"target": [0], "doc": ["i already had<tag> in my project so i pull in <tag> to. create a valid offset to pass .", "in the future i be consider use date - fns", "along with another library to represent the subset of zone info i need to", "on fri , nov <number> , <number> , 3:33 be olivier combe < notifications@github", "phone : <number> - <number> - <number>"], "issue_sim": [0.3374057114124298, 0.29717469215393066, 0.1377091258764267, -0.016564866527915, 0.024623742327094078], "prob": [0.9716471433639526, 0.006647306028753519, 0.10788513720035553, 0.004117008298635483, 0.0012189673725515604]}, {"target": [4], "doc": ["thanks , @brucepay , but this issue be not about how <tag> function when it be use _ as intend _ , it be about the syntax not prevent _ nonsensical use _", "what you be demonstrate be not per se about _ data structure _  , you be demonstrate use with a _ variable _ , i", ", effectively create a variable _ alia _  to the so question )", "yes , it would have work - but it also would have be _ pointless _", "point to a piece of _ data _  only make sense with instance of _ reference type _ and  you can use a _ regular _ variable to do that - use <tag> in this scenario add nothing and only complicate matter .", "thus , my point be that use it with a  _ variable _ be the _ only _ use that make sense", "and that user can be spare confusion if the language itself prevent other use", "or be i miss other legitimate use of <tag>"], "issue_sim": [0.5538985729217529, 0.334769606590271, 0.2160435914993286, 0.08232218027114868, 0.49383413791656494, 0.3106282651424408, 0.26130399107933044, 0.10812386125326157], "prob": [0.10410197079181671, 0.23061560094356537, 0.03661176934838295, 0.0032851260621100664, 0.45569032430648804, 0.03342539817094803, 0.0013374962145462632, 0.0002399563236394897]}, {"target": [1], "doc": ["definitely , integer comparison seem very necessary to i", "point2i / vector2i would be a great addition to gdscript ."], "issue_sim": [0.198042094707489, 0.1387176215648651], "prob": [0.05121695250272751, 0.9157670140266418]}, {"target": [0], "doc": ["i have vim run in powershell and i really need the ability to split pane both horizontally and vertically .", "it would also be nice to have vi binding to navigate through the pane as specify here : <url>", "< blockquote><img src=\"<url> / u/420113", "s=400&v=4 \" width=\"48 \" align=\"right\"></blockquote >"], "issue_sim": [0.6247202157974243, 0.31531187891960144, 0.05819974094629288, 0.10339584946632385], "prob": [0.9458793997764587, 0.05729852616786957, 0.0002432955225231126, 0.03445851057767868]}, {"target": [0], "doc": ["i find script / view menu on the top bar easy to \" aim for \" , rather than be in the menu bar where there can be quite a lot of menu sometimes .", "but that must be because i get use to it , so it feel natural"], "issue_sim": [0.3000819981098175, 0.1831953078508377], "prob": [0.9334572553634644, 0.005615933798253536]}, {"target": [1], "doc": ["this dovetail nicely into the parameter alias discussion in # <number>", "if a user can extend the parameter metadata for other command , they can add alias or even an <tag> , which would solve this problem nicely without explicitly opt into the potentially destructive and possibly surprising behavior that i 'd like ."], "issue_sim": [0.2898772358894348, 0.45293158292770386], "prob": [0.022506089881062508, 0.9660066962242126]}, {"target": [5], "doc": ["@davidberg - msft i think what @isazonov be concerned about be that when translate some type of object to a string form , you can end up with their representation contain comma", "in fact , some system of record _ number _ will result in comma depend on the culture setting", "i believe several european culture actually notate a decimal point with a comma instead of a period", "this would break the result file , if you attempt to have it create the file without quote number as string", "ultimately , try to determine ahead of time which type of object can and can not stringify well and not break the format be liable to be a _ very _ large waste of time ; the file create _ be _ go to be a text file , by design of the csv format", "it be arguably much more effective to simply assume datum be stre and allow the program that intend to consume it to determine the format however be appropriate for its requirement ."], "issue_sim": [0.3482394218444824, 0.06290092319250107, 0.23384927213191986, 0.5433614253997803, 0.43038254976272583, 0.2736220955848694], "prob": [0.0035022080410271883, 0.12470706552267075, 0.012749536894261837, 0.055621061474084854, 0.45023515820503235, 0.05157652497291565]}, {"target": [2], "doc": ["yes - it be part of the plan", "adam plumer would be help here", "and migrate they out since they have deprecate for quite some time .", "yes - that be my plan", "yes - seem straightforward and doable"], "issue_sim": [0.062336064875125885, 0.06391502171754837, 0.1487255096435547, 0.012036208063364029, 0.036654941737651825], "prob": [0.018921593204140663, 0.0806017592549324, 0.7443113327026367, 0.00638158805668354, 0.026021236553788185]}, {"target": [4], "doc": ["that be a good example in principle , but note that it be n't about _ value _ type - it be about  _ modify a variable in a parent scope _", "without the scope issue involve , again a simple variable will do - note the use of <tag> rather than <tag> , which create _ no _ child scope :", "because <tag> create a child scope , you do need an indirect reference , as demonstrate in your example", "implement the same thing without <tag> would indeed be clunky :", "so , as long as <tag> be update to properly frame the two - disparate - case in which <tag> make sense - use with api , use a convenient <tag> alternative - perhaps that be all we need ."], "issue_sim": [0.3395549952983856, 0.49829384684562683, 0.360672265291214, 0.25218749046325684, 0.44160211086273193], "prob": [0.32343435287475586, 0.5863603353500366, 0.03386204317212105, 0.00634152814745903, 0.3684271574020386]}, {"target": [0], "doc": ["yes , but even if you call <tag> without pass argument to the thread , the thread 's method be still be call with one parameter , because the argument be pass as an array .", "this be too confuse imo", "be it possible to pass the argument as real parameter  to the thread method"], "issue_sim": [0.48799169063568115, 0.08656834065914154, 0.427029550075531], "prob": [0.9310641884803772, 0.012481659650802612, 0.0674789771437645]}, {"target": [7], "doc": ["@mark - hahn i intentionally use _ error _ handle as oppose to _ exception _ handle in an effort to avoid confusion", "obviously , i have fail", "my point be that it be generally well to send error on a separate channel :", "- in c , you 'd have function that manipulate datum pointer send as argument and return an integer status code", "js ' continuation all expect to be call with <tag>", "- rust , haskell , scala use <tag> / <tag>", "- and of course , lot of language have good old fashioned propagating exception", "even when the situation mandate that error be send as result , not check the return code for those special value be equivalent to not handle error , and one can not expect a backend - agnostic mvvm - framework to do that for you ."], "issue_sim": [0.31911909580230713, 0.07007898390293121, 0.06915958970785141, 0.1718067079782486, 0.26712095737457275, 0.18437480926513672, 0.08071784675121307, 0.4171323776245117], "prob": [0.0011699728202074766, 0.005533596035093069, 0.00483221560716629, 0.17064879834651947, 0.0008091537747532129, 0.0076010944321751595, 0.0011442004470154643, 0.6672927141189575]}, {"target": [0], "doc": ["i think it would be more user - friendly to provide only one <tag> class with a <tag> method .", "a sensible default would be choose and the user would be able to switch to another with a constant in the form of <tag>", "it would be nice as well to have useful overload like for instance :", "- <tag> as a shorthand for <tag> ;", "- and <tag> as a shorthand for <tag>", "and maybe rename <tag> to just <tag> because every method be return a <tag>", "since the only exception be <tag> , that be the only method name need a suffix", "at last , i be not sure about the convenience method <tag>", "it be just syntactic sugar , be n't it", "and with my proposal you could just wrtite <tag>", "i hope you find my suggestion useful"], "issue_sim": [0.003876475617289543, -0.022654183208942413, -0.12684987485408783, 0.004754163324832916, 0.010485880076885223, 0.08719294518232346, 0.02738487720489502, 0.05009021610021591, -0.040435150265693665, -0.026584018021821976, 0.06197717785835266], "prob": [0.12386175990104675, 0.21078483760356903, 0.038652073591947556, 0.05698906630277634, 0.015951208770275116, 0.11226386576890945, 0.05318303406238556, 0.02388208732008934, 0.00735983531922102, 0.012263700366020203, 0.003756237216293812]}, {"target": [0], "doc": ["to avoid work with index , and instead work with name , make it so much easy to read such code .", "one have to wonder , from all the down - vote , and without explanation , where all the negativity come from", "seem like just very unfriendly place"], "issue_sim": [0.258383184671402, -0.05860842391848564, -0.036327142268419266], "prob": [0.7258732318878174, 0.3955904245376587, 0.012856250628829002]}, {"target": [1], "doc": ["i do n't get the fr", "you can already programmatically create vue instance  . share an object as the state  will allow you to reuse the same datum in multiple instance if need .. to trigger function when thing change , use watcher ."], "issue_sim": [-0.03720574453473091, 0.5075129270553589], "prob": [0.005949830636382103, 0.9981104135513306]}, {"target": [1], "doc": ["do that mean there be no chance of it change", "not be able to see one of the standard colour seem like a pretty major defect for a console", "this seem like a reasonable solution , any chance of it happen"], "issue_sim": [0.03224404901266098, 0.2593632936477661, -0.0029910914599895477], "prob": [0.2989713251590729, 0.7445281744003296, 0.024632278829813004]}, {"target": [0], "doc": ["this would be a great addition to an already well used cmdlet , able to import a .jsonc file and convert it to an object as usually .", "to use <tag> now , the file first need to load and then be strip from comment"], "issue_sim": [0.4353320002555847, 0.1628689169883728], "prob": [0.9662114381790161, 0.008213484659790993]}, {"target": [0], "doc": ["so if we can make ngmodules simple and more  that should be a big win or everyone ."], "issue_sim": [0.13646870851516724], "prob": [0.9999538660049438]}, {"target": [4], "doc": ["add more feature to gdscript would be well way to approach scripting in my opinion", "for i , main reason to choose godot over other game engine be simplify scripting scheme", "godot be not offer to learn a new programing language", "it be offer to learn godot and its scripting language as a combine tool for game development", "this be a less intimidating approach than offer new comer to learn c++ or any other programing language for scripting ."], "issue_sim": [0.37317296862602234, 0.4356258511543274, 0.3733205199241638, 0.4605928659439087, 0.4746153950691223], "prob": [0.0041837431490421295, 0.08392471820116043, 0.0015454961685463786, 0.009077201597392559, 0.7513850331306458]}, {"target": [2], "doc": ["@mohammedzamakhan thank you   for your recommendation of component composition instead of inheretiency", "however for my usecase , inheritance be ideal and allow i reuse code", "i can change something in base template and let all derive component take advantage of it .", "we have <number> + table view with same crud style user interaction", "but we have to customize some table view without edit option  , have   some custom column render requirement and much more", "my ask be to allow build - time join   of <number> + template as @manklu suggest but natively", "please see my sample repo provide above :", "in derive   component , i can overwrite <tag> and <tag> method   for usecase", "how can we accomplish similar behavior with composition"], "issue_sim": [0.15922415256500244, 0.3613126277923584, 0.4370003044605255, 0.34014570713043213, 0.32464954257011414, 0.3735017776489258, 0.27228689193725586, 0.48545151948928833, 0.2891782820224762], "prob": [0.005380060523748398, 0.15039728581905365, 0.25953155755996704, 0.007534199859946966, 0.15780231356620789, 0.034304000437259674, 0.002936652395874262, 0.029422949999570847, 0.003866662969812751]}, {"target": [3], "doc": ["no one be tell you not to use <tag>", "here be an example of the directive that i mention : <url>", "as you change the value in the dropdown , the corresponding input get focus", "no viewchild , no dynamic template reference variable , no awkwardness ."], "issue_sim": [0.11101807653903961, 0.19418197870254517, 0.16789574921131134, 0.45925143361091614], "prob": [0.004459671676158905, 0.009280646219849586, 0.010408208705484867, 0.9682925343513489]}, {"target": [3], "doc": ["thx for put this together , @spike - rabbit", "i take some time to  think about the api today , so here be my thought", "first of all , as a point of reference , here be what the <tag> public api look like today :", "try to stay as backwards compatible as possible , i might propose the follow change to the <tag> public api  .", "these be similar to your suggestion , @spike - rabbit , just a little more concrete", "- keep <tag> and <tag> as be", "- update <tag> to return a promise resolve to <tag>/<tag> on successful completion  or not ) and reject on failure", "resolve to <tag> mean an update be find and download and be ready to use , resolve to <tag> mean no update be find and reject mean an error happen while either check for an update or download it", "- update <tag> to return a promise resolve to <tag>/<tag> on successful completion  ) and reject on failure", "- introduce a new <tag> observable  that emit the follow type of event :", "- consider deprecating  the <tag> observable , since it could now be construct from <tag>", "- consider deprecating  the <tag> observable , since  it only really emit in response to call <tag>", "with that , the <tag> public api surface would look like :", "wdyt , @spike - rabbit , @marcinowski , other"], "issue_sim": [-0.07469351589679718, 0.06712762266397476, 0.18009290099143982, 0.34320688247680664, -0.02448875457048416, 0.04301861301064491, 0.295829713344574, 0.3454272747039795, 0.2705780863761902, 0.3670755624771118, 0.3950675129890442, 0.3622521162033081, 0.11049288511276245, 0.0004088273271918297], "prob": [3.24523466588289e-06, 0.0003587106184568256, 0.0035877933260053396, 0.05823097378015518, 1.5399073163280264e-05, 5.729639087803662e-05, 0.000639963720459491, 0.025546349585056305, 0.00011301066115265712, 2.5297860702266917e-05, 0.0013644725549966097, 0.002293640049174428, 0.00015147561498451978, 8.776803497312358e-07]}, {"target": [7], "doc": ["@calinou yeah , i just get do plug in my old 60hz monitor to test on my <number> fixed_fps game", "jitter be still very apparent", "i do test it on my 144hz monitor by just switch it to 60hz in setting , but just want to make sure with an actual physically different monitor", "basically i be curious should n't the fixed_fps adjust automatically base on the user 's refresh rate already", "for the smoothness performance", "i mean , if the fixed_fps be default to a delta time of 0", "0167  i finally get where all the jitter report be come from", "because once i set the fixed_fps to the same as my monitor 's refresh rate , it all disappear and godot 's renderer feel as smooth as butter ...", "e : this be with vsync on btw"], "issue_sim": [0.5649892091751099, 0.2887275815010071, 0.6021222472190857, 0.4036719799041748, 0.15732832252979279, 0.2091011106967926, 0.3160442113876343, 0.4538014233112335, 0.46078363060951233], "prob": [0.0058485763147473335, 0.0011297079036012292, 0.1623031049966812, 0.14135527610778809, 0.002962172031402588, 0.0101699810475111, 0.00731462799012661, 0.6206804513931274, 0.0014055026695132256]}, {"target": [0], "doc": ["it doesn make sense to say ake i write file extensions?outside the broad context of a module resolution strategy where file extension be require , and <tag> be the first of those strategy that wel support ."], "issue_sim": [0.3352169394493103], "prob": [0.9999622106552124]}, {"target": [0], "doc": ["first of all , would like to say i like the idea , i personally find myself create \" oneliner \" like <tag> while { stuff ; start - sleep <number> } <tag> a lot , so i think it would be great to have a parameter like that for when i monitor a condition in real time .", "other than that i think if at all possible the parameter should be keep the same for text and object , maybe limit how much it traverse an object as a \" solution \" to limit performance / display issue", "personally speak , i usually do n't dig too deep in the object , and since i control the scriptblock , spend a little extra time to simplify the return object , do n't seem too big a deal in my opinion"], "issue_sim": [0.42288950085639954, 0.4337537884712219, 0.3247791528701782], "prob": [0.44925907254219055, 0.4045270085334778, 0.2709592282772064]}, {"target": [0], "doc": ["if only disable filtering do n't make thing bad"], "issue_sim": [0.14551189541816711], "prob": [0.9988549947738647]}, {"target": [1], "doc": ["yeah , you 'll need to redirect the stream from within a ps session .", "there be not a complete 1:1 mapping of all ps stream to other console stream , so you 'll have to perform this redirection when call from a ps shell or from within the script itself to be sure powershell be actually handle the redirection", "otherwise , i believe most of these will get squash into the output / stderr stream by default"], "issue_sim": [0.23510734736919403, 0.5312727093696594, 0.28139469027519226], "prob": [0.7746749520301819, 0.653697669506073, 0.001914630294777453]}, {"target": [0], "doc": ["nested method would be useful in give mixin method their own namespace ."], "issue_sim": [0.42840468883514404], "prob": [0.9999845027923584]}, {"target": [1], "doc": ["@posva also , it would be a break change", "someone may intentionally pass a number via static attribute because they want it to be a string for concatenation ."], "issue_sim": [0.07235705107450485, 0.39190536737442017], "prob": [0.0027197266463190317, 0.9935617446899414]}, {"target": [8], "doc": ["i like the idea of allow reference to be force ' local ' , but for a different use - case : when i have a test-something", "ts , that file be intend to be run with mocha", "however , if i currently put a <tag> in it , the <tag> and <tag> become available in the whole program , which be not what i want", "however , i would prefer to not have to write these <tag> line anymore", "although they be acceptable for the mocha - case  , it seem redundant to manually specify where the", "ts file be to be find , when i already do an <tag> and can have the compiler search for the typing", "also , have a <tag> line in the", "ts file of a library make it no long suitable to use as an ' isomorphic typing '", "it be indeed a solution for solve the ' accidental global ' , but i think # <number>  solve it more elegantly by basically automatically decide to apply your ' localize ' set when import .", "and we still need a solution for the ' intentional global '"], "issue_sim": [0.41431236267089844, 0.3278001546859741, 0.21545466780662537, 0.07978028804063797, 0.24721992015838623, 0.41299164295196533, 0.00546606257557869, 0.29606181383132935, 0.37297624349594116, 0.10214439034461975], "prob": [0.28551843762397766, 0.0020199057180434465, 0.20560646057128906, 0.002351843984797597, 0.06224929541349411, 0.029341664165258408, 0.0010094885947182775, 0.02199103869497776, 0.32334211468696594, 0.00427292101085186]}, {"target": [0], "doc": ["i agree with @rkeithhill   the current parameter binder for valuefromremainingargument be work as expect - its by design and no fix need ."], "issue_sim": [0.309540331363678], "prob": [0.999812662601471]}, {"target": [2], "doc": ["@powershell / powershell - committee review this", "we agree that the utility of support both forward and backslashe as a directory separator be valuable for cross platform script as well as be exist behavior", "the fundamental issue seem to be that escape character in path be not propagate through provider and this be a bug that should be fix ."], "issue_sim": [0.24047160148620605, 0.4255372881889343, 0.48494774103164673], "prob": [0.0073319305665791035, 0.6929893493652344, 0.8330302834510803]}, {"target": [12], "doc": ["@stevel - msft    yes i understand that , the point i be try to make be you like your shell one way and i like mine another and neither be more _ right _ or less _ right _", "try to change what exist be likely to upset as many people as it please", "i be also quite conservative with these thing , i see no need to change the colour although it turn out to make no difference", "i think the notice can go at the top , bottom or under the prompt , provide it be clean up by default", "@peppekerstens   apart from a perf issue it do n't pause thing", "it tell the user \" thing _ look _ like they have stop but i be download / expand / whatever \"", "the need for that information be _ transient _", "one example be i get information from azure devop use the rest api and this take a couple of minute", "if i be glance at my screen i want to see \" stage <number> of <number> be   <number> % do \"   but if go and get a coffee , i do n't want a screen full of \" do stage <number>", "do stage <number> etc \"", "in some case i can see the way write - progress be call it will print \" fetched work item <number> , fetched work item <number>", "fetch work item <number> \" and i have to scroll back through 10,000 line to see if there be any error", "progress message cease to be useful a few second after they appear , and that be why they  replace each other ."], "issue_sim": [0.1970214992761612, 0.129370778799057, 0.15046308934688568, 0.18039922416210175, 0.19420576095581055, 0.17834317684173584, -0.06774255633354187, 0.09825579822063446, 0.262508749961853, 0.10819460451602936, 0.26708871126174927, 0.2538207769393921, 0.24991077184677124], "prob": [0.008381471037864685, 0.0468829981982708, 0.22986625134944916, 0.24077320098876953, 0.0005300313350744545, 0.09193796664476395, 0.0016670154873281717, 0.03218502178788185, 0.054934751242399216, 0.00019585252448450774, 0.03324549272656441, 0.004418814089149237, 0.08857569098472595]}, {"target": [0], "doc": ["but in your example , compute property seem to be a much well choice than watcher"], "issue_sim": [0.2400541603565216], "prob": [0.999384880065918]}, {"target": [0], "doc": ["and another shorthand i 'd like be to allow to skip the value , like the es6 object shorthand :. <tag> <tag> <tag>"], "issue_sim": [0.463909387588501], "prob": [0.9998705387115479]}, {"target": [4], "doc": ["@paper - pauper i understand that we be on the same side", "when i write \" if you think that c # would be a nice addition \" i be adresse \" you , the anonymous reader \" , not you personally", "and yes , any new scripting language will drain attention from gdscript", "i doubt that the community will take care of more than one language , soon or later some feature will be unavailable or break from either of they maybe even up to the point that one of the language be drop", "i also agree that the only real issue here be c++ 's compile time and gdscript 's performance .", "the argument that people already know c # be just plain wrong imho", "i have be work professionally with c # for about <number> year now  and the one thing that i have learn in that time be that i will most likely never be able to say that i really know that language", "after all with c # <number> and the proposition for <number> the number of feature be still grow", "so when we be talk about \" know c # \" all we can actually be refer to be know the most basic syntax which even the bad beginner should be able to re - learn in a few day", "i recently hold a lecture on different game engine to a class of game designer that be exclusively use unity before and none of they comment badly on the syntax of gdscript while in fact several who have give up on programming be now motivate again", "so yeah , a solution that speed up gdscript and make c++ less cumbersome to compile and use would be my favorite as well"], "issue_sim": [0.009255805984139442, 0.17626413702964783, 0.37476634979248047, 0.3199180066585541, 0.4959397315979004, 0.24862419068813324, 0.30732613801956177, 0.2583571672439575, 0.29000139236450195, 0.45563578605651855, 0.5091552734375], "prob": [0.0011747179087251425, 0.348967045545578, 0.017620615661144257, 0.5595587491989136, 0.09450332820415497, 0.00132053904235363, 0.08601533621549606, 0.002027468988671899, 0.03257216885685921, 0.030649324879050255, 0.08658070117235184]}, {"target": [2], "doc": ["the problem be not the call site", "it the definition site", "the decorator be call only once the declaration , and when this happen , the value of <tag> be <tag> , which be undefined at this point .", "i get it that you want the compiler to be more helpful in these case , and i be list case that behave similarly", "we would be open to discuss suggestion here", "again the only thing i can think of be make the value of <tag> either a getter , or a function that need to be call to get the param type", "also there have be similar design discussion here : <url>"], "issue_sim": [0.11893853545188904, 0.1572713851928711, 0.4543050229549408, 0.2677813768386841, -0.12161645293235779, 0.36968517303466797, 0.0072142742574214935], "prob": [0.0026503039989620447, 0.006107508670538664, 0.8446061611175537, 0.020966092124581337, 0.0007293897797353566, 0.791485607624054, 0.0005152353551238775]}, {"target": [1], "doc": ["that do n't solve the problem ; you still have to asynchronously load that file", "actually complicate it more because you wo n't be able to leverage vue 's \" async component \" feature to block the declaration of the component till the chunk be load because the file be no long a component ."], "issue_sim": [0.26879602670669556, 0.36086931824684143], "prob": [0.046833548694849014, 0.9256638288497925]}, {"target": [6], "doc": ["+1 for a native solution", "even if a promise - base implementation of throttle event make sense in particular scenario , imho it be tangential to the main use case here", "it would be sufficient to add a minimal core implementation that let you asynchronously fetch datum with the absolute minimum amount of boilerplate - then see what other clever and unexpected  use people put it to", "can you provide a scenario where this be necessary - as oppose to normal vue - agnostic use of promise", "<tag> seem a good way of do this without expand the api surface", "default value + callback on resolve be good enough for the core minimal use case", "overall vue - async - compute be a step in the right direction , and core support for this would be a major step forward , see how promise and async / await be now a core part of our language workflow"], "issue_sim": [0.19697491824626923, 0.37860625982284546, 0.4470273554325104, 0.21321818232536316, 0.18406111001968384, 0.37229621410369873, 0.41008564829826355], "prob": [1.69329832715448e-05, 0.08539947122335434, 0.7317289710044861, 0.00550819793716073, 0.0005118133849464357, 0.0004100673831999302, 0.6383500099182129]}, {"target": [7], "doc": ["@the - cpu1 :", "indeed : <tag> be special in that it truly create a reference to the variable _ object _ behind the scene , not its _ present value _", "i understand the intent behind", "but the point be that the use of <tag> here create a   _ pointless wrapper _", "you can simply assign <tag>   directly to a regular variable and get the same effect :", "again , note that this only work because the value of the <tag> entry be an instance of a", "net _ reference type _", "if it be an instance of a _ value type _  , this approach _ fundamentally _ would n't work - whether or not you use the <tag> wrapper ."], "issue_sim": [0.007199210114777088, 0.32425516843795776, 0.0583367794752121, 0.24902072548866272, 0.3477213978767395, 0.24476182460784912, 0.1887657642364502, 0.35893356800079346], "prob": [0.001585951540619135, 0.23096492886543274, 0.0005541903083212674, 0.012735466472804546, 0.016605734825134277, 0.03976349160075188, 0.003004612633958459, 0.22870612144470215]}, {"target": [0], "doc": ["it still work that case , add a <tag> without <tag> and make sure the specificity of the selector be high by add one class be enough .", "let the menu , item aside , i be more interested in a different case that can not be solve with a css methodology"], "issue_sim": [0.4357282817363739, 0.5164847373962402], "prob": [0.7685538530349731, 0.144776850938797]}, {"target": [0], "doc": ["we 've refine our api on the vs code side and have decide not to include the <tag> in v1 .", "we 've also move to use a link list structure instead of an array", "here be an update proposal that reflect this :", "the vs code api also take a list of position in the file and we return a list of selection range for each of those position", "this avoid extra request in some case", "we should consider do this in the ts api as well , as i do n't think there be any downside", "this would look like :", "here be the vs code api : <url>"], "issue_sim": [0.4273611009120941, 0.22072789072990417, 0.08807574212551117, 0.4981483817100525, 0.021755307912826538, 0.251991331577301, 0.09771136939525604, 0.41560783982276917], "prob": [0.8837758898735046, 0.03576643392443657, 0.012263349257409573, 0.15540970861911774, 0.0006760150426998734, 0.08994624763727188, 0.0007069503772072494, 0.000288869981886819]}, {"target": [1], "doc": ["@mlc - mlapis    as @kewde explain here <url> ,   yes there be a destroy  method which destroy the injector  + call the register ondestroy callback on the ngmoduleref itself", "but the ngmodule instance  itself be not clear as there be still a reference to it inside the router inside a loadedrouterconfig as the _ module _ attribute", "this attribute be never clear and therefor the ngmoduleref be never gc'ed", "on the other hand , the ngcomponentoutlet do clear the reference to the ngmodule instance : <url>"], "issue_sim": [0.4139925539493561, 0.4114762544631958, 0.1315588355064392, 0.2041264921426773], "prob": [0.07835110276937485, 0.6513664722442627, 0.007733386009931564, 0.1070626899600029]}, {"target": [0], "doc": ["the key issue with that approach be that it do n't recreate the dependency between test , so any state hold by the dependency can cause problem .", "the ideal option be to just compile to test module once and reuse that , since the vast majority of the time be spend compile the test module", "but i admit i be still not sure what the delay be in get angular itself to support this", "i get that use the <tag> method can interfere , but as long as the test module be define once and no override be use after it be create , this be really not all that complicated"], "issue_sim": [0.3967805802822113, 0.4059329032897949, 0.2905532121658325, 0.45976805686950684], "prob": [0.2928818166255951, 0.11671096831560135, 0.0015108147636055946, 0.6425422430038452]}, {"target": [1], "doc": ["@mlc - mlapis thank you , i already know what viewencapsulation do", "i want to translate style file  to normal css file .", "which include <tag> and <tag> attribute to style that only editing component", "and i want to do this inside my vs code extension"], "issue_sim": [0.09740552306175232, 0.48066169023513794, 0.37838655710220337, 0.3193575143814087], "prob": [0.00010402352927485481, 0.8379420638084412, 0.3355644941329956, 0.0014233997790142894]}, {"target": [0], "doc": ["i do n't know where we stand on this request  , but js make an extensive use of coercion , and when need a string it call for <tag> as in <tag>", "i think this be the proper way to go , just ask for a coercion with <tag> while render"], "issue_sim": [0.47138139605522156, 0.3560020923614502], "prob": [0.9479307532310486, 0.01505754329264164]}, {"target": [2], "doc": ["just to make sure i understand , this be about some arbitrary descendant element of the <tag> having already call <tag> , and the expectation that this would prevent navigation", "* it be true that a native anchor element with an <tag> attribute will not navigate if a descendant call <tag> on the <tag> event", "in angular cdk and angular material , though , we do n't check the <tag> state in any of the component  .", "* from an accessibility perspective , interactive control should not contain other interactive control", "put another way , nothing that should be handle a click / keyboard event should usually not be inside of an anchor in the first place", "@willydee for the third case you mention  , why would n't the expectation be that call <tag> also prevent the thing the <tag> be do"], "issue_sim": [0.44339171051979065, 0.6475846767425537, 0.3782159388065338, 0.1737533062696457, 0.41557300090789795, 0.23017136752605438], "prob": [0.2634449303150177, 0.012088500894606113, 0.1849983036518097, 0.0004450241394806653, 0.051740750670433044, 0.00028725372976623476]}, {"target": [0], "doc": ["seem like a legit bug , but as a side note , a little strange to resolve a promise from a promise executor callback .", "promise executor should basically be reduce down to the low level that be n't already promisifie", "if you already have a promise in the executor , then you could just make that your promise call , instead of create a wrapper promise around a promise"], "issue_sim": [0.4038969576358795, 0.13731025159358978, 0.4196290969848633], "prob": [0.7458037734031677, 0.0012208841508254409, 0.8629342317581177]}, {"target": [1], "doc": ["if i understand correctly , this be basically what c # call \"  \" , but with non - abstract method", "it might be well to call the feature interface instead of trait to be familiar to programmer ."], "issue_sim": [0.28601956367492676, 0.243069127202034], "prob": [0.00869120005518198, 0.9521110653877258]}, {"target": [6], "doc": ["can this be approach in an incremental way", "what i be interested in the use of <tag> for , in most case , be to avoid wrap a callback in an arrow function", "in this circumstance , i be not use <tag> for partial application", "i be use it merely to avoid write code that look like this :", "in this situation , the type should be <tag> , just as <tag> be in the class", "what would need to be add to the compiler , just to achieve this", "i feel like if <tag> be able to take on the exact type of the function it be call from , it would be a start in the right direction .", "partial application could be work in later"], "issue_sim": [0.09135320782661438, 0.31769102811813354, 0.24064797163009644, 0.2791209816932678, 0.2615351974964142, 0.4202640950679779, 0.2429867386817932, 0.041697908192873], "prob": [0.0075057027861475945, 0.20136812329292297, 0.0034563641529530287, 0.010918887332081795, 0.1491670459508896, 0.000723200268112123, 0.9306453466415405, 0.0005790412542410195]}, {"target": [1], "doc": ["one other valid usecase be if you be work with", "for example we could be in another dom  so <tag> be a different one :"], "issue_sim": [0.2321757674217224, 0.19373300671577454], "prob": [0.2905956208705902, 0.6318183541297913]}, {"target": [0], "doc": ["possibly interesting alternative to context : plugin / mixin that apply to a component and all of it 's descendant , instead of globally"], "issue_sim": [0.610931396484375], "prob": [0.9990629553794861]}, {"target": [1], "doc": ["@nickmesse currently the only plan change in v3 be the reactivity system and browser compatibility", "the break change would be minimal  and the api will remain the same ."], "issue_sim": [0.22164295613765717, 0.3031321167945862], "prob": [0.06458945572376251, 0.945720374584198]}, {"target": [3], "doc": ["@srgom   also , the return semantic you be post about be very typical  for a <tag>", "korn shell and bash behave this way", "the idea be that you can copy paste line you execute from the console into a script file inside a function and then execute that function would behave just as if you execute those line - one at a time - at the console", "i think the return semantic difference between powershell function and powershell class method be a pretty clever way of a ) not break thousand of exist function b ) appeal to shell scripter  and c ) give devs with more experience in a traditional / gp programming language something they be more comfortable with ."], "issue_sim": [0.325550377368927, 0.16853472590446472, 0.2908812165260315, 0.47554346919059753], "prob": [0.0006823302828706801, 0.0004604618588928133, 0.24194028973579407, 0.6288601160049438]}, {"target": [0], "doc": ["use directive - wrapping instead of component - wrapping can overcome the dom / css issue .", "yes the large issue be that the directive / component - wrap approach only work if you build enough component to enumerate all possible value", "there be a static tree of  directive / component selector  component template  inject value", "there be a dynamic tree of  inputs  inject observables  dynamically create component", "i want to increase what can be do dynamically", "for example , suppose an app have most route under :", "and that use of site id  be ubiquitous", "the router inject <tag> which have an observable with the <tag> value", "however , that mean that * every * component use <tag> must consume it as an observable", "it 'd be more convenient if i could just assume it be constant", "i think the currently good approach be <tag> , though that the mention downside", "i suppose one to solve this be to extend <tag> : support input  and ngonchange and maybe change detection strategy in ngcomponentoutlet", "it be a more awkward call convention , require entrycomponent , and ca n't use input intellisense"], "issue_sim": [0.5205204486846924, 0.5351237654685974, 0.6334236860275269, 0.6162854433059692, 0.21289122104644775, 0.03005479834973812, -0.004218602553009987, 0.42903950810432434, 0.3175206780433655, 0.05328863859176636, 0.08868163079023361, 0.28920239210128784, 0.049943119287490845], "prob": [0.36215540766716003, 0.37189117074012756, 0.009046687744557858, 0.0009865985484793782, 0.002085611689835787, 0.001339299138635397, 0.004623586777597666, 0.17221380770206451, 0.034342825412750244, 0.0015084154438227415, 0.015770940110087395, 0.06525668501853943, 0.006369267124682665]}, {"target": [0], "doc": ["the problem be that the scope of use template functionally be limit , much more than use jsx / render function .", "i think at the point of build functional component , the constraint and design pattern do n't fit a template model", "this feature require a small amount of extra runtime  and will never have the same performance as pure render function", "enable this feature will assume well performance , comparative to pure render function this be not true", "my stance on the feature at the moment , be that it will only empower template to be use functionality but give no true reward"], "issue_sim": [0.5657802820205688, 0.4361429810523987, 0.4681898355484009, 0.39182013273239136, 0.3748176097869873], "prob": [0.903934121131897, 0.044432491064071655, 0.10761769860982895, 0.0057687340304255486, 0.11107606440782547]}, {"target": [1], "doc": ["i be lack proper terminology sorry", "out of all possible combination of type a , ... , z use operation of <tag> and <tag> a type guard assert a value being of a separate constituent type should be allow :", "in other word : anything that , accord to the type be assert , be possible should be able to be the target type of a custom type guard"], "issue_sim": [0.11682920902967453, 0.38145971298217773, 0.42393794655799866], "prob": [0.0027871925849467516, 0.9237060546875, 0.24201074242591858]}, {"target": [2], "doc": ["i be also have problem with multiple condition classname like in your example", "but please note you be propose to bring new directive syntax for a sole case", "it do not look to like a wise decision to i , because @yyx990803 try to make directive ' syntax as compact as possible and make it look like common javascript with simple expression , array and object ."], "issue_sim": [0.43299394845962524, 0.07879842817783356, 0.559979259967804], "prob": [0.05305635929107666, 0.024135291576385498, 0.6838856935501099]}, {"target": [3], "doc": ["can you elaborate a bit on your case", "i be curious about it", "the main case i can think off be sub - component like menu > menuitem", "although i 'd apply the bem methodology in that situation .", "what be stop you from use a css methodology like bem in that specific case"], "issue_sim": [0.029311571270227432, 0.019896838814020157, 0.4063951075077057, 0.096739262342453, 0.4239139258861542], "prob": [0.01730954647064209, 0.02120906300842762, 0.059606075286865234, 0.5812326073646545, 0.032589834183454514]}, {"target": [1], "doc": ["@azamat - sharapov i be not entirely sure what about it seem \" magical \"", "i expect <tag> not to mess with data type , keep it whatever type i set .", "instead , when use on an input with <tag> , the input be coerce to string ; not something i would expect it to do", "think about it another way , i have already say , \" this be a number \" by declare <tag>", "why be n't that sufficient", "there be no magic here ; vue be just pay attention to information the user 's already give about their intention"], "issue_sim": [0.04069140553474426, 0.02778911590576172, -0.013938996940851212, 0.055007509887218475, 0.11989979445934296, 0.028293101117014885], "prob": [6.33189893051167e-06, 0.48856431245803833, 0.7539762258529663, 0.0014344754163175821, 1.8819901015376672e-05, 0.014834129251539707]}, {"target": [2], "doc": ["i have implement the initial version of language server protocol for typescript which can be find at <url>", "it act as a proxy for <tag>", "currently <tag> , <tag> and <tag> be implement but add other should be fairly easy .", "in the long term i would definitely love to see lsp ship as part of the official typescript installation"], "issue_sim": [0.4827924966812134, 0.12412945181131363, 0.36099323630332947, 0.15798164904117584], "prob": [0.015454336069524288, 0.0019337877165526152, 0.8787097334861755, 0.024200133979320526]}, {"target": [0], "doc": ["i hit the same issue today , the idea be to not rely on transpiling on server side , for example , i want to define my own object type like this , below do not work :", "the editor complain that it do not understand <tag>"], "issue_sim": [0.4179849624633789, 0.022450342774391174], "prob": [0.9503070116043091, 0.012877674773335457]}, {"target": [2], "doc": ["you be right , we only need two new group", "i wholeheartedly agree with @cyrusnajmabadi that have two or more implementation of the grammar be not simple", "especially because the grammar change frequently , this mean a high marginal cost for grammar change ."], "issue_sim": [0.01953972317278385, 0.249891459941864, 0.1937650889158249], "prob": [0.0024157436564564705, 0.14294512569904327, 0.747878909111023]}, {"target": [0], "doc": ["i think the real issue here be the need to be able to request service from di for a class , without itself having be instantiate via di .", "a good workaround be to pass the <tag> through your factory - then the command class can be write as :", "this pattern , combine with the factory , i think , solve the problem without any new feature need from di"], "issue_sim": [0.4976768493652344, 0.4276999533176422, 0.30676209926605225], "prob": [0.538395345211029, 0.41586747765541077, 0.08026082068681717]}, {"target": [0], "doc": ["i have a wide range of controlvalueaccessor implement , because when i start my project  angular be in beta and there be no library .", "i do n't know how i can implement this app side without a lot of hack", "probably there be a solution but it just not a great one"], "issue_sim": [0.31296759843826294, 0.07888872921466827, 0.10392743349075317], "prob": [0.8842055797576904, 0.06810402870178223, 0.06980904936790466]}, {"target": [1], "doc": ["thank for take another look at this", "my main point be that the current behavior be inconsistent and that we should adjust the behavior to make it consistent .", "i do n't have a strong preference for how the consistency be attain , just a few idea", "to summarize everything above :", "the current behavior for <tag> , <tag> , and <tag> be all the same and represent in this example :", "in reality , be there a situation where someone would specifically need the argument of the example function <tag> to differentiate <tag> vs <tag>", "the idea that need to be communicate be that a number should be pass into the function", "if both \" number \" and \" number \" type can be use to identify something that behave like a number in javascript , then why be there a difference be force by the type system", "i can think of three solution to this problem to create consistent behavior :", "we assume that something that look like a duck be a duck and avoid break change", "make uppercase and lowercase type fully compatible", "you can use <tag> and <tag> interchangeably , for example", "these be treat as identical type because their structure be identical", "in my opinion , this be the good solution", "we force these primitive to work and act like other js primitive by remove the <tag> , <tag> , and <tag> type completely", "after all , there be no <tag> primitive type", "this would force the use of <tag> , <tag> , and <tag> as the only valid primitive type", "this would also make it consistent with the other js primitive type like <tag> and <tag>", "we take the idea that <tag> and <tag> be incompatible type to it be logical conclusion", "force uppercase <tag> , <tag> , and <tag> to only be declare as you would a class", "since <tag> and <tag> be n't the same , we force the two to be generate differently in a way that correspond to how the type be declare"], "issue_sim": [-0.016629084944725037, 0.24417002499103546, 0.07549022883176804, -0.0781160518527031, 0.26022055745124817, 0.29479628801345825, 0.18843530118465424, 0.6279036998748779, 0.22398823499679565, 0.15537472069263458, 0.29890239238739014, 0.22689801454544067, 0.2146850824356079, 0.04040836915373802, 0.23536595702171326, 0.1563769280910492, 0.37294724583625793, 0.4227156341075897, 0.2002500742673874, 0.3977557420730591, 0.44045335054397583], "prob": [0.002255038358271122, 0.05640292540192604, 0.020149817690253258, 7.592962356284261e-05, 0.030634460970759392, 0.000593057309743017, 5.49896176380571e-05, 0.027182241901755333, 0.0001807005173759535, 7.967647252371535e-05, 2.153954847017303e-05, 0.002787262201309204, 0.00043137589818798006, 9.521544598101173e-06, 0.03658560290932655, 4.383465693535982e-06, 0.00038149688043631613, 4.734029062092304e-05, 0.0012352364137768745, 0.0007372402469627559, 0.10679523646831512]}, {"target": [1], "doc": ["oops i do not know gdnative be exist", "trait be awesome but be it easy to make fake trait class and instance it and later call the function like basic script ?"], "issue_sim": [-0.015625622123479843, 0.367118775844574], "prob": [0.0017995721427723765, 0.9838438630104065]}, {"target": [0], "doc": ["the <tag> type seem break :"], "issue_sim": [0.20067198574543], "prob": [0.9989232420921326]}, {"target": [1], "doc": ["i be , personally , against this", "internal node be still node and their access should be the same as any other node .", "you can already distinguish internal node from other nothe because those internal node ' <tag> property will be <tag>", "i think this be more of a documentation issue", "if anything , the only modification i 'd do be to change <tag> to <tag> and only return node with an <tag> property if <tag> be <tag>"], "issue_sim": [0.1307419091463089, -0.06150278449058533, 0.014265473932027817, 0.0921887755393982, 0.055127181112766266], "prob": [0.0014376825420185924, 0.9548000693321228, 0.16917280852794647, 1.155240443040384e-05, 0.40203315019607544]}, {"target": [1], "doc": ["another question be suppose we depend on <tag> only from the <tag>", "can we tree shake the rest of that module , since we be not use any of the other directive ?"], "issue_sim": [0.17222842574119568, 0.3232044577598572], "prob": [0.1082453578710556, 0.9041251540184021]}, {"target": [0], "doc": ["sound like this will work in browser and support <tag> map too - i be really look forward to it ."], "issue_sim": [0.18698003888130188], "prob": [0.9999502897262573]}, {"target": [1], "doc": ["sure , fair point", "it be just sad there be n't a way to use <tag> with long string splitte on multiple line  , as it seem a very common use - case .", "anyway , thank for your feedback @petebacondarwin"], "issue_sim": [-0.05029839277267456, 0.5175130367279053, -0.03798848018050194], "prob": [0.022627074271440506, 0.9535224437713623, 0.02894926629960537]}, {"target": [4], "doc": ["@mlc - mlapis , this be pretty much the same", "<tag> should be initialize first", "in my case this initialization should occur asynchronously", "since <tag> <tag> do n't support promise , i initialize it in <tag> <tag>", "but <tag> <tag> execute before <tag> <tag> promise resolve .", "so , <tag> be <tag>"], "issue_sim": [0.14563962817192078, 0.16147670149803162, 0.27365878224372864, 0.6529192924499512, 0.4842677414417267, 0.13235509395599365], "prob": [0.00036259781336411834, 0.005167139228433371, 0.004300194326788187, 0.06149677559733391, 0.9239399433135986, 0.0029935906641185284]}, {"target": [1], "doc": ["ok , i can see now", "so you have to use some <tag> direct import or <tag> request ."], "issue_sim": [-0.003291133791208267, 0.20906157791614532], "prob": [0.003976144827902317, 0.9976003766059875]}, {"target": [1], "doc": ["its design to tail line , from the doc", "for json , we have <tag> and for xml we have <tag> or you can read and cast to <tag>"], "issue_sim": [0.23848676681518555, 0.3216663599014282], "prob": [0.11072412878274918, 0.734338104724884]}, {"target": [0], "doc": ["i try it early today , it do not account for collision shape ; try it with a sprite a few month back , and it do not account for that either .", "sure , it could be fix , but it seem like work for something that be not very useful ; assume it do account for these thing , i still ca n't move the view far out to place node in a natural manner", "it happen to i a lot when build a large level", "while true i can just enter value , it defeat the purpose of a visual editor", "i do n't think your average user be randomly move their view to a point where they might get lose , as their attention be focus on where the action be , and the action be n't empty space", "if this logic hold , the 3d view should also receive limitation on where you can look and where you can move the camera base on where node be , as you could also get lose there -- but i do n't think anyone have this issue , at least not which be easily fix by the above mention feature , such as double - click a node to focus the view", "it be go to be cumbersome not have a mouse any which way it happen", "further criticism : this feature have no setting to control it , from what i can tell", "i ca n't turn it off", "i ca n't set how far the limit will extend from the furth node", "also : it favor the bottom of the origin , rather than the center , so even if you do zoom out , you can see plenty below , but almost none above", "there should most certainly be a way to control this"], "issue_sim": [0.11026029288768768, 0.35448575019836426, 0.1643347144126892, 0.2026890367269516, 0.2500026822090149, 0.6742441654205322, 0.08096648752689362, 0.18050216138362885, 0.013172261416912079, 0.45375293493270874, 0.23858031630516052, 0.14190462231636047], "prob": [0.24879348278045654, 0.40556350350379944, 0.0016700560227036476, 0.038964591920375824, 0.2672320008277893, 0.10320521146059036, 0.0015965582570061088, 0.0034623038955032825, 0.00038346261135302484, 0.002564390655606985, 0.06492841988801956, 0.001205478678457439]}, {"target": [0], "doc": ["it be generally to use non - vue library , but you will most likely write at least one vue component to wrap it that should expose its feature through prop and event  ."], "issue_sim": [0.5203095078468323], "prob": [0.9999704360961914]}, {"target": [1], "doc": ["@gkalpak what do # <number> have to do with this", "i think we should definitely maintain the cli styling  to be consistent - and also to draw attention to that command text on the page .", "be there any reason not to do this"], "issue_sim": [-0.03179545700550079, 0.5573809146881104, 0.04970059543848038], "prob": [0.07681010663509369, 0.9651835560798645, 0.023711156100034714]}, {"target": [0], "doc": ["you can use component wrapper with different provider , i have component for get address with different logic require in final it look like", "wrapper just have component level provider"], "issue_sim": [0.5364834666252136, 0.3949719965457916], "prob": [0.9079111814498901, 0.016979863867163658]}, {"target": [0], "doc": ["i think it have to be a generic api , the ability to attach any directive to any component ."], "issue_sim": [0.6270548105239868], "prob": [0.9999951124191284]}, {"target": [0], "doc": ["why do n't you create a directory and use a <tag> file to block import ."], "issue_sim": [0.3587357997894287], "prob": [0.999998927116394]}, {"target": [1], "doc": ["this would solve # <number>", "this feature would be able to generate minimal dependency graph at compile time for module without any configuration , and thus ngc could inject those declaration into the module , and bundle any share dependency intelligently into generate share module as it build the dependency graph of multiple root module .", "and , it be natural to import the component use in a template", "i be strongly in favor of this", "it would eliminate a confuse class of module that do n't need to exist  , and promote module as a way to define the expose component of your public module"], "issue_sim": [0.11602269113063812, 0.49195563793182373, 0.4135882258415222, 0.07770650833845139, 0.3814219832420349], "prob": [0.0010083161760121584, 0.6232409477233887, 0.009733105078339577, 0.0014824633253738284, 0.28455042839050293]}, {"target": [0], "doc": ["side note , i discover that i be use requirejs ' <tag> option wrong , so it be indeed possible to solve the problem in requirejs :", "a typescript solution would still be nice"], "issue_sim": [0.6767479181289673, 0.48874640464782715], "prob": [0.9444326162338257, 0.011084534227848053]}, {"target": [1], "doc": ["much or most of the value a strict type here bring _ be _ in flag illegal string value as illegal", "the documentation aspect of call out a few explicitly legal value be nice , but we 'd miss the catch bug at compile time aspect for everything else that the browser definitely explode on ."], "issue_sim": [0.12656794488430023, 0.4014322757720947], "prob": [0.3028531074523926, 0.6365779042243958]}, {"target": [0], "doc": ["with the absence of multiple import / multiple inheritance , child - node - as - script - dependency be the only way to avoid repeat the code a lot , and this would definitely solve the problem in a nice way ."], "issue_sim": [0.5689532160758972], "prob": [0.9999654293060303]}, {"target": [0], "doc": ["so where your example work for return type @simonmesken i do not thing it work for other type of infer whereas i do believe the propose solution would fix my request which be to use the return type from <tag> to infer with   # <number>", "essentially , the goal imo would be to have :", "then we can derive a new type by use <tag>", "or in my more complex example :", "mean that we can tell typescript what the generic will be for the function so it can tell we what another argument  will be in turn"], "issue_sim": [0.5596257448196411, 0.081212118268013, 0.31035682559013367, 0.03720856085419655, 0.50461345911026], "prob": [0.7781593203544617, 0.15199927985668182, 0.03522806242108345, 0.009648325853049755, 0.7944114804267883]}, {"target": [1], "doc": ["the usage of typescript as source language as its decorator and type annotation be a natural way to express angular 's feature , which would not be available in js", "support a different language would therefore affect the syntax of how to write angular application , which move it away from what angular be today .", "additionally , angular be about provide a consistent developer experience : we would n't want to split the ecosystem with a different source language", "the js example i have see in this thread be also not as recognizable , make it far more difficult to analyze statically for aot compilation", "as a side note : although angular 's current tooling be build on top of the typescript compiler , that do n't have to be the case", "there be proposal like # <number> to achieve compilation with other tooling , but the source language and syntax would remain the same"], "issue_sim": [0.7069193124771118, 0.5481030344963074, 0.3918227553367615, 0.496237576007843, 0.694180965423584, 0.4200040102005005], "prob": [0.2124575972557068, 0.5356277227401733, 0.025720344856381416, 0.004197616130113602, 0.020296229049563408, 0.00459013506770134]}, {"target": [1], "doc": ["i would be ok with remove hardlink by default", "a dynamic param for filesystemprovider may be an ok solution ."], "issue_sim": [0.2825051546096802, 0.08024721592664719], "prob": [0.16382940113544464, 0.6437735557556152]}, {"target": [4], "doc": ["be this not down to how the string array be be pass in", "would \" aa\",\"bb \"   work any well", "i only ask as something similar happen to i in powershell data file in dsc", "if i comma separate node , they end up as an array in the first element of an object array", "when i remove the comma , i get an array as expect without be put into a containing array . -- > ok so ' similar ' be a very loose term", "either way , it be a good bit of investigation and work", "perhaps i should stop be lazy and do similar"], "issue_sim": [0.30453038215637207, 0.04054935276508331, 0.49383288621902466, 0.33778393268585205, 0.42561137676239014, 0.0018751639872789383, 0.12073144316673279], "prob": [0.2388964742422104, 0.022326383739709854, 0.009933984838426113, 0.043147824704647064, 0.9524252414703369, 0.0033958503045141697, 0.0060150399804115295]}, {"target": [0], "doc": ["i do n't think we can support arbitrary array - like object - the line between a actual \" object \" vs. \" array - like \" be blurry .", "we will stick to <tag> in this case", "but we can and should support array subclass", "also - since subclasse array be a es6 + feature , we will likely implement this when we re - implement the reactivity system with proxy"], "issue_sim": [0.5790789127349854, 0.03737371414899826, 0.34966182708740234, 0.3932127058506012], "prob": [0.804454505443573, 0.018245719373226166, 0.023510443046689034, 0.364422470331192]}, {"target": [0], "doc": ["i think the feature be great and should not be remove .", "but indeed it might be good to add a warning in the documentation to avoid problem"], "issue_sim": [0.17804908752441406, 0.2321665734052658], "prob": [0.9864925742149353, 0.004307916853576899]}, {"target": [0], "doc": ["i think it be worth to mention that as far as i understand this issue  , this problem be very much reproducible / noticeable even on 60hz screen by set physics fps inside project setting to something below 60hz  ."], "issue_sim": [0.38057422637939453], "prob": [0.9999953508377075]}, {"target": [0], "doc": ["i think the aim be to make this into a page on anguar.io .", "nee doc and aio team to get together to discuss approach"], "issue_sim": [0.17555110156536102, 0.13645899295806885], "prob": [0.9858646392822266, 0.00027625731308944523]}, {"target": [1], "doc": ["tl;dr from design discussion :", "it be somewhat obvious what the \" right \" thing to do be , but would require a large rework of how we treat type parameter , with concordant negative perf impact , without a corresponding large positive impact on the actual user - face behavior side .", "if new pattern emerge that make this more frequently problematic , we can take another look"], "issue_sim": [0.10715717077255249, 0.26681244373321533, 0.1644817590713501], "prob": [0.06380512565374374, 0.9314373731613159, 0.025794627144932747]}, {"target": [0], "doc": ["the whole point of it be not to have to start and stop it via boolean - that weight be take away by this feature .", "a trigger mean that whatever be inside it trigger one time and switch itself off", "but it keep track of the if case that s you give to the trigger - whether if be true or false and decide when to trigger once again", "if it keep track then no - you do not have to make the programmer reset their trigger", "the trigger will know when to reset itself because it keep track when what s parse to it have become false again"], "issue_sim": [0.30491915345191956, 0.41598546504974365, 0.3658697009086609, 0.3699858784675598, 0.36972126364707947], "prob": [0.34999120235443115, 0.010578853078186512, 0.518782377243042, 0.048840321600437164, 0.027271563187241554]}, {"target": [1], "doc": ["i like the build - in script also", "it be pretty useful when need a very simple script _  _ or just for testing ."], "issue_sim": [0.3372868597507477, 0.22574523091316223], "prob": [0.04819631576538086, 0.9177727103233337]}, {"target": [1], "doc": ["same here , how can have a service  make an http request  while have an http interceptor", "in my case use a <tag> be enough , but be there a well solution ?", "for example in a component i would do this in <tag>"], "issue_sim": [0.43684592843055725, 0.20873570442199707, 0.2689315676689148], "prob": [0.10666697472333908, 0.5949621200561523, 0.027133997529745102]}, {"target": [1], "doc": ["it actually do : <url>", "additional argument provide to <tag> will be pass on to the callback ."], "issue_sim": [0.050303131341934204, 0.19815069437026978], "prob": [0.07356160134077072, 0.9465055465698242]}, {"target": [0], "doc": ["just check this and it appear to be fix as part of the move to .net std 2.0 as that code which hardcode the value be remove ."], "issue_sim": [0.35417020320892334], "prob": [0.9999827146530151]}, {"target": [0], "doc": ["yes , that example will work for the first child of the component , but if menuitem have another component inside of it call <tag> then we ca n't modify <tag> style  since it do not contain the menu 's unique id as an attribute ."], "issue_sim": [0.6538255214691162], "prob": [0.9999895095825195]}, {"target": [0], "doc": ["i change rigidbody mode to mode_static , but it be not ignore by the physics system , and i deactivate collision node too .", "it keep lag a lot because it be not ignore by the physics system"], "issue_sim": [0.4462106227874756, 0.23986126482486725], "prob": [0.8687958717346191, 0.04175793379545212]}, {"target": [4], "doc": ["@lzybkr thank for that link , it be great to read that sort of guidance about break change", "base on the example give , this do seem to fall under bucket <number>", "but base on the description of each bucket , i think it fall under bucket <number> :", "i think it be unlikely that exist script would have depend on this behavior", "i believe it be far less likely that author use what be clearly incorrect / unbalanced quote as a workaround rather than opt to refactor or simplify  .", "additionally even if it do fall under bucket <number> :", "this behavior be not predictable , obvious , or consistent", "it would be interesting to take a large corpus of public script  and test our assumption ; see how much code be out there that depend on this specific parsing behavior"], "issue_sim": [0.0958438366651535, 0.07896365225315094, 0.024585092440247536, 0.2243058979511261, 0.18508422374725342, -0.04000319913029671, 0.14578105509281158, 0.23841078579425812], "prob": [0.012241434305906296, 0.013031749054789543, 0.0066979494877159595, 0.01594458892941475, 0.334360808134079, 0.0006233803578652442, 0.022534312680363655, 0.09588456898927689]}, {"target": [1], "doc": ["i do not think this be a good idea", "have infinite view be cumbersome for most use case .", "regard each point :", "that be not true , most of the time the system account the node size , like with the tilemap node for example", "if this do not work then it be a bug", "this almost never happen , it be a rare use case that can be workarounde by enter the value in the inspector", "well it avoid you to get lose into a void of empty space", "zoom in and out might help , but on laptop without a mouse this be a little bit cumbersome , as set the zoom be less precise than with a mouse"], "issue_sim": [0.006596516817808151, 0.35639965534210205, 0.039723969995975494, 0.44228172302246094, 0.07476811856031418, 0.2123127579689026, 0.03966791555285454, 0.13880190253257751], "prob": [0.005817566066980362, 0.020798759534955025, 0.001648538513109088, 0.08529979735612869, 0.011251100338995457, 0.10797261446714401, 0.0006779497489333153, 0.4020111560821533]}, {"target": [0], "doc": ["i think in this case it 'd make more sense  to alter the alert message so that it be intuitive and understandable for a beginner .", "because save a blank scene be kind of useless , you can just make a new blank scene in the editor no problem"], "issue_sim": [0.19946414232254028, 0.48671722412109375], "prob": [0.7692832946777344, 0.14917625486850739]}, {"target": [0], "doc": ["the tar be originally just to deal with the lack github search apis , but they also become useful to avoid thrash the github api  when an extension use the <tag> apis  .", "imo , it would be great to leverage for this scenario as well -- though i be not sure if a tar be the \" right \" way to go or not", "as i be not sure if azure repos or other virtual fs ' could support it"], "issue_sim": [0.2593335509300232, 0.13937833905220032, 0.22001706063747406], "prob": [0.7206310033798218, 0.3099801242351532, 0.061484239995479584]}, {"target": [2], "doc": ["some thing can be handle maybe , but still different than what we expect and some do n't", "if you need to validate a route , with a guard / resolver you need to * * active * * it in order to be validate so its lazy , ideally in such case we do it upfront so it make our life easy", "other action if you need it a bit more crosscut such as breadcrumb or so it use the route config but not do as a guard , but react to navigation event instead , so have some datum in the route help you do some logic .", "and in some other case we do it the other way round , pass datum in route config and consume in guard / resolver", "the usage of this be not about route match so i do n't think its relate to that", "this one seem related / possibly duplicate <url>"], "issue_sim": [0.08298962563276291, 0.30740493535995483, 0.5383349657058716, 0.35000672936439514, 0.16192933917045593, -0.016739238053560257], "prob": [0.0020800232887268066, 0.641208827495575, 0.595929741859436, 0.04257599264383316, 0.004203959833830595, 2.5218376322300173e-05]}, {"target": [0], "doc": ["you do n't need a special rule for union type because it be already the case that <tag> be assignable to <tag>"], "issue_sim": [0.3366377353668213], "prob": [0.9999403953552246]}, {"target": [2], "doc": ["@reduz look forward to it", "the dragonbone editor can convert spine2d animation to dragonbone animation anyways", "the benefit here be that dragonbone editor be free , the spec be open source and their runtime be not lock user to any license", "the problem with it right now be the sparse english documentation / tutorial"], "issue_sim": [-0.00959453359246254, 0.43227797746658325, 0.36614519357681274, 0.04598179832100868], "prob": [0.003997936379164457, 0.03773020580410957, 0.5384666919708252, 0.0028674809727817774]}, {"target": [1], "doc": ["the constructor in the service only initiate an async task that do not need to be complete for the the service to be ready", "it would be really great to not have to move that http call to a component oninit , or at least have the choice as it work for all case except when use in an httpinterceptor .", "wrap the http call in the service in a settimeout also solve the problem , but would still prefer to avoid any workaround"], "issue_sim": [0.509401798248291, 0.4147226810455322, 0.5207018852233887], "prob": [0.142719104886055, 0.6999470591545105, 0.04222636669874191]}, {"target": [8], "doc": ["i be very late to this party , but let i offer the follow perspective :", "i think everyone agree that it be important that both cmdlet and advanced function exhibit the same behavior .", "* i think that it be the _ advanced function _ ' current behavior that should be standardize", "the <tag> attribute be an _ anomaly _ in the realm of powershell parameter parse :", "as the _ plural _ in the name suggest , it _ implicitly _ pertain to _ multiple _ argument at once - unlike any other parameter", "therefore , the follow dichotomy make sense to i :", "* if you opt into _ regular _   powershell parse - by way of use an _ explicit parameter name _ on invocation , you _ must _ use an _ array _ to bind all remaining  argument", "* otherwise , _ by omission of the parameter name _ , you _ implicitly opt into the anomaly _ , which mean that _ multiple , separate _ argument _ implicitly _ bind to such a parameter as collection element - whether these individual argument happen to be array themselves or not", "* remember that an important use of <tag> be to enable script that be call from _ outside _ of powershell  to receive _ array _ - which can not be do any other way and _ require _ that the parameter name be _ omit _", "in other word , the follow equivalence make sense to i :", "* pass multiple argument :", "* pass an array as a single argument :"], "issue_sim": [-0.007834412157535553, 0.4581449627876282, 0.32190555334091187, 0.4640851616859436, 0.3634302318096161, 0.06593186408281326, 0.6730338335037231, 0.4385737180709839, 0.5547528266906738, 0.05734006315469742, 0.3889371156692505, 0.49668124318122864], "prob": [0.13698290288448334, 0.1555921584367752, 0.038218241184949875, 0.005151692777872086, 0.28249800205230713, 0.022032352164387703, 0.07276380062103271, 0.26825475692749023, 0.26049235463142395, 0.003321619937196374, 0.0012201577192172408, 0.004147551488131285]}, {"target": [3], "doc": ["thank you for your reply", "unfortunately , the problem be not how to stop / reverse the animation / transition", "that work very well already", "the problem be that when the transition  be finish , vue.js will still show the component i 've stop transition to .", "to see what i mean , just play the fiddle : <url>", "drag <tag> just a little to the right", "the component slide back into its original position", "js replace it with <tag>", "i can replace it in turn with <tag> , but for a split second , you will see <tag>none the less"], "issue_sim": [-0.12394742667675018, 0.4177634119987488, 0.059513241052627563, 0.5188931822776794, 0.16444632411003113, 0.15186026692390442, 0.2181268185377121, 0.3044061064720154, 0.25283390283584595], "prob": [0.0033900709822773933, 0.013636747375130653, 0.0005336723406799138, 0.7750906348228455, 0.0010218187235295773, 0.0008092924836091697, 0.001023916294798255, 0.002981538185849786, 0.14052070677280426]}, {"target": [5], "doc": ["@rpkilby in my example , the read - only class be a special case show false value will be ignore", "in common case , it will be like :", "it be es5 object literal vs es6 , if you can use es6 style , you will almost never use the old style", "anyway , thank for the advice", "@fullfs i like the compact feeling of vue", "but just like v - for , imho , if one directive be use so frequently , it be worth break the rule in order to make the user wre code fast / clear .", "and in my proposal , it be still common javascript in some way , it be the spread arguments { } )", "even if stick to the list / object type ,", "be still look well", "i admit support es6 style object literal be the hard part", "and without support it , my proposal be almost meaningless", "not easy to find an elegant way to support it in es5 runtime"], "issue_sim": [0.4065195918083191, 0.026608949527144432, 0.549596905708313, -0.02080094814300537, 0.17878466844558716, 0.3131028413772583, 0.28591328859329224, 0.11277806758880615, 0.09187507629394531, 0.4960055351257324, 0.03808131441473961, 0.4867272675037384], "prob": [0.00699269725009799, 0.011298943310976028, 0.164511576294899, 0.004506909754127264, 1.5471732695004903e-05, 0.36884596943855286, 0.007134159095585346, 0.0013343445025384426, 5.428124131867662e-05, 0.0034704178106039762, 0.0008646587957628071, 0.0011768063995987177]}, {"target": [1], "doc": ["@felixfbecker yeah , it would read the file directly", "i do n't think that would affect your language server process in any way though", "if / when they make performance improvement to tsserver you do n't need to make any change ."], "issue_sim": [0.20565932989120483, 0.24587653577327728, 0.10111868381500244], "prob": [0.011928455904126167, 0.7829322218894958, 0.7766664624214172]}, {"target": [4], "doc": ["i mean , i be try to provide a counterpoint , since it be assume no one care / want this", "my project be a rpg , mean it be very heavy on menu and small interface node that provide info that need to be reuse frequently", "use the favor method mean your folder , no matter how tidy you try to keep they , be always go to have double the number of element that it should have , and when the project grow large it be not trivial and complicate navigation", "those little convenience save time and avoid distraction", "if it end up be a final decision , some tool that can decouple and link the builtin to separate script file should be ideal ."], "issue_sim": [0.13245758414268494, 0.2647399604320526, 0.3499886095523834, 0.04270114004611969, 0.31436073780059814], "prob": [0.007605586666613817, 0.008263406343758106, 0.5085484385490417, 2.537948421377223e-05, 0.11324659734964371]}, {"target": [3], "doc": ["i personnally use this for @media print query", "i have some layout handle with <tag> that i want to be always visible or hidden when print", "my usecase be a form compose of multiple step , one visible at a time on computer , but they all need to be visible when print", "with this change , it wo n't be possible to do this anymore since you ca n't override inline <tag> with medium query .", "i be sure there be other valid use case where override in css be necessary", "something like <tag> look like the right thing to do here"], "issue_sim": [0.11291292309761047, 0.36348891258239746, 0.32154580950737, 0.1534157246351242, 0.5182628631591797, 0.07216157764196396], "prob": [0.0018504569306969643, 0.21796320378780365, 0.23380224406719208, 0.31352299451828003, 0.0043551442213356495, 0.0018281019292771816]}, {"target": [0], "doc": ["extension method be already propose , but i do n't think they be feasible in a dynamic language .", "i also do n't think they solve the root problem that initially start this discussion", "on another note , i 'll probably open many of the proposal for gdscript as gip", "i still believe that trait make the most sense to share code horizontally in an oo language"], "issue_sim": [0.29798442125320435, 0.24798277020454407, 0.11831800639629364, 0.3161581754684448], "prob": [0.9684137105941772, 0.06645369529724121, 0.007542814128100872, 0.002373314928263426]}, {"target": [0], "doc": ["the only reason i disagree with that be the whole mantra of angular be unidirectional datum .", "if an early resolve could change base off a later resolve that would spell bad news bear for that mantra", "now as for the same level it would make sense for you to at the very least say make this one run last or something"], "issue_sim": [0.1473185122013092, 0.3604370653629303, 0.19557391107082367], "prob": [0.3927384316921234, 0.04638417810201645, 0.4117391109466553]}, {"target": [1], "doc": ["@linusborg i think you might misunderstand the proposal", "there be no state sync between component , as <tag> be only use on the parent component . check out the example in the  , which  should work in another issue .", "suggest what you 'd like to avoid , with state be maintain in both parent and child , but his use case and proposal be n't relate to this feature request"], "issue_sim": [0.09393279254436493, 0.4552047848701477, 0.257244348526001], "prob": [0.004182151518762112, 0.8767672181129456, 0.6581323146820068]}, {"target": [0], "doc": ["<tag> be n't pass the flag here"], "issue_sim": [0.20908841490745544], "prob": [0.9987311959266663]}, {"target": [0], "doc": ["the main purpose i have in mind be to make work simple for ui component author  .", "there be currently a lot of case where something like this be necessary :", "a new <tag> property could shorten it to this :", "though then i suppose it 'd still be nice to have some way of also expose event", "maybe an empty <tag> directive could forward all event listener on the parent to this element", "or if there do end up be multiple concern we want to bundle , we might be back to something like <tag> :", "this have turn into a broad discussion of how to simplify the building of ui component , rather than a specific feature request , so i 'll relabel this issue"], "issue_sim": [0.2483278214931488, 0.14196434617042542, 0.1833527386188507, 0.07480763643980026, 0.5420500040054321, 0.1888878047466278, 0.27370697259902954], "prob": [0.047359880059957504, 0.05210566520690918, 0.026005860418081284, 0.027624445036053658, 0.05406584590673447, 0.4017985165119171, 0.4295039176940918]}, {"target": [0], "doc": ["actually , i be think about force eager initialization for service without useless injection to root component .", "may it be well to extend <tag> signature with eager option"], "issue_sim": [0.38629570603370667, 0.32067593932151794], "prob": [0.8492802977561951, 0.10557391494512558]}, {"target": [2], "doc": ["hi ,  might be helpful here", "if you still need more fine grained control over rendition , one more computed getter might be helpful", "for general case , compute property that get selectively update might be enough for implement <tag> .", "the only case i can conceive need <tag> be you have so many interlaced state change that manually implement compute be cumbersome", "but i wonder if such case be common"], "issue_sim": [0.03326961398124695, 0.32484763860702515, 0.3786250054836273, 0.27039045095443726, 0.022783737629652023], "prob": [0.0007553139585070312, 0.012748404406011105, 0.2845071852207184, 0.21944208443164825, 5.2309289458207786e-05]}, {"target": [0], "doc": ["i agree that this be something that would be super useful . ctrl be replace by cmd on macos ."], "issue_sim": [0.5881963968276978], "prob": [0.9999945163726807]}, {"target": [0], "doc": ["after use vue js for a while now in my project , i think this issue should indeed be reopen", "at least we need an <tag> modifier ."], "issue_sim": [0.2522246539592743, 0.31969329714775085], "prob": [0.9386940002441406, 0.025837281718850136]}, {"target": [1], "doc": ["yes , this why this be feature", "even i have a solution to this , i do not like it as it can break anytime since its not standard api or anything .", "i have discuss this several time with team long time ago", "but now since we have a new compiler it might be something to think about", "we can think of generic support to have api to attach directive or this might be special case to connect only form api"], "issue_sim": [0.05265290290117264, 0.363042950630188, -0.03097699210047722, 0.13161659240722656, 0.5837264060974121], "prob": [0.0063363248482346535, 0.9683181643486023, 0.0011044086422771215, 0.007226616609841585, 0.09414149820804596]}, {"target": [1], "doc": ["@qbieshay @aaronfranke i know this community would n't accept a new language the moment i begin write", "i just use it to raise awareness to an actual problem ; when you need a high performant language that need no conversion to gdscript and can easily and costlessly cowork with it , what do you do ?", "maybe the answer be improve gdscript , make the performant language itself", "maybe it be make a hybrid out of gdscript", "maybe make write gdnative c++ as easy as write gdscript", "maybe remove gdscript entirely and add a new static and performant yet easy to prototype language", "maybe there be already a feature like that and i be miss it", "i do n't know the in and out of this engine like many of you do", "but there be , however , a problem , lady and gentleman", "what to do about it"], "issue_sim": [0.3905089497566223, 0.4153270423412323, 0.3020506501197815, 0.07801882922649384, 0.4252479672431946, 0.41479256749153137, 0.11864887177944183, 0.18915900588035583, 0.0473020002245903, -0.03155720606446266], "prob": [0.04407560080289841, 0.6384682655334473, 0.0048392945900559425, 0.001181863364763558, 0.0017428570427000523, 0.013975612819194794, 0.007540117017924786, 0.04465122148394585, 0.0026071006432175636, 0.00043754931539297104]}, {"target": [3], "doc": ["@ryancavanaugh not follow you", "you be already able to call <tag> today , nothing prohibit that", "i be also not propose that that behavior of that should change in any way that i can think of", "the semantic of the change i be propose be identical to add a <tag> to each generic function , and replace all explicit application of type argument with application of a dummy value <tag> .", "could you make a full snippet i can stick in playground"], "issue_sim": [0.023741550743579865, 0.18919819593429565, 0.2304094135761261, 0.5617456436157227, 0.049150124192237854], "prob": [0.014220328070223331, 0.14007516205310822, 0.12373306602239609, 0.5942065119743347, 0.0027396983932703733]}, {"target": [4], "doc": ["@brucepay i ca n't speak to @mtman 's intention , but i can explain my thinking there", "imo , the json serialization and deserialzation powershell should be the same across all use", "in this case , we would serialize object the same way we do with <tag>", "if we use <tag> as the parameter for this , then these <number> should be functionally equivalent :", "in other word , we should n't use a different implementation for json serialization as someone would reasonably expect those to be functionally equivalent .", "sometimes you want to preserve the loop nature of object and other time you do not", "i do n't believe there be currently any way to disable looping in the json cmdlets", "the only mechanism currently available be to limit the depth", "but even if we do have the mechanism to prevent looping , we would be make a judgement call on behalf of the user on this parameter , that be probably not a good idea", "i understand the request as make the behavior functionally equivalent to this :", "this be problematic for the follow : <tag>", "we also do n't know what depth to stop at if the user supply a sufficiently deep object", "parallel to this problem be the assumption of object type for json submission", "a hashtable translate to a json object", "however , single value json literal  and json arrays be also valid json to submit to endpoint", "ultimately , as much as i would like to make it easy to submit a powershell object as json without use <tag> , i think it be probably good to keep to \" do one thing \" and let the json cmdlets handle the the conversion / serialization separately from the web cmdlets", "i would hate to keep the web cmdlet couple with change in the json cmdlet and i would not think an opinionated implementation would result in a good ux", "on the possible use of a <tag> type accelerator , i think this be backwards from <tag>", "the xml type accelerator be work on a string and transform it into an object", "we could look at something similar for json , but it would would like xml in that it deserialize a json string to an object", "what the cmdlet here need be to serialize an object into json string", "it be maybe something to consider , but the serialization and deserialization be not always straight forward so whatever we implement would have an opinionated default behavior", "on parameter aliase , i be good with make the common one simple and easy to use on interactive session", "especially since we have so many and some of they be long", "on the automatic scheme , i be pretty sure that already work as request :"], "issue_sim": [0.0342697873711586, 0.4085538983345032, 0.3145475685596466, 0.34994837641716003, 0.3585349917411804, 0.02324042096734047, 0.3925431966781616, 0.01699071377515793, 0.27264443039894104, 0.30534639954566956, -0.001394930761307478, 0.09857774525880814, 0.3304513096809387, 0.28307464718818665, 0.3796417713165283, 0.48952817916870117, 0.4019378423690796, 0.11774377524852753, 0.308918833732605, 0.48476627469062805, 0.44278931617736816, 0.377272367477417, 0.19504009187221527, -0.0324888676404953, 0.1579960584640503], "prob": [0.06408575177192688, 0.001196698285639286, 0.0028908702079206705, 0.0905320793390274, 0.23366408050060272, 0.0022975471802055836, 0.002951592206954956, 0.000934988958761096, 0.0966852530837059, 0.018311386927962303, 0.0003786860324908048, 0.015662631019949913, 0.0010186220752075315, 0.00044335293932817876, 0.009029905311763287, 0.11148671060800552, 0.011163357645273209, 0.001406346564181149, 0.002131039509549737, 0.0022725057788193226, 0.00026132501079700887, 0.005638157017529011, 0.0010209205793216825, 0.0039346483536064625, 0.0027625502552837133]}, {"target": [0], "doc": ["so that user can set attribute without developer of the component know about those .", "i would like to support it in blaze as well , if possible", "but it be not a big deal", "but if vue would have such a function , which would allow programmatically to set  prop and attrs like you can from template language , that would be very easy to do"], "issue_sim": [0.3270305395126343, 0.2691843509674072, -0.035843126475811005, 0.5050499439239502], "prob": [0.44159021973609924, 0.06279019266366959, 0.009633622132241726, 0.7407445311546326]}, {"target": [3], "doc": ["i just spend some time confuse by this , because the doc seem to indicate that it should work already", "it work on element , just not component  )", "would be great if this be implement", "a use case beyond write less code be write a reusable <tag> function for use in unit test :", "currently have to write an individual mount function for every single component because of this lack of functionality :("], "issue_sim": [0.17971321940422058, 0.46189334988594055, 0.17597562074661255, 0.33974000811576843, 0.36282116174697876], "prob": [0.4750135540962219, 0.08660481125116348, 0.0013207646552473307, 0.2592819929122925, 0.4885381758213043]}, {"target": [2], "doc": ["note that cmake can also generate ninja build file instead of traditional makefile ; this be do by pass <tag> to its command line", "it work quite well on most project i 've try and be slightly fast overall", "meson still win in the raw performance comparison i 've see , but this definitely help close the gap between meson and cmake performance ."], "issue_sim": [0.5422477126121521, 0.19659921526908875, 0.34282487630844116], "prob": [0.5927335023880005, 0.006713123060762882, 0.7850449681282043]}, {"target": [1], "doc": ["yep , we di on module", "but i be still think about the real use case with <tag> when new instance be not create and when try to use it you get an error ."], "issue_sim": [0.2487148940563202, 0.3095541000366211], "prob": [0.22476181387901306, 0.7216686606407166]}, {"target": [2], "doc": ["thank for look into this", "re the <tag> example , another option be to error in such a case , so the user can fix the path", "i think it be helpful to avoid new node - specific thing in a world with multiple js runtime ."], "issue_sim": [-0.027755577117204666, 0.40924251079559326, 0.4479798674583435], "prob": [0.003842567326501012, 0.23894669115543365, 0.7839237451553345]}, {"target": [1], "doc": ["you can use <url> which more or less do the work of wrap tsserver message as lsp one", "i be close this issue as i be satisfied with <url> and would n't -as a consumer- get.any clear add - value if this be implement directly in tsserver ."], "issue_sim": [0.1766684651374817, 0.18550239503383636], "prob": [0.24073784053325653, 0.8391245603561401]}, {"target": [3], "doc": ["@eric - simonton - sama after spend some time on it , i be n't able to figure it out", "i may take another stab at it later", "while work on this , i also discover the <tag> arg for <tag> and <tag>", "so it seem like all of the piece be there internally to allow reuse the compile template in subsequent spec method in the same spec .", "testbed just need to provide some way to tell it to reuse the summary instead of clear everything out between spec method", "or , a less ideal option would be to provide some way to get at the current set of aotsummaries after <tag> be call , so we can pass they back in via the <tag> arg for subsequent spec method", "individual summary can be pull from the <tag> , but manually pull out every summary individually  be n't a viable option"], "issue_sim": [0.08532315492630005, -0.014921491034328938, 0.18235373497009277, 0.46402931213378906, 0.473833292722702, 0.40185537934303284, 0.1425369381904602], "prob": [0.1539204865694046, 0.0017132561188191175, 0.005947030149400234, 0.671042799949646, 0.013015728443861008, 0.19563066959381104, 0.005720726680010557]}, {"target": [11], "doc": ["@trotyl your suggest be just not suitable", "i already try this", "the hmr solution be not resolve this problem", "event though , i try hmr enable", "the reload time be reduce from 45 to 10s", "if i be use my solution :", "step <number> ) vscode extension will record your new style code in vs code", "step <number> )   vscode extension will complie it in css", "step <number> ) vscode extension will host a server and use socket", "io to send datum to chrome extension", "chrome extension will add new style to your website", "<number> step above be just take <number> second , and it will update every second i make change without save that file .", "it be not some kind of watch file update", "it be realtime coding"], "issue_sim": [-0.04611418768763542, 0.022344637662172318, 0.1613428145647049, 0.10583783686161041, 0.20205983519554138, 0.02178928256034851, 0.4087666869163513, 0.4344537854194641, 0.23969611525535583, 0.2879093587398529, 0.40226680040359497, 0.5076927542686462, 0.1513390690088272, 0.12996283173561096], "prob": [0.0034502267371863127, 0.0024121557362377644, 0.0005968133336864412, 0.0005594635149464011, 0.001323638716712594, 0.00030726593104191124, 0.00041290963417850435, 9.1870067990385e-05, 0.0003957277804147452, 4.2549036152195185e-05, 0.0006136022275313735, 0.2815881073474884, 0.002869488438591361, 0.0015095077687874436]}, {"target": [1], "doc": ["that can happen for sure , i do n't think it be incompatible with the other proposal", "but godot can already be use from c++ , so nothing would really change  except code in c++ would be make easy for those who want to do so  .", "if you read my post , i too disagree with c # be a good pick for godot , that be why i propose expand the already exist c++ capability to make it possible to use it as a scripting language , with gdscript remain the default language for most user", "user should be able to write pretty much in gdscript , however it be unreasonable to think that a large game would be write in gdscript", "in my opinion , there be nothing that prevent godot from be suitable for large game except gdscript performance , because the engine be very well design and have already pretty good performance", "in my opinion , performance do not appeal to most godot user , but it could bring more professional to godot , which mean more contribution which mean a well godot for everybody"], "issue_sim": [0.07280901819467545, 0.49993592500686646, 0.6542878150939941, 0.310943067073822, 0.3889797627925873, 0.43879663944244385], "prob": [0.022841807454824448, 0.5686258673667908, 0.16944678127765656, 0.006745843216776848, 0.047793470323085785, 0.14942200481891632]}, {"target": [2], "doc": ["why would anyone want to duplicate exist functionality", "that do n't make any sense", "and in any case the only \" touch of the engine internal \" would be impose a standardized naming convention , which there be n't at the moment & just strip the internal group so they be not accessible from the editor .", "i do n't know about you , but this make sense to i"], "issue_sim": [0.14026787877082825, 0.08324339240789413, 0.30524545907974243, 0.009215579368174076], "prob": [0.012628039345145226, 0.0350697785615921, 0.944355309009552, 0.023189270868897438]}, {"target": [6], "doc": ["this be not special to decorator", "you can observe the :", "the issue be in javascript name binding be hoist to the top of the scope , but they be undefined until first initialize", "this be really hard for a static analysis tool / compiler to detect correctly all the time", "as the same code can be valid if your variable be define", "consider wrap the first class in a function declaration as :", "the only possible way i can think of be to make <tag> a function instead of an array , this mean a dispatch call on every query , which can be expensive ."], "issue_sim": [0.04906157776713371, -0.0067654019221663475, 0.5231955051422119, 0.25078606605529785, 0.34526747465133667, 0.2635418176651001, 0.43265289068222046], "prob": [0.004673946648836136, 0.002444509882479906, 0.3055625259876251, 0.04481618106365204, 0.014578481204807758, 0.006637937389314175, 0.6005737781524658]}, {"target": [0], "doc": ["s there some process where you tag all pr : s with fix for under - specify type like this by something like \" improvement for next major version bump \" , so you can land a busload of such fix in batch whenever you decide that enough of those have pile up since last time , or that you be just about to release a major version bump anyhow , because of some non - type - relate fix to typescript itself", "if not , i think it would be a good process to introduce , so we do n't get stick forever with a lot of dom / tc39 type that be a notch or two well than the <tag> type ."], "issue_sim": [0.39811205863952637, 0.1707020103931427], "prob": [0.9602870941162109, 0.2085943967103958]}, {"target": [0], "doc": ["apparently all google play developer be get a notification that their godot game be vulnerable to logjam attack and cve-2015 - <number>", "while this be likely not true per se  , we need to fix this asap to silence those warning ."], "issue_sim": [0.2412361353635788, 0.15803301334381104], "prob": [0.6450321674346924, 0.3968501091003418]}, {"target": [4], "doc": ["the purpose of the top - level event listener in our concrete case be to prevent multiple overlay  from stay open simultaneously , without have to connect all the different implementation though a service .", "the global listener be not even a <tag> , but attach as a manage event with renderer3 in some directive", "anyway , that be implementation detail not relevant here", "the purpose could just as well be application - wide tracking of user interaction without incorporate third - party analytic tool", "my point be , the purpose of <tag> be entirely different from <tag> : the former be intercept user agent behavior like show a context menu  , or navigate ; while the latter make sure an event never reach the parent element", "all user agent i be aware of be respect the flag , and my argument be angular 's <tag> should too"], "issue_sim": [0.30602356791496277, 0.47391605377197266, 0.11220238357782364, 0.14619943499565125, 0.6136652231216431, 0.2896479070186615], "prob": [0.44641685485839844, 0.03360016644001007, 0.0028041405603289604, 0.047592971473932266, 0.3098219335079193, 0.038202278316020966]}, {"target": [0], "doc": ["+1 would love to be able to completely destroy the lazy loaded module , we do run some initialization logic and \" reprovide \" or \" shadow \" some service in the lazy loaded module injector via usefactory , but seem like all these factory function be memoize and never call again , try to destroy lazy loaded module with the api route mention above , but no luck ."], "issue_sim": [0.6888185739517212], "prob": [0.9998462200164795]}, {"target": [0], "doc": ["i take it this problem be suppose to arise when <tag> reexport <tag> and <tag> when both reexport <tag> .", "we do n't have to do anything special to support this in a nice way right now", "since our support of typing in package", "json , we can create \" type wrapper \" for exist library , like  we can leverage npm , rather than attempt to solve a solve problem ourselves", "in this specific example , you change your ts library  to use a <tag> and <tag> package shim", "write every shim use external module syntax , and you be conflict free no matter how you compose your package , since the type follow the package", "in effect , i be say to stop use <tag> and dt with node package , and start author type shim package instead , because <tag> handle all of this as part of package resolution anyway", "it also make it easy to swap to use the original package 's typing if they be add later - you just update your dependency in your package", "json and swap your require call", "additionally , this provide independent versioning of the dts _ and _ the underlie library but with semver compatibility", "additionally , this make typing discoverable on <tag> , which should hopefully be a boon to their usage"], "issue_sim": [0.35676318407058716, 0.054989852011203766, 0.0876757800579071, 0.3528943657875061, 0.45105013251304626, 0.45268484950065613, 0.5290616154670715, 0.3702597916126251, 0.18597713112831116, 0.2858201265335083, 0.16156795620918274], "prob": [0.30507469177246094, 0.004137213341891766, 0.0009653823799453676, 0.13416790962219238, 0.0067001208662986755, 0.13278637826442719, 0.17606931924819946, 0.021281590685248375, 0.000973211950622499, 0.02008998394012451, 0.021329127252101898]}, {"target": [3], "doc": ["i think that add this overload to vuejs be more reasonable than try to get this add as a config option to the typescript compiler", "that be especially true since react , inferno , and other all use the variardic signature", "that is , * *", "vuejs be the outlier for jsx * * and they would have to add a library specific option to a language compiler .", "i think this should amount to three to five line of code and a small documentation change"], "issue_sim": [0.5325525999069214, 0.07239460945129395, -0.027153434231877327, 0.40822333097457886, 0.17232680320739746], "prob": [0.6787310242652893, 0.02812042646110058, 0.0010482857469469309, 0.27519717812538147, 0.010419396683573723]}, {"target": [4], "doc": ["it could be resume that way :", "behind the curtain the engine use and work on \" copy file \"  and leave the original file untouched", "people get confuse because they see two file", "a decision be make to hide away the copy to make it less confuse", "i do believe from that perspective if we have to hide one file maybe it should have be the original from within the editor as it be not the file we work on / with in here", "the engine really do not need the original file anymore since it be import and be up to date it use the copy", "thus reflect more accurately what be really happen behind the curtain and make it easy to understand at the same time .", "that way you do n't even have to create a", "import folder you just hide", "obj file inside the editor and only show their automatically import copy", "user can still drag one or multiple", "obj file at drop they in their project it would keep the file in place and create a import copy", "mesh file that the user can manage and work with in their project", "that way you have the same level of complexity  while make sure user know from the get go what be happen and what they be really do / manipulate", "you would also avoid have to add thing like \" change may be lose \" alert in the editor or even forbid change altogether because they would simply not risk be lose", "basically be honest with your user about what be happen would avoid a lot of mislead information and confuse work around or unneeded restriction", "work on copy in a datum safe way be a great thing godot do lets just embrace and make the most of it", "if that make more sense"], "issue_sim": [-0.0499223917722702, 0.30347537994384766, 0.06409421563148499, 0.2925395965576172, 0.513329267501831, 0.3492189645767212, 0.042880937457084656, 0.0031262338161468506, 0.3563006520271301, 0.33030131459236145, 0.03572621941566467, 0.44563356041908264, 0.28810393810272217, 0.20556066930294037, 0.26171621680259705, 0.2081792652606964, 0.29966408014297485, 0.007074028253555298], "prob": [0.00014843609824310988, 4.648297908715904e-05, 0.0005476637743413448, 0.0031558803748339415, 0.07727757841348648, 0.0006366203306242824, 0.1918565332889557, 1.1179130524396896e-05, 1.0773998155855224e-06, 1.6171529750863556e-06, 1.4680642834719038e-06, 1.5965988495736383e-05, 3.854864917229861e-05, 0.049294695258140564, 0.05806674435734749, 0.00536378426477313, 9.696058987174183e-05, 1.2511892236943822e-05]}, {"target": [1], "doc": ["i be in favor of unconditionally use <tag>/<tag> suffix , too", "while it be true that for some node it seem like a lost opportunity to have more \" natural \" name , consistency win .", "what i do n't quite like be that the <tag> be the non - orm one", "my point be that orm be more strongly back by a standard", "but i ca n't yet suggest a well naming", "maybe this be also an opportunity to do something about ' canvas '", "i find that concept a bit confuse at time", "i know it be difficult , because be have no 3d counterpart : 3d scene live in <tag> node , but canvas can contain a mix of <tag>s and <tag>s", "however , it would be great if we could define some naming that allow rename <tag> to <tag> , while keep it meaningful for the \" pure \" 2d and the gui realm"], "issue_sim": [0.12293882668018341, 0.1333141326904297, 0.2623148262500763, 0.17411601543426514, 0.07277253270149231, 0.09465920925140381, 0.048072487115859985, 0.5616689920425415, 0.37567418813705444], "prob": [0.1822236329317093, 0.2317187786102295, 0.03308551013469696, 0.004222141578793526, 0.007723780814558268, 0.004579529166221619, 0.004493542946875095, 0.48781245946884155, 0.28287211060523987]}, {"target": [0], "doc": ["that be true ; the good i could offer be an internal <tag> method which provide both routermodule and that service , and then by - convention use that to provide the router in all module .", "but i can see why that tend to defeat the purpose"], "issue_sim": [0.44580844044685364, 0.01296781562268734], "prob": [0.9432554244995117, 0.003141694003716111]}, {"target": [0], "doc": ["there be 2d abstraction and you can make a visualserver that do 2d in the. cpu , but it 'll probably be very difficult to mix that with accelerate 3d.", "on <number> may <number> at 14:13 , ferenc arn < notifications@github", "com > write :"], "issue_sim": [0.6798135638237, -0.06310080736875534, -0.042158834636211395], "prob": [0.9972944855690002, 0.0035657749976962805, 0.004301133565604687]}, {"target": [2], "doc": ["i 'll make one caveat to my above statement", "i be ok with add functionality for deserialize web response from json to object in <tag>", "it be already marry there and where the cmdlet derive the majority of its value .", "for example , extend irm to include the <tag> feature or work with object model"], "issue_sim": [0.027193117886781693, 0.4207040071487427, 0.12832309305667877, 0.19737210869789124], "prob": [0.0028313761577010155, 0.032836150377988815, 0.978550910949707, 0.015342725440859795]}, {"target": [0], "doc": ["just as a starting point for thing we need in the proposal , there be no such thing as \" partial assignability \" ."], "issue_sim": [0.09998603165149689], "prob": [0.9999961853027344]}, {"target": [2], "doc": ["i be call auto - casting as \" magical \" , because as evan also say - it be all string", "it be html to blame", "so , if you want enhancement to standard html , just add vue 's <tag> param or cast it by yourself ."], "issue_sim": [-0.08260498940944672, -0.0036073029041290283, -0.021317407488822937], "prob": [0.3123047351837158, 0.002105368534103036, 0.9861688017845154]}, {"target": [1], "doc": ["that be a good point", "i think we can use a private constructor . i think it fit well with this pattern . but , in a singleton pattern everyone can use getinstance method or new .", "if getinstance method exist , then should be use"], "issue_sim": [0.02431875839829445, 0.3941348195075989, 0.3359505534172058], "prob": [0.00652215164154768, 0.9382631182670593, 0.02255491353571415]}, {"target": [7], "doc": ["there be plenty of definition of \" dynamic \" in this context", "to be clear : the variable type may not be know at compilation time , so the method extension check need to be do at runtime", "if we start do this we might as well make gdscript type only", "but that be a whole other discussion that i do n't to get here", "point be : thing should n't start or stop work because the user add type to a script", "it be almost always confuse when it happen", "again , i do n't think it solve the issue anyway", "we be try to attach the same code to multiple type , while an extension method will add it only to one type .", "nobody propose  attach method dynamically  and i do n't want that either", "trait would be apply statically at compilation time"], "issue_sim": [0.10931067168712616, 0.31769442558288574, 0.16701127588748932, -0.020985636860132217, 0.25933247804641724, 0.15406650304794312, 0.11147280037403107, 0.3528780937194824, 0.21757963299751282, 0.26851943135261536], "prob": [0.011241628788411617, 0.15071071684360504, 0.010211614891886711, 0.057760708034038544, 0.043985966593027115, 0.002141796750947833, 0.008727951906621456, 0.14012667536735535, 0.00030440581031143665, 0.0010973005555570126]}, {"target": [2], "doc": ["do we have a special case for <tag>", "should <tag> end up be <tag> , or be it helpful to maintain the <tag>", "i can see this as both useful as well as something that might turn out to be an anti - pattern ."], "issue_sim": [0.16605055332183838, 0.1478709578514099, 0.18120694160461426], "prob": [0.03209517523646355, 0.24438735842704773, 0.758470892906189]}, {"target": [2], "doc": ["this feature would be a great add", "here be another example of how it currently work :", "as a workaround , you can catch the error in a try / catch block .", "but i could n't find a way to trigger an error on the vue instance", "i think maybe the convention of emit an <tag> event might work", "i think that or something similar could be helpful"], "issue_sim": [0.05478938668966293, 0.023290487006306648, 0.46424365043640137, 0.3401764929294586, 0.2643529772758484, 0.014354541897773743], "prob": [0.018294062465429306, 0.0034361036960035563, 0.22475166618824005, 0.08798782527446747, 0.13445590436458588, 0.001309399725869298]}, {"target": [0], "doc": ["ok , still simple to use a component for all case", "on sat , <number> mar <number> , 15:59 carlos gonzales , < notifications@github"], "issue_sim": [0.31593257188796997, -0.1328476220369339], "prob": [0.7494678497314453, 0.049277763813734055]}, {"target": [0], "doc": ["just kid : soon you will suffer from 8.3  name compatibility issue ."], "issue_sim": [0.10948016494512558], "prob": [0.9999784231185913]}, {"target": [1], "doc": ["first , i suggest to use azurerm", "as use azure module wo n't instal in wsl because be a windows module .", "currently , your scenario ca n't be reproduce"], "issue_sim": [0.10627344995737076, 0.43111279606819153, 0.14100836217403412], "prob": [0.262999951839447, 0.8652823567390442, 0.011037114076316357]}, {"target": [0], "doc": ["i be talk about return value ."], "issue_sim": [0.08435811847448349], "prob": [0.9998518228530884]}, {"target": [0], "doc": ["i think it would be well if typescript + vuejs could work together directly , but i be currently happy with use the babel jsx plugin and the vue - class - component package .", "it do seem like a lot of toolchain for the job , but it appear to work with no issue", "i 've put together a starter project for single file component with those package : <url>"], "issue_sim": [0.580560564994812, 0.19003897905349731, 0.1865190714597702], "prob": [0.8189244866371155, 0.09315299987792969, 0.08461783826351166]}, {"target": [0], "doc": ["annotation be a good way of configuration injection .", "but seperate configuration and code may be a more clean approach imo", "may be add they like as header file be more helpfull"], "issue_sim": [0.5002715587615967, 0.188958078622818, 0.2222249060869217], "prob": [0.9936057329177856, 0.002345290267840028, 0.021614141762256622]}, {"target": [3], "doc": ["@mysticfall the <tag> signal return the node that collide", "from there you can access anything you want , give you be creative enough", "it seem you be worried about clutter and performance", "clutter can be reduce if you make the area a child of your already exist node .", "about performance , do n't worry , you need around <number> areas to divide the human body ; that be not nearly enough to cause performance issue , even if you have more than one player"], "issue_sim": [0.3066761791706085, 0.06351763755083084, -0.027234412729740143, 0.21592509746551514, 0.16865980625152588], "prob": [1.1075485417677555e-05, 0.03115469217300415, 0.0003903516917489469, 0.7522999048233032, 0.4807724356651306]}, {"target": [1], "doc": ["i guess it come from \" close tab to right \" on chrome or firefox", "it be really useful for a browser because it seem to clear unnecessary tab while continue to search .", "i be not sure for edit source code", "maybe it help to close tab under a certain path , like \" <url> / unknown/"], "issue_sim": [0.028315730392932892, -0.007418990135192871, 0.10083683580160141, 0.017061438411474228], "prob": [0.15028159320354462, 0.8412123918533325, 0.028711587190628052, 0.14071564376354218]}, {"target": [5], "doc": ["i see two main reason to use they :", "- when perform math , you know what you will get", "float vector may give you decimal result that you do n't want , force you to explicitly floor they all the time", "- an api expect integer vector be easy to understand than one that end up accept float", "sometimes you really expect integer and it force you again to floor the input inside the function , otherwise you can end up with unseen bug such as have decimal in a dictionary index with vector", "another more marginal case be that integer allow more straightforward math  as well as bit operation without require cast or heavy float - base function .", "in engine side , int be also fast to process but i assume that last bit be consider negligible", "you can work around those obviously , but it be an annoyance we have to live with"], "issue_sim": [0.015503734350204468, 0.12437720596790314, 0.4299132525920868, 0.4594317078590393, 0.4441441595554352, 0.4872942864894867, 0.1399490237236023, 0.08286924660205841], "prob": [0.0004858841421082616, 0.0003999310720246285, 0.07358378171920776, 0.0006323127308860421, 0.3849988281726837, 0.19041086733341217, 0.0010380089515820146, 0.006795336492359638]}, {"target": [1], "doc": ["why duplicate presence of slot would cause error", "i think it be common to resue slot .", "maybe we should remove this warning"], "issue_sim": [0.3997699022293091, 0.21157442033290863, 0.1230246052145958], "prob": [0.033325813710689545, 0.9224299192428589, 0.010689808055758476]}, {"target": [2], "doc": ["from my limited understanting , the thing that this trait system want to accomplish be enable something similar to the workflow show in this video : <url>", "in the video , it be compare with other kind of workflow , with their advantage and disadvantage", "at least to my knowledge , this kind of workflow be impossible in gdscript right now , because of how inheritance work ."], "issue_sim": [0.2377026081085205, 0.02219899371266365, 0.26858630776405334], "prob": [0.6301105618476868, 0.06482837349176407, 0.17204147577285767]}, {"target": [0], "doc": ["this only do one step of newton , iirc it be n't too accurate  .", "it might be preferable in some circumstance to leave the default sqrt behavior , or at least run a few iteration of <tag>", "_ disclaimer : i do scientific computation , maybe this be more than sufficient in game"], "issue_sim": [0.06824386119842529, 0.020191097632050514, 0.0480734258890152], "prob": [0.4539530575275421, 0.7491875290870667, 0.020889028906822205]}, {"target": [0], "doc": ["i be a bit surprised to find that this thread which afaik be start as a reaction to the proposal to add c # as a scripting language do n't yet contain a single argument for c # , even after six people have express their opinion .", "maybe the decision to add c # be n't as premeditate as i assume from the rumor i hear"], "issue_sim": [0.48780307173728943, 0.22504141926765442], "prob": [0.8371245265007019, 0.056989915668964386]}, {"target": [3], "doc": ["<tag> respond to windows key on windows / linux and command key on mac", "the same modifier be call \" super \" in electron", "<tag>  could respond to control key on windows / linux and command key on mac", "this be more common situation from the ux point of view than <tag> as windows / linux user generally use control key for the same thing that mac user use command key", "the current solution require something like this :", "with the new modifier , you could limit that to :"], "issue_sim": [0.5956685543060303, 0.19525516033172607, 0.656720757484436, 0.5786816477775574, 0.17842087149620056, 0.0662018358707428], "prob": [0.023734094575047493, 0.11123628914356232, 0.1441032737493515, 0.6866969466209412, 0.026084555312991142, 0.09546047449111938]}, {"target": [0], "doc": ["i be against complicate what s work fine , if we want something untouched by engine internal we could add an extra system to scene tree with functionality identical to group but call it something like tag instead ."], "issue_sim": [0.4898475110530853], "prob": [0.9998555183410645]}, {"target": [2], "doc": ["on the client , what depend on the og image meta datum", "if a spa it be very unlikely that search engine / <appname> ect will pick up the correct meta information if you be dynamically update", "as this update will be asyncronous , clever search engine will attempt to but if you be rely on request datum after page have load then this will not be pick up .", "could you explain you use case in more detail", "so i can understand how a tool like vue - head / vue - meta make sense to your application"], "issue_sim": [0.15900340676307678, 0.2723798453807831, 0.27571654319763184, 0.12105225026607513, 0.26244938373565674], "prob": [0.0002044052234850824, 0.05436765030026436, 0.6669482588768005, 0.0004817374574486166, 0.09993960708379745]}, {"target": [51], "doc": ["here be the parameterbinding trace from each scenario :", "<tag> <tag>1 ] to parameter", "debug : parameterbinding information : <number> :          execute data generation metadata :", "debug : parameterbinding information : <number> :              result return from datum generation : system", "debug : parameterbinding information : <number> :          coerce arg to  ]", "debug : parameterbinding information : <number> :              parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :          bind arg  ] to param  successful", "debug : parameterbinding information : <number> : mandatory parameter check on cmdlet", "debug : parameterbinding information : <number> : call beginprocessing", "debug : parameterbinding information : <number> : call endprocessing", "debug : parameterbinding information : <number> : bind name cmd line args", "debug : parameterbinding information : <number> : bind positional cmd line args", "debug : parameterbinding information : <number> :      bind arg  to parameter", "debug : parameterbinding information : <number> :          bind arg  to param  successful", "debug : parameterbinding information : <number> : bind remainingarguments cmd line args to param :", "debug : parameterbinding information : <number> :      bind arg  to system", "debug : parameterbinding information : <number> :              encoding arg into collection", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  be ilist", "debug : parameterbinding information : <number> :              coerce collection element from type object  to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  try to convert argument value from system", "debug : parameterbinding information : <number> :                  error : error : coerce fail : arg  ] could not be convert to the parameter type", "debug : parameterbinding information : <number> :      bind arg  ] to parameter", "debug : parameterbinding information : <number> :          coerce arg to  ]", "debug : parameterbinding information : <number> :              try to convert argument value from system", "debug : parameterbinding information : <number> :              encoding arg into collection", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  ] , parameter type  ] , collection type array , element type  ,", "debug : parameterbinding information : <number> :              arg be ilist with <number> element", "debug : parameterbinding information : <number> :              create array with element type  and <number> element", "debug : parameterbinding information : <number> :              argument type system", "debug : parameterbinding information : <number> :              coerce collection element from type string to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :              add element of type string to array position <number>", "debug : parameterbinding information : <number> :              coerce collection element from type string to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  parameter and arg type the same , no coercion be need", "debug : parameterbinding information : <number> :              add element of type string to array position <number>", "debug : parameterbinding information : <number> :          bind arg  ] to param  successful", "debug : parameterbinding information : <number> : mandatory parameter check on cmdlet", "debug : parameterbinding information : <number> : call beginprocessing", "debug : parameterbinding information : <number> : call endprocessing", "debug : parameterbinding information : <number> :              binding collection parameter extra : argument type  be ilist", "debug : parameterbinding information : <number> :              coerce collection element from type object  to type system", "debug : parameterbinding information : <number> :              coerce arg to", "debug : parameterbinding information : <number> :                  try to convert argument value from system", "debug : parameterbinding information : <number> :                  error : error : coerce fail : arg  ] could not be convert to the parameter type", "if i be understand this correctly , it look like the binder be receive a <number> - element list < object > , and the element happen to be a <number> - element object  in this case", "it try  to convert the list < object > directly to a string  , but fail because the inner array  could n't be directly convert to a string", "when we be do a function 's binding , the argumenttypeconverterattribute get involve , and it have no problem \" cast \" anything to a string", "in this case , the string representation of the array @ be the string ' aa bb '", "in both case , the array we actually pass as an argument to the command be wrap in a single - element list < object > , and the binder try to do conversion on that list _ first _ , instead of act directly on the value that be pass to the command .", "it be just that the argumenttypeconverterattribute be successfully able to convert the list , and the code path that be take for the cmdlet 's bind be not , so it fall through to convert the list 's element instead"], "issue_sim": [0.08467721939086914, 0.2870635688304901, 0.03742142766714096, 0.049040719866752625, 0.19535328447818756, 0.32884863018989563, 0.3484804034233093, 0.44130393862724304, 0.1032724678516388, 0.03235010430216789, 0.36999428272247314, 0.39780277013778687, 0.3419581651687622, 0.3484804034233093, 0.44851407408714294, 0.23349545896053314, 0.18292558193206787, 0.3569004535675049, 0.2724319100379944, 0.19535328447818756, 0.31500348448753357, 0.3331218659877777, 0.3419581651687622, 0.19535328447818756, 0.31500348448753357, 0.18292558193206787, 0.35797807574272156, 0.29262739419937134, 0.27101585268974304, 0.22798539698123932, 0.28546828031539917, 0.19535328447818756, 0.32884863018989563, 0.3322846591472626, 0.28546828031539917, 0.19535328447818756, 0.32884863018989563, 0.3322846591472626, 0.3484804034233093, 0.44130393862724304, 0.1032724678516388, 0.03235010430216789, 0.3569004535675049, 0.2724319100379944, 0.19535328447818756, 0.31500348448753357, 0.3331218659877777, 0.22685623168945312, 0.43771809339523315, 0.3249392509460449, 0.300004243850708, 0.5990520715713501, 0.4547184109687805], "prob": [0.000538941822014749, 0.0023880405351519585, 0.15638478100299835, 0.008921741507947445, 0.02508900873363018, 0.007453921716660261, 0.005479179322719574, 0.00510843051597476, 0.0011621176963672042, 0.0013287002220749855, 0.0020137738902121782, 0.002317636040970683, 0.00802560430020094, 0.0020798337645828724, 0.01113168615847826, 0.0029185949824750423, 0.0018673597369343042, 0.004252750892192125, 0.006043629255145788, 0.0034089696127921343, 0.008047129958868027, 0.015026282519102097, 0.007555993273854256, 0.00732858432456851, 0.006577617488801479, 0.001479455386288464, 0.027084773406386375, 0.0016973917372524738, 0.00278440210968256, 0.0011506682494655252, 0.008453508839011192, 0.0031325777526944876, 0.00555049255490303, 0.0023324142675846815, 0.007519617211073637, 0.0031097345054149628, 0.005458252038806677, 0.002339639002457261, 0.0043091196566820145, 0.003972594626247883, 0.0008016948122531176, 0.0006736046052537858, 0.0019505515228956938, 0.00229361723177135, 0.001335014938376844, 0.0069839321076869965, 0.02934793010354042, 0.39213690161705017, 0.0026814634911715984, 0.5177688002586365, 0.0005440154927782714, 0.15474700927734375, 0.3525730073451996]}, {"target": [9], "doc": ["as the person who open # <number> , which be link to this issue , let i just provide one user 's viewpoint", "i look at # <number> and see that only import from package", "i can understand need to limit the scope of what you provide auto - import for , and if package", "json be the limit then i will work with that", "that be say , sometimes package provide function / etc", "that reference type  from other package , which may be in their own package", "you could consider a scheme that import from a project 's package", "json , and then through all dependency of the package list in that package 's package", "it could go <number> level deep , or even fully recursive", "perhaps the number of level could be configurable by some property to allow user to chose the balance betwee performance and coverage .", "i do n't pretend to know all the under - the - hood detail here , and look at the link issue i can see that there have be signficant discussion on this issue to date", "and i understand that this be just one use case in a sea of many", "so take my input with a grain of salt , and perhaps it will prove useful"], "issue_sim": [0.15540552139282227, 0.3535098433494568, 0.48179566860198975, 0.11899860203266144, 0.17691591382026672, 0.23204688727855682, 0.37453174591064453, 0.42427971959114075, 0.0778062641620636, 0.15801751613616943, 0.17109796404838562, 0.050733983516693115, 0.05297209322452545], "prob": [0.149749755859375, 0.0011212899116799235, 0.03605353832244873, 7.489737618016079e-05, 0.0005234849522821605, 0.002875996520742774, 0.0006269810837693512, 0.005074324551969767, 0.0016841826727613807, 0.29022732377052307, 0.18752458691596985, 8.686852379469201e-05, 0.003060577204450965]}, {"target": [5], "doc": ["thank you for discuss this", "i will check out class", "i should note that comparison with ksh / bash be a disservice to ps", "it be a nightmare to write maintainable script in they and the reason that i be explore ps on linux look to migrate some of that stuff", "devs nor op like those sell for scripting , there just be no option", "give what ps offer , there be a real chance at set the direction so i 'd request you to not use they as a bar ."], "issue_sim": [-0.08428898453712463, 0.09057868272066116, 0.3628150522708893, 0.38280704617500305, 0.23816876113414764, 0.24217230081558228], "prob": [0.004493528511375189, 0.01983351819217205, 0.008651282638311386, 0.15266311168670654, 0.053753115236759186, 0.3819003105163574]}, {"target": [5], "doc": ["please refer to <url>", "we strive to keep api surface small", "<tag> can be implement in user land without hack", "it be n't hard for user to use it in exist project", "i would also argue that a half - bake <tag>", "fully implement it might introduce no simple concept nor small code size for async compute than for rx and its vue binding .", "your use case might be do without async at all", "probably you can store value in another field and define one <tag> property to extract value", "handle async be just set the value in callback"], "issue_sim": [-0.036776140332221985, 0.07247127592563629, 0.19074156880378723, 0.047233037650585175, 0.0664781928062439, 0.4493045508861542, 0.33239883184432983, 0.3028285503387451, 0.41817155480384827], "prob": [0.03886482119560242, 0.08260473608970642, 0.02225833386182785, 0.09746919572353363, 0.014277148991823196, 0.38298073410987854, 0.004598100204020739, 0.4196179211139679, 0.006480971816927195]}, {"target": [0], "doc": ["i think it might be good to have a symbol to put in front of an alias to invoke use it .", "that add one character for type an alia and allow for keep some sane default", "since we be go for break , might as well make it a useful breaking change", "to be honest , the only alias i care about be the <tag> aliase", "i wonder if they be the most commonly use since i tend to see <tag> rather than <tag>"], "issue_sim": [0.2697816789150238, 0.1363329291343689, 0.07281280308961868, 0.23796983063220978, 0.09278661012649536], "prob": [0.9717169404029846, 0.010492367669939995, 0.01757461205124855, 0.001952576101757586, 0.005095460452139378]}, {"target": [0], "doc": ["just <tag> be probably not solution you want because of lack of reactivity  .", "as mention early , set and maps be not observable by vue", "in order to use those", "either in <tag> , or in compute property , method , watcher , template expression , etc", "ou need to create a serializable replica of this structure and expose it to vue", "here be a naive example which use a simple counter for provide vue with information that set be update :", "<tag> <tag> mysetchangetracker <tag> mysetchangetracker <tag> <tag>", "this illustrate a kinda hacky but <number> % working method for make non - observable datum reactive", "still , in real world case i end up with serialize version of sets / maps  , so no artificial counter / hack be involve", "i personally think this be a fair solution to a problem , but it definitely deserve some official documentation   therwise it be impossible to justify this as non - hacky way of deal with vue internal"], "issue_sim": [0.35711923241615295, 0.08268644660711288, 0.04173095151782036, 0.22829732298851013, 0.31609266996383667, 0.2560756206512451, 0.39520007371902466, 0.36039578914642334, 0.2687060832977295, 0.2620600461959839], "prob": [0.04580939561128616, 0.0064719729125499725, 0.002703233389183879, 0.010954435914754868, 0.0031648685690015554, 0.005508538335561752, 0.0017485885182395577, 0.021615443751215935, 0.007520473096519709, 0.5308663845062256]}, {"target": [0], "doc": ["compute property be not reusable ."], "issue_sim": [0.21934780478477478], "prob": [0.9999674558639526]}, {"target": [0], "doc": ["i love in - build script simply because i do n't need to care where to save the script file .", "additionally , the scene file be self - contain and safe to pass around", "however , i can see the problem in - build script cause , and i agree on the vcs issue as well", "if we remove build - in script , i would suggest  that godot take full control on where to store these script in a standardized way", "so the user do n't have take care as of where to store all the script belong to one scene", "even more useful when rename node  , or \" save branch as scene \" , in which case the script of the extract scene need to be move to an appropriate folder to comply with the to be define standard", "in my mind , this be a way to keep most of the comfort and modularity build - in script provide"], "issue_sim": [0.418283611536026, 0.1769421398639679, 0.3538011312484741, 0.5045711994171143, 0.32376015186309814, 0.352142870426178, 0.316494345664978], "prob": [0.5073096752166748, 0.0030245278030633926, 0.0036611459217965603, 0.0055391802452504635, 0.004344914574176073, 0.4867120087146759, 0.06961102038621902]}, {"target": [3], "doc": ["i just start get into godot today and this be the main issue i have have with the scripting so far", "it be quite gross the way we find node currently", "i hate string reference  , but there could really be some clean up with finding node", "i would like a function call that return the root at the least simplify his first example to \" get_scene_node \" .", "i have not dig into the code fully yet so i do not know the structure , admittedly", "be there no way to reference node with something like", "desirednode ' or ' get_root->myrootnoe->desirednode ' obviously there be reason why this ca n't happen as i be sure it have be think of several time , but it would be kinda cool", "maybe i do not know enough about the syntax to even be talk , but it be a first impression that i be sure many developer move over be go to see"], "issue_sim": [0.25584158301353455, 0.239874929189682, 0.49414122104644775, 0.43498316407203674, 0.20560653507709503, 0.5047764182090759, 0.08414299786090851, 0.2454131841659546], "prob": [0.08833364397287369, 0.0035700174048542976, 0.0053017111495137215, 0.4702208936214447, 0.011082377284765244, 0.0046311235055327415, 0.3571220636367798, 0.10578829050064087]}, {"target": [0], "doc": ["the big issue be probably replace the python build script for autogenerate code like the shader , it do n't seem like meson have a feature like that ."], "issue_sim": [0.4931306540966034], "prob": [0.99997878074646]}, {"target": [3], "doc": ["specially for ui element that do n't require much more than initialize some icon or text label or change a color base on it be use for an enemy or a player character , or just very simple effect to show stuff like damage number progressively write themselves , or something like a generic lightweight life bar with its own simple _ draw  routine", "of course i be not go to put extremely complex logic as builtin , but for ui element , very minor effect , maybe a timer that just need a nudge , an icon that fade in / out for emphasis", "there be really not much of a point to pollute the folder far with such scrap", "once support be go , all those element would need * * manual review * * , and they be a lot . the time investment be brutal and there be always a chance of forget something and then you just ca n't figure out why the thing be not right .  ."], "issue_sim": [0.27526023983955383, 0.2760787010192871, 0.1603592336177826, 0.21917572617530823], "prob": [0.5273544788360596, 0.2138938456773758, 0.0022064459044486284, 0.21287694573402405]}, {"target": [0], "doc": ["what if you want to explicitly set the value to undefined ?"], "issue_sim": [0.42704471945762634], "prob": [0.9999927282333374]}, {"target": [1], "doc": ["you may be interested in read <url> - it describe a way to lazyload a component", "the trick be to have the component in it be own ngmodule that s not export :. !", "then you can just have your lazy import statement :", "and render it dynamically via <tag> like :"], "issue_sim": [0.462663471698761, 0.42857825756073, 0.18336769938468933, 0.20812660455703735], "prob": [0.01853414997458458, 0.9631835222244263, 0.0006983840721659362, 0.007045627571642399]}, {"target": [1], "doc": ["stumble on this after think about it for some time", "my idea be basically the same but i be think about how prepros inject your style immediately exactly as you describe , where its not the compile stylesheet that change the dom , it be only inject style into the proxied webpage .", "any page refresh could then load the entire compile stylesheet and component", "i be here due to wonder why we can not inject a style update immediately with the appropriate <tag>", "at least then we can preview the style and only rely on full recompile / page load to get the real thing", "@hiepxanh how can i help"], "issue_sim": [-0.041225582361221313, 0.4947512149810791, 0.4643014073371887, 0.2760818898677826, 0.34586015343666077, 0.09995335340499878], "prob": [0.0005385035183280706, 0.6851982474327087, 0.3120177686214447, 0.00716654397547245, 0.05222884565591812, 1.0797110007843003e-05]}, {"target": [0], "doc": ["name tuple element would improve code readability .", "i currently have <tag> , which would be much more readable as <tag>"], "issue_sim": [0.5663800835609436, 0.24356994032859802], "prob": [0.05631006136536598, 0.9313164949417114]}, {"target": [3], "doc": ["hey @wycat , i assume you mean <tag>", "yeah , i try something like :", "with no luck since , like you mention , the construct type need to be resolve to a class or an interface", "i think the limitation should be from extend primitive type , not from non - class / interface type .", "@ahejlsberg can you weigh in on this"], "issue_sim": [0.1178225576877594, 0.05410115793347359, 0.5045738816261292, 0.44409534335136414, 0.15247589349746704], "prob": [0.027145668864250183, 0.007118892855942249, 0.2891867160797119, 0.6502886414527893, 0.005635835230350494]}, {"target": [2], "doc": ["@jhoneill you should ignore my custom prompt as that be not part of any propose change nor relate to progress bar discussion", "i believe @isazonov 's referral to \" keep current behavior \" be the write - progress api should n't change", "what be write to the console be merely decorative and do n't affect functionality and thus would n't break any exist script ."], "issue_sim": [0.48610013723373413, 0.3209385275840759, 0.27337098121643066], "prob": [0.004016322083771229, 0.003595119109377265, 0.9977489113807678]}, {"target": [0], "doc": ["that difference be still there so it will introduce some break change , also the browser compatibility constraint mean we will only do it for v3 ."], "issue_sim": [0.2678956389427185], "prob": [0.999996542930603]}, {"target": [0], "doc": ["it be not throw away but disable by default .", "on thu , nov <number> , <number> , 9:53 am matan lurey notifications@github"], "issue_sim": [0.03876292333006859, -0.13503170013427734], "prob": [0.8419344425201416, 0.14091551303863525]}, {"target": [5], "doc": ["my vote be to follow", "net core 's lead", "in general we should avoid hide native capability , unless absolutely necessary .", "just to add another example :", "on unix , <tag> , instead of create a single dir", "literally name <tag> - which be what the native<tag> do - it create _ two _ directory , subdir <tag> with a subdir <tag> ; again a consequence of automatically translate <tag> into <tag>", "conversely , <tag> wo n't let you change to a directory   literally name <tag>"], "issue_sim": [0.033871449530124664, 0.16882069408893585, 0.07638943940401077, -0.0073120566084980965, 0.5056928396224976, 0.4418916702270508, 0.2861107587814331], "prob": [0.005652706138789654, 0.034655142575502396, 0.43355438113212585, 0.002293494762852788, 0.007825897075235844, 0.38521692156791687, 0.026920370757579803]}, {"target": [1], "doc": ["as thing work right now , if you extend the animation beyond the last keyframe , then you will get a smooth transition back to the first one", "but i can see your point , it would be nice to have an option for the animation to backtrack along every key to the beginning when it reach the end  ."], "issue_sim": [0.6083898544311523, 0.4202744960784912], "prob": [0.21817314624786377, 0.6880724430084229]}, {"target": [0], "doc": ["string , number , and boolean should all follow the same rule ."], "issue_sim": [0.4857134521007538], "prob": [0.9999423027038574]}, {"target": [0], "doc": ["group be good for thing like that , instead of find random - locate node with expensive search function ."], "issue_sim": [0.34212207794189453], "prob": [0.9999113082885742]}, {"target": [2], "doc": ["i 'll check it out tonight", "regardless , this would be more of a work around", "typescript should not be add additional unneeded and unexpected code to our code base .", "this seem more like a tooling problem and should be an config set change"], "issue_sim": [-0.07535363733768463, -0.027571553364396095, 0.4568858742713928, 0.2615848183631897], "prob": [0.010260622948408127, 0.15246661007404327, 0.7718517184257507, 0.10087215155363083]}, {"target": [1], "doc": ["we have so much default that the new cmdlet look wasteful", "i expect that only developer will have multiple instal version , user - windows powershell and one - two powershell core .", "also system service  can use specific version", "a distributive provider can include a powershell core version as system default", "an application provider can make the same", "they must all have a predictable way to run the correct version", "if windows powershell stop on <number> version  we would use <tag> to run a correct version - powershell core start with <number> version"], "issue_sim": [0.41613760590553284, 0.5779377222061157, 0.2602683901786804, 0.513164758682251, 0.12201519310474396, 0.03515326604247093, 0.564450740814209], "prob": [0.10435912758111954, 0.6418970227241516, 0.0014272715197876096, 0.013488112017512321, 0.0032167613971978426, 0.04686899855732918, 0.05550418049097061]}, {"target": [2], "doc": ["i agree with stick with the <tag> prefix for vue", "js directive but what about the original feature request", "the user can already create their own component parameter , not in the <tag> namespace , via <tag> .", "this issue ask for the ability to create user define callback in a similar manner , perhaps use a component option name <tag>"], "issue_sim": [0.1563206911087036, 0.44406554102897644, 0.38148409128189087, 0.5558828115463257], "prob": [0.002524277660995722, 0.004882491193711758, 0.8961054682731628, 0.054810717701911926]}, {"target": [3], "doc": ["look into this at the moment", "i be currently lazy load a complete map module which i would like to clear once log out", "the reason behind this be because if the user re - log in i d like the mapmodule can re - initialise all it 's service etc without a page load", "unless there be a way to force some sort of re - initialization of a lazy module but not have it as it be the default action on every route change ."], "issue_sim": [0.02075337991118431, 0.4993589520454407, 0.31163638830184937, 0.43905866146087646], "prob": [0.00399578595533967, 0.023616928607225418, 0.5575358271598816, 0.29523518681526184]}, {"target": [1], "doc": ["this issue be encompass in <url>", "so i think it be unlikely to add support for this functionality .", "unfortunately , this make it very difficult to migrate vanilla javascript to typescript type checking while still appease jsdoc stakeholder wary of change since the new syntax break jsdoc execution", "i 've experiment with <tag> syntax but have n't be able to find a substitute that will allow typescript to pull in the jsdoc typing", "if it be support , the <tag> syntax propose by @joma74 or even <tag> by @sergeysova would work for most folk since  allow unknown tag such as <tag>"], "issue_sim": [0.005822545848786831, 0.31845349073410034, 0.3446348309516907, 0.40353822708129883, 0.2652099132537842], "prob": [0.0033824353013187647, 0.38278844952583313, 0.26114168763160706, 0.03405151888728142, 0.26560989022254944]}, {"target": [2], "doc": ["do anyone know how many  break change we 've already make", "it seem so much that talk about these change be no long relevant", "also if we already be invariantculture for argument and cast in script where be entry point where customer can catch problem ?"], "issue_sim": [0.0675770491361618, 0.051661938428878784, 0.25672444701194763], "prob": [0.07672082632780075, 0.1100253164768219, 0.6032085418701172]}, {"target": [8], "doc": ["i do n't think you should expect the behavior you be describe , and i do n't see the actual behavior you be describe on macos , at least not on powershell core v6", "it be true that on unix - like platform the filename extension be irrelevant with respect to whether a file be _ executable _ , but in order to execute a file you must specify its _ exact _ filename , so if it happen to have an extension  do happen with <tag> use for shell script ) , it _ must _ be specify", "therefore , in a posix - like shell  , if the script name be <tag> , you can _ not _   invoke it with <tag> or <tag>", "this be where powershell 's behavior differ : it _ do _ implicitly look for its _ own _ script and , if no <tag> - without extension be present - look for <tag> and execute that , _ in - process _ and - if be use - in the current scope", "set in that case", "that you must use <tag> in order to target <tag> / <tag> _ in the current dir", "_  - whether with direct invocation or via \" dot - sourcing \" or via <tag> - be a sensible security measure that be actually mandate by posix , and <tag> happen to be in violation of it", "an additional difference be that in powershell you can invoke _ anything _ with <tag> , not just powershell _ script _  ; if the operand happen not to be a powershell script , <tag> behave as if you have invoke the operand directly  powershell code ) )", "i do n't see any problem with these selective difference between powershell and posix - like shell - they strike i as useful extension .", "let i give example that you can run as - be :", "<tag> <tag>n'hi from out - of - process t ' \" > t ; chmod a+x t", "' \" hi from in - process t", "ps1 \" ' > t", "' foo ' > t", "<tag> <tag> <tag> powershell", "hi from out - of - process t", "hi from in - process t"], "issue_sim": [0.43921202421188354, 0.5031090378761292, 0.4777839183807373, 0.434844434261322, 0.024950921535491943, 0.3617100417613983, 0.29943668842315674, 0.30231139063835144, 0.39107847213745117, 0.07497826218605042, 0.279305100440979, 0.07288726419210434, 0.21091309189796448, 0.14401750266551971, 0.30002397298812866, 0.08100225031375885, 0.07288726419210434], "prob": [0.32914209365844727, 0.6837127208709717, 0.27584508061408997, 0.2454202026128769, 0.004955868702381849, 0.009496823884546757, 0.031637948006391525, 0.03880952298641205, 0.0315660685300827, 0.002022047294303775, 0.01194350142031908, 0.00032967148581519723, 0.00013500134809873998, 0.00010463657963555306, 0.00019254552898928523, 0.000726770784240216, 0.000865164736751467]}, {"target": [1], "doc": ["i get your concern , but do note :", "that there be no syntactical ambiguity : in powershell , a parameter either _ require _ a value or be a _ switch _ ; so , for any give parameter name specify explicitly , it be unambiguously imply whether the next token be a parameter _ value _ or a _ different parameter _ .", "* that even single - character <tag> suffix - where there be no obvious resemblance to a parameter name - can trigger the problem ; e", "* that the current behavior be _ inconsistent _ :", "as you can see , <tag> , because it happen not to be the _ start of _ a parameter name , be accept as <tag> 's   parameter _ value _", "by contrast , because <tag>   happen to be the start of <tag> , it be interpret as that , and then <tag> have no value , and the command _ break _", "i suppose that one way to resolve the problem would be to disallow unquoted value that start with <tag> , but my concern would then be powershell 's _ cli _ , where introduce such an additional quote requirement  would far aggravate the quote headache , e", ", when call from <tag> :", "i guess the cli could continue to operate differently , but such inconsistency be ill - advise"], "issue_sim": [0.06542336195707321, 0.6809151768684387, 0.4166281819343567, 0.06627022475004196, 0.6436532735824585, 0.35665711760520935, 0.5477713346481323, 0.07130411267280579, 0.16988715529441833], "prob": [0.0082127396017313, 0.26166126132011414, 0.05228663608431816, 2.598755145299947e-06, 0.2246059775352478, 0.08422117680311203, 0.05414925143122673, 4.399538738653064e-05, 0.006219519767910242]}, {"target": [3], "doc": ["@mateusak that video look super cool", "but in fact , there be multiple much simple system in unity that could provide similar effect also , like :", "and it be quite straight forward to creat hitboxe / hurtboxe for a skeleton in unity , since each collider could detect collision , and unity auto create a ragdoll like godot do with <tag> :", "as i write in the issue description , godot can make a ragdoll in a similar manner as in unity , but the result rig can not be use in the same manner since in godot , physical bone or collision shape can not detect collision nor be able to be physically act upon in a direct manner .", "as to your suggestion , i guess attach either <tag> or <tag> to each major bone would work  for the hit detection part", "but i doubt hit such a node would cause its parent bone  to move though"], "issue_sim": [0.11709462106227875, 0.29309314489364624, 0.4736912250518799, 0.5948525667190552, 0.4012945294380188, 0.3399125337600708], "prob": [5.1964128942927346e-05, 0.05245106667280197, 0.41616445779800415, 0.14776137471199036, 0.002712046029046178, 0.0008355710888281465]}, {"target": [3], "doc": ["@dbaeumer the problem be that if a ' tsconfig", "json ' be adopt it will become the de facto standard for typescript project build configuration , independently of the original purpose and scope of the feature", "it would kill the competition and i be not sure it would benefit in anyway the tooling around typescript", "i seriously would prefer that to never land in typescript than have a solution with limited / incomplete feature set ."], "issue_sim": [0.10157370567321777, 0.34340792894363403, 0.23693005740642548, 0.30589866638183594], "prob": [8.563802111893892e-05, 0.79693204164505, 0.01928926259279251, 0.71722811460495]}, {"target": [2], "doc": ["nevermind , i think my test be not break but it be", "here light pass through an object due to how burley work", "in an ideal world it should work but , in this case , due to how shadow mapping work  it fail , as object get light anyway ."], "issue_sim": [0.05752735212445259, 0.23074233531951904, 0.309895783662796], "prob": [0.08304671943187714, 0.009096885100007057, 0.9724105000495911]}, {"target": [0], "doc": ["scoped slot exist in vue <number> .", "no need for a plug - in"], "issue_sim": [0.28225430846214294, 0.04619165509939194], "prob": [0.9906152486801147, 0.0016012886771932244]}, {"target": [1], "doc": ["ok , that be odd -", "i do n't recall have any strange terminal setting , however the enter key on the keypad seem to return code <number> and the return key return <number> .", "in the example below , the enter key be the first example and the return key be the second one"], "issue_sim": [-0.02025545760989189, 0.6273627877235413, 0.5600811243057251], "prob": [0.002296963008120656, 0.9453433156013489, 0.07639604806900024]}, {"target": [0], "doc": ["and just for information , amd have say that their vulkan driver will be share between windows and linux and even more exiting , will be opensource !", "same for their opencl driver"], "issue_sim": [0.511429488658905, 0.39673030376434326], "prob": [0.9462164640426636, 0.01643848977982998]}, {"target": [6], "doc": ["@mlc - mlapis thank , it be fine to have some extra runtime as long as they do n't slow down to much", "hopefully the angular project would be run as it be own close environment  and", "i think i need to dig into the specific project a bit more before say to much about the specific setup as it be a week since i last try", "the thing i remember be that it would not compile when i try to add new entrycomponent  due to how the project build system be setup", "it work perfectly in a new clean project to do that and then in app module constructor use createcustomelement with customelements", "define , but it seem to not be as straight forward to do this in a project that do not have export in mind when create", "this be why i suggest to change angular in a way so that there be always  possible to export component regardless dependency on other angular service / import / event or other binding .", "there be some more experiment i 'll try , like for example create one additional component to each component that i want to export , to see if that allow the export , but as it would possibly mess up the related css and add even more layer to an already complex setup , so that might be a less attractive option", "if it be possible to just export the component as be , same as in a clean project with @angular / element that would keep complexity down but as i understand from the developer of this specific angular project that would severely limit the angular feature that they depend on", "ah , this be no good without concrete case example i guess , i 'll get back with one the next time i be work on that project"], "issue_sim": [0.17159190773963928, 0.49026820063591003, 0.16405171155929565, 0.3098629117012024, 0.35968300700187683, 0.3296501338481903, 0.7294546961784363, 0.4640732407569885, 0.788703203201294, 0.10542280226945877], "prob": [0.005502564832568169, 0.008863723836839199, 0.057527847588062286, 0.07790251076221466, 0.02527952380478382, 0.025455405935645103, 0.03818526118993759, 0.07890661060810089, 0.05882440507411957, 0.02565927430987358]}, {"target": [0], "doc": ["that be exactly what i be say , and implement in ts - land by \" hide \" all of the global except for the one you actually directly pull into your program ."], "issue_sim": [0.2895212173461914], "prob": [0.9999655485153198]}, {"target": [1], "doc": ["definitely something i want / need", "look like the increase popularity of hoc have make this a necessity ."], "issue_sim": [0.043543193489313126, -0.028516720980405807], "prob": [0.011135472916066647, 0.9292905330657959]}, {"target": [2], "doc": ["i believe this be classify as unsound unless there be be a recent change to type checking for the <tag> property", "i understand there 'd be no other way to represent this safely today , unless we get <tag> type", "the only other thing i can think of be have property that be n't know be an <tag> type so <tag> could work with flow control but <tag> would fail with <tag> type ."], "issue_sim": [0.37710660696029663, 0.1564519703388214, 0.4716465175151825], "prob": [0.38325223326683044, 0.07545773684978485, 0.6243645548820496]}, {"target": [0], "doc": ["but i be have trouble imagine code that would be as clean as * ngfor , which could also use a unique directive in some case .", "that be not to say that it do n't exist , just that i be not experience enough with directive to fully understand you", "of course , abandon * ngfor entirely would be an option , but it be a very convenient construct"], "issue_sim": [0.4097742736339569, 0.34011566638946533, 0.13846194744110107], "prob": [0.6760027408599854, 0.24069668352603912, 0.13312768936157227]}, {"target": [12], "doc": ["have though about this a bit , i have a few implementation concern", "we need some feedback from the react core team on this so that we can give a good experience for everyone", "it be not clear what the new flag that user should use be", "while this sound trivial , i really want to get this right", "do we name it <tag>", "that might be really confuse for new user where <tag> be already an option", "that also bring we to versione concern", "it sound like the intent be for <tag> and <tag> to be opaque function so that transformer can use different function in the future", "this way , user ca n't take a hard dependency on the <tag>/<tag> function , and an upgrade in react might imply an upgrade in the transformer", "that be not possible for we since our transformer be part of our codebase and ca n't be versione differently", "any new transform behavior would need a new <tag> flag on our end", "i think something we need to know from the core team be what the expectation be of incompatible update to the transformer", "the current proposal be for jsx expression to implicitly import <tag> so that user do n't have to .", "in the babel world , this be fine because there be an automatic assumption that user be always use module ; however , in typescript , we only assume a module if we see some <tag> or <tag>", "this mean that a jsx expression in the tree can automatically convert a file into a module , and for file that have no other import , we 'd have to potentially do a full walk of the tree to decide whether a file be a module", "this also mean user use the new jsx emit mode in global <tag> file would potentially be break", "i be not sure how many people use jsx without use module nowadays , but it be something that need to be recognize", "what we 'd probably end up do be say that under <tag> , a file must be a module", "user could get a quick fix in the editor to add an explicit <tag> , but it would be a weird divergent behavior that might be confuse"], "issue_sim": [0.13128285109996796, 0.1631917953491211, 0.35517194867134094, 0.046484336256980896, 0.21644800901412964, 0.3005399703979492, 0.11067315191030502, 0.4116917848587036, 0.4726245403289795, 0.3138701319694519, 0.47164979577064514, 0.32979172468185425, 0.479674369096756, 0.5206576585769653, 0.431041955947876, 0.5381776690483093, 0.43509790301322937, 0.2227812558412552, 0.33592838048934937], "prob": [0.001303697470575571, 0.041868988424539566, 0.0002429405867587775, 0.0001808760716812685, 2.6942694603349082e-05, 0.0011252030963078141, 0.00011205698683625087, 0.017530407756567, 0.13782623410224915, 0.006332972086966038, 4.160427488386631e-05, 0.0009607446845620871, 0.06980123370885849, 0.020906731486320496, 0.017728503793478012, 0.0012109085218980908, 0.0023723284248262644, 0.0007534998585470021, 0.07114536315202713]}, {"target": [1], "doc": ["@kristofdegrave ok , use only the router way be a problem", "theoretically , you can nest the one into the other , but it be a question if it be not too complicated ."], "issue_sim": [0.08611784875392914, 0.09550434350967407], "prob": [0.0010863710194826126, 0.9988582134246826]}, {"target": [2], "doc": ["i be not sure if <tag> be the right solution for your problem , maybe you can provide a jsfiddle to well illustrate what you be try to achieve", "vue do n't have <tag> exactly because vue do n't need it", "vue 's reactivity system ensure only the right component get re - render when state change .", "think of it as react with <tag> already implement for you"], "issue_sim": [0.2854452431201935, 0.26790738105773926, 0.5250130891799927, 0.25909245014190674], "prob": [0.17503292858600616, 0.001480687758885324, 0.8374800682067871, 0.005871220957487822]}, {"target": [2], "doc": ["@kenisteward , well , it be not the actual resolve that will change", "i return observable  with those resolve , and the result of these observable be part of the application state", "but when something happen , for example , the detail view be update , then the list have to be update too , so an event be throw , the list observable pick it up , and the view be update , no resolve be change , just the datum of the observable that be give by the resolve .", "i hope this make sense", "so basically , resolve be there , for i , to build up the application state tree"], "issue_sim": [0.29466941952705383, 0.28203684091567993, 0.34910720586776733, 0.04440337046980858, 0.16812336444854736], "prob": [0.004295479040592909, 0.07314209640026093, 0.9452844262123108, 0.004138454329222441, 0.0031499990727752447]}, {"target": [0], "doc": ["i think thread should still start even if there be no parameter define in the thread method signature .", "not start the thread at all lead to confusion if you do n't see / understand the error message", "often you just do n't need an argument pass to your thread", "- if no argument be give and the signature do n't have any parameter define", "no error and start the thread", "- if argument be give in the <tag> method but no parameter be define", "show an error , or even well crash the game with an error", "- if no argument be give but a parameter be define", "run the thread with the parameter be <tag> or <tag>"], "issue_sim": [0.4249475300312042, 0.40683573484420776, 0.25733959674835205, 0.3419896364212036, 0.26436179876327515, 0.4560459852218628, 0.17323037981987, 0.345831960439682, 0.2824009358882904], "prob": [0.2318926900625229, 0.05951681360602379, 0.02320074662566185, 0.0620705746114254, 0.001426534727215767, 0.016325751319527626, 0.006441356614232063, 0.013699776493012905, 0.007151593919843435]}, {"target": [0], "doc": ["one argument against support json comment be that they be not rfc define .", "that make it difficult to write code that support something that be not well define", "the general guidance be to not use comment in json that be not valid json", "instead , add a metadata object or a <tag> property be recommend", "if we do support this , we would not be able to include it in the default operation of <tag> until comment for json be rfc - back", "it would require a switch of some kind", "that be because we need to reserve the default operation of the cmdlet for rfc compliance", "if a later rfc implement comment as begin with <tag> , for example", "also , what do we do with the comment datum", "apply it as a property on the object it comment"], "issue_sim": [0.3182583451271057, 0.1483187973499298, 0.3737170696258545, 0.2229517698287964, 0.33736222982406616, 0.04586222767829895, 0.3065568208694458, 0.11889208853244781, -0.004379902966320515, 0.03664972633123398], "prob": [0.22857043147087097, 0.024576405063271523, 0.028902877122163773, 0.07302947342395782, 0.47170382738113403, 0.0061998525634408, 0.07994026690721512, 0.03298583999276161, 0.002364378422498703, 0.0024852079804986715]}, {"target": [1], "doc": ["how do one keep 2d batch", "in <url> we be afraid it would cause batch to fail , since the mask method run the gpu shader on all the child .", "even if masking be an engine module it would be effect"], "issue_sim": [0.250624418258667, 0.38978415727615356, 0.1684371531009674], "prob": [0.000684683327563107, 0.9828885793685913, 0.08419842272996902]}, {"target": [7], "doc": ["thank for a good answer to my question that be cause as i get a task re - use angular  component from a huge project  that i can not change and encounter real challenge export it 's component", "the component would then be use in another large project that be base around standard web components", "the problem i be have might also be relate to how that specific project be build with dependency injection and so on", "when i try export component from a clean angular project everything work fine  , but with a project create without export in mind it might maybe simply be hard depend on how all the component have various dependency and so on", "thank for the hint about create an application and have that as an extra runtime on the side , as long as it be one extra runtime and not one per instance or similar it will probably be fine", "i think that run it on the side be what i try , but i 'll dig into workaround for that a bit more", "still i would suggest use standard web component be default once an angular project be transpile down to plain javascript would probably make this so much easy , as angular create custom tag name anyway it look on the surface that this would not be to far away at all", "it would make angular component so much more accessible for other project as well as prevent the need for large re - write in case break change to api where to be need .", "all above say , i be not an angular expert , i only know the basic , as i mainly work in other setup and preferably as close to the browser api as possible", "i 'll leave the issue open , but feel free to close in case my description be not clear / concise enough", "i can also try to provide  detail about the setup of the project in case it would be useful for improve the compatibility between the web components and @angular / element"], "issue_sim": [0.5977498292922974, 0.46514901518821716, 0.304274320602417, 0.6795953512191772, 0.24574708938598633, 0.09648971259593964, 0.742394208908081, 0.6244093179702759, 0.4752289354801178, 0.054694801568984985, 0.5810971260070801], "prob": [0.13461144268512726, 0.01734950952231884, 0.02031799592077732, 0.26936179399490356, 0.11695494502782822, 0.004947630222886801, 0.16190268099308014, 0.018955064937472343, 0.1628779023885727, 0.0022308023180812597, 0.04308949410915375]}, {"target": [1], "doc": ["@fian46 well , if someone have implement websocket as a downloadable gdnative plugin , then yeah , what you describe * would * be the workflow", "instead , they opt to make it an integrate feature available in the vanilla engine .", "there be nothing stop people from create feature that way , so your point be really unrelated to the topic of this issue"], "issue_sim": [0.3361921012401581, 0.19036725163459778, 0.1686256229877472], "prob": [0.0368950255215168, 0.3428102135658264, 0.238450288772583]}, {"target": [2], "doc": ["i still hold the opinion that nest method be more confuse than useful", "the preferred way of connect a child and a parent method be now do so via <tag>", "if the parent and child be so tightly couple that you be use <tag> , then it be effectively the same as directly call <tag> ."], "issue_sim": [0.22238005697727203, 0.32741761207580566, 0.2891019582748413], "prob": [0.4433061182498932, 0.006529618985950947, 0.6277997493743896]}, {"target": [1], "doc": ["i be not quite sure i think extrapolate the position be a good idea", "i 've implement some  render interpolation for my own mean in godot , and i think that a physics delay of one frame be acceptable even in quick - reaction - time game .", "extrapolation do n't really resolve this issue but merely hide it , for example two body that collide may render as penetrate far than they should", "this could be do as an option , of course , to toggle between interpolation , extrapolation and none"], "issue_sim": [0.10176590085029602, 0.4857672452926636, 0.3442106246948242, 0.24929016828536987], "prob": [0.05308673530817032, 0.6823086738586426, 0.14531268179416656, 0.01925039291381836]}, {"target": [0], "doc": ["scon work great for i os osx but personally i second the opinion to have cmake only because i 'd like to be able to generate xcode project as i be as ide man .", "any suggestion on how to generate xcode project file with scon as the build system"], "issue_sim": [0.5397533774375916, 0.45219549536705017], "prob": [0.8627851605415344, 0.0697893351316452]}, {"target": [0], "doc": ["i think async directive can be useful when you be build very small spa , where time to interactive be very important .", "for example , i make order form not long ago", "in my case source code size in parsed state be about <number> kb", "and i use v - tooltip library for show tooltip", "this library give you an opportunity to add ' v - tooltip ' directive", "so as you can see the library take almost same size as my source code", "it would be great if i could make it as separate chunk and load asynchronously", "but since vue do n't support async load of directive i ca n't do that", "i be sure that i could find more lightweight alternative for the library", "but it be not cancel that sometimes you need to place directive in separate chunk"], "issue_sim": [0.60389244556427, 0.14716824889183044, 0.21817827224731445, 0.2399008870124817, 0.3600049614906311, 0.18042097985744476, 0.43108484148979187, 0.4309564232826233, 0.08262242376804352, 0.4106406569480896], "prob": [0.38038748502731323, 0.02377450466156006, 0.012750803492963314, 0.006088078022003174, 0.01639953814446926, 0.04915933683514595, 0.014719627797603607, 0.012611813843250275, 0.00507280882447958, 0.10683604329824448]}, {"target": [0], "doc": ["these trail space may be necessary  if we want to recolor the background of the table ."], "issue_sim": [-0.006344285793602467], "prob": [0.9993743300437927]}, {"target": [2], "doc": ["i personally use <tag> or you can filter those out to exclude the prop you do n't want to apply", "this way you can apply multiple prop at once on an input", "indeed v - expose might be useful because for wrapper component such as input you have to specify all those html prop", "cane be reduce to <tag> or <tag> where filteredprop might be some compute property"], "issue_sim": [0.24675673246383667, 0.23043157160282135, 0.42978888750076294, 0.11062534153461456], "prob": [0.17742392420768738, 0.018682174384593964, 0.12762697041034698, 0.013824728317558765]}, {"target": [3], "doc": ["so i remember the real reason we do n't do this originally", "right now , tagged template be consider * memberexpression*s", "those bind just a bit more tightly than a * callexpression * or * newexpression *", "since tag template will always bind more tightly , we 'll always * try * to parse tag template type argument , even when we be go to parse out a call expression .", "if you take the following :", "a naive approach would do the following :", "let i try to parse out a * memberexpression *", "i have a <tag>", "keep parse out the rest of a * memberexpression *", "let i look try parse out type argument for a tagged template", "i have type argument", "let i see if i have a template string", "i have an open paren - let i discard all the work i 've do to get those type parameter", "i be able to get <tag> as a * memberexpression *", "let i see if i can parse out a call", "i see a <tag>", "i should parse out type argument as part of a * callexpression *", "i get type argument", "now i see an open paren", "i 'll try parse out the call argument", "this approach mean that * for every call expression with generic * , we have to perform step 1", "ii , through 1", "iv even though we be go to throw away the result", "while it be rare that you have to supply type argument , it be less - than - ideal to do a re - parse every time"], "issue_sim": [0.05522455275058746, 0.1978318691253662, 0.056802380830049515, 0.4737005829811096, -0.02040826715528965, 0.018350839614868164, 0.29053795337677, 0.1637195348739624, 0.10998456180095673, 0.43449199199676514, 0.2541404366493225, 0.35635906457901, 0.3567025661468506, 0.2988167405128479, 0.21180665493011475, 0.14131523668766022, 0.29890578985214233, 0.2765209376811981, 0.1661941558122635, 0.1672924906015396, 0.25473564863204956, -0.042844124138355255, -0.004050716757774353, 0.264512836933136], "prob": [0.0348982997238636, 0.002221322152763605, 0.0620393231511116, 0.08078961074352264, 0.0029888872522860765, 0.00026533222990110517, 0.0024592499248683453, 0.0001789091620594263, 0.00034095198498107493, 0.000327577959978953, 0.00011639660806395113, 0.00013845873763784766, 0.0006421071593649685, 0.00011676637950586155, 9.335535287391394e-05, 6.111872789915651e-05, 0.00023345228692051023, 9.682509698905051e-05, 0.00018407049356028438, 0.00038257052074186504, 0.009078696370124817, 0.0004244697920512408, 0.0005512323696166277, 0.02460860274732113]}, {"target": [8], "doc": ["thank you very much for all your support", ", * * but this be not a technical question", "of course , there be way to solve the problem to sort complex business object", "but in fact , this be the real problem / question :", "powershell have the great verb - noun concept", "we should not break it , because it allow we to use powershell in a very intuitive way", "i be pretty sure it be a great concept to hide complexity in modules , so that user of our module do not have to remember to use", "just to get business object in the right order", "to add a -sort argument to a get - specialthing cmdlet break the great verb - noun rule , because we would like to sort something and not to get something in a sorted way .", "the good way to sort complex object should be sort - businessobjects", "because it have the expect verb - noun naming : sort a business object", "it do not make to reserve verbs for internal command , just to have they reserve", "you probably recognize that english be my foreign language and i be fight with word"], "issue_sim": [-0.03437831997871399, 0.11674106121063232, 0.3249170780181885, 0.055575475096702576, 0.4180336594581604, 0.4179643392562866, 0.20783840119838715, 0.32939833402633667, 0.6318446397781372, 0.43331998586654663, 0.4085805118083954, 0.2882767617702484, 0.042746402323246], "prob": [0.015901124104857445, 0.2094651460647583, 0.025408446788787842, 0.03382772207260132, 0.0002753605367615819, 0.03650346025824547, 0.054145973175764084, 0.002008860232308507, 0.26117560267448425, 0.0034312354400753975, 0.00221392884850502, 0.008510771207511425, 0.004464586265385151]}, {"target": [0], "doc": ["you may want to wrap with inline function if you be call a handler with custom datum ."], "issue_sim": [0.4270527958869934], "prob": [0.999993085861206]}, {"target": [0], "doc": ["currently inheritance be break in ivy , so would not expect much ."], "issue_sim": [0.06201477348804474], "prob": [0.9999585151672363]}, {"target": [0], "doc": ["ah i see now , so the behavior be somehow similar to use <tag> on a component level when you use <tag> route", "and when the component instance be keep when you route between <tag> and <tag>", "and when it be also not a good idea to call <tag> hook manually", "i do n't know that it be also possible to use <tag> on a module level", "by the same way as on a component"], "issue_sim": [0.33235061168670654, 0.2628905177116394, 0.21519701182842255, 0.3381892740726471, 0.04389653354883194], "prob": [0.2880556881427765, 0.10736937820911407, 0.05775635316967964, 0.1167306900024414, 0.006487899459898472]}, {"target": [0], "doc": ["just run into this myself and notice that this break esm interop in node .", "per  it be possible to load esm file from commonj via <tag>", "therefore the dynamic import statement * * must * * not be transpile to <tag> call", "this be currently break when use typescript"], "issue_sim": [0.42734599113464355, 0.2846873700618744, 0.37774962186813354, 0.48703110218048096], "prob": [0.9407528042793274, 0.016235286369919777, 0.04696528986096382, 0.014766167849302292]}, {"target": [0], "doc": ["be n't this what <tag> do ?"], "issue_sim": [0.050964757800102234], "prob": [0.9999644756317139]}, {"target": [2], "doc": ["i definitely agree with that", "i believe that it be simply a risk that the user take when instal a mod that it could potentially do funky stuff to the game", "now that i be look back at your previous post , i just realize that you mean to restrict _ all _ script in the game , because most game would run just fine with the sandbox restriction .", "actually , the reason that i be worried about patch <tag> be because i be think that you would only restrict <tag> script", "before godot run a script , it would check it be resource path and put the script in sandbox mode if necessary", "that way , any code in <tag> would have the full gdscript api while any code in <tag> would have the limitation that you mention", "this would be even less intrusive for developer because it do n't change anything for <tag> code", "i have n't check out out the current implementation for run script , though , so i be not sure how easy that would be to set up", "restrict all script would probably be easy"], "issue_sim": [0.04738512635231018, 0.38159602880477905, 0.4746597111225128, 0.22347377240657806, 0.37775224447250366, 0.3789426386356354, 0.23459142446517944, 0.30086448788642883, 0.3620205223560333], "prob": [0.0003775914665311575, 0.012893838807940483, 0.19706451892852783, 0.004591782111674547, 0.002974070841446519, 0.04602834954857826, 0.0006768574821762741, 0.07081735879182816, 9.386561578139663e-05]}, {"target": [0], "doc": ["no . i be say that the current virtualdom diff&patch algorithm heavily rely on the fact that each child component always have exactly one root element , so it would break completely with more than one root node in a child component .", "and i be say that make it work with more than one root component be more complicated , it add additional logic , so it be a challenge to make this change without negatively impact render performance in the current implementation"], "issue_sim": [0.5601705312728882, 0.3207992613315582], "prob": [0.6926623582839966, 0.5616918206214905]}, {"target": [0], "doc": ["we would also need <tag> and <tag> cmdlet to set the default and enumerate instal version .", "this should probably end up be an rfc"], "issue_sim": [0.46274715662002563, 0.14346574246883392], "prob": [0.875586211681366, 0.09020888805389404]}, {"target": [1], "doc": ["i wish that be true ; it be my initial expectation , reflect in the first post", "however , as you point out , if the entire \" operation \" be an _ expression _  , <tag> reflect the _ expression 's _ success , not that of the embed command :", "<tag> yield <tag> , with the expression 's success eclipse <tag> 's failure", "exclude command in conditional make sense , but note that fail _ expression _ be still reflect in <tag> :", "this be a contrived example , but it lead i back to my point that perhaps _ expression themselves _ should _ never _ set <tag> , only _ command _", "and even if we assume that the current behavior be by design ,", "* the rule ,  , be hard to remember", "* the rule be n't adequately explain in"], "issue_sim": [0.0989408791065216, 0.1307263970375061, 0.12384656071662903, 0.37144437432289124, 0.21599850058555603, 0.3700588047504425, 0.035062894225120544, -0.0661584883928299], "prob": [0.13349978625774384, 0.23839615285396576, 0.10426578670740128, 0.009434713050723076, 0.6827790141105652, 0.014018174260854721, 0.006796058267354965, 0.0022439169697463512]}, {"target": [0], "doc": ["there be zero benefit of use cpu to render 2d , and zero hardware without. gpu support .", "this be never go to happen", "on mon , may <number> , <number> at 8:20 am , anatoly techtonik < notifications@github"], "issue_sim": [0.5509766340255737, -0.04314177855849266, -0.021446239203214645], "prob": [0.9945231676101685, 0.0005736316670663655, 0.07503580302000046]}, {"target": [1], "doc": ["that be what i be ask in op ;)", "there be only the documentation mention it be deprecate , but i do n't know what replace it and how to get rid of it without lose its functionality in the core gui node ."], "issue_sim": [-0.04231349751353264, -0.010541282594203949], "prob": [0.14408475160598755, 0.9706320762634277]}, {"target": [0], "doc": ["i think 3.0 would be for es3 and not vulkan"], "issue_sim": [0.6298149824142456], "prob": [0.9997449517250061]}, {"target": [0], "doc": ["shouldcomponentupdate might be add only to render functions & jsx section ."], "issue_sim": [0.4642036557197571], "prob": [0.9996293783187866]}, {"target": [1], "doc": ["i would n't mind implement it , but i seriously doubt this be possible", "maybe it be though through the compositing api in the different os. version , but it be definitely not that easy", "on we d , aug <number> , <number> at 11:21 pm , manson mamaril notifications@github"], "issue_sim": [0.07598468661308289, 0.1478813737630844, 0.12256047129631042], "prob": [0.17827314138412476, 0.7915904521942139, 0.009249833412468433]}, {"target": [1], "doc": ["@jhnns this be actually more closely related to another issue i   raise , # <number>", "basically , typescript never consider the narrowing of a _ value _ , e.g. <tag> as inplye anything about the _ type _ , e.g. <tag> , that value have .", "the reason why be this :", "in that function call , <tag> be <tag> , which mean it will pass <tag> and return <tag>", "but the definition of <tag> say that <tag> should be <tag> instead", "such as it be , be to use casting", "whether you do that by define a particular type ( e", "<tag> or by just write out <tag> , either work , but you basically be force to tell the compiler that you have do this right , which mean the compiler can not correct you if you have not , in fact , do it right", "which _ drastically _ limit the value of conditional type , in my opinion , since they will almost - always , necessarily , be unsafe at least within the internal of the function", "and plenty of case where <tag> be <tag> exist , which could be handle safely , but the ts team seem to be uninterested in go down that road"], "issue_sim": [0.20212417840957642, 0.5347994565963745, 0.016484487801790237, 0.43337810039520264, 0.2794496715068817, 0.07770504057407379, 0.27864810824394226, 0.38032323122024536, 0.31738996505737305, 0.38609880208969116], "prob": [0.002704344457015395, 0.2674718201160431, 0.003681291127577424, 0.06607569009065628, 0.02860608883202076, 0.000852925528306514, 0.002626370871439576, 0.2030690461397171, 0.10319028794765472, 0.17313100397586823]}, {"target": [11], "doc": ["i dig in the code a bit", "when the lazy route be visit for the first time , it will take the string or callback of loadchildren and load the lazy module", "once the lazy module be load , it will append an instance of loadedrouterconfig , name _ loadedconfig to that lazy route", "if the _ loadedconfig be present , it assume the module be load and will retrieve it", "delete the _ loadedconfig will cause it to re - initialize the module", "so i be scout for a work around and i have one problem and one blank :", "* i ca n't access the _ loadedconfig , it seem like the route get load into an injectiontoken route with usevalue , but the route in my own application , which i insert do n't show the internal object", "do usevalue clone they", "* i wonder that when you run", "get  on an injector if it prefer non - destroy provider / module over destroy one", "it seem to not care , because i destroy my module and it be still return service that be  functional", "i find it really weird that the instance be n't get truly destroy , they be set in a destroy state and destroy  be call on the underlie provider but my application seem mostly unaffected  ."], "issue_sim": [0.08031556010246277, 0.5702450275421143, 0.5585834980010986, 0.3624168634414673, 0.47221261262893677, 0.026011420413851738, 0.28338438272476196, 0.09002919495105743, 0.06911341845989227, 0.572193443775177, 0.44712650775909424, 0.4342663884162903], "prob": [4.8476144002052024e-05, 0.04844043403863907, 0.05629834532737732, 0.0009158174507319927, 0.0005756932077929378, 0.00024662597570568323, 0.04801652207970619, 5.651917490467895e-06, 7.00104328643647e-06, 0.007144283503293991, 0.0007126433774828911, 0.4587887227535248]}, {"target": [4], "doc": ["i be also run into this or a similar issue", "essentially , i have a _ child _ view that need to open up an auxiliary view in the _ parent _ view", "i try to do :", "but this remove the _ child _ from render and leave the url in an invalid state", "i know that i could inject the <tag> and navigate programmatically relative - to the <tag> ; but , i be hope to keep this in the html as much as possible ."], "issue_sim": [0.1127113327383995, 0.22206853330135345, 0.03421040624380112, 0.2744206488132477, 0.4145839810371399], "prob": [0.010212864726781845, 0.14750859141349792, 0.0075571900233626366, 0.014931880868971348, 0.628813624382019]}, {"target": [5], "doc": ["i would like to know if tsserver could give the option to use position instead of use line / column", "i be integrate tsserver inside eclipse which use position instead of use line / column", "i can convert position to line / column for completion , etc but now i have a big problem with \" change \" command", "for the moment , i use \" reload \" command  to synchronize editor content with tsserver , but i would like to use \" change \" command  provide i just position and iit 's impossible to retrieve the end line / column", "imho , i think tsserver should provide position option :", "to avoid convert every time on tsserver side line / column - > position for client editor which already support position", "- to use \" change \" for client editor which can support th eretrieve of end line / column when editor change"], "issue_sim": [0.5294158458709717, 0.5534815192222595, 0.43134498596191406, 0.6099878549575806, 0.2860066592693329, 0.5322455167770386, 0.3729320168495178], "prob": [0.04144113510847092, 0.03459804505109787, 0.03684461489319801, 0.4675721824169159, 0.0004227885219734162, 0.005564205814152956, 0.022437315434217453]}, {"target": [1], "doc": ["a v - swap for change element would be a killer feature", "so that you can trigger a \" refresh \" on something like : src if you want to trigger animation when change stuff ."], "issue_sim": [0.3160362243652344, 0.43460533022880554], "prob": [0.04424713924527168, 0.8236480355262756]}, {"target": [2], "doc": ["@trotyl : i think you miss my point", "of course the * * output * * should be javascript  because that be what the browser run", "my point be about the * * input * * : use kotlin as an input to the angular compiler , instead of typescript ."], "issue_sim": [-0.04135659337043762, 0.28211718797683716, 0.6529629230499268], "prob": [0.0033602281473577023, 0.03177989646792412, 0.9706699252128601]}, {"target": [0], "doc": ["as say in the pr , you should use plain object instead of <tag> for mixin :", "you can achieve something similar with <tag> too :"], "issue_sim": [0.28475677967071533, 0.022125985473394394], "prob": [0.7213584184646606, 0.05927237868309021]}, {"target": [2], "doc": ["as # <number> be close with # <number> now it seem that this issue be out of scope", "do you now have any plan on implement different access modifier", "because <tag> be not enough to solve what be describe here as a property might be actually writable inside a class ."], "issue_sim": [0.22283083200454712, 0.33781009912490845, 0.46805548667907715], "prob": [0.005926191341131926, 0.001719971769489348, 0.9732635021209717]}, {"target": [1], "doc": ["a code split library", "even though that look like a bad idea , you should put those component in the same chunk"], "issue_sim": [0.16349628567695618, 0.3014926314353943], "prob": [0.03243847191333771, 0.9194532632827759]}, {"target": [1], "doc": ["you have a problem with the creation order of the service and the interceptor", "the service creation have to be finish before the interceptor be create .", "if you call the http request in the service constructor , the interceptor instance be create during the service creation", "extract the http request in a method and make the call in the component"], "issue_sim": [0.30019819736480713, 0.3897193670272827, 0.662404477596283, 0.3412463068962097], "prob": [0.014247631654143333, 0.9827019572257996, 0.011707663536071777, 0.0008527667378075421]}, {"target": [3], "doc": ["take a look at this axis module from ngx - chart :", "the designer have to repeat the name of every single component <number> time", "i imagine that be because all of the component should have access to the common , but which one", "if want to move the <tag> to a completely different project do i actually need the <tag> or be this just something that be throw in here for the sake of development flow ?", "i also do n't think this module format follow the current recommendation for angular"], "issue_sim": [0.23539134860038757, 0.203415185213089, 0.2800132632255554, 0.3944263160228729, 0.3274741768836975], "prob": [0.017977388575673103, 0.016784943640232086, 0.08245231211185455, 0.6350036859512329, 0.010268372483551502]}, {"target": [2], "doc": ["i have no strong preference about type", "i be only think about format", "also i 'd do n't add such change because it complicate backporting script ."], "issue_sim": [0.10625101625919342, 0.07731077820062637, 0.38351041078567505], "prob": [0.0072868457064032555, 0.004772125277668238, 0.9894053339958191]}, {"target": [1], "doc": ["look at it again , i really do n't see a difference between this and # <number> that do n't imply a massive breaking change", "<tag> can be write cromulently either in the presence of a true inference source  , or as a curried function , or with # <number> .", "i do n't see any other path forward on this"], "issue_sim": [0.24053740501403809, 0.34209010004997253, -0.0014426615089178085], "prob": [0.4501824378967285, 0.861266553401947, 0.0005057410453446209]}, {"target": [0], "doc": ["if everyone use the same json data structure to store animation , it will be less work for everyone to write new runtime / exporter / importer .", "it will also motivate more animation software devs to support it", "the reason i be push for dragonbones , be that it already have good support / community , it be open source and be document :)", "@reduz i know mesh deformation be not do yet , i guess my issue ticket here be for the future , when godot support it- to make an importer  for json dragonbone animation datum file type", "the advantage of have it in a file be that other software such as dragonbone editor and even blender can edit it / overwrite it / etc - not just godot", "blender be much well suit   for animation authoring- it have a much well graph editor and dopesheet , much more advanced rigging tool"], "issue_sim": [0.546993613243103, 0.33134374022483826, 0.21933192014694214, 0.5388809442520142, 0.41959911584854126, 0.4009731113910675], "prob": [0.7153087854385376, 0.003498296020552516, 0.42931416630744934, 0.00945242214947939, 0.0455285981297493, 0.009386618621647358]}, {"target": [0], "doc": ["change title and meta be really important for professional website , ca n't live without it .", "vue team should take this as high priority and make this happen", "how could this simple feature make unavailable to vue"], "issue_sim": [0.260639488697052, 0.2161141037940979, 0.1333768665790558], "prob": [0.9916315674781799, 0.004976741038262844, 0.007034312933683395]}, {"target": [0], "doc": ["i guess it be for the script to be more portable .", "i add the break change label"], "issue_sim": [0.08718366175889969, 0.22421321272850037], "prob": [0.9930657148361206, 0.0019554358441382647]}, {"target": [0], "doc": ["look good to i , but i think \" close tab above \" and \" close tab below \" would be easy to understand ."], "issue_sim": [-0.01943584904074669], "prob": [0.9999966621398926]}, {"target": [4], "doc": ["also , private variable can even be useful on a personal project", "there be sometimes period of time i can not work on the game that i be work on , so i start forget what some of my function do", "or , i forget which one i should and should not use", "private variable would be great with this", "it would make sure that a variable or function can not be access outside of a node , and when i come back to a project i could guess how to use a variable and not have to read through all of my code completely again .", "i second what byteron and dylmeadow say as well", "they just write their post well enough and say exactly what i be think", "just want to add my two cent"], "issue_sim": [0.31743764877319336, 0.19744862616062164, 0.023553388193249702, 0.295668363571167, 0.520724892616272, 0.0002017403021454811, 0.10935434699058533, -0.021466851234436035], "prob": [0.015325046144425869, 0.8562408685684204, 0.021639380604028702, 0.0025049238465726376, 0.899878203868866, 0.00490631302818656, 0.05494842305779457, 0.004239805042743683]}, {"target": [0], "doc": ["yes it will , because inline style have the high specificity"], "issue_sim": [0.258998304605484], "prob": [0.9998843669891357]}, {"target": [1], "doc": ["i 'd love to see this discuss , or move forward", "to i , move runtime exception out of js into hard compile - time error in typescript be one of the strong point of typescript to begin with ."], "issue_sim": [0.06353078782558441, 0.4887574315071106], "prob": [0.005026873201131821, 0.9961169958114624]}, {"target": [0], "doc": ["scoped slot be hard to reason about since they be compile inside the component which be not visible  .", "but the main issue with they be that there be already a way of achieve the same behaviour with component and prop which be concept already exist in vue", "moreover scoped slot be not possible in vue <number> : you can pass component or function and easily use they in render function", "your code snippet be work nicely and you can still use it if you prefer use the scoped - slot syntax", "you may consider use <tag> to handle name modification", "you should share it as a lib so other can benefit from it too"], "issue_sim": [0.5002245903015137, 0.43090248107910156, 0.5346992015838623, 0.2934052348136902, 0.24398010969161987, 0.06140890717506409], "prob": [0.7611865401268005, 0.22330686450004578, 0.19413314759731293, 0.143392413854599, 0.0004473318695090711, 0.0023215070832520723]}, {"target": [0], "doc": ["right , stupid i , it would only emit two time on routing , previous one will emit false and new one will emit true .", "do n't know why i think different )"], "issue_sim": [0.4200504422187805, 0.03429042547941208], "prob": [0.9059963226318359, 0.016235103830695152]}, {"target": [1], "doc": ["<tag> could be cool", "generally i would like to not have angular core extend - more feature mean more bug and more maintenance .", "this potentially would postpone release of the core"], "issue_sim": [0.12570831179618835, 0.21154575049877167, 0.04826238751411438], "prob": [0.04439180716872215, 0.9121522307395935, 0.06256505101919174]}, {"target": [1], "doc": ["here another <tag> that i run right after i finish record the video :", "as you can see from the video , during the first <tag> , online - only file get download , but <tag> still report they as online - only . by the time the second <tag> run , file be already download , so it mark they appropriately ."], "issue_sim": [-0.060886189341545105, 0.32630228996276855], "prob": [0.2938680946826935, 0.6149253845214844]}, {"target": [1], "doc": ["why i revert your commit for new theme be that it change default theme a lot as i say before", "old default theme be very useful when make prototype .", "this be most important reason", "so i need to revert it , could not change one by one", "i know and feel what you have do be great", "but it do not provide proper visual than old one for general", "how about find a way to look well , base on this"], "issue_sim": [-0.054693855345249176, 0.01167966052889824, 0.2275686264038086, 0.029153812676668167, -0.05118158459663391, 0.013335663825273514, -0.03502664342522621], "prob": [0.22377221286296844, 0.9394655227661133, 0.0005916947848163545, 0.04465144872665405, 0.002971172332763672, 0.030337493866682053, 0.021767232567071915]}, {"target": [2], "doc": ["ok , as i say before , i use azure as an example ; my apology for the red herring here @maximotrinidad", "invokebuild be the module i be actually try to install", "on my machine , the module download , but do not appear to install correctly :", "i see your <tag> be new than mine", "i 'll try update wsl and see if that make a difference"], "issue_sim": [0.010238418355584145, 0.3689868748188019, 0.351692259311676, 0.07078106701374054, 0.10340982675552368], "prob": [0.21478374302387238, 0.07502169907093048, 0.5157486200332642, 0.02904479391872883, 0.05115215852856636]}, {"target": [0], "doc": ["which also mean that people will choose not to install the readme.md or license file to avoid overwrite their own / that of another plugin , and thus miss potentially important info in the readme .", "md , and potentially violate the license if it be one that require to distribute the full license text and it be not hardcode in the plugin 's file"], "issue_sim": [0.32315778732299805, 0.3536306619644165], "prob": [0.7948738932609558, 0.4873732626438141]}, {"target": [0], "doc": ["aot require typescript , but you can at least do the tree shake part since it target es2015 js module and not typescript .", "rollup be a tree shaker that will work for plain js as long as you give it es2015 js", "the tree shake section in the doc : <url>", "should work for a plain js project as well", "notice how the input to rollup be js and not ts", "obviously this be not as nice as be able to do both aot and tree shake , but it be at least well than nothing :-)"], "issue_sim": [0.6920115947723389, 0.37579599022865295, 0.11829207837581635, 0.42229586839675903, 0.3906667232513428, 0.234699085354805], "prob": [0.8261388540267944, 0.1256427764892578, 0.0014910944737493992, 0.002071633003652096, 0.0028048844542354345, 0.44909659028053284]}, {"target": [2], "doc": ["i do n't see the point other than style preference", "what make it different from , say <tag> and <tag>", "if these method on be invoke on the instance then they should n't be nest ."], "issue_sim": [0.06118699163198471, 0.1927318423986435, 0.4065547585487366], "prob": [0.06835006922483444, 0.2750495970249176, 0.5829665660858154]}, {"target": [0], "doc": ["if we be go to change build system , i 'd rather it be to waf than to cmake .", "and @caitp seem to be work on that now , so let 's wait to see how that go"], "issue_sim": [0.6584208011627197, 0.11060409247875214], "prob": [0.7913111448287964, 0.07682795077562332]}, {"target": [1], "doc": ["we now have multiple choice for scripting language", "why not also have more than one choice for visual scripting :)", "i guess this could also depend on how flexible godot 's api be for build visual scripting interface", "should the visualscripte codebase be reuse - or should a completely alternative one be write with nativescript", "can this just be implement as a gdscript addon"], "issue_sim": [0.12882617115974426, 0.28336775302886963, 0.3741520047187805, 0.22465765476226807, 0.23669801652431488], "prob": [0.002773839980363846, 0.07119865715503693, 0.000571628799661994, 0.18686819076538086, 0.00689336471259594]}, {"target": [3], "doc": ["i like the direction that this be go", "i wonder if we should have the \" try it now \" button on the landing page far up", "\" why do you have to scroll all the way to the bottom to get to that link", "i also like the try it now button at the top of the page .", "@bampakoa thank for put some thought into this", "what would be the next step if we move forward"], "issue_sim": [0.1321244239807129, 0.43515175580978394, 0.23357218503952026, 0.351659893989563, -0.005153311416506767, 0.11098083853721619], "prob": [0.026309330016374588, 0.3178078830242157, 0.5415381193161011, 0.10574863851070404, 0.00024561892496421933, 0.025005148723721504]}, {"target": [0], "doc": ["ok - so if the user be log out , after the session be clear , why ca n't. you force the window to reload ?", "do n't that solve the problem", "href = restartlocation;},1 )", "on thu , jun <number> , <number> at 3:44 am eddy * * * @ * * *", "* * * > write :"], "issue_sim": [0.3374650478363037, 0.03658875823020935, 0.03354727476835251, -0.012549132108688354, -0.07576793432235718], "prob": [0.9145604372024536, 0.010682359337806702, 0.009796625934541225, 0.10234996676445007, 0.00047121444367803633]}, {"target": [3], "doc": ["i would love to see that happen", "i be try to use vue", "js with nashorn too", "it will be great if vue.js ssr add interface such a filesystem or engine to externalize. some functionality that be bind to node.js", "i 've make some research :", "<tag> in all place can be abstract", "currently use <tag> , <tag> , <tag> , <tag>", "<tag> in all place can be abstract too", "currently use <tag> , <tag>", "only one usage <tag>", "accord to doc and soruce code this only wrap script code with", "so this be can be replace with function if we be not on node", "<tag> , <tag> use in create-bundle-runner", "this file can be somehow abstracted :) not sure how and what interface could look", "<tag> , <tag>   todo   :)", "i make small modification in source code to get rid of <tag> and <tag>", "only createrenderer  and remove path and stream require", "after browserify - > <number> kb", "after browserify run - > <number> kb", "after browserify - > <number> kb"], "issue_sim": [0.0346798449754715, 0.07193118333816528, 0.3759760856628418, 0.6021412014961243, -0.07873515784740448, -0.0024474896490573883, 0.20439749956130981, 0.0423111729323864, 0.15959620475769043, -0.059462569653987885, 0.10438863933086395, 0.353973925113678, 0.070371113717556, 0.26716873049736023, 0.1128242015838623, 0.1914081871509552, 0.1879648119211197, 0.3830956816673279, 0.38455966114997864, 0.3830956816673279], "prob": [0.08646313846111298, 0.000558986677788198, 0.003091330174356699, 0.526953935623169, 0.020477304235100746, 0.0014517486561089754, 0.021213650703430176, 0.012457176111638546, 0.0025156354531645775, 0.0035648662596940994, 0.041783176362514496, 0.005942049436271191, 0.006385881919413805, 0.021995816379785538, 0.004251755308359861, 0.04101618379354477, 0.004165796097368002, 0.0007592270849272609, 0.0018409527838230133, 0.0042991433292627335]}, {"target": [1], "doc": ["this appear to be <tag>", "any table view have padding .", "any non - table view , i make a pr  to remove padding and linebreak"], "issue_sim": [0.04937070235610008, 0.1299755573272705, 0.2962244153022766], "prob": [0.0243642870336771, 0.8662110567092896, 0.10195065289735794]}, {"target": [0], "doc": ["i assume that be just a practical decision as for most usecase you 'd only be interested in a boolean value .", "follow the value rather than check attribute would mean it be a string value set to \" on \" or undefined", "which be awkward to handle", "if you really want this behavior you can just implement your own controlvalueaccessor , though"], "issue_sim": [0.3484828770160675, 0.534832239151001, 0.06973923742771149, 0.2712089717388153], "prob": [0.576216459274292, 0.08040760457515717, 0.0011091992491856217, 0.09667746722698212]}, {"target": [0], "doc": ["the technical challenge be not with the conversion of template to render function , it be with the implementation of the virtualdom which the render function build node for .", "each child component be represent in its parent virtual   dom by a single <tag>", "in the current implementation , the diffing algorithm  can rely on the fact that every vnode of a child component have a single matching html element in the real dom , so the next vnode in the virutaldom after the child component vnode be guarantee to match the next html element in the real dom", "allow fragment require significant change to that algorithm , since we now would somehow have to keep the parent inform at all time about how many root nod the child be currently manage in the real dom , so when the parent re - render , it know how many html - elements it have to \" skip \" to reach the next html element that do n't belong to the child component ,", "that be a * very * intricate / complicated piece of code at the heart of vue , and it be critical for render performance - so it be not only important to make it work * correctly * but also to make it * highly performant *", "that be a pretty hefty task", "as evan mention , react wait for a complete re - write of its rendering layer to remove that restriction"], "issue_sim": [0.29585421085357666, 0.4145929515361786, 0.5200686454772949, 0.5455837845802307, 0.2616090178489685, 0.05716610699892044, 0.2463228404521942], "prob": [0.24338828027248383, 0.013822509907186031, 0.7479966282844543, 0.3462008535861969, 0.3394477665424347, 2.2874282876728103e-05, 0.00988271739333868]}, {"target": [10], "doc": ["okay , thank you guy", "so here be the deal after i do some testing", "i be now use a kinematicbody2d that utilize _ process instead of _ fixed_process to move the character", "this work flawlessly on both 60hz and 144hz with no jitter whatsoever", "the only problem now be when your character on a 144hz monitor push against a collision shape", "the kinematicbody2d go back n forth and create a jitter", "to fix that , you need to set fixed_fps to <number>", "also , another way to fix that , set the force_fps to <number>", "but if you set the force_fps to <number> , then there be jitter when you move", "and if you set the fixed_fps to <number> , the godot user who do n't have a 144hz monitor will experience jitter", "we need a way to programmatically get the user 's monitor refresh rate and use it to set setting in godot .", "or game can not be ship and work with 144hz and 60hz monitor", "that be a big problem"], "issue_sim": [0.01221274584531784, -0.011264386586844921, 0.11830508708953857, 0.5163617730140686, 0.5134102702140808, 0.16591855883598328, 0.14213058352470398, 0.07236124575138092, 0.3262467682361603, 0.6290520429611206, 0.5839786529541016, 0.5071114301681519, 0.04117094352841377], "prob": [0.004320941865444183, 0.00013473529543261975, 0.001157349324785173, 0.0013696816749870777, 0.0009325822466053069, 0.0009443810558877885, 0.0002686333318706602, 0.0009133427520282567, 0.0008214836707338691, 0.006962392013520002, 0.45822012424468994, 0.0009194790618494153, 6.953789852559566e-05]}, {"target": [10], "doc": ["sure , <tag> be a little bit short than <tag> , but it still miss the mark for beginner get into godot , and these be folk that should n't be ignore", "i mean , if you can write \" root / myrootnode \" and not even flinch at how obviously counter - intuitive that string be to a beginner , then you 've get to the point where you have entirely take it for grant", "and write the name \" myrootnode \" make it non - portable", "get the last child of root be more portable  , but that be way hairy", "to anyone who challenge a different way of do something as against the \" rule of godot \" , you sound like you be far from the mentality of a teacher or be apathetic to beginner", "part of the learn curve toward do thing the \" right way \" frequently involve do thing the \" wrong way \" first", "for example , i be grateful for <tag> , because use this to teach spawning node make it much easy to transition to <tag>", "of course , use package scene be most time well than clone a \" mother \" node , but beginner have trouble abstract the idea of a branch of a tree in a totally separate scene", "duplicate thing within a single scene be much more intuitive", "by do thing the \" wrong way \" , we can learn about tree and add child before tackle the more conceptually challenge part", "add a feature like <tag> to find any node in the scene tree wo n't get in the way of those use godot the \" right way , \" but can help beginner get off the ground with godot , make the engine more attractive to teacher .", "something like this go a long way to bring attention to godot"], "issue_sim": [0.2852245569229126, 0.2734981179237366, 0.07573788613080978, 0.33384549617767334, 0.19900712370872498, 0.1906440258026123, 0.3979411721229553, 0.49887099862098694, 0.3273546099662781, 0.30203408002853394, 0.6282665729522705, 0.25539886951446533], "prob": [0.10544966161251068, 0.3969334065914154, 0.002124527934938669, 0.0037537661846727133, 0.262084037065506, 0.001731863827444613, 0.024358460679650307, 0.029273897409439087, 9.477054845774546e-05, 0.00966822449117899, 0.1952245533466339, 0.0005991311045363545]}, {"target": [3], "doc": ["@herringtondarkholme very good point", "after think about it , i almost think all these issue you mention would be well solve with rx", "with  the original example can be write as :", "the rx version be obviously more verbose than the simple promise version , but here we get almost everything @herringtondarkholme list : default value , throttling and side - effect subscription", "if fetching be commonly use , with a little helper the above can be far simplify :", "to sum up , i think while the async compute pattern be simple and elegant for the basic use case , it may not be sufficient to deal with the full scale complexity of async operation .", "while we can shoehorn the async compute pattern to deal with these case one by one , at that stage you 'd probably be well off just go with rx", "so unfortunately , i be close this", "note this be not say that this be a bad idea - i think it be still a good idea to let the <tag> library evolve on its own and maybe land on a good balance , but it be probably not the good idea to do that in core"], "issue_sim": [-0.028242524713277817, 0.22721394896507263, 0.060896988958120346, 0.3004131615161896, 0.26957735419273376, 0.4265151023864746, 0.33366382122039795, -0.06685659289360046, 0.23554405570030212], "prob": [0.00474953930824995, 0.19537007808685303, 0.009190455079078674, 0.18966780602931976, 0.00674555404111743, 0.0603962168097496, 0.03810828551650047, 0.0003661954833660275, 0.11689203977584839]}, {"target": [0], "doc": ["it be simple to do the way godot do it , and also have some advantage such. as well remote debugging and live editing", "on we d , aug <number> , <number> at 11:37 pm , manson mamaril notifications@github"], "issue_sim": [0.3893413245677948, 0.1744958907365799], "prob": [0.8962635397911072, 0.03682650625705719]}, {"target": [1], "doc": ["this would be very nice , i 've yet to find an easy way to implement a global \" warning when pend change \" service", "with something like this i could iterate over active component on the page , and call a specific method on they ask whether they have pend change or not ."], "issue_sim": [0.3526381254196167, 0.5639258027076721], "prob": [0.11220410466194153, 0.8891457915306091]}, {"target": [1], "doc": ["this be interesting , since patch release often have security patch in they", "in this sense , patch release be much more important than major version release to the people see they .", "to this end , i would imagine there be many user who be on ps <number> lts who do n't want a notification for ps 7", "1 or <number> , but who really need to see one for ps 7", "i believe this be exactly how the lts update channel be configure to function currently", "i think the assumption in the issue here be that big version increment mean that there be more goodness mean that you should be more likely to upgrade", "but really it be the opposite", "small version increment mean more relevant to your current installation mean you have more to gain and less to lose by upgrading", "the version update notification be n't market , it be powershell 's current solution to the update problem give that its installation be manage in different way across different platform"], "issue_sim": [0.18967847526073456, 0.2703825831413269, 0.206646129488945, 0.0683605819940567, 0.41739600896835327, 0.3032771348953247, 0.01453145407140255, 0.37081488966941833, 0.4786086678504944], "prob": [0.00328713352791965, 0.7435063719749451, 0.004125082399696112, 0.00011297111632302403, 0.0012415177188813686, 0.031505417078733444, 2.0529370885924436e-05, 0.003594551235437393, 0.1295265108346939]}, {"target": [2], "doc": ["i would n't use an intermediate language , actually , or maybe use the reflection / variant system , which be already a dynamic interface to the engine", "i understand that it would reduce the requirement for the module creator", "however , since inheritance it be heavily use in the engine , how would you inherit from node , reference , or resource ?", "also , theoretically , if you setup a standard build system for a module on each platform you want to support , you can easily update module for new version of godot", "at the same time , i be curious about what will be the good solution", "i 've work on a few project involve dynamic module and realize a lot of problem need to be solve", "my last engine project be litteraly design around load module dynamically", "just like with godot , they have access to all the engine  , assume they wo n't change during execution because it be too much work to maintain validity of object", "so add or remove native module require to restart the engine , but from a user 's point of view , that be way well already than have to setup a whole environment to build everything for any platform"], "issue_sim": [0.3703479766845703, 0.38653385639190674, 0.2326258420944214, 0.6109635233879089, 0.16760945320129395, 0.3902622163295746, 0.4212508201599121, 0.30847787857055664, 0.4354671537876129], "prob": [0.44101962447166443, 0.0334007665514946, 0.1764863133430481, 0.21515659987926483, 0.00033463005092926323, 0.011512539349496365, 0.00045903061982244253, 0.1061282604932785, 0.07846593856811523]}, {"target": [0], "doc": ["have different file in program from what they be in <tag> be bad idea as that result in discrepancy or error / non error and that get confuse .", "i think the idea of different program to support the auto import seem well one"], "issue_sim": [0.2113153338432312, 0.34258294105529785], "prob": [0.9826406836509705, 0.002804382471367717]}, {"target": [1], "doc": ["be there any way to disable the nag", "also , imho , the upgrade should be come through window update ."], "issue_sim": [0.2773808538913727, 0.442764014005661], "prob": [0.026340676471590996, 0.8770104646682739]}, {"target": [4], "doc": ["before we jump to \" solution \" , can we verify the problem first", "why do <tag> have to be a compute property", "do it really need the reactivity", "how often do a message need to be re - parsed", "it seem edit a message be a very low - frequency action - why ca n't it be parse once the moment a message be create , and have an explicit action for edit an exist message ?"], "issue_sim": [0.11377854645252228, 0.32487258315086365, 0.16764968633651733, 0.1806894838809967, 0.23824574053287506], "prob": [0.04264943674206734, 0.09747497737407684, 0.010497511364519596, 0.04686199501156807, 0.8313807249069214]}, {"target": [0], "doc": ["you may have a component that be show up yet be wait for some async resource to be available .", "although null could be use too but this may be tricky for some user"], "issue_sim": [0.33308500051498413, 0.25978899002075195], "prob": [0.8841350674629211, 0.0019070670241490006]}, {"target": [10], "doc": ["since i be the op of the item in question , i think i 'd provide a little more insight into what i be try to do and how i get to the bad <tag> use", "first , here be a simplified version of the code i be try to use :", "$ list = @", "$ pointer =  $ list", "value + = @ { datavalue = $ field", "value ; child = @  }", "i hope this code explain why i be try to point to an array element instead of just use the parent variable contain the array", "second , i do understand that there might be an issue with array concatenation , that be why i first attempt to test with a simple <tag> to an array variable", "see that it work  , i make an incorrect assumption that i could create a persistent pointer to an array member", "when that do n't work , i look for an explanation at so , which i receive", "so , now i know that create reference to a piece of datum have no practical use , and i should be fine use <tag> go forward as long as i know what be just datum and what be a reference to datum  ."], "issue_sim": [0.12760654091835022, 0.17565087974071503, 0.10227059572935104, 0.15348732471466064, 0.19169874489307404, 0.014829671010375023, 0.34268325567245483, 0.3885248005390167, 0.3541543483734131, -0.028143061324954033, 0.36511000990867615], "prob": [0.24545951187610626, 0.024657363072037697, 0.0027755408082157373, 0.0008169896900653839, 0.0005890461034141481, 0.0017947520827874541, 0.550815999507904, 0.1994139850139618, 0.012219499796628952, 0.011487724259495735, 0.439159631729126]}, {"target": [0], "doc": ["a time zone and an utc - offset be not the same !", "that mean actually you would have to calculate the offset for every date you be display"], "issue_sim": [0.4577925205230713, 0.25784194469451904], "prob": [0.3968338966369629, 0.45574456453323364]}, {"target": [3], "doc": ["i 'll give our opinion about some renaming that would be usefull for we", "the renaming that we strongly suggest :", "<tag> - > <tag>", "for example the spatial have the transform that we can access , but many time we write \" this.transform.origin \" for well readibility , if we change \" transform \" to \" transform \" , we would n't need to use \" this \" all the time .", "that be our personal opinion", "we also support change \" label \" to something like \" textlabel \"", "or at least when we search by \" text \" when add the new node , \" label \" should appear , since it be totally related", "the constant for some predifined color should be access with <tag> in contrary to <tag>", "for the rest of the proposing rename we look forward to what the community think be well"], "issue_sim": [0.16130012273788452, 0.10187654197216034, 0.052773647010326385, 0.3827424943447113, 0.012930866330862045, 0.2238733470439911, 0.2996276617050171, 0.10390764474868774, 0.11380381882190704], "prob": [0.19298580288887024, 0.03876946493983269, 0.008970101363956928, 0.5726267099380493, 0.0016288126353174448, 0.022610444575548172, 0.07719344645738602, 0.04510447010397911, 0.10627555847167969]}, {"target": [0], "doc": ["but you be assume that all project have that structure , which be simply not true .", "i can have <tag> which contain component locate in <tag>", "therefore switch to such a structure be a force breaking change"], "issue_sim": [0.1623150259256363, 0.2849198579788208, -0.018550341948866844], "prob": [0.7644617557525635, 0.16584038734436035, 0.0344955176115036]}, {"target": [1], "doc": ["@petseral : thank for the background info and the helpful example", "first , let i say that my example be obviously contrived and this issue may rarely , if ever , arise in the real world - of course , if you be explicitly construct an array / collection , wrap it in <tag> be pointless .", "in the follow example i 'll use something _ other _ than an array for illustration , namely an _ empty _ <tag> instance", "if i understand you correctly , you be say that :", "the equivalent of this _ cmdlet_-base statement :", "be the follow _ expression_-base statement :", "this equivalence in itself be puzzle - why would n't the equivalent be just <tag> , without the wrapper array", "it seem to i that there be * * no good _ conceptual _ reason for <tag> to wrap the instance create in an outer , single - element array * * when write to the pipeline - but , if i understand you correctly , * * do so be a _ technical necessity _ * * , because the collection instance would otherwise invariably be convert to <tag> on output , correct", "here be another example of where the distinction be puzzle , at least to those not intimately familiar with the inner working of powershell , and take that perspective  be the reason for create this issue :", "the fact that * * <tag> cause unwrap of _ pipeline _ output * * be also far from obvious :", "incidentally , that make inspect the true output generate by <tag> all but impossible :", "give that this seemingly come down to the fundamental of pipeline behavior , there be probably nothing that can be do - except perhaps consider include the finding in a collection of yet - to - be - create advanced help topic", "unless someone think that an actionable change be warrant here , i 'll close this issue soon"], "issue_sim": [-4.0745362639427185e-05, 0.41370120644569397, 0.2960883378982544, -0.03392689675092697, 0.14808644354343414, 0.06490880250930786, 0.2930930256843567, 0.5020400285720825, 0.3446420431137085, 0.2976306080818176, 0.18065395951271057, 0.2981920838356018, 0.05797886475920677], "prob": [0.043276939541101456, 0.4042207896709442, 0.01206341665238142, 0.0005374306347221136, 0.002854718128219247, 0.0006632385193370283, 0.23656830191612244, 0.05104689300060272, 0.01671747863292694, 0.0018665093230083585, 0.009489390067756176, 0.4233798086643219, 0.0035652187652885914]}, {"target": [0], "doc": ["we be currently use a mix of what toddmotto suggest and make api call to fetch title , meta tag via our cms :", "would love to have default define on a route basis", "to be honest , even have the current state and it be data property on navigationend would help i :)", "also , we 'd like to localise those default title : <tag>"], "issue_sim": [0.3397938013076782, 0.15032823383808136, 0.12103539705276489, 0.17550915479660034], "prob": [0.6629307866096497, 0.07376860082149506, 0.4083489775657654, 0.02853606641292572]}, {"target": [0], "doc": ["you can disable the update check by set a user or system environment variable call <tag> to <tag> but i would n't recommend do that unless this * * really * * bother you ."], "issue_sim": [0.47906494140625], "prob": [0.9999840259552002]}, {"target": [1], "doc": ["this could be a solution for these kind of issue # <number> , # <number> , # <number> by load module not component directly", "component to render dynamically can be query from module use a value provider get ."], "issue_sim": [0.5623817443847656, 0.582368016242981], "prob": [0.0030682715587317944, 0.9640547633171082]}, {"target": [0], "doc": ["meta information for seo purpose do n't need to be dynamically update if at all .", "this be due to service mechanism to query your website , for a page url they will index by the initial synchronous request", "that mean that even if you update via js , search engine will most likely not index this way probably wo n't ever as this be indeterministic", "the good way to optimize for seo purpose be to statically generate your content for consumption by web crawler", "or manipulate the head with the correct meta content , at server level", "this be fairly simple to achieve by inject the content into the head of the serve document", "the only real exception for user experience be to dynamically update the title of the document", "other than that there be no true benefit of update the title dynamically", "there be exception such as addthis which will require manipulation via there client api to ensure that on use the client functionality that the content be set as prefer", "plugin that manipulate the while ' head ' of the document be generally fairly expensive for there purpose", "there be probably no reason you should be update the head completely to regenerate the meta data client side", "that say , it be certainly on our agenda , to provide some more information for good practice when it come to this common scenario", "we be plan to form a cookbook to provide this sort of information", "perhaps ask in the vue forum may be of aid , as there may be other that could provide there opinion in this subject"], "issue_sim": [0.33510053157806396, 0.3085663318634033, 0.27002429962158203, 0.25502729415893555, 0.16981929540634155, 0.2508288025856018, 0.3795495629310608, 0.2207108736038208, 0.4668542146682739, 0.23378175497055054, 0.4463759660720825, 0.18439102172851562, -0.006745580583810806, 0.04568099230527878], "prob": [0.4007467031478882, 0.0033042568247765303, 0.17634615302085876, 0.02002255618572235, 0.0016324857715517282, 0.005145105998963118, 0.004162982571870089, 0.0008983241277746856, 0.20708809792995453, 0.002994076581671834, 0.0035037475172430277, 0.014464633539319038, 0.0022721984423696995, 0.03433582931756973]}, {"target": [2], "doc": ["i be encounter the same problem : <url>", "my use case be also to validate a store token", "i be use the <tag> workaround for now ."], "issue_sim": [0.07802359759807587, 0.2663629651069641, 0.1479026973247528], "prob": [0.15827421844005585, 0.060266848653554916, 0.35690033435821533]}, {"target": [0], "doc": ["i agree that most user wo n't likely have more than one version of pscore6 instal which be why this issue be n't <tag> for i .", "current solution be to use the full path and advanced user will know what they be do", "app that distribute pscore6", "x will treat it as a library not should not be expect to be use by the end user", "some app will be fine with any version of pscore6 be available while other may have dependency on specific version for various reason", "app should not change the system default"], "issue_sim": [0.25577259063720703, 0.1842723786830902, 0.059290364384651184, 0.05833311378955841, 0.20041608810424805, 0.09651020169258118], "prob": [0.7689364552497864, 0.08603015542030334, 0.0007111474988050759, 0.04436907917261124, 0.37095195055007935, 0.0033136033453047276]}, {"target": [0], "doc": ["i think it can simply be resolve by add an order to same level resolve .", "the router have the context of every resolver in the same level so if it just check for an order it can allow resolver on the same level to get each datum", "the real issue be for some reason it be make to not add the resolve datum until all resolver finish which make sense in context just do n't hit our use case"], "issue_sim": [0.5483365058898926, 0.3755657374858856, 0.44492045044898987], "prob": [0.7154147624969482, 0.24229557812213898, 0.16662730276584625]}, {"target": [0], "doc": ["i think it be too little gain be for you and i but think about the developer that they hope with godot they can bring food for their child : stuck_out_tongue_closed_eyes : and do not know anything about android sdks , ndk , gradle , or some of they even do not anything about git , i just say if it be lot of work just direct i in the right direction let i support this system but if you think that it be bad design for godot and you do n't want that in godot then i think i should close this issue ."], "issue_sim": [0.5366122722625732], "prob": [0.9999840259552002]}, {"target": [0], "doc": ["i prefer the explicit way , especially if your <tag> depend upon another condition :", "i 'd rather create another directive <tag> to handle that syntactic sugar"], "issue_sim": [0.27491477131843567, 0.40227165818214417], "prob": [0.6416124105453491, 0.23747140169143677]}, {"target": [1], "doc": ["the problem with other type transformation other than <tag> be that the conversion from the value back to string be not straightforward", "e.g. for a date transformer , if you programmatically set the bind value to a <tag> object , there be no way for vue to know how to display it as text in the input box .", "then again we be back to similar concept as two - way filter", "type transformation also by definition make the view out of sync with the underlie state", "my take on this use case be that instead of the implicit magic conversion , let <tag> just sync what the user actually input with an underlying value  , and then build * * derive * * value separately base on that value", "for example , you can perform these transformation only when you need to send it to the server for persistence", "or , use compute property base on the bind value if you need to display it elsewhere in a different format"], "issue_sim": [0.4753280282020569, 0.5013867616653442, 0.04447054862976074, 0.4339803457260132, 0.36862045526504517, 0.48573416471481323, 0.3718761205673218], "prob": [0.25890758633613586, 0.527638852596283, 0.012044734321534634, 0.002633269876241684, 0.39507752656936646, 0.011613334529101849, 0.01745907962322235]}, {"target": [7], "doc": ["by _ legit case _ i mean a piece of code that an * * average * * programmer would write for a particular purpose", "maybe i be an optimist , but i like to believe that the average programmer have more sense than return an error instead of use the language be build in error handling mechanism", "i do n't agree that you be do newbie a favor by tolerate their mistake : eventually , designing function that behave that way will get they in trouble", "all modern language have build - in error handling mechanism for a reason : thing _ will _ fail and good code should always _ fail safe _", "technically , error can be propagate but when cross language barrier  , the propagation need to be explicit ; it be not up to any framework to do that for you unless you ask it to", "and since we be in the realm of confusion , soon or later , someone will expect regular html component to work with the true / false thing the same way i expect vue to handle boolean attribute as per the html spec :", "which would result in a checkbox that be always check", "my proposal attempt to mitigate half of the source of confusion"], "issue_sim": [0.20321907103061676, 0.28620702028274536, 0.2541138231754303, 0.22838327288627625, 0.29926878213882446, 0.5981795787811279, 0.24805226922035217, 0.0028207702562212944], "prob": [0.08701884001493454, 0.49119266867637634, 0.11280737072229385, 0.02185176871716976, 0.49968910217285156, 0.20311826467514038, 4.116286072530784e-05, 0.00032613941584713757]}, {"target": [1], "doc": ["@the - cpu1 : thank for the explanation - what you do be an understandable thing to try , especially give that the language do n't prevent you from do so", "so , if there be consensus that apply <tag> only ever make sense when apply to a _ variable _ , perhaps try anything else can be flag as a syntax error .", "that would spare future user the confusion over why their code do n't work as expect"], "issue_sim": [0.2616322636604309, 0.558838963508606, 0.24818573892116547], "prob": [0.5197926163673401, 0.4425863027572632, 0.0009201808134093881]}, {"target": [0], "doc": ["i guess that it reflect syntax for define object literal .", "also string\\numeric literal as name in property be allow in typescript long before es6 support be add"], "issue_sim": [0.42502525448799133, 0.4680159091949463], "prob": [0.9616904854774475, 0.045255329459905624]}, {"target": [9], "doc": ["let i answer one question that would probably come up next : what do you do if your code need to call a function in a node that ca n't be part of the same scene", "let 's say you be write a player and a ui widget", "the widget be suppose to display the player 's health , and when the player be hit it need to be update", "so the player need to inform the ui , which sound like a perfect use case for get_tree", "get_node or something similar", "so what do you do if you be n't allow to use get_tree  or get_parent  or get_node", "a signal be a function call that be bind at runtime", "declare a function require you to specify the code that be run when the function be call and allow you to call that function", "declare a signal do n't require you to specify the code but still allow you to call it", "so all you need to do be replace the function that modify the health bar from inside the player scene with one that emit a signal , connect the signal to the health bar and have it update itself .", "that way both the player and the health bar work on their own , and when connect by a common parent scene they also work together", "you can see that principle at work all throughout the godot api", "for example button have signal for when they be press , because they be write by people that do n't know anything about your game , so how could they have know which code to run when the button be press", "that be why they have to use signal instead so that you can choose which function to bind to the function call"], "issue_sim": [0.49380940198898315, 0.09244348108768463, 0.14407402276992798, 0.19251452386379242, 0.12274753302335739, 0.09346652776002884, 0.3026082515716553, 0.23833662271499634, 0.3449346423149109, 0.2664908766746521, 0.1409270465373993, 0.22518986463546753, 0.11976881325244904, 0.19081135094165802], "prob": [0.3185576796531677, 0.006136677227914333, 0.008602953515946865, 0.0013653096975758672, 5.685612268280238e-05, 0.007130532991141081, 6.143147038528696e-05, 0.002896761056035757, 0.000585219357162714, 0.04905206710100174, 0.008955483324825764, 0.00012484760372899473, 0.16157548129558563, 0.003116752253845334]}, {"target": [2], "doc": ["@linusborg i be not listen to the event from the same component", "i be simply listen to this event programmatically through a call to <tag> , instead of directly from the template", "and when do so , the event do n't show up in <tag> , only event that be provide in the template do so .", "this be something i be use in @ditojs / admin : <url> , a vue", "js base framework to build admin ui from simple pojo schema", "and since much of the connecting be happen through code and processing of these schema , i can not listen the vent in a template", "since one be expose , i be wonder why be n't the other"], "issue_sim": [0.3795429468154907, 0.42921578884124756, 0.4457014799118042, 0.12567730247974396, 0.25969910621643066, 0.11452330648899078, 0.07979053258895874], "prob": [0.000501250964589417, 0.34651094675064087, 0.8777251243591309, 9.700382361188531e-05, 3.585955346352421e-05, 0.13743135333061218, 0.016310617327690125]}, {"target": [7], "doc": ["but again , i think dynamic solution would be prefer for distro", "static way should only be use for binary on site", "distro maintainer should have a way to build against their system openssl", "this allow forget about openssl update problem", "i 'd also be very happy have separate binary for distro", ", as fedora prefer to be very different from", "other in more than one aspect", "also i think that dlopen - base solution should be research as possible. way to overcome library issue .", "on sat , mar <number> , <number> at 7:29 am , sergey lapin slapinid@gmail"], "issue_sim": [0.24626609683036804, 0.06964810192584991, 0.5246705412864685, 0.5081430077552795, 0.3268016576766968, 0.16295325756072998, -0.08270712196826935, 0.2424875646829605, 0.021612288430333138], "prob": [0.24143049120903015, 0.0020602268632501364, 0.008509799838066101, 0.00014418268983718008, 0.0120608014985919, 0.0013206313597038388, 0.00019120499200653285, 0.7814755439758301, 0.00044447131222113967]}, {"target": [0], "doc": ["i have exactly the same case as in # <number> , it be virtually impossible to test an onpush component without make a dummy outer component , which be quite annoying .", "the general issue be it seem impossible to acquire the changedetectorref instance from outside of it be component"], "issue_sim": [0.5188964009284973, 0.37192320823669434], "prob": [0.8093051314353943, 0.10332999378442764]}, {"target": [1], "doc": ["i be actually surprised this have n't be implement", "if you look at other template language it be a common feature ."], "issue_sim": [0.11327129602432251, 0.2732926607131958], "prob": [0.06885647028684616, 0.8814065456390381]}, {"target": [3], "doc": ["well , that be where we differ :p because i think it be more than reasonable to compare they", "especially since gdscript do everything they do , at a much more simple level", "also , i disagree about the \" require programming experience \"", "if a level designer be create block of action _ in an event sheet or visual scripting already _ , they _ already have the fundamental building block _ to use gdscript .", "with that say : jit - compile gdscript be on the roadmap , and would be far more beneficial than event sheet or visual scripting addition", "and the potential use case of vs / event sheet be pretty low currently", "so all i be ask please be cautious about lead dev time , as your recent  have already allude to"], "issue_sim": [0.03953700140118599, 0.07435373216867447, 0.17530640959739685, 0.4892561435699463, 0.38669827580451965, 0.23114031553268433, 0.02005356177687645], "prob": [0.2631622850894928, 0.0053310636430978775, 0.004050864838063717, 0.6476063132286072, 0.3453867733478546, 0.0010079373605549335, 0.02163349837064743]}, {"target": [1], "doc": ["we actually do the same - internally each item be associate with an id and only that go over the wire", "for the api we want to be more expressive and give implementor a chance to store datum subsequent request in an item .", "that be a good question", "i think the base - filename , e", "g <tag> and <tag> would be a good start", "maybe put the rest of the path as detail", "not sure tbh - the detail field be a bit of a free form field for extension to add \" something \" useful", "we have the same for outline and there ts be n't use it , some extension be", "generally , it will be render as be , no md format or so", ": +1 : i think that be useful in order to see how an interface be be use", "for call each item could just be a call but when start / prepare it be a little more trick", "we might need to evolve our api so that prepare can return n item"], "issue_sim": [0.09862195700407028, -0.09029848873615265, 0.10830646008253098, 0.12306363880634308, 0.025029174983501434, 0.1433180272579193, -0.056608784943819046, 0.12766432762145996, -0.009567290544509888, -0.013386406004428864, -0.011246586218476295, -0.0942830741405487], "prob": [0.03292993828654289, 0.722222626209259, 0.00011260416067671031, 0.003140769898891449, 0.004353896714746952, 0.002910303883254528, 0.050335414707660675, 0.004318499006330967, 0.009699949994683266, 0.009145751595497131, 0.03206207975745201, 0.0014198118587955832]}, {"target": [2], "doc": ["as a clarification , i would say that i be not argue against decorator , even if i have reservation about they", "i be instead propose annotation independently", "you can consider they to be sugar for a very common family of decorator use case , a way to nudge framework towards a common standard for those use case , and as a way to align with traceur / atscript .", "you could conceivably have both in the language , so long as you use a different sigil for each", "also , while you can implement annotation use decorator , the result be not as clean", "for example , you can implement they one of two way that i can think of : via an ' annotate ' decorator that take an annotation list as input :", "the drawback to this approach be that the syntax be painful", "at this point , you might as well just use a static :", "alternatively , each decorator could add the annotate field internally , so you could get roughly back to the same clean declarative syntax :", "the drawback to this approach be that each decorator would need boilerplate code for add itself to the annotate array of the constructor function , if it do n't exist , else create it", "that be somewhat brittle , as any decorator which forget to check if the array already exist would end up overwrite the exist one", "use decorator to implement member and parameter annotation , however , be troublesome :"], "issue_sim": [0.2306400090456009, 0.4274616241455078, 0.356914222240448, 0.15536461770534515, 0.4695208668708801, 0.5812114477157593, 0.2781369388103485, 0.07664299011230469, 0.4995117783546448, 0.5379359722137451, 0.26682764291763306, 0.5283757448196411], "prob": [0.04200419783592224, 0.000518222339451313, 0.07328085601329803, 0.030080903321504593, 0.0055638267658650875, 0.34818607568740845, 0.00010142221435671672, 0.001123929745517671, 0.022850362583994865, 0.09746278077363968, 0.02279350534081459, 0.012478016316890717]}, {"target": [6], "doc": ["why be space not possible", "be that a limitation from the parser or from html perhaps", "if it be the former case , could it be possible to modify the parser so it accept those space in that particular case", "i really do not like that version :", "since it be really hard to read", "perhaps with a character that be more visible", "i think i would prefer the <tag> character since it be unlikely to be use in a custom event name , whereas <tag> could more likely be .", "indeed , it be already possible but more verbose and less legible in my opinion", "my solution would be a bit like use <tag> instead of <tag> ;)", "anyway , thank for take the time to review this"], "issue_sim": [0.0624617375433445, 0.22559987008571625, 0.2833824157714844, 0.00043342728167772293, 0.00788916926831007, 0.10419946163892746, 0.3587648868560791, 0.18291041254997253, 0.39200592041015625, -0.023271432146430016], "prob": [8.402395178563893e-05, 0.00023021329252514988, 0.08693252503871918, 0.00011546031601028517, 0.0005749947158619761, 8.772384171606973e-05, 0.591250479221344, 0.02014440856873989, 0.6976990103721619, 6.556548760272563e-05]}, {"target": [8], "doc": ["@mhegazy , thank for raise this", "my preference be for the file to be call <tag>", "visual studio now provide  for these file", "in addition it be possible to  the content", "in vs people tend to use the typescript setting ui in order to change project setting", "since edit a json config file be even easy , i would suspect that the setting in", "csproj will get out of date very soon", "something need to be do about this", "we should n't permit setting to be specify in two place , because that just introduce another potential source of confusion .", "in vs compile a project with setting specify in both", "csproj and the propose <tag> should result in a compilation error", "i also have an additional suggestion", "we should deprecate the <tag> file and permit reference to be specify directly in <tag>", "that way we be not really introduce yet another config file into the mix , but rather replace an exist one"], "issue_sim": [-0.042332351207733154, 0.25182777643203735, 0.2301693856716156, 0.003210637718439102, 0.3460741639137268, 0.23634649813175201, 0.14098435640335083, -0.009554208256304264, 0.045003652572631836, 0.2843940258026123, 0.41177603602409363, 0.030430462211370468, 0.3368251323699951, 0.21246349811553955], "prob": [0.0007225070730783045, 0.006241743918508291, 0.00030526911723427474, 0.000559530162718147, 0.010803104378283024, 0.002278209663927555, 0.0004993207403458655, 0.0004463858203962445, 0.45697325468063354, 0.0005035926587879658, 0.003114895662292838, 0.00018219053163193166, 0.0009908383945003152, 0.05640163645148277]}, {"target": [2], "doc": ["@jvquarck can you describe a situation where it make sense to return a <tag> from the <tag> guard and why it do n't make sense to add a check in the guard to verify you be not already navigate to that route", "how do your guard behave if the user be already navigate to the <tag> that you be return", "should n't it be check for that case and return <tag> instead of a <tag> anyways ?"], "issue_sim": [0.583543598651886, 0.4768242835998535, 0.3567751944065094], "prob": [0.020217617973685265, 0.015737611800432205, 0.9234402775764465]}, {"target": [3], "doc": ["@mamarilmanson comment <number> day ago", "really , it be about trend now", "i do n't think so", "i would rather prefer godot 's devs to work on some new function or get few more bug squash out or let they take time and rewrite audio engine - if they really have no other thing to do ;) - than to resolve not existent \" fashion \" ui problem , that be suppose to make godot look \" modern \" .", "run the game in separate window be completely fine , especially if you can now run your game on android and edit it real - time"], "issue_sim": [0.03286894038319588, -0.14524857699871063, -0.021795686334371567, 0.30621081590652466, 0.37139445543289185], "prob": [0.010761677287518978, 0.011456593871116638, 0.0165814571082592, 0.9630124568939209, 0.2797676622867584]}, {"target": [9], "doc": ["hello @mateusak , allow i to disagree with your very first sentence :", "aaa games often struggle with problem that be not relate to the game logic : their problem be , in general , how do i render this huge scene at 60fps", "this kind of computation be already do in a language with well perfomance  inside of godot", "what if i have something that do a lot of computation", "how do i handle that", "well , in that case gdnative be your friend", "i do not have experience with that myself but i do know someone that port a part of his game to gdnative to gain performance", "i be very much against * yet another language *", "there be already enough support", "although i do understand where this suggestion be come from , i think that godot have more pressing issue to take care of , and make another language be not worth the developer time investment ."], "issue_sim": [0.09192243963479996, 0.24884283542633057, 0.41392409801483154, 0.10750091075897217, -0.008273204788565636, 0.04398993030190468, 0.1909342259168625, 0.3255874514579773, 0.20091921091079712, 0.48456645011901855], "prob": [0.0054663377813994884, 0.5509710907936096, 0.03837895020842552, 0.0009414626401849091, 0.0021147155202925205, 0.0025678137317299843, 0.1557646244764328, 0.0024049105122685432, 0.0038879020139575005, 0.5657087564468384]}, {"target": [0], "doc": ["fyi , you can get the normalize prop metadata of a component via <tag> ...", "you can then group the raw args from blaze into prop and raw attribute base on that metadata", "if i be not mistaken , that should solve the desire use case"], "issue_sim": [0.48346012830734253, 0.49360236525535583, 0.21389034390449524], "prob": [0.639329195022583, 0.04858110845088959, 0.08590154349803925]}, {"target": [2], "doc": ["after look at your use case , i still do n't think <tag> be the correct answer to it", "what you want be essentially a way to let you explicit make the view and the state out of sync ,  and <tag> be primarily offer for performance optimization .", "the fully framework - compliant way to deal with it  be to have a separate piece of state that represent the input content , which can then be out of sync with the model state and can be update only when you want to"], "issue_sim": [0.2285059541463852, 0.27754437923431396, 0.44582533836364746], "prob": [0.10118511319160461, 0.5879741907119751, 0.502147376537323]}, {"target": [0], "doc": ["i would expect these to break only if you misspell an option , which wo n't work anyway .", "i be just curious what other breaking changes be you think about @ryancavanaugh"], "issue_sim": [0.16817152500152588, 0.15383224189281464], "prob": [0.9175947308540344, 0.0004548550059553236]}, {"target": [0], "doc": ["alias be only really intend for interactive use so use they in script be really an anti - practice and something that i would seriously recommend against use"], "issue_sim": [0.2858031988143921], "prob": [0.999981164932251]}, {"target": [0], "doc": ["this feature will be very helpful when port react component to vue ."], "issue_sim": [0.5050874948501587], "prob": [0.9999363422393799]}, {"target": [0], "doc": ["this change do n't make sense on new nano server container .", "this be what you see when you start microsoft / nanoserver - insider - powershell :", "\" warning : appended windows powershell psmodulepath \"", "<number> of those <number> path be unnecessary on new nano server"], "issue_sim": [0.19158190488815308, 0.3596929609775543, 0.42319655418395996, 0.15407827496528625], "prob": [0.972478449344635, 0.18432489037513733, 0.017239168286323547, 0.001399270840920508]}, {"target": [1], "doc": ["i see some overlap here with the eventing we can do now in powershell", "a theoretical watch command could leverage eventing and maybe store \" watch result \" object .", "i could use <tag> to retrieve they", "or give i an option to have an interactive experience as i have in linus"], "issue_sim": [0.33545467257499695, 0.298427939414978, 0.09789738059043884, 0.19614942371845245], "prob": [0.006986132822930813, 0.996803879737854, 0.005500223487615585, 0.013917230069637299]}, {"target": [5], "doc": ["how should the angular compiler know what you want to export in your index", "sometimes we explicitly do n't want to export certain service  because they be n't consider to be api", "on the other hand i might want to export not just the module but also a component so that it can be use programmatically", "in other word , the premise that this be duplicate information be incorrect", "there be also no restriction on file structure right now", "i could have my ngmodules in one folder and reference component and service and other module in it which lie anywhere else in the project .", "generate the ngmodule from the file structure therefore do n't work"], "issue_sim": [0.5725307464599609, 0.18298709392547607, 0.46053627133369446, -0.039196692407131195, 0.09884542971849442, 0.26899629831314087, 0.20947422087192535], "prob": [0.07265152782201767, 0.22201336920261383, 0.16925357282161713, 0.021295862272381783, 0.00954936258494854, 0.28764647245407104, 0.006096205674111843]}, {"target": [3], "doc": ["@poelstra thank for your comment", "let i address each one", "that depend entirely on how the definition file be write , i suppose", "if it only define <tag> and <tag> as part of <tag> then that would n't be an issue .", "this be a fundamental issue with how most definition be write today", "sure , that be just for example purpose here", "i would expect ideally that typescript would use some magic lookup logic like in your proposal if there be an <tag> , unless you really do want to reference a file", "that be not true", "the definition file itself can do anything it want", "it be only definition that it _ reference _ that be restrict", "this also relate back to # <number> , which be that ideally we should n't be write isomorphic definition file this way anyways", "instead we should be split they into multiple file so that program author can choose how they plan on use it", "what if the definition file that be be import use the legacy mode use <tag> to another definition file that declare a global", "now that global have leak", "this proposal guarantee no leak down the entire dependency chain", "btw , this be n't just a hypothetical", "yet again , see # <number> : smile :", "this already solve intentional global", "definition file that you reference from your program still have the full power that they have today to create global", "it be only _ dependency _ of those definition file  that would not have the power to create global , which be a good thing", "if your program need access to a global that be create by a dependency in js - land , then simply include the definition file for that dependency as well and the global will be make available", "- promiselib // in js - land , this create a global , but in ts - land it would not", "- promiselib // if you want access to the global in ts - land , simply reference it yourself"], "issue_sim": [-0.03645741567015648, 0.03685041889548302, 0.3712286949157715, 0.3242444396018982, 0.265433669090271, 0.06733173877000809, 0.4953150749206543, -0.031401701271533966, 0.38998347520828247, 0.2684401571750641, 0.49895280599594116, 0.21768932044506073, 0.6120411157608032, 0.0723225399851799, 0.17750662565231323, 0.0408499538898468, -0.04259254038333893, 0.1287994384765625, 0.3820158839225769, 0.4625471234321594, 0.5719342231750488, 0.24484892189502716, 0.2753765881061554], "prob": [0.005812006536871195, 0.009154853411018848, 0.004897245671600103, 0.11939166486263275, 0.023441525176167488, 0.0010118597419932485, 0.06925288587808609, 0.00035532034235075116, 0.00023698956647422165, 0.0002368230780120939, 0.008148604072630405, 0.0041260672733187675, 0.022620148956775665, 0.00011499971151351929, 0.00029575038934126496, 0.00021201110212132335, 0.00043113535502925515, 0.0001395475264871493, 0.003841306082904339, 0.004546859301626682, 0.05317693576216698, 0.011432559229433537, 0.007277082186192274]}, {"target": [1], "doc": ["i think have two name for the same thing be a bad idea", "between that and having only <tag> i 'd choose only <tag>  <tag> localize  ` ) ."], "issue_sim": [-0.07333024591207504, 0.005566194653511047], "prob": [0.31471797823905945, 0.8879015445709229]}, {"target": [12], "doc": ["a lot of people who \" know \" c # do n't use many of its feature which make it different from java", "just take a look at the myriad of unity script which do n't go much far than subclass", "for this reason alone , i be highly skeptical about the practical advantage c # would give", "they be nice in many context , just not game development", "besides , c++1x already offer many of those thing  without any overhead", "also , it be possible that the overhead bring by the clr  could make godot perform _ bad _ , although i see some advantage in use the jvm 's garbage collector", "i read on forum about people who do n't use godot because of gdscript", "i think that be close - minded , because there be nothing wrong about it except the fact that it have a poor selection of library , which i try to address in another ticket , # <number> , by suggest a solution which have zero overhead and cross - platform support", "without have to implement a c++ jit via llvm , there be a solution which run on native code and do not require any fiddling with godot 's source : dynamic linking", "the first would allow native code without have to recompile godot from scratch : you just compile it as a", "so file and then add it to your load path , then use it from gdscript with no overhead", "this should be very easy to do  but as far as i understand it be not do because of cross - platform concern", "also , there be the idea of compile gdscript to c++ , much like  do with its language . this be not easy , but obviously offer good performance ."], "issue_sim": [0.534827470779419, 0.4027169942855835, 0.12959899008274078, 0.1892698109149933, 0.16094081103801727, 0.5998533964157104, 0.2855895161628723, 0.29366111755371094, 0.602643609046936, 0.5534502863883972, 0.136487677693367, 0.2905721068382263, 0.5538027882575989], "prob": [0.05404779687523842, 0.08766631782054901, 0.004447415471076965, 0.0004590494791045785, 0.003922328352928162, 0.23124083876609802, 0.0005657803849317133, 0.22952260076999664, 0.09619362652301788, 0.0040426417253911495, 0.001743103377521038, 0.005791587755084038, 0.3602416515350342]}, {"target": [1], "doc": ["context be a convenient construct for library author and couple components", "for a library , it be quite strange and lame to encapsulate library local context in a separate global store .", "library author might be able to take the burden of pass prop all over , but component may also be an interface for end user", "@ktsn have a good example and good argument for context feature", "but i have some question about after read react 's context document", "it seem the cooperation of <tag> and <tag> be not a problem in vue because context be also reactive", "so there be no need to workaround context update as describe in this", "but i still have question on how context should be find", "for example , should context only be find as a child 's parent", "or only close ancestor", "if we resolve context as ancestor , how can we handle context key conflict", "it seem react 's context implementation only choose the close ancestor", "and this will easily cause problem when multiple library provide different context with the same name , say , one component receive context from another library component", "or we can collect all context property from ancestor and pack these property into an array or a map", "also , should context in parent component be visible to all its child , in template and slot", "or only to child in its template", "or only to child in slot", "or provide an option for user to choose"], "issue_sim": [0.35041654109954834, 0.3524964451789856, 0.3470005393028259, 0.20969119668006897, 0.30937516689300537, 0.234066903591156, 0.3326900601387024, 0.17231270670890808, 0.3305145502090454, 0.03558310493826866, 0.3636434078216553, 0.3597415089607239, 0.37276357412338257, 0.3170226216316223, 0.4952206313610077, 0.1747818887233734, 0.12861189246177673, 0.06898599863052368], "prob": [0.015032614581286907, 0.19382546842098236, 0.21546471118927002, 0.03590678423643112, 0.010378711856901646, 0.0723058432340622, 0.003428150899708271, 0.0029052968602627516, 0.0010741953738033772, 9.607290121493861e-05, 0.0029156783130019903, 0.0003609485866036266, 0.016330165788531303, 0.0037640624213963747, 0.02350720390677452, 0.0002611605741549283, 0.0016700434498488903, 0.0012996133882552385]}, {"target": [0], "doc": ["not really , neither <tag> nor <tag> have any direct postponement power over @angular / core .", "<tag> should not have any either", "it be just an idea as many package & | framework also have the <tag> portion"], "issue_sim": [0.15520018339157104, 0.02896411530673504, -0.02766360528767109], "prob": [0.8359315395355225, 0.004977704491466284, 0.6165923476219177]}, {"target": [0], "doc": ["imho , simplify upgrade  be important .", "maybe it would be sufficient to help people create their own upgrade script", "i know there be an <tag> at <url> but it do not upgrade my installation , just unzip the late package into <tag>", "maybe it be easy to create a dedicated website with upgrade strategy  for each type of install"], "issue_sim": [0.31879740953445435, 0.332911878824234, 0.3568662106990814, 0.32991304993629456], "prob": [0.7552071809768677, 0.000984433339908719, 0.039229582995176315, 0.00322153652086854]}, {"target": [0], "doc": ["i suppose that it would be hard to understand every call - like behavior ( tagged template , decorator , function call , new invocation , etc ."], "issue_sim": [0.010026045143604279], "prob": [0.9999885559082031]}, {"target": [0], "doc": ["we should get the document folder programmatically"], "issue_sim": [0.38072049617767334], "prob": [0.9973721504211426]}, {"target": [0], "doc": ["who say user be an array without duplicate ?", "what happen when the collection change", "this do n't sound like a good idea to i at all , not to mention that nothing can be decide at compile time"], "issue_sim": [0.20643149316310883, -0.0025906278751790524, 0.2763449251651764], "prob": [0.04883631318807602, 0.03949009254574776, 0.6980472207069397]}, {"target": [1], "doc": ["a duplicate of <url>", "you could use something like this :. <tag> <tag> <tag>", "where <tag> be your function"], "issue_sim": [-0.044201143085956573, 0.48471203446388245, 0.1307343989610672], "prob": [0.14941197633743286, 0.8038984537124634, 0.0970926582813263]}, {"target": [0], "doc": ["it be well to create a component for that and compute there only once the heavy operation you need"], "issue_sim": [0.36339932680130005], "prob": [0.9992984533309937]}, {"target": [0], "doc": ["but it look as a break change and also we need a way to expose the information by demand"], "issue_sim": [0.2852662205696106], "prob": [0.9994404911994934]}, {"target": [0], "doc": ["why do n't you export the symbol in a separate file , so you can import it in both of your chunk ?"], "issue_sim": [0.4981999695301056], "prob": [0.9998471736907959]}, {"target": [2], "doc": ["well sometimes it helpful , sometime less", "when the name be not descriptive enough , it might worth check it type", "but anyway that be not very harmful , both three naming be quite explicit so i think it be well to keep thing how they be ."], "issue_sim": [-0.04687391221523285, 0.11497925221920013, 0.04103579744696617], "prob": [0.037138860672712326, 0.04561474919319153, 0.9332379102706909]}, {"target": [11], "doc": ["i be not sure what the api for that should be if you do n't want it to be do with a wrapper component", "from your description i have get a good picture about how you imagine this to work", "i be not sure who you refer to as \" we \" , but i can say that we from the vue team do not hate wrapper - much to the contrary , encapsulate behaviour in wrapper component be a concept we use for many such thing , like <tag> , <tag> or <tag> , <tag> and <tag>", "i bet if we implement a portal functionality in core , it would use some sort of wrapper as well , just with a deep integration with the underlie virtualdom , probably", "if you want to create a feature - rich solution for many scenario , that be right", "if all you need be to move a modal to the end of the <tag> , that be not really hard", "well , implement it with a directive - which be aware of transition in vue by design - would approach this at the wrong level of abstraction", "directive be mean for low - level dom access which vue 's transition be highly abstracted - that be part of why i * do * solve it with a component", "back to the top a bit :", "i do n't take it as an attack , no worry", "you raise a valid critisism against use portal - vue excessively - that can indeed happen if user do n't approach their app with a data - centric mind", "but that do n't invalidate the whole concept to be useful for solve the specific problem that it * do * solve nicely , like move modal , dropdown menus etc to the end of <tag> ."], "issue_sim": [0.47823137044906616, 0.023329131305217743, 0.31761783361434937, 0.4353777766227722, 0.07136667519807816, 0.13909399509429932, 0.3882310390472412, 0.5392017364501953, 0.015958260744810104, 0.013359695672988892, 0.3089694082736969, 0.23632264137268066], "prob": [0.40143853425979614, 0.10700380802154541, 0.06762421876192093, 0.22910231351852417, 0.0014456588542088866, 0.045930322259664536, 0.055024195462465286, 0.12035345286130905, 0.0002929654438048601, 0.000697435112670064, 0.030424077063798904, 0.12246719002723694]}, {"target": [1], "doc": ["if something be work do n't change it", "it be more important to improve the quality of current system   than make a new one .", "scon be beyond from perfect , but it work", "my <number> cent :", "- some function have more than <number> line", "- the be blank line without reason", "- line beyond <number> character", "py need to be splitte", "- string template need to be move to file for readability", "- please , move the build code to a new folder", "this be only for the build script but it can be apply to all the code"], "issue_sim": [0.1563938409090042, 0.13139933347702026, 0.158817857503891, 0.06445647776126862, 0.03736099600791931, 0.06691646575927734, 0.014641385525465012, 0.06002986058592796, 0.25232788920402527, 0.3502393066883087, 0.3650470972061157], "prob": [0.0427958182990551, 0.5797995924949646, 0.016101451590657234, 0.0012068110518157482, 0.031178250908851624, 0.0043894522823393345, 0.0030576165299862623, 0.0025870800018310547, 0.2207350879907608, 0.005821069702506065, 0.031100401654839516]}, {"target": [2], "doc": ["@mhilbrunner unfortunately no , blueprint be a completely different approach to visual scripting", "to you they be trivial , but i dare you to say that on clickteam 's forum or on construct 's forum", "those guy be stick with the engine they use because of how much they love this approach and believe i - many of they have try blueprint in unity , unreal and other engines- include godot .", "they be still stick with construct2 or clickteam fusion because they prefer event sheet to blueprint", "they still request event sheet approach on unity 's forum", "godot 's visual scripting be mention on their forum and the user there still prefer event sheet", "i personally transition to gdscript and prefer to use gdscript instead of blueprints- because gdscript be close in its advantage to the event sheet than blueprint be", "it be like tell someone who like banana to eat tomato instead- its a matter of taste :)", "@groud i think the same for a while , but i be not even sure where to start - and even as a plugin- someone will have to maintain the plugin", "@reduz seem to feel warm towards the idea on <appname> , but i understand that he have his hand full with more important thing", "in any case , i be post this here for documentation - to outline the event sheet system - what it do and how it differ from blueprint", "if anybody else be interested to implement it in godot or as an addon , please let we know", "i would definitely roll my sleeve and help out , spread the news and get feedback from clickteam / construct user", "so far i do n't even know how to implement its interface with godot 's gui class properly", "you have to be able to drag logic block between cell of the same column", "copy / paste block / row too - nest row and", "i do n't think it be a small task"], "issue_sim": [0.39842987060546875, 0.21582916378974915, 0.20423179864883423, 0.313823938369751, 0.20661471784114838, 0.4305369257926941, 0.29662686586380005, 0.15389694273471832, 0.1851053237915039, 0.04152153059840202, 0.30415576696395874, 0.31255123019218445, 0.20348817110061646, 0.3042754530906677, 0.33561769127845764, 0.17757132649421692, 0.09413870424032211], "prob": [0.0002034807694144547, 0.010061688721179962, 0.10143832117319107, 0.002161853015422821, 0.0001520467922091484, 0.005141468718647957, 0.4282694458961487, 0.012589074671268463, 0.011234859004616737, 0.0003736123617272824, 0.009727154858410358, 0.000942249083891511, 0.00692586088553071, 0.0019223911222070456, 0.00042896150262095034, 0.0013071554712951183, 0.00026627304032444954]}, {"target": [0], "doc": ["should n't this be declarative and in keep with uni - directional datum flow", "to i an ideal implementation would allow this sort of usage :", "so that when a <tag> component get render or update it update the document head as a side effect", "that way you can just bind to any outer component class value and so on", "no need to integrate tightly with router , and you can render datum come into it naturally from route resolver , operate idiomatically with i18n and so on", "listen to event and imperatively call method like <tag> seem to undermine the angular <number> + component model", "this be similar to the <tag> api", "i be assume something like that should be possible"], "issue_sim": [0.12026849389076233, 0.0026108063757419586, 0.4214783012866974, 0.22068682312965393, 0.2510204315185547, 0.36411863565444946, 0.24100515246391296, 0.04376593232154846], "prob": [0.20597431063652039, 0.007117579225450754, 0.01030573807656765, 0.006180129945278168, 0.7463042736053467, 0.044579364359378815, 0.0004964208346791565, 0.0016697212122380733]}, {"target": [2], "doc": ["@linusborg i like the way you think", "your way be much more intuitive", "as a sidenote , i think with this api in place , the next major version of vue could even remove attribute auto - inheritance altogether , so that cross - component communication could remain explicit on both side ."], "issue_sim": [-0.030186599120497704, -0.02065572887659073, 0.4951931834220886], "prob": [0.0015005763852968812, 0.05308406054973602, 0.9610018134117126]}, {"target": [1], "doc": ["i understand , but this be too much work for too little gain", "what we could do be configure godot so you can set a path to your godot. repository that you compile yourself , and download the addon will add a. module into godot , that you can recompile .", "on sat , mar <number> , <number> at 4:46 pm , ignacio etcheverry < notifications@github"], "issue_sim": [0.08314885199069977, 0.6494663953781128, 0.0029366202652454376], "prob": [0.027869489043951035, 0.9902722239494324, 0.0030115838162600994]}, {"target": [2], "doc": ["there be work plan on the gdscript compiler to bring jit compilation and performance improvement with the optional static typing", "with gdnative available  i do n't see the devs create a new language from scratch while there be so much work to do besides that", "i do n't see the need for it either with all the available option and the front - end language delegate so much work to the back - end : yes gdscript might be the same speed as interpret python right now , but if you rely on the editor , build - in node , physics , etc . , you be delegate a lot of work to the engine ."], "issue_sim": [0.3111726641654968, 0.48763808608055115, 0.4005042612552643], "prob": [0.018534161150455475, 0.04060946777462959, 0.7829425930976868]}, {"target": [6], "doc": ["they be indeed very different", "they simply can not be interchange because they do not correspond to the same javascript construct .", "take <tag> and <tag>", "the <tag> type represent the type of value produce by numeric literal and by expression which yield numeric result", "the <tag> type represent the type of value produce by invoke the <tag> function , a value , with the <tag> operator", "this create a by reference equate wrapper value around a value of type <tag>", "use <tag> as a constructor be a * * terrible * * practice but the value that this produce be indeed of a different type and typescript need to model that behavior", "all of these declaration be almost certainly wrong", "unless the value these api return at runtime be produce by call <tag> , or perhaps with some weird <tag> invocation , they be incorrect and need to be fix"], "issue_sim": [0.06654445827007294, 0.27832159399986267, 0.035664357244968414, 0.35392606258392334, 0.29301804304122925, 0.3059863746166229, 0.5460832118988037, 0.23827886581420898, 0.535817563533783], "prob": [0.0006234376924112439, 0.49179837107658386, 0.0013577892677858472, 0.02060096152126789, 0.0833117738366127, 0.01834084279835224, 0.4775574505329132, 0.0004022137145511806, 0.30499622225761414]}, {"target": [7], "doc": ["i be not an expert in this matter , but be we certain that the performance of gdscript would be inadquate for create game with decent visual quality", "i know that gdscript be slow compare to other popular language , but if i be not mistaken , raw speed of a bind language do n't affect the overall performance that much , so even when gdscript be <number> time slow than some other language , it 'd probably translate to less than <number> fps boost in normal case , unless the game be unusually calculation heavy , like a simulation", "again , my actual experience on this matter be quite minimal so i be mostly say this from my gut feeling", "but i be more familiar with optimize server application and i 've see many similar argument in that field before", "there be many people who think write a server application in something like c would boost the performance significantly , but normally it be not the case because the big bottleneck in such a type of system be find in i / o , and the time spend in actual business code be quite fractional compare to it", "so it be my understanding that a similar rule would apply to video game performance as well , mean that the large bottleneck would be find else where than the game logic , possibly in thing like render pipeline or physics simulation", "and in that case , replace gdscript with something that can run <number> time fast would only result in a marginal performance gain", "i think , in that case , it 'd be much well to try to optimize gdscript where it be unreasonably slow than to replace it with something else , since the benefit would hardly justify all the resource the task would take .", "and if what i suppose above be true , than probably we should add a section in the documentation , explain our user how the raw speed of a bind language relate to the overall game performance , since i believe this to be a recur topic in such community like reddit  or our discord server"], "issue_sim": [0.30765190720558167, 0.43766409158706665, 0.01773046888411045, 0.18519063293933868, 0.4333907961845398, 0.2439890056848526, 0.16503003239631653, 0.2752382159233093, 0.34839141368865967], "prob": [0.1891976147890091, 0.13675440847873688, 0.000548847543541342, 0.0023935511708259583, 0.047702472656965256, 0.04468896985054016, 0.0007094998145475984, 0.022000674158334732, 0.055401112884283066]}, {"target": [1], "doc": ["@bashor only true if you be genrate aot - only library", "you should keep the decorator  if you want to support jit usage ."], "issue_sim": [0.315138578414917, 0.32798996567726135], "prob": [0.08929405361413956, 0.9445263743400574]}, {"target": [3], "doc": ["for the sake of my own context", "be this issue specifically root in the fact that metro be use their non standard haste module system", "or be this not entirely related", "or well yet , would this issue still occur if you be package / bundle your app use webpack to bundle which actually respect nodejs 's / or esm module resolution system ."], "issue_sim": [-0.005288789980113506, 0.3708045184612274, 0.022904742509126663, 0.6372498273849487], "prob": [0.018466508015990257, 0.602326512336731, 0.007456790190190077, 0.6986880302429199]}, {"target": [0], "doc": ["i do n't think it be worth support such old graphic chipset  , especially since we be move forward with godot 3.0 's renderer  .", "you might have well luck on linux by the way ; those chipset tend to have new opengl there", "do you test your change on android / ios / html5 , and make sure they do n't break thing there"], "issue_sim": [0.46634340286254883, 0.4724884331226349, 0.1746189296245575], "prob": [0.6258034110069275, 0.13273189961910248, 0.14115415513515472]}, {"target": [0], "doc": ["if all you be do be specify the type argument for an output type  , that be not really a case for generic - that seem like a well case for a type assertion .", "the one thing that i do see as a benefit in the original use case be that you do n't have to write <tag> every time , which be definitely a pain"], "issue_sim": [0.3845742344856262, 0.23739652335643768], "prob": [0.7141896486282349, 0.42815375328063965]}, {"target": [0], "doc": ["i guess this tracker be only for life - cycle hook problem , what i mean be the mixin pattern not generally support in aot , but some basic functionality may be able to work already .", "i 'd suggest to raise separated issue when found other concrete problem", "edit : update the original comment to make it clear"], "issue_sim": [0.4981563687324524, 0.13239498436450958, 0.09160543978214264], "prob": [0.9371230006217957, 0.11482333391904831, 0.04050667583942413]}, {"target": [2], "doc": ["thank you very much @tranquilmarmot", "there be and , unfortunately , there be a lot of error", "i still have the same \" property ' api ' do not exist on type ' window & typeof globalthis ' .", "there must be a root cause to fix", "src / app / component / app", "tsx:91:14 - error ts2339 : property ' api ' do not exist on type ' window & typeof globalthis '", "src / app / component / app", "tsx:93:14 - error ts2339 : property ' api ' do not exist on type ' window & typeof globalthis '", "electronipcon = > {", "src / app / component / app", "tsx:97:18 - error ts2339 : property ' api ' do not exist on type ' window & typeof globalthis '", "src / app / component / app", "tsx:101:14 - error ts2339 : property ' api ' do not exist on type ' window & typeof globalthis '", "electronipcon = > {", "ts:22:28 - error ts2345 : argument of type ' string ' be not assignable to parameter of type ' number '", "ts:32:8 - error ts2339 : property ' api ' do not exist on type ' window & typeof globalthis '", "ts:34:5 - error ts2304 : can not find name ' ipcrenderer '", "catch = > console", "ts:38:5 - error ts2304 : can not find name ' ipcrenderer '", "on = > func ) ;", "ts:41:5 - error ts2304 : can not find name ' ipcrenderer '", "ts:44:5 - error ts2304 : can not find name ' ipcrenderer '", "ts:47:12 - error ts2304 : can not find name ' ipcrenderer '", "ts:53:5 - error ts2304 : can not find name ' ipcrenderer '", "ts:59:5 - error ts2304 : can not find name ' ipcrenderer '", "ts:65:5 - error ts2304 : can not find name ' ipcrenderer '", "ts:68:5 - error ts2304 : can not find name ' ipcrenderer '"], "issue_sim": [0.031814321875572205, 0.0005658585578203201, 0.3747730255126953, -0.04714899882674217, 0.11654993146657944, 0.38054707646369934, 0.11654993146657944, 0.368640661239624, 0.18709112703800201, 0.11654993146657944, 0.37135767936706543, 0.11654993146657944, 0.37020498514175415, 0.18709112703800201, 0.29478880763053894, 0.3648776412010193, 0.19333221018314362, 0.2306419312953949, 0.13884994387626648, 0.266849160194397, 0.177508145570755, 0.18197005987167358, 0.17924517393112183, 0.16821390390396118, 0.19184310734272003, 0.16881786286830902, 0.1588185429573059], "prob": [0.011066942475736141, 0.010507915169000626, 0.006592999678105116, 0.001826438819989562, 0.00010501563519937918, 0.01050898153334856, 9.223639062838629e-05, 0.005285445600748062, 0.00017163302982226014, 0.0031913304701447487, 0.02814987115561962, 0.0011168791679665446, 0.004224947653710842, 3.726000795722939e-05, 0.0005500343977473676, 0.00022359145805239677, 0.00010456485324539244, 4.052700751344673e-05, 0.0003498464357107878, 0.1163787767291069, 0.0002192481333622709, 0.00041191827040165663, 0.000566023460123688, 0.000538941181730479, 0.0014730826951563358, 0.0009470041841268539, 0.0012026069452986121]}, {"target": [0], "doc": ["yes , you may not like smartphone game and might be far from want to. develop they , but a large amount of godot developer use it for mobile .", "ca n't simply ignore they", "on fri , feb <number> , <number> at 1:05 pm , hubert jarosz notifications@github"], "issue_sim": [0.3102203607559204, 0.10305661708116531, -0.0733296349644661], "prob": [0.9811582565307617, 0.02249280922114849, 0.019015779718756676]}, {"target": [0], "doc": ["i would prefer white list rather than sandbox approach - basically a method to load script from <url> with custom define api , singleton etc ."], "issue_sim": [0.48664233088493347], "prob": [0.9999912977218628]}, {"target": [0], "doc": ["i like it , i do not know for the implementation behind but in the gdscript code it would look a lot clean than what it look like now .", "especially for the setget example"], "issue_sim": [0.15034033358097076, 0.001012963242828846], "prob": [0.9761867523193359, 0.00112708390224725]}, {"target": [0], "doc": ["ideally , the mixin should not be a component , otherwise , you can extend they with <tag> but you loose the ability to extend multiple thing at the same time"], "issue_sim": [0.2768716812133789], "prob": [0.9998694658279419]}, {"target": [0], "doc": ["what you describe it be exactly before stable angular ."], "issue_sim": [0.22400403022766113], "prob": [0.9999042749404907]}, {"target": [0], "doc": ["because you can have multiple trait in a class , but you can only inherit one script ."], "issue_sim": [0.35770267248153687], "prob": [0.9999654293060303]}, {"target": [6], "doc": ["should 've be more clear , by a wrapper , i do n't mean a wrapper component , but rather a wrapper element , which introduce a headache when use with buy template  that be not framework base , where there be a lot of direct child selector and a wrapper element can cause the theme to break", "it be true , but at the end of the day it kind of achieve the same result", "most common component base portal usage be implement in the follow way :", "while directive equivalent be similar :", "which both work for what they be worth while keep they without wrapper element , keep inject / provide work etc", "though directive will have problem when the transition be not on the <tag> element without advanced lookup , yet most big component library use both , yet more directive base approach", "the nice thing about component base approach be that it keep transition work and clean up the element , and with the undocumented <tag>  , the separated element be not display in the component tree .", "maybe it be not as bad as i make it seem to myself , maybe i just need to step back and think it over again", "edit : i remember evan say this should n't be do , maybe that be why i feel bad about it"], "issue_sim": [0.38839125633239746, 0.022559422999620438, 0.43071722984313965, 0.09006934612989426, 0.23236984014511108, 0.3865355849266052, 0.3944835066795349, -0.025642748922109604, 0.09996750950813293], "prob": [0.8892633318901062, 0.0031925386283546686, 0.0027456125244498253, 7.173162885010242e-05, 0.003418745705857873, 0.09569741785526276, 0.18247011303901672, 0.01701786182820797, 0.0033106955233961344]}, {"target": [0], "doc": ["i agree that jit be not a workable solution give the number of platform , vary hardware , and amount of work necessary to maintain .", "aot be definitely the simple and the most portable solution for native performance with gdscript", "in fact unity transpile", "net to c++ for its aot also", "i would be interested in contribute with the gdscript rewrite"], "issue_sim": [0.3246105909347534, 0.37457114458084106, 0.12090931087732315, 0.4181320071220398, 0.14043807983398438], "prob": [0.9708796739578247, 0.07445987313985825, 0.002921377308666706, 3.223961539333686e-05, 0.11716041713953018]}, {"target": [1], "doc": ["i already have this sir @benelliott", "i create websocket that listen to the chrome extension , the chrome seek <tag> then send it to <tag> .", "after that , vscode mix it that component variable with style and send it to chrome extension", "then it will update it"], "issue_sim": [0.06530099362134933, 0.4112726151943207, 0.38870668411254883, -0.021829742938280106], "prob": [0.00985424593091011, 0.9479791522026062, 0.38850662112236023, 0.014998439699411392]}, {"target": [0], "doc": ["since i be not sure how frequent this use case be , i be reluctant to mix the di and ng - content concern .", "it can make di a lot more complicated", "what about this way of do it", "this pattern require an extra level of indirection , but keep both di and ng - content simple"], "issue_sim": [0.28570207953453064, 0.055576905608177185, 0.04334196448326111, 0.3127768635749817], "prob": [0.9482600688934326, 0.025581995025277138, 0.003031299915164709, 0.054358553141355515]}, {"target": [3], "doc": ["well , you select they all and close they all at the same time", "a common workflow should be select the first in the list , shift+click on the last and close all select", "these \" close above \" or \" close below \" be too specific", "there be already <number> option to close script , add more be bloat to i ."], "issue_sim": [-0.007293068803846836, -0.028759261593222618, 0.018142586573958397, -0.03302915021777153], "prob": [0.0309648048132658, 0.7034802436828613, 0.0061413985677063465, 0.5809667706489563]}, {"target": [11], "doc": ["@mlc - mlapis let i give example :", "when work programatically with component  , you use :", "componentfactoryresolver to create a <tag>", "you can use this one , to get hold of all the <tag> and <tag> metadata", "and then interate over each give input to set your data", "for example i have component like this", "- since its implement <tag> it support form api   which allow i to do somete like this , if i would use this component in the template directly", "to set a ngmodeldirective that act just like another binding since my component implement <tag>", "- before next step <number> which would be", "use viewcontainer to add component to the view", "you want to set this programatically", "in other word you want to have a way to set ngmodeldirective from code .", "this be what be this ticket about", "think of the system where you build whole ui on the fly from code"], "issue_sim": [0.12454305589199066, 0.3988867402076721, 0.11197212338447571, 0.30654478073120117, 0.10178966075181961, 0.26289883255958557, 0.6043693423271179, 0.40269285440444946, 0.07375065982341766, 0.4040447473526001, 0.48349428176879883, 0.36023467779159546, 0.009085550904273987, 0.23944194614887238], "prob": [4.335495759733021e-05, 0.0005763131193816662, 0.00038972171023488045, 0.0003475146950222552, 6.203602242749184e-05, 3.230247966712341e-05, 0.0665050595998764, 4.059280036017299e-05, 2.512218316041981e-06, 0.007255214266479015, 1.0032414365923614e-06, 0.0032872087322175503, 1.3023293377045775e-06, 0.0004486718971747905]}, {"target": [2], "doc": ["@the - ult never try", "it be normally a static method declare inside that module", "if you try it and it do n't work , it would mean that it be not invoke in the case of <tag> , but it be invoke and process correctly during import  ."], "issue_sim": [-0.08666518330574036, 0.22321631014347076, 0.19087721407413483], "prob": [0.019894924014806747, 0.04190786927938461, 0.971504807472229]}, {"target": [0], "doc": ["it be work when you add <tag>", "no idea if it should work without as well"], "issue_sim": [0.010863079689443111, 0.08437466621398926], "prob": [0.2716081142425537, 0.5723708868026733]}, {"target": [4], "doc": ["i be very interested in do the footwork to move godot to meson", "the only thing currently stop i from contribute to godot  be scons", "i have to use it year ago , and i 've never have a more painful incremental development experience in my entire life", "the article link above have a lot of strawman argument , argue that cmake already exist and we should just use that", "meson 's build file be extremely easy to read , and use a syntax close to that of python .", "conversion can be quick", "what i be post in this thread for be , if the footwork be do , would a pull request even be consider for merge"], "issue_sim": [0.3975161015987396, 0.4996275305747986, 0.16630452871322632, 0.39890915155410767, 0.445161372423172, 0.03397946059703827, 0.3294396996498108], "prob": [0.0026127935852855444, 0.0023945807479321957, 0.21429432928562164, 0.07710269093513489, 0.7567419409751892, 0.0005523169529624283, 0.1334637850522995]}, {"target": [1], "doc": ["@mhegazy that be not compatible with meteor js which be a very popular javascript application framework", "all that would be require to solve this be a way to override the absolute path behavior for framework that desire it .", "the default could remain but just a flag as i describe in my previous comment would work great"], "issue_sim": [0.3633732199668884, 0.4494413733482361, 0.1756153702735901], "prob": [0.012372707016766071, 0.5818673968315125, 0.33036181330680847]}, {"target": [0], "doc": ["i do n't really like the fact that gdscript would be require to bind dynamic module , because gdscript be a module itself , it be optional .", "module depend on other module be not a bad thing , but for such a core feature the engine 's api should be enough"], "issue_sim": [0.5023767948150635, 0.47490379214286804], "prob": [0.9267266988754272, 0.05053901672363281]}, {"target": [0], "doc": ["the <tag> be only need when declare component use <tag> , <tag> , build in pipe .", "i have module in my app where i do not import <tag> this be normal situation", "i think in general you want angular to be more than framework - you want it to be complete development platform", "but it be framework , it do not invent new platform or language , it use what already exist", "you maybe would like to check angulardart <url> - they propose api you like : no module , routing define per component", "plus dart be the complete development platform"], "issue_sim": [0.4755404591560364, 0.3754551112651825, 0.37413161993026733, 0.17150987684726715, 0.47003012895584106, 0.13972362875938416], "prob": [0.9661927223205566, 0.0012424729065969586, 0.20619985461235046, 0.061305802315473557, 0.0012244426179677248, 7.986087439348921e-05]}, {"target": [1], "doc": ["consider example : you have a module for custom datepicker component - it contain only <number> component , nothing more", "then to use it in a new project - just copy the module and connect it to the share module .", "no need to connect it to every component where you want to use it", "i recommend you to check this one : <url>"], "issue_sim": [0.5277729034423828, 0.20688122510910034, 0.2670525312423706, -0.029666448011994362], "prob": [0.05581936612725258, 0.6541659832000732, 0.020122326910495758, 2.4191669581341557e-05]}, {"target": [3], "doc": ["but we already maintain a well grammar / tree already for tsc", "js , and all other feature as well", "the tm solution seem necessary because we be plug into system that only support that more complicated system", "for system that be n't so limited , i 'd far prefer we just use the actual correct single tree that we use for literally every other feature in the ls"], "issue_sim": [0.20739352703094482, 0.04490489512681961, 0.09640571475028992, 0.18144197762012482], "prob": [0.009858690202236176, 0.02646470069885254, 0.03955920413136482, 0.8944120407104492]}, {"target": [1], "doc": ["we would have to document that it be an effective no - op", "de facto use <tag> as the default shell already work fine on macos , after apply the workaround describe in <url>", "eventually we 'll need a documentation topic that describe all limitation with respect to use <tag> as the default shell on unix - like platform , currently summarize here : <url>"], "issue_sim": [-0.0450797975063324, 0.6137139797210693, 0.42476168274879456], "prob": [0.10895965993404388, 0.5548657774925232, 0.41942986845970154]}, {"target": [2], "doc": ["i 'd be happy to ponder over this if i understand the use case a bit well", "my main question be : who would call getvalue and under which circumstance", "naively i 'd expect that you can just have your own interface <tag> and then provide ng_value_accessor as usual , but wherever you be currently interact with a cva directly you inject they as that interface instead and use a type guard to see if they actually implement the method .", "side note : i wonder if long term all these api should n't be build as async by default"], "issue_sim": [0.004854017868638039, 0.029902439564466476, 0.363984614610672, 0.24883189797401428], "prob": [0.12900756299495697, 0.08665041625499725, 0.3859082758426666, 0.04270258545875549]}, {"target": [9], "doc": ["_ preface : upon reread , it be unclear if you be talk about remove the <tag> directive or not , but my argument can be apply to any sort of transformation between a form 's datum and what be store in a model , not just numeric input", "for simple use case , this may be sufficient", "however , i have a use case with about <number> <tag> field", "a rare case , admittedly , but it be what i 've get", "since i need to perform math operation on the user input , i would end up with significantly more than <number> compute property for those operation , and then the code to save to the server would be an annoying  merger of the compute property and the underlie data object", "i agree in principal with \" let <tag> just sync what the user actually input \" , however my contention be that when a user be present with a <tag> field the user 's intention be to input a number , so vue should store it as a number .", "the user do n't know that html5 's spec for number input be weird ; they be ask for a number , so they input a number", "i be fine if i have to do _ some _ work somewhere  , but i do n't want to have to define <number> + compute property and then write code to try and merge those compute property with another object just so i can turn it into json to send to my server", "it feel like an inelegant solution , compare to other framework", "my use case be numeric input , but be a little more pedantic , you could apply the same logic to the value for check box  , date field , radio button , etc", "any time you have a large number of property that need special handling , you 'll run into this problem", "i just do n't think that ' use a compute property ' scale well", "i 'd be a lot more sanguine if it feel like there be a clear path forward that have the same elegance i be use to in the rest of the framework"], "issue_sim": [0.3919811248779297, 0.18012839555740356, 0.16599929332733154, -0.008089026436209679, 0.3519194722175598, 0.24776986241340637, 0.06038060784339905, 0.3465622067451477, 0.10189331322908401, 0.2986266613006592, 0.14716026186943054, 0.2295612096786499, 0.14296391606330872], "prob": [0.11896425485610962, 0.0054497928358614445, 0.005940618924796581, 0.0025648768059909344, 0.264519065618515, 0.1929289549589157, 0.00722276559099555, 0.23406140506267548, 0.0007866300293244421, 0.3040904998779297, 0.0014603487215936184, 0.0013042333303019404, 0.3313933312892914]}, {"target": [0], "doc": ["i believe this kind of interaction can be achieve by use a formgroup with your changeon as the desire ' submit ' , and the individual control can have the changeon as ' blur ' .", "with the note  , you should be able to combine such functionality as you see fit", "for example <number> :", "have an encompass formgroup with updateon set to ' submit '", "the same child formcontrols for text can have the updateon set to ' blur '", "the toggle or whatever be prepende your name can have the updateon set to ' change '", "when the parent formgroup have a child that trigger the updatevalueandvalidity method , it should force it on the formgroup as well", "when the form be submit , it 'll trigger that method from the formgroup 's updateon ' submit ' value", "i know  be n't exactly what you be ask for , but i think via the change cycle and subscription it show how you can achieve what you be ask for part <number>", "when change the name , it do not update anything", "when navigate off the field , it update", "when change the prepend , it update", "when submit , it update", "for example two , the formgroup have updateon as ' submit ' will solve this issue ( while still have the formcontrols updateon as ' blur '", "do this help with the issue you be have"], "issue_sim": [0.36312681436538696, 0.057682231068611145, 0.0617886483669281, 0.40392786264419556, 0.31363123655319214, 0.2902179956436157, 0.3653159737586975, 0.4498937726020813, 0.17032791674137115, 0.2377198338508606, 0.14608916640281677, 0.2014845460653305, 0.20101463794708252, 0.45215904712677, 0.04266280308365822], "prob": [0.3088672161102295, 0.018257251009345055, 0.002039664890617132, 0.008803361095488071, 0.007522341329604387, 0.01145313773304224, 0.10465095937252045, 0.010126922279596329, 0.30300506949424744, 3.033095708815381e-05, 6.323509296635166e-05, 6.79513905197382e-05, 5.992133810650557e-05, 0.3402900993824005, 7.657068636035547e-05]}, {"target": [1], "doc": ["as mention initially , i think there be no well solution than to unzip each asset in its own folder , and let the user manage their filesystem themselves", "there be nothing i dislike more than self - extract archive that pollute my project tree .", "i 'd be for instal all asset to <tag> and let people do what they want with the content they download there", "some might want to keep it there for traceability , other might prefer to move the file individually to wherever they would be most sensible in their project"], "issue_sim": [0.3865226209163666, 0.2457638680934906, 0.19486720860004425, 0.1176672950387001], "prob": [0.4448293149471283, 0.09644012153148651, 0.10576114058494568, 0.15738122165203094]}, {"target": [1], "doc": ["i exactly want to create a global dirty checker solution that work for prompt the user when close the window", "i think i have a solution by use activatedroute.component , but that be the component type ... ;-)"], "issue_sim": [0.4923442304134369, 0.46330446004867554], "prob": [0.01679627038538456, 0.9769219756126404]}, {"target": [5], "doc": ["clarification : i mean to say ' per package ' , there be ten of same - but - different package", "for gulp , there be gulp - typescript , gulp - tsc , gulp - type ,", ", for webpack there be typescript - loader , awesome - typescript - loader , ts - loader ,", "my fear be that the same will happen for basically every other package", "the big one will likely converge into a group of people maintain they , but for the small one", "what could work , maybe , be if we can automatically generate npm package out of the dt repo . that would have the good of both world . hmmm"], "issue_sim": [0.18158090114593506, 0.37701553106307983, 0.39827796816825867, 0.025478050112724304, 0.013244779780507088, 0.38293468952178955], "prob": [0.10795503109693527, 0.13187217712402344, 0.14835552871227264, 0.0015871343202888966, 0.04391518980264664, 0.4141290485858917]}, {"target": [1], "doc": ["be there any progress about that", "this strongly limit our use - case as we want to have base app href dynamically configurable ."], "issue_sim": [0.08261498808860779, 0.46533748507499695], "prob": [0.026570910587906837, 0.9081568717956543]}, {"target": [2], "doc": ["@jszabo98 while that be an interesting question , it be incidental to this issue , so i encourage you to ask it on stackoverflow", "com instead ; the short answer be :", "the ets property be lose whenever a new string instance be construct ."], "issue_sim": [0.26278942823410034, 0.09855081140995026, 0.2870091199874878], "prob": [0.1858641356229782, 0.005628929473459721, 0.8262197971343994]}, {"target": [1], "doc": ["but <tag> already do mean subset", "if i be not mistaken , <tag> be simply typescript 's implementation of bounded quantification .", "do you have a specific example of behavior where you 'd do <tag> for some t not assignable to u"], "issue_sim": [0.12314289063215256, 0.538608729839325, 0.3172321915626526], "prob": [0.005578191485255957, 0.8156588673591614, 0.2740618884563446]}, {"target": [0], "doc": ["the concatenated string be pass to the translation tooling as binaryexpression", "we could probably make that bit of the translation code more lenient", "improve <tag> to be able to handle array of binary expression where the binary expression be a concatenation of string", "but at some point we be venture into partial evaluation of the code , which i 'd like to avoid"], "issue_sim": [0.39627623558044434, 0.24173569679260254, 0.29441165924072266, 0.13138338923454285], "prob": [0.02284863032400608, 0.03456493839621544, 0.23597723245620728, 0.10891386866569519]}, {"target": [6], "doc": ["i just notice that there be one significant difference between <tag> and the feature i originally propose .", "<tag> do not allow the caller to get a return value", "since the usual case be that there be only one receiver , this can be a significant disadvantage", "for example , say i 've get an <tag> callback and the child need to either confirm or reject change base on the success of the callback which may require contact the server and/or user interaction", "this can be easily handle by the parent return a promise when the <tag> callback be call", "however with <tag> this be not possible", "grant this could be solve by the parent respond with a broadcast event but then you need more event handler , a context and possibly a way to differentiate child of the same type"], "issue_sim": [0.1663384735584259, 0.2384110987186432, 0.046826690435409546, 0.43950188159942627, 0.5984212160110474, 0.13345053791999817, 0.5351928472518921], "prob": [0.29327070713043213, 0.03595941141247749, 0.019780809059739113, 0.4834653437137604, 0.017072850838303566, 0.005289736669510603, 0.46381792426109314]}, {"target": [0], "doc": ["my most problem that i can not do local \" find all reference \" .", "it produce a bunch of reference in the whole project", "i suggest it to fix this issue", "i think all of the user would be greatful if you implement this", "because it be correct behaviour and very much expect"], "issue_sim": [0.1060212254524231, 0.13316959142684937, 0.12680982053279877, 0.012824175879359245, 0.10841630399227142], "prob": [0.23676562309265137, 0.012563809752464294, 0.00037410695222206414, 0.008286622352898121, 0.7648187279701233]}, {"target": [1], "doc": ["@joyceerhl i agree we should consider if expose the whole content of the workspace to extension make sense", "with  also need this datum though , i think it would be nice to see if we can come up with a generic solution instead of have each extension / language re - implement this functionality", "i 'll keep talk with the ts team about our requirement for this", "for experimentation purpose , it sound like i may be able to hack something together use the remote hub file system provider today though", "@jacksonkearl and @jrieken   good suggestion to look into <tag>", "@joyceerhl/ @jacksonkearl   out of curiosity , be the tar store as a big binary blob in indexeddb , or do remote hub generate a more useful datum structure to work with it"], "issue_sim": [0.38484323024749756, 0.4464651942253113, 0.20057275891304016, 0.26517775654792786, 0.12056365609169006, 0.36517149209976196], "prob": [0.024161571636795998, 0.6438452005386353, 0.013207505457103252, 0.34780487418174744, 0.0001641763956286013, 0.0165118221193552]}, {"target": [0], "doc": ["look like the community prefer to stick with current syntax . i think it be worth give <tag> a well , clear name  , but we be not go to move forward with the <tag> prefix ."], "issue_sim": [0.3101745843887329], "prob": [0.999962568283081]}, {"target": [0], "doc": ["there <number> possibility how angular work with style on component level", "and work with they depend on it"], "issue_sim": [0.4942247271537781, 0.008889468386769295], "prob": [0.24031445384025574, 0.3104785084724426]}, {"target": [1], "doc": ["that sound pretty complicated -", "why should n't a module author just target <tag> and only depend on assembly that also target an appropriate version of <tag> ?", "take a look at how msbuild be think about this issue - it be really a similar thing : <url>", "i think we 'll need to do the same for powershell - ship the facade assembly alongside powershell", "exe in <tag> and , if applicable , <tag> - we would need to do that for v3 and v5", "1 at a minimum , maybe v4 and v5 as well"], "issue_sim": [0.053527671843767166, 0.3918260931968689, 0.4553661346435547, 0.5927659273147583, 0.20044094324111938, -0.021843547001481056], "prob": [0.0008960560080595315, 0.6431060433387756, 0.000578580133151263, 0.001486888388171792, 0.027568470686674118, 0.00010465339437359944]}, {"target": [2], "doc": ["in the meantime , you could use  with the <tag> option to enforce extension", "it would be nice if typescript could enforce this though", "typescript should be able to detect simple runtime error like not include a file extension in an import ."], "issue_sim": [0.288727730512619, 0.5585036277770996, 0.6001549959182739], "prob": [0.10677070170640945, 0.01658341847360134, 0.574694037437439]}, {"target": [0], "doc": ["it be important to be able to iterate over iterator in loop .", "that seem plainly obvious", "it be a fundamental feature of the language", "the reason for support it be :", "<number> ) iterator , maps , and set be all valid es6", "refuse to support they mean limit yourself to es5 , which be a decision become less and less justified over time", "<number> ) i be build an application that have internal datum store in maps and set", "instead of make they available to the ui , i now need to keep the datum sync between the two manually , or write boilerplate and import it into my template to do the conversion whenever the datum be need", "this be exactly what vue be intend to avoid"], "issue_sim": [0.3128010034561157, -0.007402496412396431, 0.02378757856786251, 0.023790137842297554, 0.26509466767311096, 0.09138324856758118, 0.17754650115966797, 0.4170292615890503, 0.03801129758358002], "prob": [0.8698936700820923, 0.002637160010635853, 0.0027770271990448236, 0.0005164149333722889, 1.129051270254422e-05, 0.010953609831631184, 2.4205237423302606e-05, 0.21085244417190552, 0.0006714892806485295]}, {"target": [0], "doc": ["yeah , maybe there be some other opengl extension that be not well support or which have some limitation"], "issue_sim": [0.40584009885787964], "prob": [0.9997830986976624]}, {"target": [3], "doc": ["this sound extremely surprising and inconsistent to i", "why should i not be able to inject this in a constructor like anything else", "this will also make for surprising and therefore very error - prone behavior", "there be no good reason that the lifecycle of injectable should depend on how they be provide .", "it be possible that the lifecycle of the injectable could be attach to that of the injector", "this be n't expose publicly as an api , though , so i do n't know how this look internally in angular and how much trouble it 'd be , but it 'd be the very least i would expect the framework to handle to fulfill the current contract for injectable in some sensible way", "however , i suspect this could be a problem for what you be do", "imo this be even bad by break the responsibility", "whether a lifecycle hook run would now depend on how the caller inject it , so the injectable have no control or knowledge over whether it have a lifecycle", "any injectable should trust that its hook will get run by the framework at the appropriate time", "personally i think the downside of the factory pattern be n't nearly as big as you be make it out to be", "yes , change dependency also mean change the factory", "but that be a trivial change to make , restrict to one very specific spot , and it be entirely compile time safe", "it be not really any different from have to update unit test , too"], "issue_sim": [-0.048507142812013626, 0.35845619440078735, 0.09543903172016144, 0.26154792308807373, 0.2949417233467102, 0.38904333114624023, -0.05577610433101654, 0.06763803958892822, 0.34546250104904175, 0.24274367094039917, 0.17535251379013062, 0.21652011573314667, 0.25264042615890503, 0.1817287802696228], "prob": [0.004384821746498346, 0.02136389911174774, 0.012807048857212067, 0.32300129532814026, 0.0036909873597323895, 0.04867849498987198, 0.0009317495278082788, 0.00014274225395638496, 0.044569335877895355, 0.0011504580033943057, 0.028697187080979347, 5.360070281312801e-05, 0.041307106614112854, 0.0014688200317323208]}, {"target": [1], "doc": ["can you build a specific scenario in which you need a template with multiple root node", "i 've be use bootstrap and table with vue since the beginning and have never need multiple root node ."], "issue_sim": [0.4580230414867401, 0.5218466520309448], "prob": [0.17993023991584778, 0.8023367524147034]}, {"target": [0], "doc": ["or if you be sure that you would never need to provide interpolation in your string then you could have a simplify version of <tag> which look like :"], "issue_sim": [0.3573748469352722], "prob": [0.9999557733535767]}, {"target": [4], "doc": ["there be really no point in @reduz implement vulkan support now anyway", "most game be make in godot be n't performance hog", "if your game be perform poorly there be probably something else that can  be do to improve it", "i personally love the many new improvement they 've do that probably would n't exist have he be spend time on learn and implement vulkan", "push it off for a while will probably result in a much well vulkan renderer because more \" good practice \" and \" common pitfall \" will be more well known and easy to research in a year or three . :)"], "issue_sim": [0.7656122446060181, 0.31739741563796997, 0.22100502252578735, 0.4395836889743805, 0.4731215536594391], "prob": [0.007509076036512852, 0.09882106631994247, 0.2946055829524994, 0.14784233272075653, 0.5995648503303528]}, {"target": [0], "doc": ["you ca n't just <tag> , that mean you 'd have to keep all modifier like <tag> and <tag> in the runtime"], "issue_sim": [0.20921942591667175], "prob": [0.9999724626541138]}, {"target": [3], "doc": ["imho it be because a lot of the c # talk be fuel by people who want godot to be a unity ripoff , but fortunately many here realize that godot be its own thing and already ahead of unity in many regard and it would n't be fair to let it become affect by the same issue .", "@alabd14313 i would change the title but perhaps it be well to create a separate issue and keep this for the sake of posterity so that it can be link when someone propose c #", "i be hesitant on the visual scripting , to be honest , but if it can be implement as a module then why not", "of course , i think have visual scripting  , gdscript  and c++  would make godot a pretty balanced program suitable for all level of skill , but make c++ code less cumbersome and allow easy interfacing with third - party library should have a high priority , imho , because it can bring in a lot of professional user"], "issue_sim": [0.47165387868881226, 0.2542761564254761, 0.32709139585494995, 0.6071677207946777], "prob": [0.627995491027832, 0.006173195317387581, 0.16172106564044952, 0.5798530578613281]}, {"target": [0], "doc": ["hmm , be it too much to ask apple to add a <tag> option to <tag> and have powershell call the binary ?", "i be all for having <tag> support this , but , i be somewhat against reinvent it within powershell", "if macos update their implementation to include something like <tag> , then we 'd have to stay on top of that change and add it to our own implementation", "it make well sense to i to call out to <tag> and either parse or evaluate the result"], "issue_sim": [0.39317265152931213, 0.4762701988220215, 0.335679292678833, 0.12822261452674866], "prob": [0.19974277913570404, 0.01349171157926321, 0.09004224836826324, 0.010341531597077847]}, {"target": [0], "doc": ["one way to solve this could be e.g. change the editor logic so it always have an additional , hidden root node .", "or just adapt your node format to possibly contain nothing , and the load of the scene editor to be happy with possibly load up nothing"], "issue_sim": [0.2728455662727356, 0.33999431133270264], "prob": [0.7526905536651611, 0.210837259888649]}, {"target": [4], "doc": ["i do not think it be useful for bare - specifier in <tag> value to ever be treat as <tag>-relative", "if the user want that , they should use a relative specifier", "if they be instead pass to the resolver directly , it then raise the question of whether that resolution would include further path resolution", "path resolution be a demon - haunt world of complexity", "i would strongly err towards simplicity rather than completeness , and because i do n't have a use - case for bare - specifier here , i 'd suggest errore for now  .", "if someone want the feature , it can always be add later"], "issue_sim": [0.21217739582061768, 0.16812407970428467, 0.2229360193014145, 0.13300821185112, 0.34003186225891113, 0.09223870933055878], "prob": [0.43442144989967346, 0.00028684514109045267, 0.010001069866120815, 0.00011582869774429128, 0.4492586851119995, 0.00015094716218300164]}, {"target": [1], "doc": ["this be a pain even in the runtime", "when i want to create component dynamically , i have no reference to its change detector to execute <tag>   when i update its property via api"], "issue_sim": [0.07806521654129028, 0.5633251070976257], "prob": [0.11388939619064331, 0.8664190769195557]}, {"target": [2], "doc": ["i think <tag> and <tag> be just fine", "if they be confuse , it just mean that more documentation should be write about they", "<tag> or <tag> be redundant , as all godot method be run directly when they be process , unless you call they with <tag>  .", "as someone mention above , if <tag> be rename to <tag> , people would start wonder why they can still access the <tag>'d node in the same loop", "so nothing to change imo"], "issue_sim": [0.23775485157966614, 0.19056284427642822, 0.4642150402069092, 0.3715948164463043, 0.1961057186126709], "prob": [0.006158854346722364, 0.02249707654118538, 0.7060519456863403, 0.5910053849220276, 0.00030361340031959116]}, {"target": [1], "doc": ["you be right , that would be tricky , but i 've since realize that the problem can be tackle differently , and i 've substantially revise the original post ; in a nutshell :", "type that normally serialize to a _ scalar _  should _ never _ serialize differently base on the situational presence of noteproperty / scriptproperty member ."], "issue_sim": [0.10134457051753998, 0.48792797327041626], "prob": [0.784604549407959, 0.3497909903526306]}, {"target": [0], "doc": ["would it make sense to always call <tag> on certain event ?", "<tag> on <tag>and <tag> on <tag> in particular", "be there any legit use case where you * * do n't * * want to preventdefault for these three case"], "issue_sim": [0.3548884093761444, 0.15456920862197876, 0.2824222445487976], "prob": [0.9590652585029602, 0.0016289225313812494, 0.054240040481090546]}, {"target": [0], "doc": ["miss subject be a bad practice", "by default , we must ask for it to present"], "issue_sim": [0.12564074993133545, -0.02306898683309555], "prob": [0.02583223395049572, 0.7576027512550354]}, {"target": [6], "doc": ["@herringtondarkholme thank for the direction", "you be correct , <tag> do indeed resolve this issue for my use case", "the original jsfiddle you update do not work correctly because it be use old version of vue and vuex", "i have create another  with vue and vuex 2", "0 which demonstrate the update functionality", "your suggestion of a compute property make sense to i if i intend to display the content separately through the template , however that part of the jsfiddle be just for example purpose", "i still believe a <tag> option would be necessary for a contenteditable component that also act as the display .", "basically for anything that act as a \" text editor \"", "your <tag> solution work as long as i be ok with not re - render the component , however i could see use case where one might wish to re - render a component   <tag> or <tag>", "i be currently work on add a watcher to trigger component re - render <tag> , but have not have success", "i would still be interested in see a <tag> hook , or on a more macro scale , an option to end the lifecycle at any point without cause error"], "issue_sim": [0.01991420052945614, 0.20649777352809906, 0.4110909700393677, 0.14735782146453857, 0.060980964452028275, 0.35801130533218384, 0.5796890258789062, 0.17883585393428802, 0.5343533754348755, 0.5025556683540344, 0.35595399141311646], "prob": [0.007010920438915491, 0.043034426867961884, 0.037493761628866196, 0.0006171579007059336, 0.000598217302467674, 0.16171228885650635, 0.01748836226761341, 0.0006831053760834038, 0.05986150726675987, 0.006560185924172401, 0.062006875872612]}, {"target": [2], "doc": ["@tytskyi i already use my own version within my own code space", "so no immediate need", "but for the sake of dry and not copy the same code into all future project , it would be great to have it come from a single package .", "something like * * @angular / contrib * *   should be good", "contribute by other , bless by @angular team"], "issue_sim": [0.09007848799228668, 0.018274053931236267, 0.028816979378461838, 0.2540203332901001, 0.2051820158958435], "prob": [0.0069290692918002605, 0.02499934285879135, 0.9034855961799622, 0.00467622559517622, 0.0036444631405174732]}, {"target": [0], "doc": ["i think your approach be n't quite work . your <tag> would n't be a propper type , since it depend on a type <tag> which you neither define as a type parameter nor provide as a type argument .", "also , while <tag> do evaluate to <tag> , that do n't seem very helpful , since the inner <tag> shadow the outer one you be declare", "so basically <tag> and <tag> behave exactly the same", "the only difference be that <tag> have an unused type parameter", "with my proposal implement , you could achieve the want behavior as follow :", "note that the function type of <tag> do n't have its own <tag> type argument anymore , so the argument really must match the type you provide to <tag>"], "issue_sim": [0.5669545531272888, 0.12504824995994568, 0.19013631343841553, 0.37670373916625977, 0.3045218288898468, 0.5777560472488403], "prob": [0.44114038348197937, 0.5346153378486633, 0.0014008065918460488, 0.0009286365238949656, 0.00044326865463517606, 0.2009461224079132]}, {"target": [1], "doc": ["@gbezyuk i be , however suggest you to create it as a separate package", "imo the benefit be not enough to include it in the core"], "issue_sim": [0.151620015501976, 0.15026094019412994], "prob": [0.0433795303106308, 0.727121114730835]}, {"target": [4], "doc": ["gdnative be already integrate too", "mono be integrate in c # version only", "i guess it be rare to find a developer without a c compiler instal on his machine", "i do n't understand where be the problem to add a so common dependency", "for android export you must enter the path of jdk in the setting , and other path for external thing , why not enter the path of gcc or mingw ?"], "issue_sim": [0.09207285940647125, 0.21746477484703064, 0.28803735971450806, 0.25840163230895996, 0.27335426211357117], "prob": [0.0037228052970021963, 0.11746757477521896, 0.0771041288971901, 0.010937436483800411, 0.6554034352302551]}, {"target": [0], "doc": ["the deprecation of <tag> on fc seem particularly ugly when view through a typescript ergonomic lens , add my comment on their rfc :"], "issue_sim": [0.2637850344181061], "prob": [0.9999918937683105]}, {"target": [1], "doc": ["weird - vscode 's syntax highlighter do n't even think it be valid :", "like , i feel like the square bracket  should certainly be correct syntax in ts , even if the old interface syntax be still valid - just because it work for symbol , so it feel like it aught to work for other primitive ."], "issue_sim": [0.3358718156814575, 0.6046947240829468], "prob": [0.03698877617716789, 0.9486855864524841]}, {"target": [1], "doc": ["offtopic : @yyx990803 ,", "if that be already a plan maybe it be a nice idea to have a v3 discussion issue about possible break / browser compatibility change ?"], "issue_sim": [0.030179288238286972, 0.12559673190116882], "prob": [0.002524235751479864, 0.9723339676856995]}, {"target": [2], "doc": ["that can be say about many , many thing / feature", "look at react , where the core lib come with even less feature than vue  , like no transition system , the community simply come up with a bunch of solution , eventually one of those lib become a de - facto - standard", "it be not the goal and mission of vue to provide a core feature for every common need in web development - the goal be to provide the basic toolset to build solution that satisfy these need .", "and while portal - vue do n't have thousand of star , it be gain in popularity and could solve the problem in that way - all of the above solution would converge on use portal - vue in that case", "even if that do n't happen , the code involve to build a bare - bone portal solution for a single library like a drodown be very small , so i do n't see a big overhead here", "that be say , we might add portal at some time in the future , when we work on vue <number> , rewrite the virtualdom and simply do that in a way that keep portal in mind as a core feature", "right now the problem can be solve elegantly enough in userland , so there be no immediate need to put a lot of work into a core implementation", "* disclaimer : i be the author of portal - vue and a vue core team member , so there may be some conflict of interest , but at the same time , i know both perspective *"], "issue_sim": [0.008573033846914768, 0.38611161708831787, 0.2515650689601898, 0.4098658561706543, 0.3838610053062439, 0.4354405999183655, 0.10940022766590118, 0.3614198863506317], "prob": [0.0022984733805060387, 0.3463640511035919, 0.06783533841371536, 0.47042983770370483, 0.22052080929279327, 0.16657081246376038, 0.03165000304579735, 0.12165495753288269]}, {"target": [1], "doc": ["the actual syntax of <tag> as a function be :", "so if you really want you could do define a function that create <tag> object :", "and then you could do something like :", "and the <tag> translation tooling will pick this up ok"], "issue_sim": [0.17643868923187256, 0.26210737228393555, -0.04917692393064499, 0.17038768529891968], "prob": [0.8093770742416382, 0.40803393721580505, 0.005887685343623161, 0.002854842459782958]}, {"target": [1], "doc": ["i 'd be happy to implement this in userland , but the issue be that there be no expose api that i could use to render vnode to a string", "the reason you * * ca n't use * * <tag> be because the operation be async , and the bundle renderer wo n't wait for promise in the <tag> operation", "async function rendervnodes {", "// create bundle renderer for the head", "// return render string", "// error because template ca n't handle promise value", "//pass $ ssrcontext the vnode renderer"], "issue_sim": [0.5333244800567627, 0.37392890453338623, 0.2300141453742981, 0.4377868175506592, 0.46336042881011963, 0.2789574861526489, 0.2829328775405884], "prob": [0.874647319316864, 0.7733579277992249, 0.00015762861585244536, 0.025862133130431175, 0.0007093861349858344, 0.07191525399684906, 0.011026431806385517]}, {"target": [1], "doc": ["same , but i find i get easily distract by completion pop up when i be try to think , so i already have a habit of press <tag> quite a lot to get rid of visual noise , so this one do n't bother i", "i really do n't have a strong opinion here , but i think the most valuable place to have placeholder be on the <tag> type annotation on an overload implementation signature , because a user be pretty likely to want to change that .", "on the other hand , the fact that we produce <tag> there be already something we 'd like to improve in the future", "@danielrosenwasser 's big concern with decision around the placeholder be not disrupt user ' muscle memory for get to where they be try to end up , but i tend to think that concern be mitigate by the fact that we be land the cursor in the method body right away now", "but this be perhaps something we do n't want to flip flop on and confuse user , so it would be nice if we can reach a consensus we feel good about before 4"], "issue_sim": [0.2845308184623718, 0.4105352759361267, 0.07709850370883942, 0.43787088990211487, 0.15019814670085907], "prob": [0.3714805841445923, 0.2843357026576996, 0.06978607177734375, 0.0023288705851882696, 0.29935285449028015]}, {"target": [0], "doc": ["perhaps i should have mention that both <tag> and <tag> be entry point .", "if you be suggest that i synchronously load it , the symbol file will be inline in both entry point and will create two different symbol"], "issue_sim": [0.25731152296066284, 0.5894163846969604], "prob": [0.9794918298721313, 0.015191360376775265]}, {"target": [4], "doc": ["<tag> would print \" hello \" , and <tag> would print null , just as in python and lua", "the logic behind be that the operator do n't return true or false , but the last evaluate argument", "however if you use comparison operator in the expression  then you 'll get boolean as usual", "i 've mostly use this in lua , where ternary do n't exist <url>", "i be just do the suggestion because i 've see this technique use not only in lua , but also in javascript , and the fact python support it could mean it could have be request and use for a reason .", "i be ok with explicit ternary , just want to know the community opinion", "edit : another point be that the first operand be evaluate only once"], "issue_sim": [0.5646252632141113, 0.4577326774597168, 0.41937410831451416, 0.48240548372268677, 0.5085415244102478, 0.14875183999538422, 0.4254991412162781], "prob": [0.15462706983089447, 0.0417194627225399, 0.06048255413770676, 0.0009655854664742947, 0.7674082517623901, 0.03748037666082382, 0.005907715763896704]}, {"target": [0], "doc": ["it would n't destroy the module as in require a reload , but it would destroy the instance and all the datum in it .", "angular do have a public api for destroy ngmoduleref 's", "i expect that if i get a reference to the lazy load ngmodule and destroy it , it would recreate a new instance when revisit the route", "with no datum leave from the previous session", "\" you ca n't access private method and property from angular internal api", "heh , it be js , we all know that be not really true at runtime ;)"], "issue_sim": [0.5187678933143616, 0.3399255573749542, 0.5686004161834717, -0.022142592817544937, 0.28520604968070984, 0.2211466133594513], "prob": [0.6208148002624512, 0.0008872488397173584, 0.25427407026290894, 0.0016111057484522462, 0.00022852799156680703, 0.408321350812912]}, {"target": [3], "doc": ["i 'd love to see some number on that", "what i be try to do be to understand what be well , and the array syntax be simple and more straightforward because of <number> args vs n args", "my idea be that we should try to push only one syntax forward and adapt onto that one", "keep backwards compatibility with the other one be up to the lib use it , but i think it should be avoid as much as possible because js be full of backward compatibility thing"], "issue_sim": [0.028824681416153908, 0.2765989303588867, 0.20633208751678467, 0.31786930561065674], "prob": [0.00972757674753666, 0.30950412154197693, 0.01144749391824007, 0.5620754361152649]}, {"target": [0], "doc": ["as a matter of _ convention _ , we usually generate an error for a non - wildcard query e.g. <tag> return a error , but <tag> quietly return nothing ."], "issue_sim": [0.3881463408470154], "prob": [0.9999841451644897]}, {"target": [1], "doc": ["yeah i be oppose to inaccuracy in a _ basic _ function like <tag>", "the function offer by godot should be accurate up to machine precision by default , and you should _ choose _ to trade accuracy for speed _ only if _ you need it .", "the good option be to expose <tag> and other such \" hack , \" but let the user or specific piece of code use it when need , i", ", replace call to <tag> with <tag> where need instead of modify <tag> itself"], "issue_sim": [0.08703114092350006, 0.10181548446416855, 0.04752581939101219, 0.017923515290021896], "prob": [0.12087913602590561, 0.8229899406433105, 0.23894871771335602, 0.07415947318077087]}, {"target": [0], "doc": ["as i comment / update the issue for : by invoke <tag> , nothing need to be parse .", "the c - shell command be syntactically valid powershell - we just need to temporarily define <tag> :", "if anyone want to lobby apple for a <tag> option and if they ever implement it , that 'd be great , but i certainly do n't think powershell should block on that"], "issue_sim": [0.3258735239505768, 0.48220759630203247, 0.35215914249420166], "prob": [0.33380258083343506, 0.16238494217395782, 0.282042920589447]}, {"target": [3], "doc": ["- should this proposal include an angular cli migration script to migrate project to these new value", "- should it also include remove the <number> deprecate <tag> value", "- i also assume that the proposal include update the two related api doc and the ssr guide", "as for <tag> , i think that we should deprecate it and just map it to <tag> for now .", "then it could be consider for removal follow the normal deprecation policy", "would this go into version <number>"], "issue_sim": [0.27825671434402466, 0.1467013955116272, 0.1334034502506256, 0.3033297657966614, 0.10809449851512909, 0.0947219729423523], "prob": [0.35753706097602844, 0.04413200169801712, 0.376899391412735, 0.4611470401287079, 0.005863548256456852, 0.0005584701430052519]}, {"target": [3], "doc": ["they be different in any case", "<tag> work both in 2", "2 regardless of exist of index signature", "so add index signature affect only pass a value not use it .", "sorry , do n't get it", "what do have impact"], "issue_sim": [-0.024282293394207954, 0.0969133973121643, 0.2085299789905548, 0.3701079189777374, 0.025911962613463402, 0.07497455179691315], "prob": [0.1778215765953064, 0.08177687227725983, 0.1010393351316452, 0.6252729892730713, 0.0055491249077022076, 0.004862347152084112]}, {"target": [3], "doc": ["any chance we can get this issue reopen", "a common use case for i be the need to automatically format datum in a field as it be be type in", "something like take ' <number> ' and turn it into ' 10/12/16 '", "be able to create a custom v - model modifier would greatly simplify my code since i could write v-model.date instead of have to build a custom input component with prop and event ."], "issue_sim": [0.07230917364358902, 0.23775134980678558, 0.15582603216171265, 0.49075546860694885], "prob": [0.008579351007938385, 0.7125433683395386, 0.030992761254310608, 0.6057819724082947]}, {"target": [1], "doc": ["i 've run into this as well", "i feel like the default should be use if a prop be not define ."], "issue_sim": [-0.03320494666695595, 0.4752674698829651], "prob": [0.10878069698810577, 0.9294987320899963]}, {"target": [0], "doc": ["that be how we 've implement the feature for vs code 's json and html support at least"], "issue_sim": [0.38624584674835205], "prob": [0.999947190284729]}, {"target": [3], "doc": ["thank for take the time to write this up , i appreciate it", "i think understand the use - case help in find solution , be it exist one or to think about a possible new feature", "i 'll follow up with my thought on this below , but let 's see what the angular team think about it", "since this be about prevent misconfiguration during development , would n't you rather want this to be a compile - time error rather than a runtime one , though ?", "this could probably be cover in a test that scan the source for routing module and then perform the check", "as for a runtime version you could have a service which inject router and then parse router#config this way to log the error", "this would n't disable those route , though this could then still be achieve by keep that validation result and access it from a guard"], "issue_sim": [-0.000496437307447195, 0.2533966302871704, 0.24495843052864075, 0.17858493328094482, 0.2322457730770111, 0.4178314208984375, 0.4042678475379944], "prob": [0.008282531052827835, 0.13562645018100739, 0.034938156604766846, 0.4264266788959503, 0.0058546350337564945, 0.02186834253370762, 0.015919731929898262]}, {"target": [0], "doc": ["btw , all that seem to be necessary to qualify interpret an object as an array  in v8 seem to be a numerical <tag> and a function in <tag> : <tag>"], "issue_sim": [0.3516623377799988], "prob": [0.9999940395355225]}, {"target": [1], "doc": ["from a correspondence on <appname> :", "basically godot can compile game to android , but the actual editor do not have a port yet .", "with the rise of android base tablet , i see more and more people use their tablet with a keyboard for work", "as an owner of an android galaxy note 10", "1 and someone who spend <number> hour travel on the train every work day , i start contemplate use that time to do some coding", "unfortunately there be not many option at the moment , because most game engine have a huge footprint", "the only i find that work well be love2d , but to develop for it you do not have nice thing such as code autocompletion on android", "i think that have the editor also work on mobile device would be a great way to take advantage of it be small footprint and bring to those platform something that be currently not very available for they", "@reduz   say it be not difficult to do , and work would be welcome", "here be love2d on the google play store btw", "have godot at the playstore will give it more exposure , as there be currently no competition - apart of love2d", "there be seriously no other game engine editor on there atm"], "issue_sim": [0.0856580138206482, 0.6783380508422852, 0.2729065716266632, 0.27744317054748535, 0.18494407832622528, 0.3472599983215332, 0.45469146966934204, 0.34266018867492676, 0.06712475419044495, 0.2587890028953552, 0.28542324900627136, 0.3720616102218628], "prob": [4.28877183367149e-06, 0.451402872800827, 0.008123738691210747, 0.0025982337538152933, 0.03813928738236427, 0.00032380729680880904, 0.1330912709236145, 0.5347403883934021, 1.2335016208453453e-06, 2.0510117337835254e-06, 0.0018331932369619608, 2.0024614059366286e-05]}, {"target": [0], "doc": ["my problem occur when i try to implement translation from large block markdown to html , and result to insert into <tag> .", "i do not see how i can get around this problem", "if you do a prompt , i will be grateful"], "issue_sim": [0.30055004358291626, 0.04930313304066658, 0.04395957291126251], "prob": [0.9465071558952332, 0.01807321421802044, 0.047543004155159]}, {"target": [0], "doc": ["it be a small difference , but <tag> would be much nice than <tag> .", "i see the consistency with <tag> , too"], "issue_sim": [0.0926331877708435, 0.04939350113272667], "prob": [0.9301676154136658, 0.003185780020430684]}, {"target": [0], "doc": ["the modifier have be parse when template compile. if we support modifier we should support parse modifier at runtime", "imo this be not a good idea"], "issue_sim": [0.3236771821975708, 0.16047446429729462], "prob": [0.9291139245033264, 0.0268254391849041]}, {"target": [1], "doc": ["thank for your proposal , it would be a perfect compromise : +1 :", "however i try it and it do n't work as be , because at the end of compilation , when <tag> try to replace pre - build english string with french one , it seem to expect every element of the node to be <tag>s :", "<tag> <tag> $ localize <tag> <tag>", "from function <tag> :", "what be i do wrong"], "issue_sim": [0.07560808211565018, 0.4376910626888275, 0.31867456436157227, 0.07959027588367462, 0.05479278415441513], "prob": [0.23796992003917694, 0.8911821246147156, 0.005448728799819946, 0.005938295740634203, 0.0018397764069959521]}, {"target": [0], "doc": ["when a tag like <tag> grow to those dimension so i have to start think about how to write it more elegantly , i 'd prefer to just throw out the whole thing and handle it in javascript : <tag>", "there 'll be an overhead when i want to use it in different location with different configuration , but in my opinion it be preferable to introduce new syntax sugar"], "issue_sim": [0.5456964373588562, 0.46660080552101135], "prob": [0.7665521502494812, 0.3242616355419159]}, {"target": [2], "doc": ["@yortus that be great", "it seem the trick be the \" extend \" and one of the literal type with the notable exception you mention", "booleans , tuples , number , and string all work when give the specific type use <tag> which make the <tag> function a short option when you do n't want to re - type the literal .   so other than symbol , it be possible today to achieve the desire behavior .... just not ideal .", "imo it would be great if something as simple as this would prevent widening in all case :"], "issue_sim": [0.08044984191656113, 0.3228066861629486, 0.5845856666564941, 0.2248564064502716], "prob": [0.002523567993193865, 0.09094993025064468, 0.8760769963264465, 0.002003245521336794]}, {"target": [1], "doc": ["@kilasuit i agree with you , but the alia issue be just an example", "if we can let powershell * * know the version a script be create for * * , we will be able to introduce \" break change \" to powershell itself in the future by provide compatibility mode for legacy script  ."], "issue_sim": [-0.06775134056806564, 0.739254355430603], "prob": [0.038292046636343, 0.9548420310020447]}, {"target": [0], "doc": ["i suggest this at first , but then i realize the behavior be pretty good if we just make sure the _ first _ tab stop be in the method body .", "then a user can tab into the parameter if need , or can hit the escape key to remove those tab stop", "there   an item open in # <number> to make the method body both the first _ and _ the last tab stop as an additional improvement", "i agree i do n't often want to edit the parameter name / type , but as long as they do n't stop i from get to the method body , they do n't bother i", "from our conversation in the editor sync , i think @danielrosenwasser like have the tab stop , so this seem like a good compromise to i"], "issue_sim": [0.5423380136489868, 0.44021791219711304, 0.5014089345932007, 0.3241669535636902, 0.31238096952438354], "prob": [0.4424190819263458, 0.04523458704352379, 0.06507711112499237, 0.5067901611328125, 0.02093641832470894]}, {"target": [6], "doc": ["i 've read through this a few time and i personally do n't think <tag> be need", "nearly every time i think i might like this , i find out that i be n't completely understand my problem", "the follow two code snippet be all that i 've ever need", "start with number one , migration to number two be very straightforward :", "when the occasion call for a proper wrapping element , you just need to change the <tag> tag to a real tag :", "every loop in every codebase i manage fall in to one of these two option", "i understand that other template language have an <tag> feature , but i feel like add more vue - specific syntax will raise the barrier of entry for newcomer ."], "issue_sim": [0.1163330227136612, 0.08681856840848923, 0.09378130733966827, 0.11611483246088028, 0.398722380399704, 0.19128373265266418, 0.3845301866531372], "prob": [0.12141815572977066, 0.18310867249965668, 0.007349634543061256, 0.029818816110491753, 0.11359699070453644, 0.004743638448417187, 0.44322511553764343]}, {"target": [1], "doc": ["lead slash refer to the root directory , so this be an absolute path", "path mapping do not work on absolute or relative path ."], "issue_sim": [0.2296062409877777, 0.2916998267173767], "prob": [0.16996003687381744, 0.43559372425079346]}, {"target": [2], "doc": ["i think i originally misunderstood the request when i add it to 2", "6 - after look at it in more detail i think this can be do in userland", "there be a few thing that i have concern about land this in vue itself :. - this method can not be expose on the <tag> runtime , since it be a server only utility", "- it be well expose on <tag> as an inject helper", "- the <tag> expose by <tag> can only be async because there may be async component or async data prefetch function down the tree", "we can not expose a sync api because it will not work correctly in all case", "in comparison , it be much easy to write a simple vnode - > string render function that only handle predictable <tag> content", "the use case also seem niche , so i think we 'd be well off to test an implementation in userland first"], "issue_sim": [0.10686678439378738, 0.047795865684747696, 0.35290348529815674, 0.3327706456184387, 0.28659510612487793, 0.33271387219429016, 0.5341252088546753, 0.2142741084098816], "prob": [0.008177144452929497, 0.02027035877108574, 0.3773302137851715, 0.003203504951670766, 0.08896085619926453, 0.002268892480060458, 0.0882706567645073, 0.03303593769669533]}, {"target": [2], "doc": ["they be mainly for style preference , yes", "but i do have a another use case for it", "it be very convenient to pass a group of method to a child component .", "12 , i have a validation component use to show server - side validation error", "it use a component in conjunction with a mixin", "here be a water - down   version of it :", "* * component * * :", "inherit : true ,", "<tag> <tag> <tag> js", "return { servervalidation : { } }", "if  ) return true ;", "if  ) return null ;", "validationerrors || { } ;", "<tag> <tag> <tag> js", "in short , i have a component and a mixin that work hand in hand", "12 support <tag> , the component be able to utilize the validation method directly from the parent component", "fast forward to 1", "0 , and <tag> be no more", "i 'll now have to pass all those method down directly into the child component", "pass they all separately  would severely clutter up the template , so i think group they all in a single object and only pass that in would make more sense", "i might be approach this all wrong , and i 'll be happy to hear of an alternate solution", "regardless , i still think allow method to be group be a good idea"], "issue_sim": [0.11084210872650146, 0.10866547375917435, 0.3189735412597656, 0.3013659119606018, 0.22394566237926483, 0.15209683775901794, -0.039273232221603394, 0.18066903948783875, 0.375652015209198, 0.09380202740430832, 0.17467087507247925, 0.1733020842075348, 0.10374417901039124, 0.375652015209198, 0.08435700833797455, 0.29888463020324707, 0.02044159173965454, -0.07408186048269272, 0.29769375920295715, 0.3082960247993469, 0.1758633852005005, 0.24271813035011292], "prob": [0.009141489863395691, 0.017277443781495094, 0.21564742922782898, 0.0031690536998212337, 0.0006918217404745519, 0.009579958394169807, 0.0012601367197930813, 0.000989175634458661, 0.0011411079904064536, 0.0004971670568920672, 0.00043263702536933124, 0.0006573548307642341, 0.0019209067104384303, 0.0012876695254817605, 0.025275589898228645, 0.02298831380903721, 0.00226387451402843, 0.001267521409317851, 0.0018789204768836498, 0.10226825624704361, 0.006882078945636749, 0.011419190093874931]}, {"target": [0], "doc": ["this seem to go against the design goal of typescript because it introduce an opinion about import path should be interpret which be clearly not the same across all javascript framework and platform .", "bare node interpret it this way , sure , but many framework include the popular meteor framework and also user of babel support map the lead slash to mean the project root not filesystem root", "let 's face it , import a file from the filesystem root be about as useful as a cap lock key and we know many people remap that key as well", "and not that i think you should support everything that flow do , but they also support map the lead slash to something else : <url>", "here be some other example of platform that use the lead slash to mean something else :", "if you ca n't tell i really want to use typescript on this project but this be a show - stopper", "thank for consider this"], "issue_sim": [0.4510178565979004, 0.3403612971305847, 0.19024449586868286, 0.18491685390472412, 0.1569119095802307, 0.41836661100387573, -0.016108810901641846], "prob": [0.958676278591156, 0.6344080567359924, 0.8984447717666626, 0.07000868767499924, 0.0006250374135561287, 0.00416608527302742, 0.00017198653949890286]}, {"target": [0], "doc": ["i would say for the first question , i do n't care if it work automatically , but that it at least do n't require another abstraction to accomplish .", "it should basically work close to how it would work if there be no component", "this be a huge part of the problem for i", "i have n't be able to solve it because of a few case where i want to use enum constant  in option value", "value <tag> be always a string , and thus , this solution would not work where the type of the value prop should be literal / expression :", "maybe it would be possible to make <tag> v - model=\"$attrs \" <tag> work similar to <tag> v - bind=\"$attrs \" <tag> and be smart enough to not warn about direct prop mutation", "what be really need be some way of get the prop attribute , why be we only allow to get access to the non - prop one"], "issue_sim": [0.25458234548568726, 0.2628692090511322, 0.00712154246866703, 0.2518325746059418, 0.3907148838043213, 0.3985426723957062, 0.38742923736572266], "prob": [0.3279615342617035, 0.030737871304154396, 0.0015044399769976735, 0.40405187010765076, 0.2506043612957001, 0.1733858436346054, 0.1679188460111618]}, {"target": [0], "doc": ["alias be very different than intellisense because they be short and do n't require iteration .", "in case of script , the common problem be positional argument", "if those script writer adopt alias instead , the tooling can replace it with full name , which can not be do with positional args", "- writing and reading be short and confident", "- cli history be clear and easy to navigate", "- help replace positional args with full parameter name in script", "- easy adoption when come from curl", "@brucepay , @markekraus i do n't consider loop", "i think it be a very rare use case for restful query", "however , there be a coherent way to improve json serialization in general", "<tag> can have a <tag> accept <tag>  , <tag> , <tag>", "web cmdlets should always use <tag>", "once it detect a circular reference , it throw an exception alongside a hint to use <tag> for more option", "if a break change for <tag> be not an issue , the default can be <tag>", "and since it already fail silently once the default depth  be reach , i would n't mind to break the behavior at all", "good point on auto scheme and primitive type", "<tag> should accept <tag> and act just like <tag>", "the key issue be that in case of rest api , json seem to be the default body format instead of form", "take the default asp", "net core project as an example", "it automatically convert a json body , but fail for form"], "issue_sim": [0.3067006766796112, 0.19314755499362946, 0.3886765241622925, 0.045574165880680084, 0.08917517215013504, 0.4096202552318573, 0.2193051278591156, 0.19035261869430542, 0.2728685140609741, 0.2517722249031067, 0.31094422936439514, 0.19735805690288544, 0.2562442123889923, 0.23578372597694397, 0.17046457529067993, 0.05144212394952774, 0.334276020526886, 0.5031626224517822, 0.14949700236320496, 0.13492867350578308, 0.48719948530197144], "prob": [0.6618545651435852, 0.03150416538119316, 0.16942721605300903, 0.012060681357979774, 0.002221073489636183, 0.0028760835994035006, 0.004901188891381025, 0.0012498708674684167, 0.0007380328606814146, 0.0010203358251601458, 0.0034840635489672422, 0.0002887265582103282, 0.002590147778391838, 0.00902879610657692, 0.008770749904215336, 0.003961839247494936, 0.000918267818633467, 0.02009185589849949, 0.0003988065873272717, 0.002272488083690405, 0.005581324454396963]}, {"target": [0], "doc": ["in fact the above method do not solve all the situation , i think add <tag> in template be a well way"], "issue_sim": [0.37282055616378784], "prob": [0.9998015761375427]}, {"target": [1], "doc": ["yes , its important that all language feature compose easily", "the spread operator solution would be okay but it kinda break the abstraction barrier .", "the developer should not have to know whether the annotation they be use be composite or not", "new syntax be necessary mostly because they be not allow inside class definition in es6", "this be also why yehuda propose they when they switch ember to es6", "you be right that there would be type problem with decorator", "mutation would be tricky to model", "maybe decorator could always return new value instead mutate they , and intersection type  could be use to model augmentation", "or maybe the mixin mechanism will be able to help there", "i agree with most of the benefit of inert / passive annotation that you mention", "overall , i feel it may be too early to add annotation to ts", "the proposal be  in the strawman stage for es7 +", "angular / atscript be just now start to experiment with what annotation would mean - it may still turn out that their design be flawed"], "issue_sim": [0.17794841527938843, 0.2256268709897995, 0.42136311531066895, 0.504508376121521, 0.30484122037887573, 0.24243572354316711, 0.057847537100315094, 0.4272325336933136, 0.2049950808286667, 0.2967529892921448, 0.36323148012161255, 0.09626615047454834, 0.3628343641757965], "prob": [0.0032088959123939276, 0.038912516087293625, 0.04592807963490486, 0.008141519501805305, 0.03705800324678421, 0.004744508303701878, 0.0033864183351397514, 0.18018631637096405, 0.010009604506194592, 0.019942762330174446, 0.006278572138398886, 0.001060282695107162, 0.2879183292388916]}, {"target": [1], "doc": ["while there be some confusion on this , both private field and private method be stage <number>", "private field be allow in typescript , but private method be not  .", "in @denoland we have a version of v8 that support the private method proposal", "it would be great to have private method as part of <tag> target in typescript so we can author code in typescript that be support in the runtime"], "issue_sim": [0.3090748190879822, 0.549717903137207, 0.32839030027389526, 0.5765576362609863], "prob": [0.17442913353443146, 0.30102741718292236, 0.0030340002849698067, 0.4876544177532196]}, {"target": [0], "doc": ["it be unbelievable but user can actually catch process with * * name * * <tag> and actually get a process with * * pid * * <tag> ."], "issue_sim": [0.4546196758747101], "prob": [0.9999662637710571]}, {"target": [0], "doc": ["this be possible to do with render function instead of template .", "there may well be side effect to do this , though it be work for my use case so far", "i do something similar in <url> which coincidentally can be use for breadcrumb - style ui :)"], "issue_sim": [0.4219730496406555, 0.3388684391975403, 0.3224526643753052], "prob": [0.5657707452774048, 0.0735095739364624, 0.19436100125312805]}, {"target": [1], "doc": ["would n't it be well if we show a big add node button instead of the 2d/3d viewport", "or maybe , when you click new scene , we might let you directly choose a root node , so you have nothing empty to save anyway ?"], "issue_sim": [0.20499634742736816, 0.3798721432685852], "prob": [0.44171133637428284, 0.664602518081665]}, {"target": [0], "doc": ["but the npm module resolution algorithm * * do * * resolve to global package. anyway , you ca n't stop it .", "on thu , oct <number> , <number> at 10:37 pm , lucas ciruzzi < notifications@github"], "issue_sim": [0.27252864837646484, 0.10052631795406342], "prob": [0.8608934879302979, 0.03503189608454704]}, {"target": [2], "doc": ["i find i have a lot of trouble with this issue , as i frequently factor my function so that they contain small helper function", "here be a simplified example to show the structure i use :", "any helper that reference * * this * * must be invoke via call  .. this problem hit i hard when i refactor code , include rename variable , which i do frequently as i come up with well naming .", "i would greatly appreciate it if you could add support for type check the argument of a call", "have too many ambiguity to support type checking )", "edit : to add type helper"], "issue_sim": [0.2268640697002411, 0.23563814163208008, 0.4307527542114258, 0.37768256664276123, 0.25613027811050415, 0.3026607632637024], "prob": [0.1553279459476471, 0.026118099689483643, 0.6754165291786194, 0.002365896012634039, 0.005070443730801344, 0.0006764802383258939]}, {"target": [1], "doc": ["i do n't want * any * new syntax for skip type parameter", "you should simply be able to not supply anything for unnecessary type parameter and have it work ."], "issue_sim": [0.465728759765625, 0.3969975709915161], "prob": [0.15584157407283783, 0.8168560266494751]}, {"target": [0], "doc": ["good point : i think that it would also be helpful to have a method of bind to these via viewchildren  , or maybe a new decorator .", "so maybe we could say something like :", "but the use case that i have in mind  be the scenario where you need to send focus to a specific element that be be build by the * ngfor directive", "in that case , the only technique which work that i know of be <tag> <tag> <tag>", "and make sure that you set the ' i d ' attribute on one of the iterated element to <tag> <tag> <tag>"], "issue_sim": [0.3289933204650879, 0.07003854215145111, 0.49441882967948914, 0.17616374790668488, 0.292754590511322], "prob": [0.7324038743972778, 0.0017265500500798225, 0.054063595831394196, 0.0004621289554052055, 0.019040707498788834]}, {"target": [0], "doc": ["the transition could play nicely with state change of vuex ."], "issue_sim": [0.5195456743240356], "prob": [0.99979168176651]}, {"target": [0], "doc": ["no , it be not an _ argument _ that reflect <tag> , it be the _ name of the executable _ , reflect in <tag> in c term and in <tag> in posix - like shell term , which the caller set to an arbitrary value - see below for detail", "give that we be currently not modify the behavior base on whether we be invoke as a logon shell or not , it be not even necessary to detect <tag>-prefixed invocation ; of course we will have to , if we ever decide to change that  .", "not necessarily , because other tool - such as vscode and at least hypothetically other terminal application - may still use the <tag> option rather than the <tag>-prefix technique", "that be why i think we should fix it in powershell rather than ask vscode to modify its default - shell invocation", "* * the <tag>-prefix convention * *", "by convention , shell should consider themselves _ login _ shell if the 1st character of <tag>  be <tag>", "the caller can \" fake \" the name / path of the executable it invoke as report in <tag> , so even though it be <tag> that be invoke , <tag> contain <tag> when invoke from terminal", "app  while configure as the default shell", "on unix - like platform , for instance , you can use bash 's <tag> builtin with the <tag> option to set <tag> , and the <tag> option automatically prepend <tag> to it", "the tricky part be to get powershell to obtain this value , because <tag> do n't reflect it", "the only way i personally know of to get this information from inside powershell  would be to call the <tag> utility as follow , but that be obviously an undesirable cost to incur on startup :"], "issue_sim": [0.4098457098007202, 0.2974725663661957, 0.2864224314689636, 0.5995508432388306, -0.0023984797298908234, 0.32839351892471313, 0.46254706382751465, 0.4318780303001404, 0.4803117513656616, 0.4573795795440674, 0.462682843208313], "prob": [0.3468129634857178, 0.38254812359809875, 0.06522655487060547, 0.08218961954116821, 0.000688239699229598, 0.054708901792764664, 0.12623848021030426, 0.0003640605427790433, 0.06379278004169464, 0.004317201673984528, 0.2873876392841339]}, {"target": [8], "doc": ["when you have a hammer , everything be a nail", "lazy load be not for cache service datum .", "lazy load be for load code in small bundle", "you should be use design pattern like memo , visitor , command or a dictionary pattern in a service to store your datum", "alternatively , you should use sessionstorage , or localstorage", "you just need a singleton service that control", "if you need different level of access , you should partition the datum into subobject", "js / ts do actually destroy object when you use they properly", "if you like , you can even add an interface to access the subobject from secondary service so it seem like the datum be partition separately", "the trick to solve these thing be to use the hammer that need the simple nail", "and if you feel you be go in circle from try to use the hammer at hand , you should at least try to ask yourself if you have the right tool for the job", "lastly , if you truly must reload the service , use a window", "href to reload the application", "that will dump the entire content and start over", "the only reason i would want to dump a lazy loaded module be to remove the unused code", "datum should not be control by module for a single session unless extenuate circumstance require it", "and even then , it be well to store that kind of datum in an offline datum store and retrieve it when need"], "issue_sim": [0.04169178009033203, 0.3748607337474823, 0.32901063561439514, 0.3207862675189972, 0.24211806058883667, 0.22666001319885254, 0.03464895859360695, 0.28047770261764526, 0.2843545377254486, 0.028444137424230576, 0.04738099128007889, 0.2468840479850769, 0.17838002741336823, 0.18372772634029388, 0.578106164932251, 0.3249737322330475, 0.1686575710773468], "prob": [0.0013459777692332864, 0.014511344954371452, 0.006395227275788784, 0.03441835194826126, 0.007911513559520245, 0.0020823541563004255, 0.00991716980934143, 0.0015304414555430412, 0.05922851711511612, 0.0009395874803885818, 0.06513179838657379, 0.0012956878636032343, 9.594958100933582e-05, 0.0003962692862842232, 0.014271188527345657, 0.011865753680467606, 0.011402753181755543]}, {"target": [1], "doc": ["i tend to agree with @wycat on this", "one of the big use for annotation be to provide metadata to a runtime system that end up do some sort of metaprogramming base on that datum .", "but the alteration be make to the annotate object be in no way discoverable by the typescript compiler", "however , by use decorator , the metaprogramming can be move out of the framework proper and into the decorator itself", "and define in such a way that typescript can understand the transformation", "for non - metaprogramming use case , the decorator can still add meta - datum to a know location on the object", "this could also be declare as part of the ts decorator definition also"], "issue_sim": [0.0734497606754303, 0.4792110025882721, 0.5774409174919128, 0.37627798318862915, 0.40224429965019226, 0.4602202773094177, 0.32211214303970337], "prob": [0.0004896236350759864, 0.42639583349227905, 0.004025781061500311, 0.06104850396513939, 0.001034674234688282, 0.29353025555610657, 0.0047075385227799416]}, {"target": [1], "doc": ["if you be serious :", "because this turn people off and may mean i ca n't use godot for teaching , at school , or at work , because this be see as unprofessional , childish and thus frown upon ."], "issue_sim": [0.07023924589157104, 0.2567960321903229], "prob": [0.007317393086850643, 0.9973132014274597]}, {"target": [1], "doc": ["it look nice but there be one serious thing", "the angular compiler create js code to apply those style .", "so be you think that it could be possible to just compile the style part of a component and exchange that code", "or do you think that you would hack that styling directly in dom", "the <tag> mode can be certainly realize by that way but i be not sure for the rest mode"], "issue_sim": [0.10533344745635986, 0.49127909541130066, 0.31488722562789917, 0.2920781373977661, 0.16611376404762268], "prob": [0.005660605151206255, 0.5881224274635315, 0.08925312757492065, 0.041323743760585785, 0.08635315299034119]}, {"target": [0], "doc": ["we could add <tag> switch to <tag> cmdlet on windows to enable search in   legacy windows powershell psmodulepath - s", "also it allow use <tag>"], "issue_sim": [0.6462504863739014, 0.09846404939889908], "prob": [0.8884745240211487, 0.0015086070634424686]}, {"target": [1], "doc": ["@jakul : the output behavior be incidental", "what matter be whether the <tag> argument be design to uniquely identify an exist entity use a literal  name .", "as such , @stevel - msft , you be right that the case of <tag> be _ ambiguous _ :", "*  on the one hand , you could argue that its <tag> argument   identify _ multiple entity _ , if you conceive of the _ version _ of a give module as _ distinct entity in their own right _", "*  on the other hand , you can conceive of a module with a give name to be an _ abstract , yet distinct _ entity , and conceive of its _ version _ as its _ specific incarnation _", "*  as an aside : even the unambiguous case of ask for an _ exact module version _ via the <tag> key of a hashtable represent a fully qualified module module   pass <tag> currently quietly return nothing if the specific version be not find - something that should also be fix", "the  interpretation be at odd with the parameter name : if the argument be really a _ filter _ , it should n't be name <tag> , since in most cmdlet <tag> unambiguously identify a specific , exist entity", "view through the lens of  , <tag>   can still be think of unambiguously identify the module _ in the abstract _ , irrespective of which and how many of its version be load", "perhaps needless to say ,  make more sense to i in the grand scheme of thing", "overall , separate the aspect of _ retrieve _   item from  be indeed the way to go"], "issue_sim": [0.27290380001068115, 0.3091462254524231, 0.19023901224136353, 0.28827497363090515, 0.21347197890281677, 0.48698297142982483, 0.48051655292510986, 0.2691960036754608, 0.0711618959903717, 0.013445315882563591], "prob": [0.0002171233354602009, 0.5794340372085571, 0.002505967393517494, 0.06358858197927475, 0.14078596234321594, 0.04618234932422638, 0.09000751376152039, 0.2647598087787628, 0.0002643673506099731, 0.00033991056261584163]}, {"target": [2], "doc": ["here be what i think :", "<tag> binding should still be valid javascript expression", "we should just support object inside array , which should n't be a lot of work :"], "issue_sim": [0.000772334635257721, 0.43640434741973877, 0.3665729761123657], "prob": [0.07666552066802979, 0.1294691115617752, 0.5088357925415039]}, {"target": [3], "doc": ["+1 for custom v - model modifier", "in my case i loop over a few nested object retrieve in json , and use a single html template", "in this case i believe compute property do n't work", "i be currently put in custom conversion method between the server format and v - model format when fetch and send datum , but would love for something just \" build - in \" that i could pass the function to ."], "issue_sim": [0.357003778219223, 0.3088836371898651, 0.1318599283695221, 0.4047952890396118], "prob": [0.0445132851600647, 0.24067705869674683, 0.010880249552428722, 0.8345556855201721]}, {"target": [0], "doc": ["yes sorry , when we switch from intl to our own api we have to remove timezone name because it represent too many datum for each locale .", "be this something that you absolutely need"], "issue_sim": [0.5656548738479614, -0.050622738897800446], "prob": [0.9264603853225708, 0.027456920593976974]}, {"target": [0], "doc": ["i think the only reason to make this be for get user attention like \" godot : you can make a game even in your phone \" and photo of a guy with his phone make his own game when he be go to work .", "it be a striking feature"], "issue_sim": [0.03128492087125778, 0.09512840956449509], "prob": [0.9966607093811035, 0.0027260605711489916]}, {"target": [0], "doc": ["since we have embrace c # for game development , we might as well try something like  .", "i have n't try it myself though , so i be interested in what be your thought on that one", "for one thing , at least , script wold run fast than with python"], "issue_sim": [0.2773885726928711, 0.1454048901796341, 0.2824767231941223], "prob": [0.43590086698532104, 0.09425348788499832, 0.09948471188545227]}, {"target": [1], "doc": ["@cowthing @zylann i 'd be fine if it stay how it be also , but if it be to change it would be good to make it as clear as possible what they do", "i can see new user be confuse and always use \" free \" on node as it be obvious what it do , but queue_free be n't obvious .", "however , if the example code and project all use queue_free and if people in the forum / q&a / discord / etc give they correct advice they will learn to generally use queue_free instead for node", "so , from a self document api perspective change the name be a good idea", "from a practical point of view i think it ultimately do n't matter too much"], "issue_sim": [0.2513059973716736, 0.30192917585372925, 0.13417518138885498, 0.3181791305541992, 0.03558266907930374], "prob": [0.013469377532601357, 0.5529306530952454, 0.42371535301208496, 0.0030876589007675648, 0.17482268810272217]}, {"target": [0], "doc": ["firefox have a similar feature when right - click tab , but it only let you close tab to the right  ."], "issue_sim": [0.06906695663928986], "prob": [0.9999980926513672]}, {"target": [1], "doc": ["@akien - mga ,", "it generate overhead  , because they be complex entity .", "that be why i need this \" simulated \" parameter", "the root of the asteroid tree be a rigidbody2d"], "issue_sim": [-0.0051452964544296265, 0.05841758847236633, 0.12704303860664368, 0.45080018043518066], "prob": [0.009657924063503742, 0.9277839660644531, 0.04876181110739708, 0.04945344105362892]}, {"target": [6], "doc": ["and what i be say be there be no point in have yet another parameter that do the same thing .", "if <tag> do n't already exist , then yea , maybe something else", "but there be no point in two parameter do the same thing", "see both <tag> and <tag> would be awkward", "the warning would be temporary", "the end game be remove the legacy usage , imo", "for that temporary period of time have use the same parameter even if the wording do n't suit everyone , be well than add another parameter that will just end up be remove"], "issue_sim": [0.05344744771718979, 0.15695971250534058, 0.03813925385475159, -0.03049631416797638, 0.0644049197435379, 0.12342582643032074, 0.23570804297924042], "prob": [0.9183151721954346, 0.011882324703037739, 0.00663014268502593, 0.03437172621488571, 0.0016770444344729185, 0.0003803751606028527, 0.8414287567138672]}, {"target": [0], "doc": ["i also think we should remove build - in script in 4.0 due to the various limitation and their bad vcs - ability .", "this would mean it be no long possible to distribute single \" component \" file that include everything  , but that do n't seem to be a goal for most people anyway"], "issue_sim": [0.283346951007843, 0.22526207566261292], "prob": [0.4894915223121643, 0.5584957003593445]}, {"target": [0], "doc": ["i think @frandiox be suggest he be see <tag> _ automatically _ register as a prop on a child component due to the use of <tag> on a parent .", "i have n't notice that behavior personally"], "issue_sim": [0.4042735695838928, 0.1009344682097435], "prob": [0.7178860306739807, 0.03457818552851677]}, {"target": [8], "doc": ["the current problem with the vue", "set method on a plain object be that it trigger way too many subscriber when a property be add to the object", "actually , all the subscriber of all the property be trigger when only one property be add", "the performance of the view be badly impact when a map like collection contain hundredth of key", "for example , in my project thousand of subscriber be trigger when one element be add to the map use the vue", "when i look deeply into the vue", "js code , i can see where the problem come from", "the dependency that be trigger be those of the object , which mean that if the object have one property for each key , then all the dependency of all the key be trigger when just add one key", "so use plain object to mimic a map do not look as the right solution , and therefore have support for a map in vue be more than welcome for large collection of item"], "issue_sim": [0.16090267896652222, 0.3628862500190735, 0.22402632236480713, 0.17554013431072235, 0.25024405121803284, 0.04379349201917648, 0.04544628784060478, 0.2418401837348938, 0.4687481224536896], "prob": [0.00012382354179862887, 0.03238079324364662, 0.00873614102602005, 0.0007239794940687716, 0.030059590935707092, 0.00019531903672032058, 0.00020449144358281046, 0.34703338146209717, 0.24545055627822876]}, {"target": [0], "doc": ["we will consider add a <tag> to the directive ."], "issue_sim": [0.09262366592884064], "prob": [0.9999425411224365]}, {"target": [3], "doc": ["let 's say that , hypothetically , vuex would n't be implement as a global plugin , but as something that can be apply on a per - component basis", "- pass down the store as a prop to every single child component would be counter - intuitive", "- there be no other way to inject an object that be set on a specific component instance", "i be look for a mechanism to have a property base on something that * * a * * parentan ancestorcomponent define , not necessarily the direct parent ."], "issue_sim": [0.46738719940185547, 0.5785551071166992, 0.5256704092025757, 0.2805961072444916], "prob": [0.8624972105026245, 0.044993773102760315, 0.03349862992763519, 0.03644736111164093]}, {"target": [2], "doc": ["@isazonov one example i get from the committee be the c # module run on , for example , japanese machine", "after this change , it may happen that some cmdlet be break with the same input argument because the conversion have change", "but i do agree with you that this inconsistency be unpleasant"], "issue_sim": [0.0027934443205595016, 0.53926682472229, 0.04786571487784386], "prob": [0.044715385884046555, 0.790607213973999, 0.10221849381923676]}, {"target": [2], "doc": ["@atscott i be well aware of the discussion in that issue", "please consider the use case i 've describe , instead of close the issue so quickly with wontfix", "input set do not work when react to an event bubble up from child element ."], "issue_sim": [0.09001560509204865, 0.23125219345092773, 0.5524532198905945], "prob": [0.01599281281232834, 0.21829107403755188, 0.8615309596061707]}, {"target": [0], "doc": ["it would work just great when deal with multiply <tag>s .", "some component may have many ng - template define in a component 's template", "it would be nice to be able to spread these to separate file", "one of the use case :", "some of our component have the template \" to look like and work \" somehow + a couple of <tag>s to list small ui tool , like button / input / dropdown", "we then insert they to the require toolbar outside of the component with the cdk portals feature", "every component bring its own tool with it", "those do not deserve to be separate component"], "issue_sim": [0.08093652129173279, 0.502692461013794, 0.1904177963733673, 0.23816649615764618, 0.3979043662548065, 0.32578977942466736, 0.1809941530227661, 0.14209188520908356], "prob": [0.9499985575675964, 0.0017700840253382921, 0.0004989135195501149, 0.0001684266608208418, 0.20316533744335175, 0.001805686391890049, 0.001589879859238863, 0.001213638810440898]}, {"target": [15], "doc": ["@igorskuhar no need to get personal , i have not say you be dumb or annoying and focus only on the information in your post", "it make no sense to i because you be compare having skin to not have it", "everyone be request to get it - in this and other issue , it be already on the roadmap", "it have be push <number> or <number> time already", "to i it would make more sense to compare whether to have it be author build into godot editor vs rely on external tool to author the animation", "basically what be miss be the ability to have free form deformation of sprite , turn they into a mesh that be bind to an armature", "your pro and con list be pretty much how it be at the moment", "i think @reduz be go to keep all the pro , but get rid of the con", "the question be should godot rely on external tool to create the asset and get only the ability to integrate they", "or should godot have it be own editor for this type of asset - be able to turn a sprite into a mesh , apply skin weight to it and animate it - all in godot", "i think that there be no point in even discuss it , as @reduz already say that godot will be go with the integrate approach and later on perhaps will get ability to import spine2d asset", "this issue be to advocate support for one open format for cutout animation- dragonbones - to rival spine2d and all the other proprietary one that be lock user to license", "whether godot have an importer for it , use it internally as the way to store the animation , can author it or not author it - it all depend on godot devs and how they decide to go with the design", "i personally think that if godot and other open source game engine unite , we will have a big community support the open standard and that will make it strong .", "thus why i be advocate to use it as a way to store the animation or at least have an importer for it in godot", "if you use dragonbones as the file format for cutout animation in godot , you will be able to have user make their animation in blender or dragonbone editor - before godot get freeform animation editing tool integrate", "the dragonbone json text file be basically just a collection of dictionary and array with the animation data- it be pretty straightforward"], "issue_sim": [-0.0703415721654892, 0.09826524555683136, 0.03712858259677887, 0.03939494118094444, 0.3594592809677124, 0.3750230669975281, -0.027511274442076683, 0.10664649307727814, 0.3411409854888916, 0.5065969824790955, 0.3149581849575043, 0.42427554726600647, 0.4567880928516388, 0.43755507469177246, 0.42784690856933594, 0.6057966947555542, 0.3695281744003296], "prob": [0.00012986906222067773, 0.00016330216021742672, 0.0002882783010136336, 0.00014798145275563002, 0.09599804878234863, 0.03061542846262455, 0.0002863932750187814, 0.00032330432441085577, 0.00806670542806387, 0.2973973751068115, 0.008432427421212196, 0.029768360778689384, 0.01060313917696476, 0.044106729328632355, 0.0016000503674149513, 0.2622157037258148, 0.0014953692443668842]}, {"target": [0], "doc": ["just an idea : instead of emit the costly object you could emit a function that , when call , return the costly object .", "then the costly object be only ever create when someone actually call the function you emit which in turn should only happen when someone be listen to your event", "just my two cent", "not sure if this any good though"], "issue_sim": [0.5950182676315308, 0.4540320634841919, -0.03125213086605072, -0.02095271646976471], "prob": [0.8320085406303406, 0.6882882118225098, 0.012119675055146217, 0.009311811998486519]}, {"target": [2], "doc": ["@jacksonkearl @jrieken on the vs code side , do you currently have any plan for how to make a readonly view of the workspace content available to other extension", "initialize ts with a single blob seem like it would be the easy approach for we .", "if the majority of workspace only have a few mb or so of code , for the first iteration we could even skip use a <tag> too and instead send typescript a simple json tree structure that contain all the file and their content"], "issue_sim": [0.5611591339111328, 0.31488698720932007, 0.6079485416412354], "prob": [0.002521554008126259, 0.8084583878517151, 0.630753755569458]}, {"target": [0], "doc": ["arguably , what powershell should always have do be to map _ all streams other than the success stream _ to stderr  - throw everything into stdout be never a good idea .", "it be another unfortunate example of powershell treat the outside world as an afterthought - which be less of a problem on windows , but unix user will expect conformant behavior", "it would be a break change , @stevel - msft , but perhaps it be not too late for core", "+1   for the option to capture stream individually"], "issue_sim": [0.5064402222633362, 0.44127100706100464, 0.15888762474060059, 0.2434542030096054], "prob": [0.641497015953064, 0.7257373929023743, 0.034669939428567886, 0.0018458960112184286]}, {"target": [14], "doc": ["i think this be become increasingly important", "there have be  in the last few month", "for example , i be use the  package", "the late version have drop commonjs support entirely", "after update , i immediately run into the fact that you ca n't import es modules from commonjs", "i flip my <tag> over to <tag> , think that would solve it", "how naive i be", "my project build fine , only to fall over immediately when launch in node", "my esm import path absolutely _ must _ have <tag> extension to work", "after read through the notorious # <number> , i have the same thought as @trusktr", "i 'll tolerate spend a few hour to rewrite all my import path with a <tag> extension", "but it be absolutely * * critical * * for i that the compiler reject invalid import , and that tsserver / intellisense suggest the correct one", "yes , you can set a config flag in vscode , and add an eslint rule", "but not everyone use vscode , and some people will manage to avoid run eslint", "and that mean that a catastrophic runtime exception will probably sneak into a production deployment at some point .", "add this flag or a new <tag> option would fix it", "then there will be a simple and clear solution for the ten of thousand of developer who inevitably try to update a package in the next few month and smack head - first into this same problem"], "issue_sim": [0.01753535307943821, 0.002740645781159401, 0.018162842839956284, 0.0891616940498352, 0.3050214648246765, 0.04776846244931221, 0.049710437655448914, 0.20535476505756378, 0.41138145327568054, -0.07534623146057129, 0.40942755341529846, 0.30458372831344604, 0.45214444398880005, 0.09930001199245453, 0.2227700650691986, 0.22985461354255676, 0.0520763024687767], "prob": [0.012427431531250477, 0.004450380336493254, 0.00613782973960042, 0.0005573510425165296, 0.0016284859739243984, 0.004205097910016775, 0.0006392534705810249, 0.0003403262817300856, 0.0004132789035793394, 0.0026806634850800037, 0.0011867565335705876, 0.01270561758428812, 0.0030439537949860096, 0.00019174972840119153, 0.12482074648141861, 4.022470238851383e-05, 0.18553534150123596]}, {"target": [0], "doc": ["i 'd be for let the user choose his own target folder , with probably some per - asset default ."], "issue_sim": [0.30589014291763306], "prob": [0.9999823570251465]}, {"target": [3], "doc": ["i be on the fence about this one", "why do the syntax highlighting vary across <tag> and <tag>", "blue in <tag> and black in <tag>", "we lose the syntax coloring in the console view , but if it be inconsistent , then maybe that be a good thing ?"], "issue_sim": [0.011558331549167633, 0.2466631382703781, 0.004270758479833603, 0.402426540851593], "prob": [0.1410999447107315, 0.026274627074599266, 0.05696699768304825, 0.8879595398902893]}, {"target": [3], "doc": ["be this the fix timestep jitter when more / less fix step happen compare to the previous frame", "if so , the issue be that godot do n't interpolate between the previous<->new state when there be a fix / idle time deficit -- how be that go by the way", "change fix fps per user / machine be probably not a good idea", "different delta will make physics and your code behave differently , cause an inconsistent experience and limit your test coverage", "fix timestep be and should be completely independent of the monitor refresh rate"], "issue_sim": [0.3266773819923401, 0.3540310263633728, 0.3888782262802124, 0.36149269342422485, 0.5129570960998535], "prob": [0.05561317875981331, 0.7449325919151306, 0.007829136215150356, 0.1326093077659607, 0.018055718392133713]}, {"target": [2], "doc": ["cpu can do 3d too", "but cpu be much slow do realtime rendering stuff , 2d or 3d", "also godot rendering be mostly sprite base , so gpu be the choice ."], "issue_sim": [0.37990373373031616, 0.55582195520401, 0.582474946975708], "prob": [0.003828527173027396, 0.01514114998281002, 0.9855183362960815]}, {"target": [1], "doc": ["@paper - pauper the problem be ,", "if a module link another at compile - time as a dependency , how would it be usable as a godot c module ?", "my last engine project support this case by simply let the os load the dependency , put the libs next to each other", "the system keep a reference count , so it do n't matter if the engine load it a second time after", "just wonder if that would be possible with godot :)", "@reduz i guess it will need some boilerplate for make c++ module easy to develop"], "issue_sim": [0.11763119697570801, 0.6573851704597473, 0.4921949505805969, 0.056410711258649826, 0.2905718684196472, 0.5325568914413452], "prob": [0.0026005373802036047, 0.6031771898269653, 0.12485971301794052, 0.1310987025499344, 0.031603388488292694, 0.005762158893048763]}, {"target": [0], "doc": ["but do n't work with aot build !", "anyone can help i"], "issue_sim": [0.10540719330310822, 0.05894434452056885], "prob": [0.4044109284877777, 0.1654767096042633]}, {"target": [0], "doc": ["then the principle be general , it be possible to use it without the router also - just only the programmatical way to load a module / component in any moment and place ."], "issue_sim": [0.4014824628829956], "prob": [0.9999839067459106]}, {"target": [2], "doc": ["thank for the quick answer pete", "i 've try your last proposition as i wo n't provide interpolation in my string", "unfortunately , i still have the same error :. <tag> <tag> $ localize <tag> <tag>", "when look at the array the function <tag> receive when use the simple form of <tag>  , i see something like :", "but when use concatenated string like i be try to do , it receive :", "the code i use be update on : <url>", "be there anything else i can try"], "issue_sim": [-0.030872050672769547, 0.205776646733284, 0.3912496268749237, 0.21990805864334106, 0.33425796031951904, 0.23740063607692719, 0.025978542864322662], "prob": [0.03647100180387497, 0.4286304712295532, 0.007387523073703051, 0.071034736931324, 0.0248455461114645, 0.018995177000761032, 0.022236231714487076]}, {"target": [0], "doc": ["one important reason to use position be. that different editor , environment and language have different concept of what a line or column be .", "encoding and position be far less inconsistent , and work more reliably", "this be why the vs environment move to position , and all the modern api  be base around this", "ideally our server will consistent in be position base in the future", "from : daniel rosenwassermailto:notifications@github", "subject : re :   use position instead of line / offset from tsclient", "i be not familiar with its api but if i be not mistaken , an editor like eclipse should be equip to handle this sort of thing :", "-    <url> should get you the line of the position", "-    <url> can be subtract from the position to get the offset from the beginning of the line", "as a side note , be there any reason you be not use the eclipse-<url> plugin", "reply to this email directly or view it on <url>"], "issue_sim": [0.3300001323223114, 0.22736014425754547, 0.33598506450653076, 0.1976969987154007, -0.01634269580245018, 0.5000389218330383, 0.4847377836704254, 0.2768636643886566, 0.4268101453781128, 0.21692562103271484, 0.03880930691957474], "prob": [0.6172174215316772, 0.009509050287306309, 0.05431775376200676, 0.006071735173463821, 0.0005545751773752272, 0.0037010216619819403, 0.37714481353759766, 0.0003221050137653947, 0.0071416920982301235, 0.01580568216741085, 0.0019116484327241778]}, {"target": [9], "doc": ["thank for the feedback", "i ca n't speak to the real - world need , only that i keep miss it personally", "perhaps other can comment", "frankly , i find the absence of an exponentiation operator from c # puzzle ;  from <number> explain that it be n't include because it be \" fairly rare \" , which be n't too well - receive in the comment", "aside from that , powershell already have operator that c # do n't have , and it be a sufficiently different beast so that i would n't rule it out just base on that", "perhaps powershell can lead by example and down the road we 'll see an operator add to c # as well", "<tag> indeed invite confusion , because it have", "<tag> , by contrast , while not use by all language , seem to have no other meaning , and , as state , be use in several popular language : python , ruby , javascript , perl", "it be readable , but neither easy to _ remember _ nor to _ type _", "to i , a dedicated exponentiation operator seem like a natural complement to the arithmetic operator ."], "issue_sim": [-0.1043194979429245, 0.06338877975940704, 0.06719015538692474, 0.45905768871307373, 0.5078592300415039, 0.4600817561149597, -0.036778829991817474, 0.31345334649086, 0.18912887573242188, 0.5461078882217407], "prob": [0.04122618958353996, 0.0019857925362885, 0.0008422464015893638, 0.08864746242761612, 0.09679324924945831, 0.00619405135512352, 0.00030872231582179666, 0.48541364073753357, 0.00023414460883941501, 0.033320799469947815]}, {"target": [2], "doc": ["@groud these stat be hard to come by", "how many be use the current visual script", "i be also make point of why the event sheet approach have advantage over blueprint - such as less click to get thing work , clear presentation and well learn transition to gdscript .", "the rpg maker engine be really a level editor if you ask i", "it do not have the same level of flexibility as fusion and construct2", "it be easy to explain to someone how an event sheet work , than it be to explain the same example in a blueprint - they have to learn much less concept - no need to be teach the type of connection between node , type of input and output - how to set the flow", "instead the event flow from top to bottom , leave be condition and right be action", "you have to connect nothing", "look as hard to understand as this", "sure , godot would use more event block to achieve , but it would still be clear than a node graph", "even gdscript look clear to i than that", "our current visual script system look complicated at a first glimpse", "i speak as someone who have use both system and be now compare they - both be equaly powerful , one be clearly simple to learn and get into", "give it a try please", "you can try construct3 in your web browser for free here :", "if you have a son or a young sibling , ask they to try it , then try godot 's - see what they can do and how long it take they to do it without give instruction - there be a potential market for more school to adopt godot here - make visual scripting well for learn programming concept and we will get a young demographic use the engine"], "issue_sim": [-0.06260278820991516, 0.29071757197380066, 0.31404897570610046, 0.19918178021907806, 0.05272350460290909, 0.37520599365234375, 0.1385689079761505, 0.013278789818286896, 0.051581885665655136, 0.41311079263687134, 0.04131641238927841, 0.2547184228897095, 0.18746733665466309, 0.01847311109304428, 0.09030371159315109, 0.27032554149627686], "prob": [0.004644346889108419, 0.0016686980379745364, 0.11810999363660812, 0.0008069960749708116, 0.006229096557945013, 0.5170601606369019, 0.0018077719723805785, 0.0005788223352283239, 0.00035907741403207183, 0.0027065479662269354, 0.00023520301328971982, 0.0005804086686111987, 0.0802750214934349, 0.00012624716327991337, 0.0029804965015500784, 0.1977299600839615]}, {"target": [9], "doc": ["for what i understand , the buildsystem tooling must provide :", "* cross - compilation", "* by \" possible \" i mean that the host allow it", "* a way to generate file", "* scon know that the generate file be dependency , so change they trigger a rebuild of relevant file", "this should be consider too", "* multiple target and option within target", "* option to customize the build / enable extra target", "i do n't know meson , but if it provide everything above it should be fine", "of course , someone have to go the excruciating pain of rewrite the buildsystem in meson and then show the tooling and build time be effectively well for godot than scon .", "note that a few third - party dependency require a patch to be compile with godot", "i notice wrap have a patch support , but it look like the patch must be available somewhere to download , while i think it be easy to manage if they be still part of the repository", "also , some of they require special compilation flag that should not be apply to the whole build"], "issue_sim": [0.1777348518371582, 0.1889260858297348, -0.0474318191409111, 0.1639644205570221, 0.2979462146759033, 0.009530989453196526, 0.11572523415088654, 0.2786101698875427, 0.21089759469032288, 0.5152895450592041, 0.50556480884552, 0.32030054926872253, 0.3107365667819977], "prob": [0.0034049558453261852, 0.001989885699003935, 0.008339119143784046, 0.0015031031798571348, 0.006995654199272394, 0.0004317723214626312, 0.0006094473646953702, 0.001863578101620078, 0.0077757639810442924, 0.16154077649116516, 0.0008069288451224566, 0.4654463827610016, 0.007478075567632914]}, {"target": [6], "doc": ["i be work on this - type for function right now , but it be not do", "the proposal at # <number> link to the branch where i be work on it", "to explain why <tag> need this feature , let 's annotate the invisible <tag> type parameter on <tag>", "notice that <tag> have two parameter <tag> and <tag> , whereas <tag> only have one , <tag>", "<tag> be suppose to be equivalent to <tag> to allow you to chain call", "unfortunately , it be not -- it be bind on <tag> instead of the method <tag>", "so when you use it , the return value of the first call do n't get to infer the <tag> type for the second call .", "here , i 'll annotate the type parameter of the usage explicitly :", "notice that call <tag> do n't give we <tag> because it be the original <tag> method", "it be the same method as before", "this - type for function  should solve this by let you specify <tag> per function - call", "notice that the declaration look even close to the non - chain declaration :", "this type bind the type of the _ call object _ of <tag> to <tag> , and be infer fresh for each call to <tag>", "this contrast with the original chain version that bind <tag> to the type of <tag> and keep it there"], "issue_sim": [0.42520254850387573, 0.15494129061698914, 0.44059011340141296, 0.4108189642429352, 0.36616963148117065, 0.29418423771858215, 0.33393263816833496, 0.4246326684951782, 0.2647038698196411, 0.05026289075613022, 0.4568215608596802, 0.18230178952217102, 0.4743759036064148, 0.2500801086425781], "prob": [0.0006654411554336548, 0.0038050375878810883, 0.01355323102325201, 0.005832384340465069, 0.0009196994360536337, 0.0008972323848865926, 0.03175313025712967, 0.00014106155140325427, 0.0022720666602253914, 3.770925832213834e-05, 0.0011902576079592109, 7.858905883040279e-05, 0.07900416851043701, 0.0022713637445122004]}, {"target": [0], "doc": ["err , follow up on my last update , it seem that my interpolation script do work -- the issue i be see be an unrelated graphic driver bug .", "the problem be non - existent on a different pc", "@kubecz3k good point -- i should have include that in the reproduction step -- it make the issue easy to see"], "issue_sim": [0.3317908048629761, 0.041038915514945984, 0.11313128471374512], "prob": [0.9809870719909668, 0.003649379126727581, 0.33861956000328064]}, {"target": [2], "doc": ["it would be nice to type these more strongly but we will need a proposal for some option", "we previously discuss this in some early design meeting on generic and be n't really able to come up with something suitable", "at least use function instead of ' any ' where applicable might be a meaningful improvement .", "see ander 's response here for a similar example : <url>"], "issue_sim": [0.17055311799049377, 0.06746821105480194, 0.1404067724943161, 0.07959683239459991], "prob": [0.011248180642724037, 0.12641902267932892, 0.8989656567573547, 0.0007276330143213272]}, {"target": [1], "doc": ["there be also a point about consistency aka coherency , which you omit", "there be no upside for have two name , but there be downside add on top of downside of each name , and this alone make it a bad idea .", "no , you make a general statement", "if you really think what you write , i wonder how you work with godot codebase which have close to no documentation", "i doubt that you thoroughly go through implementation of every method before use it", "most likely you look at the name , the signature , and exist use of a method and deduce what it do from that", "if it be not enough , you go through implementation", "this work well as long as api design be meaningful and method do n't have suprise side effect", "php be a good example of bad design - you will be surprised what \" simple \" procedure such as <tag> or <tag> do and you have to memorize documentation of every procedure to not shoot yourself in the foot", "i understand that , but for something use very often it be worth have a short name , because it save time reading and writing", "because it be use very often , people learn what it do from the first day , and they be not go to be surprised or confuse by what it mean"], "issue_sim": [-0.05340690165758133, -0.02260829508304596, 0.07395881414413452, -0.05096939206123352, 0.0025730375200510025, 0.01094304770231247, -0.044292207807302475, 0.08874049782752991, -0.024723388254642487, -0.038740187883377075, -0.048836398869752884], "prob": [0.011884668841958046, 0.14427827298641205, 0.00014367721450980753, 0.033549707382917404, 0.0005343598313629627, 0.01162007637321949, 0.00012047162454109639, 0.0029027429409325123, 0.07730459421873093, 0.008127803914248943, 0.06605102121829987]}, {"target": [10], "doc": ["@davidberg - msft thank for feedback", "i 'd prefer that we do \" smart thing \"", "this mean that user get \" expect \" result", "question be that be \" smart \" and \" expect \" in the context", "as @vexx32 point all be convert to string before output to csv", "so user expectation can be base only on original type of value", "we could implement exclude and include type list with common default", "in the case it be not clear benefit because exclude only fundamental type do n't look smart enough", "also we 'll have to add parameter to allow user modify the list", "fallback to asneeded can confuse user too - it can be \" over - smart \"", "this lead we to believe that stringonly parameter be not as useful as expect and quotefields be well alternative - do not require additional parameter and it be very fast ."], "issue_sim": [-0.016072221100330353, 0.07425500452518463, 0.09399177879095078, 0.09169037640094757, 0.43145591020584106, 0.12766626477241516, 0.23367226123809814, 0.1685129702091217, 0.22057309746742249, 0.08470468968153, 0.1686476469039917], "prob": [0.0032651186920702457, 0.036544933915138245, 0.004314957186579704, 0.01637292094528675, 0.0005146840121597052, 0.0031543439254164696, 0.00024135736748576164, 0.0037420776207000017, 0.0047730435617268085, 0.006393425166606903, 0.4340780973434448]}, {"target": [12], "doc": ["i start to think this feature should be desirably support by official", "the usage be quite different from those mention above", "in testing , i want to replace some dependency import from other file", "now the vue - loader official doc recommend to use inject - loader", "however , it depend on specific build system like webpack", "and inject - loader be quite of black magic", "if context feature be support , it can act like a dependency injection system , naturally", "and in test we can inject mock into component easily and universally , without hack build system", "another issue be discover in ssr", "currently bundle - render use <tag> module to evaluate code in sandbox", "this might be performance bottleneck", "on the other hand , we can not use global state in non - bundle render", "context feature can be the recommend way to manage global state .", "new state can be inject for every new request"], "issue_sim": [0.12556906044483185, 0.03356757387518883, 0.23694615066051483, 0.3346131443977356, 0.3759433627128601, 0.11852896213531494, 0.42322468757629395, 0.3433288633823395, -0.0406639501452446, 0.34301429986953735, 0.07545387744903564, 0.27246910333633423, 0.31204670667648315, 0.22604405879974365], "prob": [0.07865841686725616, 0.2802903354167938, 0.6038627028465271, 0.021040543913841248, 0.0037370072677731514, 0.005559759680181742, 0.010815665125846863, 0.013684200122952461, 0.0006406920147128403, 0.029346097260713577, 0.002461216412484646, 0.05932500958442688, 0.13381271064281464, 0.01205422542989254]}, {"target": [2], "doc": ["they be all slightly different proposal", "# <number> want a syntax for mark type parameter as \" to be infer \" , # <number> want to enforce a distinction between normal type parameter and those with default , and only infer the latter", "this issue be about simply make exist syntax have different semantic .", "i do n't want any new keyword or syntax  , i just want the syntactically valid <tag> to also be semantically valid , and not produce the \" expect <number> type argument , get <number> \" error", "what exactly the semantic change should be i 've try to outline above with a mapping to typescript code that be valid today", "if it help you track thing , i be fine with you fold this issue into either one , i just want to clarify what i be propose be distinct from those proposal"], "issue_sim": [0.10000339150428772, 0.5611737966537476, 0.4253102242946625, 0.5996233224868774, 0.41988900303840637, 0.20290419459342957], "prob": [0.0003998622705694288, 0.1885019689798355, 0.47001707553863525, 0.07590040564537048, 0.005491833668202162, 0.07514474540948868]}, {"target": [0], "doc": ["you be right about roslyn / we use position - base input at the language service layer ; however ,  . i suspect that this be to accommodate vim 's api which only provide a line & column ."], "issue_sim": [0.49002766609191895], "prob": [0.9999825954437256]}, {"target": [0], "doc": ["the idea behind emit only when become true be ?if you loop over link with ngfor and listen to this output on all of they , they would all emit when change .", "this would probably be suboptimal in term of performance"], "issue_sim": [0.342157244682312, 0.06177366152405739], "prob": [0.9262331128120422, 0.03668441250920296]}, {"target": [1], "doc": ["it be a possibility , but it be really difficult without be able to see the", "my intuition tell i jitter should not be visible , and that it. might be something else that be at fault", "on sun , jul <number> , <number> at 2:12 pm , raymoo < notifications@github", "com > write :"], "issue_sim": [0.03334750980138779, 0.2710714638233185, 0.056351035833358765, 0.01777241937816143], "prob": [0.08419471234083176, 0.5570515990257263, 0.08313914388418198, 0.0009072368848137558]}, {"target": [1], "doc": ["<tag> be same as <tag>", "but we should not make <tag> as the default .", "instead <tag> should be the default", "that be different from current implementation and doc"], "issue_sim": [0.14629867672920227, 0.22659091651439667, 0.3587873578071594, 0.10426913946866989], "prob": [0.007250778377056122, 0.9861133694648743, 0.009385786019265652, 0.003927184268832207]}, {"target": [8], "doc": ["@mysticfall actually gdscript perform really bad make even simple calculation", "for example , apply cellular automata to a 20x20 array on gdscript take 0", "in c # , it take 0s", "combine cellular automata , prim 's algorithm , a * , delaunay and permutation to create a basic procedurally generate 20x20 map take 23 in gdscript", "it take on average 0", "04s in c #", "now , imagine make a game like terraria in gdscript", "you simply ca n't do it and expect it to perform reasonably", "you say of replace gdscript ; that be not what i want . i love gdscript and it be definitely more than useful for most thing . it be definitely a wonderful tool to have .", "the thing be sometimes you need that boost , and when that time come currently you have two option : c # or c++", "neither of which interact with gdscript without hassle", "i find difficult to believe a dynamic language could improve that much more that it would compare to c #", "if it be possible , i 'll happily close this thread and run yell through the street about the wonder of today 's technology"], "issue_sim": [0.14439356327056885, 0.14456048607826233, 0.19188807904720306, 0.1914294809103012, 0.03989069163799286, 0.15501724183559418, 0.18780624866485596, 0.14763188362121582, 0.28036755323410034, 0.3519413471221924, 0.055557701736688614, 0.3484870195388794, 0.17655545473098755], "prob": [0.015187414363026619, 0.01987491175532341, 0.001816828385926783, 0.13612405955791473, 0.0014015104388818145, 0.0025388565845787525, 0.0015199946938082576, 0.0073391143232584, 0.8617089986801147, 0.005272984504699707, 0.0029016034677624702, 0.003992877434939146, 0.05118497833609581]}, {"target": [1], "doc": ["from <appname> , turn out this issue already exist : <url>", "i think this be the correct syntax to use and the same thing i try when i want to use generic with a template tag ."], "issue_sim": [0.03967156261205673, 0.5922865271568298], "prob": [0.04444558545947075, 0.837066113948822]}, {"target": [3], "doc": ["i ca n't find any evidence support this", "all runtime seem to hook this up automatically", "i ca n't find any evidence support this , either", "the es spec do n't define that this property be present as a result of object creation ."], "issue_sim": [0.01064113900065422, 0.17790192365646362, 0.006391055881977081, 0.27906712889671326], "prob": [0.03165081515908241, 0.06647294014692307, 0.04630132019519806, 0.9084630608558655]}, {"target": [7], "doc": ["do n't know if it help to another one", "but i consider the problem while use <number> service inside a interceptor", "after a debugging and trial and error session i figure out , that the constructor be use in well order", "so before the function \" intercept  \" it use the constructor", "at the constructor time , both service be inject right and i get an instance", "but while the intercept function , they where undefined", "so i try another way", "instead of have two local variable for the service i just use static variable .", "in the constructor i reference the inject service to my static variable", "after that i could get the right instance of the service", "the example below use the translate service and another notification service for a notification to the user , right after a http call go wrong", "for simplicity i remove the notification part and keep the translate service part", "so here be a code snippet for that solution :", "for i it seem that the intercept function be somehow always static and never use an istance of itself", "but i ca n't find any documentation about this behaviour", "i make a quick try with the httpclient and get an instance the same way as well :"], "issue_sim": [0.07498817145824432, 0.33569109439849854, 0.36255139112472534, 0.47735270857810974, 0.6856858730316162, 0.13264471292495728, -0.011139782145619392, 0.3244003653526306, 0.6199085712432861, 0.25291210412979126, 0.34222984313964844, 0.1406324803829193, 0.14613424241542816, 0.2775147557258606, 0.1407020390033722, 0.3322247266769409], "prob": [0.01772630214691162, 0.010742523707449436, 0.13157948851585388, 0.0037505123764276505, 0.006174503825604916, 0.0012522253673523664, 0.0002579067077022046, 0.017123054713010788, 0.003883717581629753, 0.026357145980000496, 0.08045284450054169, 0.013910443522036076, 0.07245660573244095, 0.030598146840929985, 0.017040876671671867, 0.026312891393899918]}, {"target": [2], "doc": ["@mlc - mlapis , i just figure out that the request feature wo n't help i at all", "the irony be that i need to get base path from ajax request in <tag> <tag>", "but in order to make the request , base path should already be define , otherwise the request url prefix be undefined .", "if i be right , the issue could be close"], "issue_sim": [0.22897325456142426, 0.42349445819854736, 0.2196996808052063, -0.024858061224222183], "prob": [0.002623006235808134, 0.16509941220283508, 0.5737743377685547, 0.006036204285919666]}, {"target": [3], "doc": ["while this be cool and i be not dismiss the possibility of such functionality , i ca n't see any implementation of this that do not include a variable to keep track of execution", "so at good  this be a syntactic sugar for an underlying boolean flag", "it be the way you do n't want to do that look clunky just under the hood , which might be good per se", "you also have to consider in the syntax something reset the trigger upon some condition .", "if you want to play a sound when hit , you likely want to play the sound once but also in every hit", "so when the sound be finish you should reset the trigger so it can be play again", "that require an identifier for the trigger and a way to reset it  ` )"], "issue_sim": [0.3559689521789551, 0.25090932846069336, 0.15579354763031006, 0.43560391664505005, 0.2740068733692169, 0.3347562849521637, 0.30345553159713745], "prob": [0.7341918349266052, 0.007820756174623966, 0.15199342370033264, 0.20397131145000458, 0.013249305076897144, 0.02462136372923851, 0.011005701497197151]}, {"target": [1], "doc": ["you be absolutely right that the current behavior more closely match the actual return", "however , from my  perspective followrellink be add as a convenience so the caller do n't need to think about paging and multiple call .", "with that spirit in mind it seem like we should n't require they to post - process result in any way either"], "issue_sim": [0.2914537191390991, 0.13808774948120117, 0.014183485880494118], "prob": [0.04893210530281067, 0.5589118003845215, 0.25037431716918945]}, {"target": [0], "doc": ["mdn  the relevant spec near the bottom of the page - this be the most relevant :"], "issue_sim": [0.060204051434993744], "prob": [0.9999755620956421]}, {"target": [1], "doc": ["hmm nice suggestion , +1 for attribute modifier", "i think it should call <tag> automatically and if you want the opposite :. <tag> <tag> <tag>"], "issue_sim": [0.2734764814376831, 0.5177260637283325], "prob": [0.1788879632949829, 0.6735928654670715]}, {"target": [0], "doc": ["this behavior be by  design :. powershell 's format system _ always _ produce line right - padded to the  output width with space .", "it be only when you copy directly from a windows _ console window _ that _ it _ extend you the  courtesy of trim the trail space", "you can verify the behavior by pipe to <tag> on windows as oppose to manually copy in the console window :"], "issue_sim": [0.5910520553588867, 0.49112755060195923, 0.4695665240287781], "prob": [0.8772353529930115, 0.17430977523326874, 0.01782471500337124]}, {"target": [0], "doc": ["of course it be a bad idea , because it reduce code consistency and make people wonder if those name actually mean the same or do something different .", "add a short alternative for every method now , if it be a good idea", "if there be a \" short alternative \" make it the default and the only option", "in this specific case , it be not even an alternative to begin with"], "issue_sim": [-0.03414680063724518, -0.05375678464770317, 0.04107849299907684, 0.05582299828529358], "prob": [0.8237482309341431, 0.09389150887727737, 0.23094461858272552, 0.07042409479618073]}, {"target": [0], "doc": ["consider mine be an spa , and vue 's main use case be probably spa , i do think it be important to reactively update the title for a well user experience .", "as you put it , it sound fairly straightforward , so we can also assume that it would n't take much to integrate such a capability into vue itself , then"], "issue_sim": [0.2938315272331238, 0.28023505210876465], "prob": [0.8561230897903442, 0.3686319589614868]}, {"target": [2], "doc": ["@kilasuit assume we write a script today which use unix alia such as <tag> for <tag> , and in some later powershell version , that alias be remove", "it will stop work", "if powershell engine can know which version the script be wrtten for , it may be able to provide compatibility mode for legacy script ."], "issue_sim": [0.5779021978378296, 0.10343968123197556, 0.6137750148773193], "prob": [0.06266951560974121, 0.0004436055605765432, 0.9937352538108826]}, {"target": [9], "doc": ["would implement jit via llvm mean clang would be preffere over gcc", "be it   possible to compile llvm jit use gcc", "unlike java , python , c # etc , gd script work as part of a big c++ native code engine", "in fact both gd script & the rest of the engine be one unit", "some game component be c++ and some be gd script", "overall the game performance depend on create a balance between the two", "write a godot game solely in script would make it slow but write it mostly via node with minimal gd script would make it fast", "so my question be", "be this small boost in performance really worth the effort", "i think c # addition may in fact be well for the engine than implement jit in gd script .", "c # be probably much more optimize and efficient language thus probably as fast as gd script + jit but   not as integrate as gd script", "to answer my own question i personally do n't see this be an important issue right now", "maybe in the future when godot have all the desire feature and devs would be simply optimize those feature"], "issue_sim": [0.6189751625061035, 0.6212072372436523, 0.48757073283195496, 0.15213491022586823, 0.3203842341899872, 0.15146984159946442, 0.41304251551628113, -0.020008035004138947, 0.14385750889778137, 0.4520791172981262, 0.4682057201862335, 0.06360021978616714, 0.2816644012928009], "prob": [0.0029007333796471357, 1.7500469766673632e-05, 0.0006067343638278544, 0.0013891462003812194, 1.4424649634747766e-05, 0.0004294753016438335, 0.042577993124723434, 1.0372514225309715e-05, 2.826917261700146e-05, 0.036251526325941086, 0.0014500118559226394, 2.6624707970768213e-05, 0.02775772660970688]}, {"target": [1], "doc": ["honestly that be too much", "there be little use case for that , and it bloat a menu already overcrowded ."], "issue_sim": [0.017501819878816605, -0.04864049702882767], "prob": [0.005523755680769682, 0.9999023675918579]}, {"target": [5], "doc": ["thank for suggestion it can help in some case", "the main request here be to get * * new instance * * every time injector ' * * get * * ' be call", "other di implementation , like", "net have this as * * transient * * option", "use case be describe above", "factory can not help while you have to manually pass all argument , so it be just overhead for each command ."], "issue_sim": [0.017731916159391403, 0.3807465732097626, 0.13084830343723297, 0.19460658729076385, 0.1258641630411148, 0.36861294507980347], "prob": [0.06440599262714386, 0.6836455464363098, 0.00968259572982788, 0.01058607641607523, 0.010614955797791481, 0.15609456598758698]}, {"target": [0], "doc": ["ah , that absolutely make sense , as the value be not necessarily the same as the possibly localize text content .", "i will check tomorrow if i miss that part also in my actual application and close the issue if that s the case"], "issue_sim": [0.17411348223686218, 0.1589673012495041], "prob": [0.9591941237449646, 0.020494649186730385]}, {"target": [0], "doc": ["alright , the api be now <tag> to translate the string , and <tag> instead of <tag> to enable it , for consistency ."], "issue_sim": [0.05492139980196953], "prob": [0.9999886751174927]}, {"target": [0], "doc": ["i think <tag> would n't really work because what happen if something other than an object be return , right ?", "it could instead be something like :"], "issue_sim": [0.3208439350128174, 0.12809115648269653], "prob": [0.9638966917991638, 0.004700645804405212]}, {"target": [1], "doc": ["it happen that for i - using of ngmodule * * be * * less boilerplate", "it look easy to wire - up component directly when you build application from the scratch , but do not play well when you refactor exist application , remove unused code , or copy - paste code from <number> project to another .", "i be try to make module as small as possible , ideally for each small feature that can be re - used or can be delete completely"], "issue_sim": [0.35965561866760254, 0.3986981511116028, 0.24755524098873138], "prob": [0.019893787801265717, 0.5745182633399963, 0.11623283475637436]}, {"target": [0], "doc": ["have a set in startupconfig be fine as a brute force way to get people to help we test compatibility , the compat module be something we can do separate from pscore6 in the gallery perhaps and ideally drive by the community"], "issue_sim": [0.4724428653717041], "prob": [0.9999469518661499]}, {"target": [0], "doc": ["or maybe it should be make into <tag> , and <tag> should remove all group start with <tag>"], "issue_sim": [0.4054662883281708], "prob": [0.9989303946495056]}, {"target": [1], "doc": ["@jasonaden any update about this one", "my suggestion would be currently break by aot compilation :"], "issue_sim": [0.04468680918216705, 0.12423644214868546], "prob": [0.18891531229019165, 0.605858325958252]}, {"target": [0], "doc": ["the point be that godot want to be a professional game engine , use in serious project by company , and see to be as credible as any other engine .", "neither unity nor ue4 will throw word like \" shit \" and \" wtf \" at you", "wo n't even get into \" retarded \""], "issue_sim": [0.1671474426984787, 0.2098158895969391, 0.0974845439195633], "prob": [0.8758712410926819, 0.15518617630004883, 0.020833324640989304]}, {"target": [0], "doc": ["powershell already support the <tag> directive in script to set minimum compatible version ."], "issue_sim": [0.579475998878479], "prob": [0.9998462200164795]}, {"target": [0], "doc": ["now that tz name be no long support , what be the intend way to specify a timezone that adhere to daylight saving ?", "for example have a timezone set to \" america / chicago \" , it would be utc-5  or utc-6  depend on the date be format", "how should this be handle"], "issue_sim": [0.6240928173065186, 0.3661554455757141, 0.05521717667579651], "prob": [0.9084102511405945, 0.6536247134208679, 0.00014062858826946467]}, {"target": [2], "doc": ["i be try to manage this to work and have the same issue", "i just want to understand how it work , it be not for a real application , but it be bother i", "and , well ... i do n't know if i be use it right way , but it seem to be work fine with canactivate but not with candeactivate .", "so the only way i find to \" make it work \" , be by use this workaround on my candeactivate method :", "candeactivate : observable < boolean | urltree > | promise < boolean | urltree > | boolean | urltree {", "const response = component", "i notice that the nextstate receive the correct url on the first time , so on the second time it should be the same as the urltree i return before"], "issue_sim": [0.1654590219259262, 0.13144859671592712, 0.2530810832977295, 0.20274655520915985, 0.3161662817001343, 0.2955314517021179, 0.3945262134075165], "prob": [0.002630187664180994, 0.01820320636034012, 0.7291954159736633, 0.028949473053216934, 0.0008359178900718689, 0.0022050950210541487, 0.045901279896497726]}, {"target": [0], "doc": ["be i understand this correctly : you want the <tag> to be able to fail the same way as <tag> by trigger cancelnavigation ?", "if so , i be really hope for this as well", "* * in the follow case :* *", "<tag> resolve fine e", "the item exist in the database and return datum", "<tag> ca n't resolve e", "the item do not exist in the database and return <number>", "currently the last url would force i to redirect to another url , and return an empty observable like this", "* * what i 'd like :* *", "to force <tag> for observable to trigger navigationcancel in the routing process , thus make it possible for fail resolve to trigger the wildcard  path while persist the url like this :", "* * what be currently happen :* *", "the application crash if an <tag> be return inside the <tag> function"], "issue_sim": [0.34772056341171265, 0.03500106930732727, 0.05737640708684921, 0.19410260021686554, 0.1450900137424469, 0.10320174694061279, 0.1736447960138321, 0.49576830863952637, -0.010097961872816086, 0.46418845653533936, -0.013711725361645222, 0.3191508650779724], "prob": [0.8547194600105286, 0.0003528176748659462, 7.938440830912441e-06, 7.708035263931379e-05, 0.00023448166029993445, 3.571432898752391e-05, 0.00023721804609522223, 0.0033172662369906902, 1.6441483694507042e-06, 0.3243710994720459, 9.76632691163104e-07, 0.03361396864056587]}, {"target": [2], "doc": ["@maximotrinidad it work fine on macos and a full blown pop_os", "vm i have run where ps install fine and the module do as well", "wsl seem to be the issue here ."], "issue_sim": [0.10070996731519699, 0.4208682179450989, 0.1659054309129715], "prob": [0.002039937535300851, 0.09482599049806595, 0.9729386568069458]}, {"target": [17], "doc": ["guy , the problem be mostly with lack of proper documentation on how to test component with onpush strategy", "but it turn out that it be quite simple and i have <number> solution for you", "let 's test this component", "it have an initial input value of <number>", "so let 's see if we can set it to <number> in our unit test", "* * solution <number> * *", "this be the simple approach", "i suspect that be what we be suppose to be do to test our onpush component", "unfortunately the wrapper component can grow in complexity very fast , so as soon as i find other way , i stop do that", "* * solution <number> * *", "if you dive deep into angular , you 'll know that event may trigger change detection and in our test , mark component for check", "know this , we can abuse testbed a bit by add a custom event listener to our component , the _ _ push_changes", "when we trigger this event , next call to fixture", "detectchanges  will actually check that component , as it will already be mark as dirty", "it be kind of awkward to type this every time , so create helper function to generate the pushchange  and call the testbed", "* * solution <number> * *", "this be a solution i find recently by accident and it rock", "i call it the ultimate solution as it do n't use any hack , it be a drop - in replacement for your usual fixture.detectchanges  call and it be quite convenient to use .", "the only thing leave to solve be the lack of this information in official doc / guide :)", "i hope this help"], "issue_sim": [0.2984679937362671, 0.09378242492675781, 0.30210763216018677, 0.09581835567951202, 0.2761583924293518, 0.06312926113605499, 0.02658565156161785, 0.4448639750480652, 0.3216044306755066, 0.06312926113605499, 0.39584264159202576, 0.49855101108551025, 0.17373226583003998, 0.41343986988067627, 0.34464097023010254, 0.06312926113605499, 0.036950401961803436, 0.13992848992347717, 0.12978699803352356, -0.0010420531034469604], "prob": [0.021810268983244896, 0.019937193021178246, 0.0004267117183189839, 0.00021356908837333322, 0.005633225664496422, 9.88068563856359e-07, 7.013988943072036e-05, 6.727466825395823e-05, 0.004384020809084177, 1.3046810636296868e-06, 0.009326983243227005, 0.0007352372049354017, 0.00012220465578138828, 0.00014832518354523927, 0.010407982394099236, 3.180364501531585e-06, 5.112425787956454e-05, 0.10070466250181198, 0.0020663966424763203, 1.621683986741118e-05]}, {"target": [1], "doc": ["@jpsnover : in that example , you be sidestep the problem by pass in three argument to the $ extra parameter", "the code path that be cause a problem be when you just pass the parameter an array without use the \" additional argument \" syntax sugar ."], "issue_sim": [0.5057429671287537, 0.48869287967681885], "prob": [0.024676352739334106, 0.9874067902565002]}, {"target": [4], "doc": ["i have n't figure out yet how to use html fetch use rest and apply directive or component at all , even though this be an often mention feature", "do you get that part already work", "it do n't look like angular2 target this use case", "angular2 be a lot about building before deliver to the client", "in this case you need to control the view anyway and then complex selector do n't add much value ."], "issue_sim": [0.41059812903404236, 0.0036378316581249237, 0.5219927430152893, 0.4059363007545471, 0.45375919342041016], "prob": [0.7492564916610718, 0.0038884575478732586, 0.006706233602017164, 0.012015792541205883, 0.4068559408187866]}, {"target": [1], "doc": ["actually there be another , simple way how you can handle this case", "you can pass compute property with your listener object  to <tag> , example : <url>"], "issue_sim": [0.1551416665315628, 0.29467666149139404], "prob": [0.11864738166332245, 0.4593512713909149]}, {"target": [0], "doc": ["as a workaround , you can use identity function to coerce string and number literal to literal type :"], "issue_sim": [0.5343176126480103], "prob": [0.9997937083244324]}, {"target": [0], "doc": ["no , <tag> and <tag> be ' real ' global . you do n't explicitly <tag> or something , they simply be magically available  .", "i do n't like this kind of automagic , but that be what we have today", "but today , when i add that reference line to make they available for _ one _ file in the project , they automatically become available for _ all _ file in the project", "your opt - in localization would help with that", "hmm , but if a typing make a ' real ' global available  , and i then include it with <tag> , the global basically get ' degrade ' into a local thing in the typing , but it be still a ' real ' global in the js", "so it will explode at runtime when you use it as a ' global '", "that be a lot of work for the type author , be n't it", "then all of these will recursively have the same trick apply", "and yes , i run into the issue you mention in # <number>", "it regularly happen that i forget to <tag> , compiler do n't complain , runtime explode :-/", "they will still create the global at runtime", "the fact that you be hide the typing for it do n't mean it be n't there", "so it will still conflict at runtime", "suppose there be two  package : <tag> and <tag> that both make a global <tag> available , and both mylib1 and mylib2 try to use ' their ' <tag> :", "in your proposal , <tag> would ' locally ' include <tag> , so compiler wo n't complain", "same with <tag> , no complaint from compiler", "however , at runtime , this still explode , because the real <tag>  can only be either <tag> or <tag> 's <tag>", "by allow the ' real global ' escape , the compiler can know that the presence of <tag> from <tag> be conflict with that of <tag>", "note : both our proposal suffer from this problem , which i believe can only be ' solve '  when we additionally implement this explicit global escape"], "issue_sim": [0.14847025275230408, 0.05333808436989784, 0.35894548892974854, 0.17953401803970337, 0.344713032245636, 0.2079540193080902, 0.005540132522583008, 0.0064094774425029755, 0.06385906040668488, 0.19022847712039948, 0.1547614336013794, 0.10227298736572266, 0.1529707908630371, 0.2600049376487732, 0.29626473784446716, 0.18997329473495483, 0.13990242779254913, 0.3771228492259979, 0.3241840600967407], "prob": [0.08862544596195221, 0.0006257635541260242, 0.053521838039159775, 0.010052082128822803, 0.019423160701990128, 0.0003892410022672266, 0.00010043416841654107, 0.0007893528672866523, 1.4413213648367673e-05, 0.011847433634102345, 1.476827856095042e-05, 0.00047910705325193703, 2.5853278202703223e-06, 0.17559880018234253, 0.0013510340359061956, 5.785558096249588e-05, 0.012994918040931225, 0.01849505864083767, 0.011132892221212387]}, {"target": [1], "doc": ["for we this would be a great", "we wrap all input in a label for styling and ux purpose .", "i agree that we could drop down to jsx instead but the template be so much easy for everyone to follow"], "issue_sim": [0.02931755594909191, 0.19179269671440125, 0.3353261351585388], "prob": [0.0025099175982177258, 0.9919113516807556, 0.06440208107233047]}, {"target": [16], "doc": ["here be the history of gdscript :", "initially , godot be design to support multiple scripting language", "however , only gdscript be in use right now", "there be a little history behind this", "in the early day , the engine use the lua scripting language", "lua be fast , but create binding to an object orient system  be complex and slow and take an enormous amount of code", "after some experiment with python , it also prove difficult to embed", "the last third party scripting language that be use for ship game be squirrel , but it be also drop too", "at that point , it become evident that godot would work more optimally by use a build - in scripting language , as the follow barrier be meet :", "- godot embed script in node , most language be not design with this in mind", "-      godot use several build - in data type for 2d and 3d math , script language do not provide this , and bind they be inefficient", "-      godot use thread heavily for lift and initialize datum from the net or disk , script interpreter for common language be not friendly to this", "-      godot already have a memory management model for resource , most script language provide their own , which result in duplicate effort and bug", "-      binding code be always messy and result in several failure point , unexpected bug and general unmaintainability", "finally , gdscript be write as a custom solution", "the language and interpreter for it end up be small than the bind code itself for lua and squirrel , and equally as functional", "with time , have a build - in language have prove to be a huge advantage", "in my opinion , c++ can be good", "there be some solution like :", "even angel script typically can be like a runtime compile", "in scripting , i love python because i always love solution that mix game and scientific simulation", "in another issue why godot have it be own physics library : <url>", "there be some issue about language like c # : <url>"], "issue_sim": [-0.04169163852930069, 0.5074318647384644, 0.06321079283952713, 0.021825972944498062, 0.33113744854927063, 0.43142929673194885, 0.2360047698020935, 0.3217877745628357, 0.47590893507003784, 0.46260979771614075, 0.4438353180885315, 0.5020137429237366, 0.45156627893447876, 0.11464087665081024, 0.17378199100494385, 0.4019415080547333, 0.2264326512813568, 0.3651621639728546, 0.07626521587371826, 0.37667176127433777, 0.2485276162624359, 0.2858579754829407, 0.32828179001808167], "prob": [0.005409453995525837, 0.04928317293524742, 0.07146413624286652, 0.01755562610924244, 0.02074919082224369, 0.017214229330420494, 0.00879100151360035, 0.16923671960830688, 0.06114303320646286, 0.0013481318019330502, 0.022017141804099083, 0.006064560730010271, 0.011157655157148838, 0.005449344869703054, 0.0017949530156329274, 0.014964046888053417, 0.0010148129658773541, 0.0004265615716576576, 0.0005558613920584321, 0.007312656380236149, 0.0882093533873558, 0.01946290396153927, 0.006361832842230797]}, {"target": [2], "doc": ["i be also in favour of rename thing to be explicitly 3d or 2d", "would n't it be possible to have the original name still exist as alias to the new one", "they would be hide from the editor so the old name would n't be usable  .", "that way old code would still work , without change and without need additional logic to convert anything", "a warning could be add for code use the deprecate node name and then in 4", "2 they could be remove"], "issue_sim": [0.5952703356742859, 0.24492478370666504, 0.10934804379940033, 0.26238957047462463, 0.2643473744392395, 0.04009103402495384], "prob": [0.015614686533808708, 0.11699894070625305, 0.3678945302963257, 0.10467992722988129, 0.08009186387062073, 0.007730135694146156]}, {"target": [4], "doc": ["thank for the reply ,", "if that be the case , then should n't this be against the rule :", "<tag> since <tag> be not declare via <tag>", "you should n't be able to take a <tag> and set to a variable that be of type <tag>", "this would make the behavior make a bit more sense and pevent folk from accidentally use one when they mean another .", "so just to be clear current behavior allow this :", "expect behavior should call a type error on the above code , the only allowable version being :", "unless you use <tag> , in which case the current behavior be fine :", "and ditto with <tag> and <tag>"], "issue_sim": [-0.021332306787371635, 0.12542010843753815, 0.19025664031505585, 0.42447981238365173, 0.23332585394382477, 0.1574365794658661, 0.5119152069091797, 0.19872622191905975, 0.04967956990003586], "prob": [0.0018712959717959166, 0.016431758180260658, 0.0031000839080661535, 0.011991060338914394, 0.3076150715351105, 0.0003723131667356938, 0.004076803103089333, 0.0019291586941108108, 0.0003544241772033274]}, {"target": [1], "doc": ["the wording of <tag> do n't make sense for warning", "by issue a warning , you be by default allow unencrypted .", "i propose an <tag> should be use if warning be choose", "the error proposal should continue with <tag>"], "issue_sim": [0.16943636536598206, 0.2799096703529358, 0.22794394195079803, 0.14172308146953583], "prob": [0.035898357629776, 0.9831205606460571, 0.007455896586179733, 0.0025811076629906893]}, {"target": [1], "doc": ["imho the current naming make sense", "<tag> sound like the default destructor who simply delete the object and <tag> be a more sophisticated function to delete object ."], "issue_sim": [0.21901996433734894, 0.4634944498538971], "prob": [0.023281436413526535, 0.9396584033966064]}, {"target": [1], "doc": ["from talk with @eamodio my understanding be that the tar approach we have be essentially a workaround for the limitation of the github text search api and should go away when the github search api improve", "it be not clear when the search api will be improve , but i slightly worry about whether we should really be expose that and have typescript depend on that implementation ."], "issue_sim": [0.2890530824661255, 0.37856435775756836], "prob": [0.08322016894817352, 0.8780924081802368]}, {"target": [0], "doc": ["with name script , static var may be finally useful ."], "issue_sim": [0.36585378646850586], "prob": [0.9998003840446472]}, {"target": [0], "doc": ["after some experiment with powershell class i do a long time ago i find many limitation and i 'd expect an endless stream of claim as soon as dsc community start actively use they .", "i 'd like to see example of dsc resource implementation on powershell class to gain confidence otherwise", "do you consider a dsl", "i remember @rjmholt 's old experiment with dynamic keyword support <url> perhaps this be a good alternative for dcs development"], "issue_sim": [0.31183916330337524, 0.503643274307251, -0.042754627764225006, 0.31753695011138916], "prob": [0.8654773235321045, 0.3121873736381531, 0.0021833444479852915, 0.03582506999373436]}, {"target": [0], "doc": ["it look like this be a problem in exist _ production _ version , but not in powershell core as of v6 - beta.3  , so you should probably report this at  ."], "issue_sim": [0.36585861444473267], "prob": [0.9998854398727417]}, {"target": [0], "doc": ["yeah we can do that but language service intelisense will not work and also as angular do load with ngmodules , why ca n't we use the same approach for load and render dynamic component in the same way .", "why just restrict it with only <tag>"], "issue_sim": [0.6622227430343628, 0.04151277616620064], "prob": [0.9669536352157593, 0.005656098015606403]}, {"target": [2], "doc": ["@cristian - mocanu - mob sound like a great hobby project on the side :)", "i be sure there be more important stuff in the pipeline than rewrite the entire compiler", "i agree that in an ideal world , compiler for other language would be nice - but what about 3rd party lib ?", "would those not need to be rewrite in kotlin", "or would the compiler have to compile both at the same time", "i think there be practical implication in this that at least i do n't quite grasp", "the idea be great , just do n't think it be feasible imho"], "issue_sim": [0.11139385402202606, 0.2765449583530426, 0.3038054406642914, 0.39964234828948975, 0.21324566006660461, 0.1295160949230194, 0.08147341012954712], "prob": [0.005907401908189058, 0.470846027135849, 0.406991571187973, 0.013506509363651276, 0.08597444742918015, 0.12609292566776276, 0.013991975225508213]}, {"target": [2], "doc": ["i understund , but who care about smartphone \" game \"", "the fact be that the tactil control limitation destroy the possibility of create true games", "the second limitation be the power , limitation that justly vulkan aim to destroy .", "and html games be currently an ultra minority", "also vulkan will arrive on virtual reality and on console , ps4 and nintendo nx and steam machine", "the vast majority of <number> games will be on vulkan , do n't lose this train", "also arm <number> gpus , power vr <number> gpu and currently qualcomm <number> gpu will have vulkan support", "google heavily push vulkan", "mediatek will probably fully support it", "and there be rumor than qualcomm will use the opensource freedreno driver , if it be true , the community could add support for <number> card", "also all the tizen driver will be opensource and probably could be port to android", "vulkan will be everywhere support on android", "and pc / console / vr / ar be far more important", "but this be your software , you be free to do what you want obviously", "again sorry for my bad english"], "issue_sim": [0.21088433265686035, 0.13024821877479553, 0.43567296862602234, 0.20024001598358154, 0.3412935137748718, 0.4905165135860443, 0.48350298404693604, 0.5779275894165039, 0.47238194942474365, 0.4807514250278473, 0.4764710068702698, 0.7042732238769531, 0.210245281457901, 0.2871738374233246, 0.031527530401945114], "prob": [0.11354068666696548, 0.1069301888346672, 0.04607177525758743, 0.003145623952150345, 0.02257230319082737, 0.11610288918018341, 0.7207839488983154, 0.001776798744685948, 0.0025176473427563906, 0.22020673751831055, 0.0075722006149590015, 0.0013149409787729383, 0.006591346580535173, 0.04148833826184273, 0.0005880634998902678]}, {"target": [0], "doc": ["the 2nd argument differ from one impl to another , but the first be always the tag while the 3rd be an array of child"], "issue_sim": [0.3066398501396179], "prob": [0.9999432563781738]}, {"target": [0], "doc": ["this do not even work , if you have a hash in the url it will be remove when click a link that have ='null '"], "issue_sim": [0.3893009126186371], "prob": [0.9999555349349976]}, {"target": [1], "doc": ["i would just like to point out another possible way to deal with build - in script : make they work", "i do like to use build - in script in my current project , simply because they make scene self - contain .", "you can easily extract node from my big game scene and store they to a good place without have to worry about where all the script end up", "it be easy to share scene to other project too", "you do n't need to worry about where to save script file , so create a new script be a no - brainer", "no need to organize and no need to re - organize be a big plus for build - in"], "issue_sim": [0.3922232389450073, 0.5169517993927002, 0.295106440782547, 0.06026153266429901, 0.36639678478240967, 0.09540702402591705], "prob": [0.027849828824400902, 0.8284745216369629, 0.015367950312793255, 4.717283809441142e-05, 0.05265006795525551, 0.004489006008952856]}, {"target": [0], "doc": ["i be not sure this can be fix , it would likely break exist script , especially because the workaround be to use more quote .", "my memory be a little fuzzy , but i believe i try to fix this issue when rewrite the parser in v3", "i do n't recall specific , but my original design be to tokenize the sub - expression during initial scan of the string , and i think it would have naturally work as you expect", "unfortunately , due to backwards compatibility issue  , we continue to work as it do in v1 and v2"], "issue_sim": [0.21836960315704346, 0.2969651222229004, 0.22565501928329468, 0.25667938590049744], "prob": [0.37871214747428894, 0.18353234231472015, 0.3615630865097046, 0.01948380097746849]}, {"target": [0], "doc": ["keep in mind that neither break on | or use splatte be an option when invoke a native executable with a lot of lengthy parameter .", "that say , when i can avoid backtick i too try to avoid it"], "issue_sim": [0.46477967500686646, 0.2667057514190674], "prob": [0.9714250564575195, 0.0010020240442827344]}, {"target": [1], "doc": ["honest question here ,", "why do we even need to wrap everything on a single root element , be this a technical limitation or an arbitrary decision ?"], "issue_sim": [0.06367071717977524, 0.3384034037590027], "prob": [0.0066337320022284985, 0.9962862730026245]}, {"target": [2], "doc": ["@yyx990803 , you be right this be pretty much what i be after", "however , it be interesting to note that <tag> be compile down to <tag> directive", "it would be cool if there be a way to do the same thing where something like <tag> be compile down to <tag> and you could use clean syntax like :", "btw , i really love this framework", "you 've manage to create an elegant , well document and easily comprehensible software with an economy of feature", "i previously use angular and finally realize that despite be support by google and widely recommend it be an inelegant , overcomplicated , inefficient mess", "i be also interested in mithril but ultimately be turn off by the idea of be force to template html in javascript", "i use jade and this work well with vue", "my frontend software stack currently consist of vue", "js , jquery , jade , stylus , autoprefixer , browserify and gnu make", "this setup be work really well", "js have be a breath of fresh air"], "issue_sim": [0.04459458962082863, 0.2519400715827942, 0.47656649351119995, 0.1795336753129959, 0.024462394416332245, 0.3910292387008667, 0.38943585753440857, 0.27308598160743713, 0.06390564888715744, 0.3914113938808441, 0.04221009090542793, 0.1481589823961258], "prob": [0.006452382076531649, 0.32928842306137085, 0.6812666654586792, 0.00020074902568012476, 0.0766185000538826, 0.12476526200771332, 0.01633332297205925, 0.00019278141553513706, 0.00027854522340931, 0.17928652465343475, 0.00011191669182153419, 0.0003349195176269859]}, {"target": [0], "doc": ["i think it make sense to emit a boolean when the state of <tag> change to future - proof this feature a bit .", "we can bikeshe the name of the event in the public api review stage of the pr :)"], "issue_sim": [0.36978644132614136, 0.02687130868434906], "prob": [0.7907447218894958, 0.28615817427635193]}, {"target": [1], "doc": ["as for use vue instance with compute property as your state - i do n't recommend that", "create vue instance be relatively expensive .", "btw , i think this be more of a question", "please discuss on forum instead"], "issue_sim": [0.39151501655578613, 0.2360830307006836, 0.00954623892903328, 0.04978335648775101], "prob": [0.20634029805660248, 0.6175342798233032, 0.029631750658154488, 0.03522297739982605]}, {"target": [3], "doc": ["the import statement as mention compile the chunk due to the give string", "if you create a library with ng generate library node ; do an ng build node and try to load the module as follow", "modules / generate / nodes", "it will not load the module as the runtime complain that node can not be find even if tibia present .", "as what i understand be that the angular ivy compiler analyze the import string to detect which module have to be build as a chunk", "i have google the universe and there be no simple way to generate a module and load it at runtime if it be compile separately"], "issue_sim": [0.28367161750793457, 0.5051052570343018, 0.27620363235473633, 0.37166106700897217, 0.5671683549880981, 0.586100697517395], "prob": [0.003730589058250189, 0.08590522408485413, 0.0004892782890237868, 0.772191047668457, 0.010560469701886177, 0.03309391811490059]}, {"target": [2], "doc": ["i suggest start with _ white list _ of windows powershell module which we want to enable to load from windows powershell module path", "the white list should contain only test and approve module", "hence we do not need new cmdlet - we can   implicitly use windows powershell module path  and enhance import - module to check the white list _ after _ module search in psmodulepath ."], "issue_sim": [0.6570687294006348, 0.23167107999324799, 0.7030428647994995], "prob": [0.31340891122817993, 0.013385258615016937, 0.8851146101951599]}, {"target": [2], "doc": ["the difference be in module assignment  and default export", "here be some example :", "these two concept be fundamentally incompatible  .", "additionally , typescript treat these differently when use import statement , so if you be target es6 you would n't even be able to import the cjs module", "pretty much any module compile by babel though support both mode , and therefore it make sense for there to  be typing for both mode", "if the module do n't use a default export or a module assignment then separate typing be n't need"], "issue_sim": [0.2050969898700714, -0.09155891835689545, 0.0370016023516655, 0.4916047751903534, 0.41520947217941284, 0.3889811038970947], "prob": [0.0004023598157800734, 9.074965782929212e-05, 0.25182580947875977, 0.04156331345438957, 0.0368778221309185, 0.0005552413640543818]}, {"target": [0], "doc": ["ahh yes , other have see the light too ."], "issue_sim": [-0.030611902475357056], "prob": [0.9998441934585571]}, {"target": [1], "doc": ["@alucidwolf what be you try to accomplish", "you should n't be render html code from a server , if you need a dynamic menu , send the menu datum as the datum , and let your .vue file render it"], "issue_sim": [0.06270056962966919, 0.4658828377723694], "prob": [0.0034854323603212833, 0.9673781394958496]}, {"target": [1], "doc": ["@christiankienle a good idea ,", "but this be for a public - face api , and i 'd like to use a similar approach as nuxt do for its hook , where you use destructuring to pluck the parameter that you need out of one single object argument provide to the callback ."], "issue_sim": [0.029649369418621063, 0.4344989061355591], "prob": [0.022292090579867363, 0.9609740972518921]}, {"target": [1], "doc": ["@groud this sound good", "an option for the limit be unlock would be very useful ."], "issue_sim": [-0.044879086315631866, 0.23542332649230957], "prob": [0.08568279445171356, 0.9666194915771484]}, {"target": [5], "doc": ["note that as we have an <tag> way to change how error message be present , we could have a <tag> to allow choose between this new presentation vs the exist one", "although i prefer to have an extension to <tag> like <tag> and also have <tag> there along with <tag> keep they in one place for discovery", "@isazonov i think 7", "2 be lts be a great point", "this be why i 'd like to get this as an experimental feature early to get feedback", "it could stay experimental in 7.2 or with user selection , we could make the new presentation default and allow user to go back to the original ."], "issue_sim": [0.24122853577136993, 0.13875296711921692, 0.06941428035497665, 0.08195360004901886, 0.057080358266830444, 0.2346411645412445], "prob": [0.15214313566684723, 0.13048796355724335, 9.325565042672679e-05, 0.0005746992537751794, 0.0022682505659759045, 0.5574248433113098]}, {"target": [1], "doc": ["be this something that can be change without break something", "seem inefficient for a console to waste time add and display right padded character ."], "issue_sim": [0.09604723751544952, 0.21752482652664185], "prob": [0.006985757499933243, 0.9966944456100464]}, {"target": [2], "doc": ["can you actually show an example of how you 'd make use of this", "i be have a hard time see the use case for this give that cva be mostly use by the form implementation and some library , but not generally \" user code \"", "it sound like you 'd have to manually call this , but for that you would n't need a change in cva anyway , you can just implement that app - side ."], "issue_sim": [0.12186503410339355, 0.21332994103431702, 0.2357393056154251], "prob": [0.007694012951105833, 0.46741583943367004, 0.6321715116500854]}, {"target": [3], "doc": ["we ca n't make too many assumption about how application code will consume annotation , but , assume it check for match constructor recursively up the prototype chain - could n't we just use the type system to compose annotation to avoid the situation you link", "it would of course require mixin  , but you could just create sub - type annotation that mix in the aggregation of common annotation", "you would n't then need the spread operator , explicit , or alternate array syntax to make it work", "also , third party library could provide their own composition functionality for attribute , say with an aggregate annotation that take an array of annotation ."], "issue_sim": [0.5221141576766968, 0.6110052466392517, 0.3421593904495239, 0.590873122215271], "prob": [0.376592218875885, 0.09610328078269958, 0.023502644151449203, 0.5154174566268921]}, {"target": [3], "doc": ["in that case , i guess the <tag> problem could be solve by a 3rd - party library that implement runtime extraction base on a type / interface , simply for the sake of not write these function by hand", "would generate  a function that take an object and return the field of <tag> only by call <tag> and then call <tag> to only return the subset contain in <tag>", "or something like that", "assume the object.fromentries proposal be accept , this would work perfectly well for we , although in our particular case we would n't need the <tag> overhead from such a library as the value pass around in our app never satisfy two separate type .", "at least so far", "but then again , this seem to fall outside of the intend use of typescript itself", "i stumble upon <url> and <url> today", "could use its source code as a starting point if <number> be accept and its easy to plug into ts for code generation"], "issue_sim": [0.4594862163066864, 0.4548325538635254, 0.06608769297599792, 0.3624430298805237, 0.04434320703148842, 0.36737990379333496, -0.004734992049634457, 0.2805745601654053], "prob": [0.4253830015659332, 0.6885406970977783, 8.569766941946e-05, 0.3563632667064667, 9.653490269556642e-05, 0.004247342236340046, 7.053857552818954e-05, 0.030243635177612305]}, {"target": [4], "doc": ["@honix why sprite base rendering require gpu", "as far as i remember , there be no sprite object in opengl specification", "only texture with no memory control , with no room for optimization like in quake or second reality on pixel level", "cpu may be slow relatively , but if it be still <number> fps against <number> fps on gpu , then it do n't matter", "for sprite base rendering , the primary concern may be speed of system memory .", "but watch hd video on my pc tell i that it be not a problem", "@calinou do n't you think that require modern gpu for * * all * * 2d game , just because * * some * * 2d game want to use fancy 3d effect be somewhat wrong", "i would like to see those * feature * optional and have a choice to raise my system requirement only if i really need they", "this should be also true if i want my 2d game to use fancy effect that require opengl 4", "0 , new vulcan specification , or unique capability of google pixel or some hardware ai rendering module"], "issue_sim": [0.4631607234477997, 0.45115095376968384, 0.40935635566711426, 0.42789939045906067, 0.3788525462150574, 0.10822486877441406, 0.6276732683181763, 0.12017597258090973, 0.5254433155059814, 0.34611427783966064], "prob": [1.0723182640504092e-05, 0.00042069671326316893, 0.025427909567952156, 0.0011422905372455716, 0.5137884616851807, 0.00017196951375808567, 6.754476999049075e-06, 5.003948535886593e-05, 7.22464537830092e-05, 0.0030985348857939243]}, {"target": [0], "doc": ["there be no ambiguity , because what i be propose be state - dependent , _ base on the specific syntax of the command in question _ :", "* with a clean slate , <tag> be unambiguously the parameter _ name _", "* once that have be recognize , give that the <tag> parameter _ require a value _ , the _ next _ token be unambiguously the parameter _ value _ - even if it look like a _ parameter _", "it be not that common a pattern in posix - like shell , but the equivalent be an _ option _ with a _ mandatory _ option - argument ; for instance , if you want to pass a script filename to <tag> via its <tag> option , the next token be _ invariably _ treat as the filename , even if it start with <tag> :", "again , in the case of <tag> it be obvious what the _ intent _ be , but let 's not forget that _ relative to the intent _ it be a _ syntax error _ - base on a misunderstanding of how the <tag> parameter work", "in other case , such as in my <tag> example , the intent may be quite different , and since <tag> be a syntactically unambiguous way to pass <tag> as a _ value _ - because <tag> _ require _ one - it should be treat as such", "that this fail from _ inside _ powershell look like a bug", "i do n't mean other shell , i mean the consistency between powershell 's cli and parameter pass to cmdlet and function :", "* <tag> work  ,", "* something like <tag> should work too"], "issue_sim": [0.299742192029953, 0.36406010389328003, 0.6667884588241577, 0.4046868681907654, 0.4364967942237854, 0.510270357131958, 0.2997923493385315, 0.4400600790977478, 0.03537002205848694, 0.17609858512878418], "prob": [0.2961331307888031, 0.005534014198929071, 0.0717809796333313, 0.11485195904970169, 0.11418014019727707, 0.14915043115615845, 0.005274704657495022, 0.46914252638816833, 0.0005886020371690392, 0.0007831276743672788]}, {"target": [0], "doc": ["what be the benefit instead of : <tag>"], "issue_sim": [0.11199460923671722], "prob": [0.9998075366020203]}, {"target": [3], "doc": ["if the syntax i have mention above be possible :", "1/ the bracket will let user know that this kind of event handling will be inverse ,", "2/ i think this syntax be clear since as @posva say , space be not possible in the attribute part ,", "so why do n't we put all of that event and modifier to the value part and the only one function call in   bracket or something like that   so user will know the difference ."], "issue_sim": [0.2553196847438812, 0.31153425574302673, 0.3467051386833191, 0.34041792154312134], "prob": [0.002852905774489045, 0.06975606083869934, 0.04984590411186218, 0.9052229523658752]}, {"target": [1], "doc": ["@akien - mga yeah , i understand that however , the way @volzhs be implement the color customization be what cause the problem here , since the way that be do be this pr do not allow the   use of textured widget", "i completely agree with have the old theme for game prototyping but to sacrifice the editor theme to have color customization be simply not worth it . maybe"], "issue_sim": [-0.041633300483226776, 0.007357880473136902], "prob": [0.15849730372428894, 0.9741820096969604]}, {"target": [3], "doc": ["@mlc - mlapis thank you to help i recognize this case", "i belive that i can insert component style directly to shadow dom like this image :", "base on this  from this", "we can easily style directly shadow dom since we just only template add it to see the reflection of new template style we style .", "after we save file change , all that template code will be remove by chrome extension"], "issue_sim": [-0.02220255136489868, 0.418989360332489, -0.0630473643541336, 0.37130460143089294, 0.42859846353530884], "prob": [0.004097448196262121, 0.47486305236816406, 0.00046518538147211075, 0.7342139482498169, 0.005895713809877634]}, {"target": [2], "doc": ["@chaosus you should provide argument to explain why private variable be necessary", "otherwise it be unlikely someone will get to work on this", "private variable be here to help encapsulate datum and prevent coupling with other class - it prevent other class from access these variable .", "if you do n't access they in the first place the problem be solve as well", "in both case - use the private keyword or writing use a convention - you have to learn when and how to make variable private , when and how you should be able to access they", "you have to learn to design your class so that you can change the internal later without break their interface and vice - versa", "i think that be your big source of trouble when it come to code architecture", "regard python , it work for million of python developer", "there be a mechanism to make variable \" private \" , that prevent direct access , and it be simple : write two lead underscore instead of one", "but i 've yet to see someone use it", "it be not be available in js until recently either", "there be probably other language like that", "i be not say it should n't be in gdscript - i really do n't mind if other people have a good use for the feature", "i be just not convince it be that useful", "godot could just not list variable with a leading _ or two in autocompletion"], "issue_sim": [0.27521422505378723, 0.20356658101081848, 0.3547641932964325, 0.17006227374076843, 0.4184398055076599, 0.15598830580711365, 0.21777570247650146, 0.17376808822155, 0.31332722306251526, -0.02627604268491268, 0.19200493395328522, 0.1974794566631317, 0.18022304773330688, 0.03342428058385849, 0.4385089874267578], "prob": [0.002980116056278348, 0.0011677818838506937, 0.24604907631874084, 0.01937662437558174, 0.4789806604385376, 0.03159752115607262, 0.008908669464290142, 0.0032047429122030735, 0.058539364486932755, 0.0010602972470223904, 0.001527403830550611, 0.0015117547009140253, 0.14714515209197998, 0.0010081232758238912, 0.007182745728641748]}, {"target": [0], "doc": ["i be able to verify that pwsh.exe would behave this way no matter which host i run it from . 5.1 do n't behave that way ."], "issue_sim": [0.12910646200180054], "prob": [0.9999920129776001]}, {"target": [0], "doc": ["and that would hold for any brdf function f which do n't start diverge at grazing angle"], "issue_sim": [0.04351980239152908], "prob": [0.9999260902404785]}, {"target": [0], "doc": ["@lawnjelly it really depend on the game you be make", "my profile datum show that this be use a lot in cpuparticles2d for example and that be how i get to it .", "if you do a point and click type of game , it probably wo n't help you much"], "issue_sim": [-0.029773611575365067, -0.09397673606872559, -0.04280506446957588], "prob": [0.000979693024419248, 0.9922581315040588, 0.43169575929641724]}, {"target": [0], "doc": ["this be discuss a lot before in many issue and people agree that the new way be well  .", "if you want to be truly effective you should use keyboard shortcut"], "issue_sim": [0.17254000902175903, 0.19127775728702545], "prob": [0.9429912567138672, 0.0025868306402117014]}, {"target": [5], "doc": ["it be just architecture bug", "guard exist not just because they should exist , they resolve some problem", "<tag> often use for permission check , <tag> - to prevent user datum lose", "i be not say it be the only case , but we should n't say _ \" it be ok , because of architecture \"", "_ architecture for development , not ver a versa", "and while you need to check activation guard every time , because you will have different navigation every time , you need only single call of <tag> in any series of navigation : you _ already have confirmation _ from user or developer that you may leave this route ."], "issue_sim": [0.17367012798786163, 0.2081058919429779, 0.19475513696670532, 0.1344131976366043, 0.17577117681503296, 0.35550183057785034], "prob": [9.428746125195175e-05, 0.015685098245739937, 0.007756770122796297, 0.31174638867378235, 0.003957923501729965, 0.7087724208831787]}, {"target": [1], "doc": ["if you read the proposal all the way through , it mention that this would * * not * * change the exist mechanism", "you ca n't because that would break too many script .", "this issue be mean to discuss if it be worth add another mechanism for line continuation", "i know , right", "have more than * * one * * way to do something in powershell be shocking i tell you"], "issue_sim": [0.10548874735832214, 0.30567067861557007, 0.25250622630119324, -0.021617665886878967, 0.49990588426589966], "prob": [0.03550504148006439, 0.9401994347572327, 0.005726070608943701, 6.48616551188752e-05, 0.007010329514741898]}, {"target": [3], "doc": ["if <number> out of <number> + api you work with require that , i think that count as quite rare ;)", "that be just the general way to achieve any simplification", "as long as there be a simple and logical way to opt out , i do n't see how that be bad ux", "even well , we can see a reception of the same decision for newtonsoft . json .", "you can find multiple stackoverflow question on how to opt out , but i have n't see any rant against the choice there", "here , the solution would be contain directly within the error message", "i think the general way be to accept body once query field become overwhelming , e", "elasticsearch let you make basic query via query field and advanced one via the json body", "so the issue occur only when use with a port :"], "issue_sim": [0.30429744720458984, 0.12144540995359421, 0.14947840571403503, 0.2332841157913208, 0.12492872029542923, 0.18204043805599213, 0.15079036355018616, 0.4379115700721741, 0.10420069843530655], "prob": [0.054046113044023514, 0.005937563255429268, 0.20683728158473969, 0.0599980354309082, 0.18274766206741333, 0.021129505708813667, 0.022583860903978348, 0.0018962466856464744, 0.003174880752339959]}, {"target": [17], "doc": ["as i say , this be unpreceded in programming language that i know , so i be try to understand what be be propose here", "let i comment on the usage suggestion by @ace - dragon :", "how be that suppose to work", "only run the loop once", "if so it be not a loop", "if it be a loop , it wo n't run only once", "same thing apply to a <tag> loop", "this be possible with my suggestion , but require a bit of repetition :", "and how be this suppose to work too :", "do you realize that <tag> stop the loop", "if it stop always in the first iteration , it 'll have only one iteration", "if it be suppose to stop only if condition be <tag> in the first iteration , it mean that <tag> have also to keep track of an iteration counter", "actually , every <tag> will have to keep track of this and use if there be some <tag> inside eventually", "for this there be well alternative syntax , such as :", "this loop counter be much more useful than the op , but also imply a high memory allocation and usage", "while i can see a great value in thought process from non - programmer , you all   have to understand that in the end this be all an algorithm", "so if we be to add such suggestion , we do have to think of a program that solve the problem in a general fashion and use the structure provide by the underlie platform", "we need to build a basis for the high - level language use the low - level barebone , which be not always easy , viable or even possible", "also , i want to see real use case to the proposal , not \" someone might sometime need something like this perhaps \"  )", "@blurymind i can see that the code you link use an identifier , so it know what trigger to check or reset", "it indeed do need an identifier , as i say in my first post , even if it be internal", "but i personally ca n't see a way for this to actually work without an explicit identifier , which make my syntax proposal bogus", "maybe a thing like <tag> be more viable , but again this need to be properly think", "and i be pretty sure i can solve this with a gdscript singleton although in a clunkier fashion"], "issue_sim": [0.26101821660995483, 0.03788906708359718, 0.08835820108652115, 0.24086818099021912, 0.18569442629814148, 0.3663746416568756, 0.21633663773536682, 0.2553202509880066, 0.0080760158598423, 0.10724768042564392, 0.2998603582382202, 0.47615569829940796, 0.2750406563282013, 0.15304434299468994, 0.19917336106300354, 0.24731425940990448, 0.19899795949459076, 0.20083551108837128, 0.2157168686389923, 0.37801337242126465, 0.15307393670082092, 0.29226550459861755, 0.14200708270072937, 0.30027589201927185], "prob": [0.08395060896873474, 0.0063937632367014885, 3.151148484903388e-05, 1.3895621123083401e-05, 2.1017973267589696e-05, 0.00012600066838786006, 0.0002961384307127446, 0.00043393170926719904, 3.5397875763010234e-05, 1.3592691175290383e-05, 0.0002732783032115549, 0.04697645083069801, 0.0005206140922382474, 0.00016941528883762658, 0.000999519252218306, 0.007989585399627686, 0.020139088854193687, 0.0034686720464378595, 0.008644000627100468, 1.8043034287984483e-05, 0.00043367454782128334, 0.0599895715713501, 0.0004986633430235088, 0.011069170199334621]}, {"target": [2], "doc": ["close as resolve by <url>", "<tag> use the current <tag> as the <tag> by default", "when in an aux outlet , you need to \" escape \" that outlet first so you can add command for a sibling name outlet in the parent .", "stackblitz link : <url>"], "issue_sim": [0.18211695551872253, 0.27001750469207764, 0.32489362359046936, 0.11127203702926636], "prob": [0.026582859456539154, 0.0661497712135315, 0.8820902109146118, 0.007022092584520578]}, {"target": [2], "doc": ["@djrm , @volzhs although i really love the color customisation i also agree that it be not worth it", "there be a couple of grey value which make sense : very dark  , blueish grey  , saddle light grey  )", "to give full color variation will just waste time play around and only have benefit for the crazy ppl under we who like all green or pink .", "after see the approach with adapt the background color to the window color  i still see benefit to allow full color variation for some ui element", "also look at the discussion for the highlight color i also see some advantage in the full variation", "this be why i would love to see the option to give optional access to some color of a", "tres theme and the default theme", "but i agree it be not worth for sacrifice the really good look theme we have right now", "in @djrm current default theme it would be enough to just give access to the three different grey value", "this would solve most controversial and would look amazing", "everyone who want even more customisation can install another"], "issue_sim": [0.07243572175502777, 0.012355631217360497, -0.02617446519434452, 0.043949469923973083, -0.00036233291029930115, 0.06390970945358276, -0.017376504838466644, 0.06731200218200684, -0.06672851741313934, -0.053252868354320526, 0.012334412895143032], "prob": [0.0022492939606308937, 0.228389173746109, 0.7713369727134705, 0.03711283579468727, 0.005067871883511543, 0.047651804983615875, 0.00022736756363883615, 0.005067440681159496, 0.0016775797121226788, 0.003971097990870476, 0.0012054479448124766]}, {"target": [0], "doc": ["i personally use <tag> much more often than the other  ."], "issue_sim": [0.02434307523071766], "prob": [0.9999339580535889]}, {"target": [0], "doc": ["be it a class or function , the file system disallow duplicate naming , so use that to ensure uniqueness we simply need to import what we want to use .", "we be not break anything use the exist import system", "i think your view point be from the ngmodule perspective", "i be say we do n't need ngmodule , or at a minimum the architecture can be improve", "the compile can and should take care of all discovery", "typescript already support public and private so there be no conflict or break change", "the only break change would be if the new compiler function do n't allow for ngmodule which by a simple scan would know if one exist or not"], "issue_sim": [0.34827661514282227, 0.11346448957920074, 0.06569439172744751, 0.17545875906944275, 0.2504802942276001, 0.3262718915939331, 0.3051198720932007], "prob": [0.5952250957489014, 0.025810709223151207, 0.005646774545311928, 0.23949289321899414, 0.005630877334624529, 0.025676583871245384, 0.5123757719993591]}, {"target": [4], "doc": ["i 'll weight in that this be not a good idea , imo", "with your proposal in place , look at that command should it be interpret as", "<tag> <tag> <tag> <tag> <tag> powershell", "get - command   -name ' get - help ' -module # miss an argument for parameter ' module '", "this could cause unexpected / unpredictable behavior and lead to a bad ux .", "this also open a pandora 's box of exception like pass string parameter with subexpression operator", "string that contain special token should be quote while string without special token can be pass without quote as a kind of convenient syntactic sugar", "unquoted string parameter should be the exception , not the rule , imo"], "issue_sim": [0.020744644105434418, 0.19202756881713867, 0.3635186553001404, 0.4577831029891968, 0.10551431775093079, 0.33618298172950745, 0.3985949456691742, 0.45236867666244507], "prob": [0.013445436954498291, 0.4028488099575043, 0.0012938077561557293, 0.20124764740467072, 0.010852347128093243, 0.08668490499258041, 0.09251385182142258, 0.011156397871673107]}, {"target": [0], "doc": ["for now , it can be implement with render function , by pass the render vnode to another component .", "here be a basic example : <url>", "i 've be use something like the above in production for some time , and it seem to work well"], "issue_sim": [0.4541149139404297, 0.07264132797718048, 0.16524308919906616], "prob": [0.838433563709259, 0.03185928240418434, 0.17640772461891174]}, {"target": [0], "doc": ["without understand how the engine 's source code be structure , it be not trivial  to implement this by modify the engine , so here be a gdscript interpolation implementation .", "i update the <tag> file from the provide example project to do interpolation between the previous and current position on the sprite", "that way , the actual physics be untouched but the movement appear to be smooth", "i expect this same approach should work for anything , provide that your character scene be structure in the same way", "the ' sprite ' can probably be replace with any type of drawable node -- in fact , i do n't yet see why this would n't also work in 3d", "if you attach a camera to your character , you 'd probably want to make it a child of the drawable node , rather than the ' physics body ' node", "i have n't try to use this in a sample game yet , but the movement look smooth", "the only problem be when the sprite reach the edge of the screen , i \" teleport \" it back to the other side , and the ' interpolation ' often draw the sprite in the middle of the screen when this happen", "this could probably be overcome with a flag being set for every fix process update say whether or not the character have \" teleport \" , and not perform the interpolation  in that case"], "issue_sim": [0.2849547266960144, 0.5346423387527466, 0.3551761507987976, 0.24646387994289398, 0.3594081699848175, 0.41217806935310364, 0.26160934567451477, 0.568509042263031, 0.36974620819091797], "prob": [0.3754252791404724, 0.0832497850060463, 0.013258567079901695, 0.01978888176381588, 0.14317333698272705, 0.04741550609469414, 0.0022141446825116873, 0.16418036818504333, 0.1470109522342682]}, {"target": [0], "doc": ["yeah , component = service"], "issue_sim": [0.19539304077625275], "prob": [0.9997925162315369]}, {"target": [5], "doc": ["i understand that , but as i do try write a portal'ish logic in a couple different way  , there be n't many way you can do that to avoid dom mess where it should clean up but leave stale element , or if the component be standalone , there be no \" portal - target \" thing , i just need it to add the dropdown to the body , so the solution be not that elegant and become hacky - like the whole portal functionality feel at the moment", "i know we all have different mindset what \" portal \" should do , but in my mindset , it should not deal with \" element by i d \" or allow drop part of component into another component etc", ", that just allow user instead of structure a data drive codebase , to turn it into a mess that be hard to manage and could be solve in more traditional and simple way", "it should be simple , allow drop into specified dom element - <tag> , <tag> etc", "and just work with transition while clean up what s need on component removal which at the moment the only guarantee seem to be when each portal'ed element be wrap into a component , or be a component that do the cleaning , but at the end of the day - a wrapper be a wrapper , and we hate wrapper", "in theory the portal thing sound easy than it actually be , for example , if the portal be as a directive , it need to know if the element have transition , otherwise you get big fat error when the transition itself try to remove the element and many other small detail that you come across when try to implement such thing .", "so a somewhat support solution would solve many headache and unexpected outcome"], "issue_sim": [0.6368973255157471, 0.485118567943573, 0.30945003032684326, 0.3820708692073822, 0.38671842217445374, 0.5693893432617188, 0.017015472054481506], "prob": [0.4240155816078186, 0.37279072403907776, 0.0800812691450119, 0.0031276470981538296, 0.10362382233142853, 0.21801947057247162, 0.0013567892601713538]}, {"target": [1], "doc": ["i agree with @dsonet -", "i be not fond of the idea of introduce special behavior directive when you can simply do <tag> - a dedicated directive may save a few keystroke , but at the cost of explicitness , and require you to backtrack for the corresponding <tag> to be sure of what it do ."], "issue_sim": [0.0740504264831543, 0.3561635911464691], "prob": [0.024489616975188255, 0.9639169573783875]}, {"target": [0], "doc": ["i personally prefer the first option for both choice , the reason be you could then copy a function parameter list directly into a tuple and have everything work :"], "issue_sim": [0.4499315619468689], "prob": [0.9999732971191406]}, {"target": [1], "doc": ["dude i be not stupid ,", "if you know other application that can dock a. separate process be my guest , as neither unreal or unity do this .", "on we d , aug <number> , <number> at 10:28 pm , manson mamaril notifications@github"], "issue_sim": [0.02703108638525009, 0.4483906924724579, 0.15398356318473816], "prob": [0.03402922675013542, 0.8472819328308105, 0.08554719388484955]}, {"target": [1], "doc": ["@powershell / powershell - committee close on shipping either an <tag> or <tag> on the gallery", "we do n't want to expose a bunch of module that do n't work yet", "* in the future , we * can * expose module that be know to work within ps 6", "* this feel like a bit of a hack , and we do n't want to be tie to keep it forever", "* there be still value in easily add your windows psmodulepath"], "issue_sim": [0.4540831446647644, 0.34863272309303284, 0.2137461006641388, 0.09051968157291412, 0.1886260211467743], "prob": [0.01745411567389965, 0.5160502791404724, 0.04540460184216499, 0.38547393679618835, 0.017415620386600494]}, {"target": [0], "doc": ["re color and output width : also note that adjust the output behavior base on whether a _ terminal _ be be target or not be sensible , as many unix utility  do  ."], "issue_sim": [0.5746674537658691], "prob": [0.9999788999557495]}, {"target": [1], "doc": ["i guess window only", "the slowness come from have to reopen each file to get the hardlink count .", "the rest of the information be available in the fileinfo object", "for the hardlink , we need to call <tag>  to get a handle , and then use it to get the handle info", "exe do n't do this", "it show link type when there be a reparse - point", "we could display when there be a reparse point , and ignore hardlink"], "issue_sim": [0.032911814749240875, 0.22323966026306152, 0.06859219074249268, 0.2709805965423584, 0.11083124577999115, 0.24230949580669403, 0.28704318404197693], "prob": [0.0005204248591326177, 0.9848293662071228, 0.0023146432358771563, 0.05818323791027069, 0.00010843948984984308, 0.002462708158418536, 0.061297256499528885]}, {"target": [7], "doc": ["i have module in my app where i do not import commonmodule this be normal situation", "i do not write the  library / component set", "some obviously very intelligent people do though , yet you see how the module be be author", "even with the rewrite a lot of people would look at that and go \" ok - what do we really gain from this", "and maybe we gain something , but could that have be simple", "you be also miss my point", "which one of the chart file depend on common and which do n't", "it be not clear from the current module format , therefore this code can not be easily refactore .", "i do n't really want it to be a framework or a development platform", "say that someone be look for a certain label do not help reduce the issue stack", "when code be simple and easy to read the end result of what we build with it will be easy to maintain and refactor", "i be try to show you that this be not the case atm", "it be not complicated , but not as simple as possible either", "we should be focus on whether it can be make more simple", "right now i be tell you that if you chop the carrot this way you can chop they in one minute , instead of two , and you be tell i that \" if i want a vegetable stew , then maybe i should consider this restaurant \""], "issue_sim": [0.36644065380096436, 0.1833065152168274, 0.01763102039694786, 0.12919552624225616, 0.18924480676651, -0.03294186294078827, 0.04296206682920456, 0.21532785892486572, 0.21337662637233734, 0.13481736183166504, 0.35690706968307495, -0.027859095484018326, 0.12980088591575623, 0.20279382169246674, 0.1379939168691635], "prob": [0.0013947439147159457, 0.0029214995447546244, 0.0025624139234423637, 0.0013752530794590712, 0.001955207670107484, 3.514064155751839e-05, 0.000499923131428659, 0.2261139452457428, 0.0010388897499069571, 0.00012779294047504663, 0.003071725135669112, 2.4364597265957855e-05, 0.0007630278705619276, 0.00020056695211678743, 0.6342028975486755]}, {"target": [2], "doc": ["do n't worry , i be sceptical about my own fr too    i be usually bad at myself", "i be concerned about how this pattern could impact the usage of inject / provide", "the <tag> usage in inject / provide you provide be definitely as good one , the part i be sceptical be the part reference the parent from the child , it be basically the same as do <tag> .", "right now , inject can not access to the component , and it be very static , it limit the behaviour on purpose", "make it a function make it super flexible and also dangerous", "ps : i feel like it really bother you that i be ask you question but i can not understand why", "the use - case may be super clear for you but it be not for i    i be not do this to bother you , i be do it to make it clear"], "issue_sim": [0.05116359516978264, 0.28299301862716675, 0.2900392413139343, 0.4042387008666992, 0.07341741770505905, 0.05168980360031128, 0.1939544677734375], "prob": [0.003352097235620022, 0.001035316614434123, 0.5674052834510803, 0.039058759808540344, 0.004149224609136581, 0.00029888885910622776, 0.11194907873868942]}, {"target": [3], "doc": ["the case of <tag> i believe this be different from the <tag> and <tag> problem", "in the <tag> and <tag> case , it would be incorrect for typescript to assume that the only key on the object be limit to those on the type", "in the case of <tag> however , typescript _ can _ guarantee that the object it return will _ at least _ have the set of key it know about on the incoming tuple array", "i recommend remove the <tag> case from this request as that can not change without break typescript type safety", "i think <tag> can be fix though"], "issue_sim": [0.19196373224258423, 0.5504169464111328, 0.48551416397094727, 0.6021268963813782, 0.1611333191394806], "prob": [0.0073188310489058495, 0.4903603792190552, 0.6622498631477356, 0.0003446612972766161, 2.526619573472999e-05]}, {"target": [0], "doc": ["ca n't all of this already be achieve with guard , resolver and url matcher ?", "for example , let 's consider your debugmode", "either this be purely a build time thing for developer or you want this to be possible even in the live production app", "in the first case add / remove route at build time be already possible", "in the latter case you can use guard", "the config base on route datum sound a whole lot like resolver to i , though you do n't go into a lot of detail so i be not sure"], "issue_sim": [0.2780749201774597, -0.07027178257703781, 0.21096545457839966, 0.38666489720344543, 0.07190311700105667, 0.3336279094219208], "prob": [0.05568956583738327, 0.00026363981305621564, 0.03628629818558693, 0.0004896055324934423, 4.112315582460724e-05, 0.13652928173542023]}, {"target": [0], "doc": ["thx for your reply , but python repl work well over ssh for linux , that be why i ask for powershell winrm .", "currently , when i need to do some python test on a window server , i must connect to rdp"], "issue_sim": [0.4956657886505127, 0.4403788447380066], "prob": [0.7852529287338257, 0.29616501927375793]}, {"target": [7], "doc": ["this discussion be pretty weird", "here be my take on it to clear some misunderstanding", "* get_node  will throw an error if the node be not find , you can see it in the debugger", "it do n't fail silently", "* as state above , in <number> % of case you rely on the node be there", "you build the scene yourself , so it be not like it be go to disappear", "* if you want to make code optional depend on the availability of a node , you can call has_node  before get_node in very rare situation where you would would like to check", "i do n't really think the api could be far improve , but we could make the documentation well if something be misunderstood ."], "issue_sim": [0.010657811537384987, -0.014129867777228355, 0.4614056348800659, 0.015452113002538681, 0.37430283427238464, 0.19636787474155426, 0.48715895414352417, 0.14954769611358643], "prob": [0.01787310279905796, 0.003671943908557296, 0.11685699224472046, 0.0037555082235485315, 0.029257183894515038, 0.014557966031134129, 0.39185935258865356, 0.1273827999830246]}, {"target": [2], "doc": ["@retsam i second this", "in my book and base on my research , i 've advise against the use of react", "those type only add noise and hinder readability ."], "issue_sim": [0.046675801277160645, 0.12567642331123352, 0.0963243618607521], "prob": [0.022583432495594025, 0.6605846881866455, 0.6495531797409058]}, {"target": [0], "doc": ["agree . at the very least , the error message could say ` cannont find a process with the name \" <number> \" .", "if <number> be a process i d , use get - process -id <number>", "`   of course , you would only use * * that * * error message when the name parameter value be all digit"], "issue_sim": [0.5350212454795837, 0.372976154088974, 0.5478499531745911], "prob": [0.8066393733024597, 0.014383968897163868, 0.23269501328468323]}, {"target": [3], "doc": ["bad example - how about this :-)", "you get a persistent pointer to the _ datum _ store in in the array member", "get a pointer to a specific location in memory be not support in powershell", "everything in powershell be already a pointer  so the set of circumstance where <tag> be _ need _ be very small - basically with api that have in / out / ref parameter .", "com api in particular tend to have <tag> parameter , but , as the example above show , it can be necessary even with powershell api"], "issue_sim": [0.10627682507038116, 0.1393532156944275, 0.38028326630592346, 0.39026951789855957, 0.3608740270137787], "prob": [8.755888848099858e-05, 0.0005917344242334366, 0.02293739840388298, 0.5195173621177673, 0.2588874399662018]}, {"target": [0], "doc": ["i simply choose <tag> , because that be what number literal with a a decimal point  become in powershell .", "note that that even the current <tag> type can not be use in its full range , because internally the value be multiply by <tag> to get millisecond , while still use <tag> for the calculation :", "note that <tag> be simply the result of integer - dividing <tag> by <tag>", "in fact , an explicit validation attribute on the <tag> parameter enforce that : <url>", "that is , the  max", "sleep duration be currently <tag>", "that probably should n't change , irrespective of what non - integral type we choose - unless we feel we need to raise that limit", "so , what be your concern re <tag>"], "issue_sim": [0.36044222116470337, 0.5205034017562866, 0.32177138328552246, 0.22769729793071747, -0.02237490937113762, 0.23558048903942108, 0.28599801659584045, 0.09296929836273193], "prob": [0.4217285215854645, 0.3134283721446991, 0.04990381374955177, 0.007642604410648346, 0.0005029054009355605, 0.00028099032351747155, 0.283231645822525, 0.001388889504596591]}, {"target": [2], "doc": ["this feature request have be open for quite some time now , and have n't get much traction so far", "i also have n't come across a wish for this functionality in other place  so i be not sure if there be a large enough use case for this", "in my personal experience , directive tend to be rather small ever since their functionality and scope be reduce in vue 2.0 .", "i therefore tend to close this request , but we can re - open if enough people express a need for this"], "issue_sim": [0.10865417122840881, 0.18285568058490753, 0.5186291933059692, 0.13327905535697937], "prob": [0.178574338555336, 0.5582677721977234, 0.15489713847637177, 0.05729977414011955]}, {"target": [0], "doc": ["i disagree -- think without global variable make thing much clean ."], "issue_sim": [0.02370269037783146], "prob": [0.9999651908874512]}, {"target": [0], "doc": ["seem to be because i be navigate use code  and try to change the queryparam dynamically", "=\"{id : myid } \"", "to repreduce click the \" navigate query param <number> \" button in the plunkr :", "i might be do something wrong , however this approach work in old version", "any way to tell routerlinkactive to ignore the queryparam"], "issue_sim": [0.39193856716156006, 0.15228736400604248, 0.3902024030685425, 0.29131489992141724, 0.0864730030298233], "prob": [0.23529352247714996, 0.013923856429755688, 0.4825531542301178, 0.07727211713790894, 0.006393868010491133]}, {"target": [2], "doc": ["the semantic of <tag> be for provide a value when the prop be absent", "this be different from provide a value , but with a value of <tag>", "as @posva mention , this could lead to unexpected result for some user , and be also a break change , which in general we should try to avoid if there be no strong benefit in do so .", "i think the use case can be cover by the suggest <tag> option though : <url>"], "issue_sim": [0.36993253231048584, 0.2771756649017334, 0.2920113801956177, 0.221012145280838], "prob": [0.13916513323783875, 0.10365007072687149, 0.5642333626747131, 0.013444127514958382]}, {"target": [2], "doc": ["sorry for let this sit and this reply be probably too late - but ultimately i think this type of app - like navigation really beg for a dedicated card - stack base , touch - aware navigation solution", "<tag> be still largely design around the \" nested box \" desktop navigation model", "the build - in transition system be really mean for fire - and - forget state toggle animation , just add <tag> would n't be an answer to the root problem ."], "issue_sim": [0.4254756569862366, 0.25014597177505493, 0.35441654920578003], "prob": [0.7660491466522217, 0.00992005504667759, 0.5923600196838379]}, {"target": [0], "doc": ["note that vue 's prop system have its own semantic and do not aim to map strictly to the html attribute semantic .", "- i agree when a prop expect a boolean type , it make sense to map <tag> to <tag> and absence of the prop to <tag>", "- i do n't like make <tag> map to <tag>", "in html5 even if you give a bogus value a boolean attribute will be set to true , e", "the spec 's design be imo quite confuse here", "- for literal <tag> and <tag> , i do n't think it be necessary to deprecate they simply because the spec do n't allow it"], "issue_sim": [0.45128294825553894, 0.5406451225280762, 0.13463488221168518, 0.6280414462089539, 0.3158504366874695, 0.4377429485321045], "prob": [0.5043259859085083, 0.2719765603542328, 0.001497521996498108, 0.03397747129201889, 0.002797298366203904, 0.44632506370544434]}, {"target": [3], "doc": ["if there be a frame keyframe at the very end of the animation track , the", "expect behavior be that it wo n't interpolate when it loop , so it should", "disable automatically in those case", "however , i 'd prefer it as an option. anyhow , because i can see other use case where interpolation be only. desire inside the iteration and not between loop .", "on apr <number> , <number> 12:17 pm , \" christian dannie storgaard \" <", "com > write :"], "issue_sim": [0.5611602067947388, 0.3931852877140045, 0.14963838458061218, 0.41340795159339905, 1.5492551028728485e-05, -0.05017407238483429], "prob": [0.17642858624458313, 0.14260542392730713, 0.0009561877814121544, 0.49249571561813354, 0.0149114103987813, 0.006744151469320059]}, {"target": [0], "doc": ["i ca n't really test my component those be   on <tag> strategy .", "painful thing i 've ever see", "no workaround work for i"], "issue_sim": [0.21442419290542603, -0.03895007073879242, 0.0423630028963089], "prob": [0.9594040513038635, 0.002138689626008272, 0.006543734110891819]}, {"target": [2], "doc": ["you can find \" my \" code here :", "package / vue - server - renderer - nashorn / vue - nashorn", "js - > complete js file with all require dependency and polyfill for nashorn", "i try to do modify vue source as less as possible", "people can build vue for nashorn typing <tag>. for jasmine test in nashorn type <tag>", "currently only <tag> work", "<tag> have some issue with thread but should be resolve soon", "<tag> be currently comment because first i must resolve issue with <tag> but on my todo :)", "if you have any question i 'll try answer :)"], "issue_sim": [0.046856749802827835, 0.5128636956214905, 0.5626949071884155, 0.20180772244930267, 0.49642783403396606, 0.060655247420072556, 0.17224258184432983, 0.19656981527805328, -0.04588007181882858], "prob": [0.23833169043064117, 0.08709295094013214, 0.17060838639736176, 0.030003594234585762, 0.06606537103652954, 0.0015649959677830338, 0.026637695729732513, 0.0721825361251831, 0.007859532721340656]}, {"target": [0], "doc": ["i think u can create a directive which will listen for input event and will reset cursor position ."], "issue_sim": [0.509928286075592], "prob": [0.9999598264694214]}, {"target": [1], "doc": ["currently , we have :", "to keep simple case easy , and for retro - compatibility , we could simply add an advanced configuration .", "to fix problem1 & <number> :", "to cancel route activation , the preroute receive an extra parameter :", "note : we can also store the parameter directly in the route snapshot object", "then , to fix problem <number> , if we consider that all preroute configuration in the array be launch simultaneously , we can add an extra parameter to allow to chain they :"], "issue_sim": [0.06129656732082367, 0.22866974771022797, 0.12486180663108826, 0.3137425184249878, 0.2622823715209961, 0.3651093542575836], "prob": [0.0021064525935798883, 0.3589537739753723, 0.0010899162152782083, 0.07287746667861938, 0.008439339697360992, 0.7212169170379639]}, {"target": [0], "doc": ["i mean private instance method , private static method , private accessor property and private static accessor property --- all this feature be similar to each other and should be support all together ."], "issue_sim": [0.4143560826778412], "prob": [0.9994926452636719]}, {"target": [1], "doc": ["require <tag> to use the new <tag> mode seem reasonable", "the primary use - case here be to minimize source transform and just erase the type syntax , to cater for code / tool whose runtime behavior be break by todays dead - identifier transform .", "i foresee it be use most commonly in toolchain that also use <tag>", "there be a quote from paul rudd in forget sarah marshall that i think apply here : _ \" the less you do , the more you do \" _", "the stylistic / lint use - case be new to i", "personally i feel similar to @dummdidumm and would prioritize functional need over aesthetic", "implement this for commonjs , whilst feasible , feel like unnecessary work to i", "if the demand for this feature with non - esm module target arise in future , maybe the requester could create an eslint rule as @milahu suggest"], "issue_sim": [0.2874794006347656, 0.4475224018096924, 0.2633171081542969, -0.03022897243499756, 0.18350568413734436, 0.17503446340560913, 0.14498677849769592, 0.2895388901233673], "prob": [0.01521885022521019, 0.4723023474216461, 0.010924293659627438, 0.3505355715751648, 0.0006998828612267971, 0.0008641777094453573, 0.008592182770371437, 0.050885092467069626]}, {"target": [3], "doc": ["what be the idea to destroy already load module", "because the effect would be", "load it once again from a server", "angular have no public api for destroy already load module .", "javascript have gc and it clean any memory object which be not already reference", "you ca n't access private method and property from angular internal api"], "issue_sim": [0.44288358092308044, 0.0472383014857769, 0.1444956660270691, 0.4744223356246948, 0.31422120332717896, 0.28520604968070984], "prob": [0.0016297957627102733, 0.020186781883239746, 0.006769504398107529, 0.9436168074607849, 0.01735212653875351, 0.0007149397861212492]}, {"target": [1], "doc": ["any update on this from the angular team", "i 've hack together a compiler implementation that only compile template once , and it reduce the execution time for my test by <number> - <number> % .", "it shave <number> + minute off _ every _ full test run", "that be a huge difference when i be run <number> + test dozen of time a day", "however , the compiler api change with v5 , so now i have to try and re - hack this all over again", "can this issue be give some priority please"], "issue_sim": [0.1941317617893219, 0.45896095037460327, 0.19129344820976257, 0.16797685623168945, 0.33829501271247864, 0.13371895253658295], "prob": [0.0023915166966617107, 0.9227210283279419, 0.00014233322872314602, 0.012030309997498989, 0.05609209090471268, 1.7501844922662713e-05]}, {"target": [0], "doc": ["another workaround would be to use parameter with explicit argument syntax :"], "issue_sim": [0.5230414867401123], "prob": [0.9998958110809326]}, {"target": [5], "doc": ["let 's take @jaykul 's datum and extrapolate a little from there", "if we assume that <number> % of the people write powershell script and module be use github  then that be at 1", "48 million script that will break with this change", "or to put it another way , that be 1", "48 million script that need to be rewrite before they can be use on ps v6 +", "this change may only produce a non - terminating error but how many script writer know that there be even non - terminating error ?", "how many people use script write by other be likely to know", "i 'd imagine most of they will see red text and assume a big problem have occur , because for the vast majority of user there be no difference between the error type", "personally i do n't want to have to rewrite all of my script to have <tag> on every non - wildcard <tag> call", "i 've only get a few hundred script that i 'd need to change but that be still a good week of effort to rewrite they and at least that much time again to test they all", "i 'd also definitely argue against it be a bucket <number> change , this be at least a bucket <number> change or high", "this have be document by a variety of blog post and a lot of code sample all over the internet , include \" official \" microsoft source like hey scripting guy link above , it just might not be officially document and that be a very easy fix to make"], "issue_sim": [-0.005672491621226072, 0.3804317116737366, 0.22725458443164825, -0.020823616534471512, 0.15882021188735962, 0.46643251180648804, 0.18124255537986755, 0.23788869380950928, 0.4777664542198181, 0.1994461715221405, 0.15906038880348206, 0.204903244972229], "prob": [0.0012031883234158158, 0.02258632332086563, 0.0006706709391437471, 0.0017790256533771753, 0.0037176189944148064, 0.016264645382761955, 0.00013609256711788476, 0.09020154923200607, 0.00391775369644165, 0.22920702397823334, 0.0014985715970396996, 0.46148213744163513]}, {"target": [1], "doc": ["@dzmitryshylovich , what it come to be the follow :", "bresolve need a to process , so inside the resolve function of bresolve , i want to wait for the resolve of aresolve , but right now , we can only get the resolve datum from parent .", "if i be overlook the obvious , and bresolve can get the resolve value a , then please tell i how"], "issue_sim": [0.03213845193386078, 0.6192976236343384, 0.2442878782749176], "prob": [0.02629581280052662, 0.7728542685508728, 0.209049791097641]}, {"target": [0], "doc": ["look good , but the problem be that event like \" click \" will not bubble by default , while event like mouseover should bubble in most case .", "so default will be different for different event type , which do not look good for i"], "issue_sim": [0.36962294578552246, 0.37803903222084045], "prob": [0.9855355024337769, 0.002878280822187662]}, {"target": [0], "doc": ["this property be not require since be easy avoid collision .", "these be tree possible soluzion", "remove it from the scene", "set layer and mask to <number>"], "issue_sim": [0.29619964957237244, 0.0819157138466835, 0.172256737947464, 0.14814493060112], "prob": [0.8722801208496094, 0.03761836886405945, 0.03113228641450405, 0.2523406445980072]}, {"target": [0], "doc": ["it be not useless because it reserve a name for the level and i can just hit ctrl+s while far ponder the level and add thing  .", "it be a useful planning tool , some people work like that", "technically an empty node might be useless , but if you really ca n't save an empty node and you really do n't want that to be possible , why do your editor then start up with an invalid unsaveable state", "again i be not make this up that pretty much all editor allow you to hit instant save in whatever intiial empty state they be in , so this be a basic user expectation", "please note i be not say this be a major issue or anything , and i fully understand if you be argue this be n't worth the time to fix", "however , say this be useful or even user - friendly behavior be imho not very meaningful", "edit : my brain fart some grammar a bit", "edit <number> : also you be right that useless action should be prevent - but for proper usability and ui design , the user should have clearly be prevent from enter an unsaveable state of a scene in the first place , and not be prevent from * save the scene * once it happen to be in such a state  since that sort of trigger a panic mode as a first gut reaction", "prevent save at any point imho be kind of an evil thing , and never desirable for a good user experience - even if in this specific case nothing be really lose except for the name , but it be still somewhat unexpected and do have the potential for some unnecessary initial confusion"], "issue_sim": [0.17556878924369812, -0.03070906363427639, 0.3345036804676056, 0.2933824956417084, 0.16181999444961548, 0.1318945735692978, 0.08315350860357285, 0.43920814990997314, 0.3401934504508972], "prob": [0.04068906605243683, 0.11191485822200775, 0.11679402738809586, 0.1632833182811737, 0.04636743292212486, 0.004893076606094837, 0.0008410370792262256, 0.06168428063392639, 0.1290895938873291]}, {"target": [0], "doc": ["look like current tabcontainer which use for the script list be not allow user to multi - select item , this feature should be add , or it should be change to itemlist", "@calinou all browser allow it today , in vivaldi browser its possible in two direction"], "issue_sim": [-0.05824153497815132, 0.0034461989998817444], "prob": [0.9825282692909241, 0.014623218216001987]}, {"target": [12], "doc": ["here you go : <url>", "there be only a litte input box", "step to reproduce :", "type \" abc \"", "cursor be now behind \" c \"", "cursor be not behind \" b \"", "delete \" b \"", "now cursor wo n't stay where it be", "instead it jump to the end of the input", "this behavior be pretty obvious because the input 's value be get re - set", "i need a way to not re - set the input 's value if oldvalue = = = newvalue", "or be it possible to create a directive which handle this for all input field", "something like \" if this input have focus , remember the current value and cursor position .", "if value setter be get call , check if oldvalue = = = newvalue", "if true : re - apply the old cursor position \"", "do n't know how this affect performance , if there be hundred of input on the page", "or maybe it even be n't possible at all"], "issue_sim": [-0.1385021209716797, 0.11347975581884384, 0.031145960092544556, 0.11244232952594757, 0.15727876126766205, 0.139035165309906, 0.09450691938400269, 0.11423435062170029, 0.12900397181510925, 0.29318124055862427, 0.37673676013946533, 0.4616527259349823, 0.3837597966194153, 0.35753393173217773, 0.19714243710041046, 0.23781311511993408, 0.03367144614458084], "prob": [0.016853535547852516, 0.014474749565124512, 0.0058466908521950245, 0.0009093417902477086, 0.0014781675999984145, 0.0016409008530899882, 0.001091863145120442, 0.013707050122320652, 0.006934038363397121, 0.08233772218227386, 0.652582049369812, 0.08305633068084717, 0.09216262400150299, 0.0055709718726575375, 0.007282100152224302, 0.06964084506034851, 0.009227007627487183]}, {"target": [0], "doc": ["vsync turn off or limit fps will always result in stutter", "leave vsync on and do not limit fps", "on mon , mar <number> , <number> at 7:34 pm , arcfutahito < notifications@github"], "issue_sim": [0.18659912049770355, 0.16798734664916992, 0.02768702805042267], "prob": [0.14709490537643433, 0.06480337679386139, 0.3737422227859497]}, {"target": [0], "doc": ["i need this too~~~~register async directive"], "issue_sim": [0.5416602492332458], "prob": [0.9995442032814026]}, {"target": [2], "doc": ["@afterrebelion the first few minute of that video where he isolate the modularity , editability , and debugability of the codebase  * be * indeed the pursuit of have this feature", "this bit be n't quite true , because godot actually do this very well in regard to node hierarchy and designing scene", "scene be modular by nature , property can be export  directly from the editor without ever deal with code , and everything can be test / debug in isolation because scene can execute independently .", "the difficulty be when the logic that would typically be outsource to a child node must be execute by the root node because the logic rely on the root node 's inherit feature", "in these case , the only way to use composition be to have the child start tell the parent what to do rather than have they mind their own business while the parent use they", "this be n't a problem in unity because gameobject do n't have any real inheritance that user can take advantage of", "in unreal it might be a bit  of a problem since they have similar node / component - base internal hierarchy for actor"], "issue_sim": [0.24191388487815857, 0.3664417862892151, 0.3075326383113861, 0.4386660158634186, 0.19682443141937256, 0.27528706192970276, 0.3124142289161682], "prob": [0.08027224987745285, 0.08570435643196106, 0.3916921019554138, 0.1259336769580841, 0.14223478734493256, 0.017447860911488533, 0.029369071125984192]}, {"target": [1], "doc": ["i be look at exactly that", "for i , render function be too overwhelming and \" feel \" disjointed from the overall feel of single file component ."], "issue_sim": [0.00408470444381237, 0.43887126445770264], "prob": [0.000639607198536396, 0.9978886246681213]}, {"target": [24], "doc": ["first i want to link # <number> , which i  e been use as the canonical issue to reconsider this behavior", "i also  in some detail how auto - import work today and some idea  about how we could change they to solve this", "i want to expound on this a little bit for the benefit of other who aren    as familiar with what this mean , and to emphasize   otentially breaking", "what you  e get at here , which i also explain in # <number> , be that today , auto - import for a particular module be offer if and only if that module be already part of your whole - program compilation , which be determine by :", "- the file cover by <tag>/<tag>/<tag> in your tsconfig", "- the lib file cover by <tag> in your tsconfig", "- the type definition cover by <tag> and <tag> in your tsconfig", "- the recursive dependency of all of the above", "any file match by these criterion be automatically parse and bind , and type - check to some degree , depend on the file location and <tag>", "* * the information produce by parse , bind , and check these file be central to the ability to offer auto - import from they", "* * at the same time , though , these criterion be also use when compile a program with <tag> on the command line", "on one hand , we  e see in the past that automatic type inclusion , or even inclusion of additional type by recursive dependency , create problem of  , which have be the subject of many other discussion and", "i have personally advocate in the past for ease some of the pain of this problem by _ not _ eagerly include all of <tag> in program", "the detail of global / environment collision aren    super important here ; rather , my point be that we know automatic type inclusion _ do _ break people , and there be potentially some merit  to do _ less _ of it when we look at other problem", "but on the other hand , do less of it can also make typescript unaware of global declare by <tag> package , which be also break", "in other word , * * any change to the rule that govern what file a program contain , include default value of relate tsconfig option , be a significant breaking change * *", "a part of i think it would make a lot of sense to use package", "json file to guide type definition inclusion , and stop give special behavior to <tag>", "it would solve the auto - import problem automatically , and in some case it would prevent unwanted inclusion of definition like <tag> that can sometimes cause problem", "but another part of i think that   a really hard sell for a break change to tsc", "i think it   worth talk about , but my assumption in think about this so far have be that it   not go to be on the table", "in that case , the only option be , as you say , add a language - service - specific implementation that doesn    affect program semantic , and doesn    touch tsc at all", "so , a couple thought on that :", "i completely agree with this", "if people have package list in their package.json , theye go to import or reference they somehow .", "i    not at all concerned about the memory impact of load type from package", "json - list dependency ; i    only concerned about their semantic impact on the program", "so if we need a way to isolate these type from influence the core program , how do we do that", "load they into a second program", "that would take care of all the parsing , bind , and check that auto - import rely on , but it would duplicate a lot of work and type and symbol from common lib file   that   _ the concern i have with memory", "we should do some experiment and see what the cost of that really be", "i also think it   worth see how much we can do with parse and bind alone", "but both of these idea be pretty complicated in an editor scenario , where the user be continually instal and uninstalle node module and change the shape of the core program by add and remove import", "- i guess i didn    comment on whether your proposal be the right expect behavior , because i  e think it   the right expect behavior since i get here , and i always imagine # <number> as the first step in a process toward that goal", "- i want to hear thought about change default type definition inclusion rule to look at package", "json before rule it out", "- assume we don    change type definition inclusion rule , i want to hear more thought on an editor - specific implementation", "what have i miss in my analysis", "be there a simple approach", "do other agree with my assessment of the complexity of the approach i  e mention"], "issue_sim": [0.3202611804008484, 0.19502022862434387, 0.15595270693302155, 0.48676496744155884, 0.0288261566311121, 0.1968556046485901, 0.23773369193077087, 0.19353647530078888, 0.25897926092147827, 0.18802329897880554, 0.2753112316131592, 0.375085711479187, 0.3100496232509613, 0.2730224132537842, 0.33968067169189453, 0.2951107323169708, 0.2617579698562622, 0.40076959133148193, 0.47114098072052, 0.09905799478292465, 0.05468278005719185, 0.36166054010391235, 0.005632245913147926, 0.050689779222011566, 0.26765763759613037, 0.2959325313568115, 0.2821715772151947, 0.19034528732299805, 0.042941123247146606, 0.39789867401123047, 0.051965512335300446, 0.15595658123493195, 0.27991122007369995, 0.27413493394851685, 0.43335801362991333, 0.06336928904056549, 0.34403592348098755, 0.12924060225486755, 0.045670703053474426, 0.10709992796182632], "prob": [0.06376753002405167, 0.02720450423657894, 0.0015856098616495728, 0.10541924834251404, 0.0008929504547268152, 2.1693233065889217e-05, 0.00019642490951810032, 0.000525199226103723, 0.016030918806791306, 0.0001593656197655946, 0.00026673704269342124, 0.004576425999403, 5.539385892916471e-05, 0.002544099697843194, 0.0005312373978085816, 0.008367536589503288, 8.031100878724828e-05, 8.172013622242957e-05, 0.0017342539504170418, 1.2247149243194144e-05, 0.0010981897357851267, 0.06211041286587715, 4.3864583858521655e-06, 3.260026278439909e-05, 0.006911742500960827, 1.804534122129553e-06, 7.494531928387005e-06, 1.2390726624289528e-05, 7.720542498645955e-07, 0.003093436826020479, 2.8473739348555682e-06, 6.191982720338274e-06, 0.005557096563279629, 0.01057269237935543, 3.775899313041009e-05, 7.0232358666544314e-06, 0.000349689886206761, 0.00013631708861794323, 0.0001501627266407013, 0.0005368484416976571]}, {"target": [1], "doc": ["go off that example above ^ i would also like to avoid use the <tag> rule", "what if vue allow you to declare which child component 's style you want to overwrite and it inject that specific <tag> block * below * the child component style in the <tag> so it become more important because of the order ."], "issue_sim": [0.1681760549545288, 0.7540642619132996], "prob": [0.06719718128442764, 0.8079800605773926]}, {"target": [0], "doc": ["2  i get some strange artifacting around some of my graphic , they be control be scale in and out within a viewport render on top of a meshinstance", "this happen with uv contract and on window and linux", "big performance jump though , particularly from character drawing ."], "issue_sim": [0.31973886489868164, 0.1064835637807846, 0.13225774466991425], "prob": [0.7792708873748779, 0.0030814609490334988, 0.8662115931510925]}, {"target": [0], "doc": ["aside : even if we do follow semver , this would n't warrant a major version bump , because it be a change that increase our compliance with the ecmascript spec .", "anyway the file you write be a module  , and we be emit a file that be not a module  , so that be a bug", "it be always be the intend behavior that we do n't change the moduleness of a file during emit , this be just a miss case that never should have work this way in the first place", "you be free to suggest a new compiler option but this be the intentional behavior"], "issue_sim": [0.3105917274951935, 0.28938859701156616, 0.34548842906951904, 0.29439055919647217], "prob": [0.6094083189964294, 0.12150888890028, 0.5044402480125427, 0.010149890556931496]}, {"target": [3], "doc": ["that would be nice , but it be already not true for <tag> : as a script author , you must know to use _ it _ as the executable in the shebang line in order to get predictable behavior that do n't load <tag>", "unfortunately , backward - compatibility concern leave we no choice there , so a separate executable be require", "similarly , as state , the end user would need to know that it be not <tag> , but <tag>  that must be pass to <tag> _ in order to make powershell the default shell", "fortunately , in this case we _ do _ have the option to support that with the exist executable , by implement <tag> / <tag> as no - op switch ."], "issue_sim": [0.4118003249168396, 0.16846352815628052, 0.5840094089508057, 0.28203529119491577], "prob": [0.5207553505897522, 0.019682692363858223, 0.19714057445526123, 0.16230508685112]}, {"target": [1], "doc": ["i think this need to be re - open", "especially since pwa 's be the future and incremental load of your code be a must ."], "issue_sim": [0.03518323600292206, 0.13683664798736572], "prob": [0.006769751198589802, 0.997157096862793]}, {"target": [0], "doc": ["how do you even compile it on android ? the thing do not even have a terminal"], "issue_sim": [0.47877511382102966], "prob": [0.9999376535415649]}, {"target": [0], "doc": ["we just need a dragonbones importer , which can be do in 3.0 .", "this request be much simple and have nothing to do with the title nor the original post", "i do n't think godot have power to enforce an animation format standard anyway"], "issue_sim": [0.10837272554636002, 0.0319635346531868, 0.33816587924957275], "prob": [0.9867377877235413, 0.003997717518359423, 0.009346343576908112]}, {"target": [4], "doc": ["maybe a keyword like <tag>", "though other name like trait , mixin , have , etc", "be surely fine too", "i do like the idea too of have some option to exclude class_name type from the add menu", "it can get very cluttered with small type that do n't function on their own as node .", "it may even be just a feature topic of its own"], "issue_sim": [0.19251206517219543, 0.28094056248664856, 0.0025731753557920456, 0.39693376421928406, 0.35992908477783203, 0.15421685576438904], "prob": [0.012002864852547646, 0.027754737064242363, 0.0030711558647453785, 0.09941123425960541, 0.28014451265335083, 0.005881157238036394]}, {"target": [0], "doc": ["i will also add that unwrap the jagged array be easily do with <tag> :"], "issue_sim": [0.2584629952907562], "prob": [0.9999349117279053]}, {"target": [0], "doc": ["i honestly do n't give two fuck about modern trend , and usability wise i do n't really see any advantage of have your game in a dock window .", "it be one of those feature that i would add if it be easy to do , but not worth the effort otherwise", "in the case of unity , if you have a single monitor , it be unusable when they be split in two and in the case of unreal , the editor window be replace by the game", "so in the end , it be the same thing", "you be always focus in one of the window anyway , so do alt - tab wo n't kill you", "it just work fine", "as i say before , i worry the most about actual usability issue of people work on project and use godot , not so much about   those who say they would use if it work this way or another , or if it support c # , drag & drop , etc", "i need good example of how usability be a problem in the current way and how the new way make it well , argument such as \" unity do it this way and i like it \" or \" this way use more modern convention \" do n't work in my book even if valid", "you need to get more technical and refer to real , actual problem with exist use case"], "issue_sim": [0.354503333568573, 0.11304883658885956, 0.5016136169433594, -0.08143117278814316, 0.3971366882324219, -0.016076920554041862, 0.1771642118692398, 0.2655196189880371, 0.03304198384284973], "prob": [0.10309385508298874, 0.006000884342938662, 0.2103891670703888, 0.0002437809744151309, 0.0022329697385430336, 2.7546018827706575e-05, 0.1674104779958725, 0.08199892938137054, 0.0005863230326212943]}, {"target": [1], "doc": ["@cristian - mocanu - mob", "angular compiler do support plain javascript as source code , but require companion <tag> for signature and <tag> for annotation .", "all angular library be ship in javascript without typescript source code , clearly they be also support", "so if you can generate <tag> and <tag> from your own source code  , it will be possible to use it with angular compiler"], "issue_sim": [0.099428690969944, 0.6861487627029419, 0.6120432615280151, 0.6199204921722412], "prob": [0.011714399792253971, 0.7096032500267029, 0.3051770329475403, 0.10065371543169022]}, {"target": [1], "doc": ["we already have this with the requires statement which to fit your suggestion would be well if that be expand to include a -maxversion arguement", "change the ps1 to ps6 be not really a suitable idea for this as this will increment through the version and i be not sure that there be much benefit in enforce that go forward .", "i would either change the issue title to expand # require should have a -maxversion arguement or raise a new issue on this"], "issue_sim": [0.13157148659229279, 0.4657246172428131, 0.25336331129074097], "prob": [0.15845638513565063, 0.9496007561683655, 0.0059626540169119835]}, {"target": [0], "doc": ["meson generate ninja file , which be * much * fast for incremental development .", "additionally , on window , you do n't * need * to do any sort of visual studio path manipulation", "meson work out of the box", "use meson over scon would reduce a lot of the overhead of target window , especially for those want to use visual studio", "give that bazel and buck be both write in java  , i would argue they be right out as a primary dependency for all user", "python be already in the dependency list , and you can easily install meson  through a quick <tag>", "meson support this by default , as this be a default feature build into ninja", "meson also have support for this , and rely heavily on pkg - config where appropriate", "meson have a very python - like syntax , rely on variable , object , and builtin function", "in my opinion , write", "be a lot easy , especially give how cmake be * sometimes * case sensitive , and other time not", "when you start to get into generator expression , it can get extremely hairy", "the equivalent meson look like :", "i think i should note , by the way , that of all the c++ build system out there , meson be the * least terrible *", "argument against its use tend to be a picture of a web comic , some hand wave about how cmake be the most use , so you should just deal with it , and \" hey at least cmake be n't autotool \"", "but above all  , meson support precompile header natively", "i can not tell you how much this could speed up the build for gdnative user , but it will be a significant boost on gcc and msvc", "add in the use of <tag> for the very little amount of templated code find in godot , and you could see decent build time improvement , which be important for iterative and incremental build"], "issue_sim": [0.41674184799194336, 0.258355975151062, 0.10573466122150421, 0.4322185516357422, 0.32806557416915894, 0.43585485219955444, 0.36506396532058716, 0.3541126251220703, 0.31315475702285767, 0.07519824802875519, 0.3621232509613037, 0.018741291016340256, 0.08215294033288956, 0.47114697098731995, 0.4688890874385834, 0.3195797801017761, 0.4387546181678772, 0.5484293699264526], "prob": [0.03849805146455765, 0.022111013531684875, 0.009863344952464104, 0.13442835211753845, 0.0016447593225166202, 0.007810089737176895, 0.0016616203356534243, 0.004140728618949652, 0.009378490038216114, 8.660722232889384e-05, 0.030502313748002052, 0.0003015435067936778, 0.00022301735589280725, 0.059308771044015884, 0.021284079179167747, 0.00016892183339223266, 0.04004021733999252, 0.4464980363845825]}, {"target": [1], "doc": ["be you sure you do n't want a _ union _ type <tag> instead", "i be not sure how the intersection type <tag> make sense ."], "issue_sim": [0.200212299823761, 0.17086876928806305], "prob": [0.1264559030532837, 0.8442604541778564]}, {"target": [0], "doc": ["this be not a real answer , but for readability in the short term you could break the parameter across multiple line . eg ,"], "issue_sim": [0.39877042174339294], "prob": [0.9998655319213867]}, {"target": [0], "doc": ["hi , my understanding and test be that it be support only if the transition component contain a keep - alive component that contain dynamic component , all of which will use the same transition .", "my request be in the use case where each component contain a different transition"], "issue_sim": [0.7012820839881897, 0.6279836893081665], "prob": [0.9391006827354431, 0.03654919192194939]}, {"target": [1], "doc": ["it enforce file extension", "ts will never rewrite an import declaration module specifier under any mode , and in node esm implementation , file extension be require , therefore we must make you write they ."], "issue_sim": [0.22071680426597595, 0.5401319265365601], "prob": [0.0013403979828581214, 0.9922785758972168]}, {"target": [0], "doc": ["in the case of extend a component , the child * * must * * provide a complete template .", "in this case it would be useful to reuse part of the parent template"], "issue_sim": [0.3381447196006775, 0.4400678873062134], "prob": [0.8231796622276306, 0.04026477038860321]}, {"target": [15], "doc": ["when convert my fork to cmake most of the complexity be in the code generation file", "the idea that the build be complicated be a fallacy", "the build do n't need scon because its complex", "it be complex because it use scon", "with that say , the reason i halt work be because i meet with the lead devs at gdc in <number>  and they say they have absolutely no intention of switch to something more usable , cite that they 'd prefer to do the build entirely on linux and indeed from what i 've see they be violate the eula that apple require acceptance of to install build tool for cross compile", "the mentality of those in charge be very much \" end justify the mean \" and there do n't seem to be any care about treat the build as software , and instead godot treat it as a series of script that happen to produce a build", "i will not be contribute the change i make to the code generation to godot  , and i 've give up on this engine entirely and move on with my life", "i be much happy if i be be honest", "the engine already have considerable tech debt and i see it be an issue in about <number> year , especially as the c++ standard committee be work on a tooling technical report", "it be a shame too", "my cmake build be able to catch a bunch of static analysis error that have lead to ton of issue and be easily solvable , but i be too burn out from having argue with the devs about this at gdc to file bug or even attempt to fix they", "my energy and my mental health be well spend elsewhere", "there be no world where scon will be able to handle the upcoming c++20 module design , as much as i have shout how it will break many tool", "it ca n't handle the dependency tracking for that , and would require it to have a pre - scan step , which will slow the dependency track down even far", "lastly , i be go to suggest people not try to improve a tool that can only accept minor change", "scon would need a complete rewrite from the ground up and a large number of break change to get the improvement people here seek .", "i suggest this issue be close as the discussion of change the build system be answer at gdc <number> , but the lead do n't even think its worth waste their time to comment on this issue , which i think show how much they care about the ergonomic of development"], "issue_sim": [0.540257453918457, 0.2591174840927124, 0.3474377393722534, 0.16257239878177643, 0.5489304065704346, 0.45745953917503357, 0.34598416090011597, 0.060427434742450714, 0.32546138763427734, 0.054396167397499084, 0.45566290616989136, 0.062432192265987396, 0.3214918375015259, 0.28797003626823425, 0.17407694458961487, 0.2562747895717621, 0.4481801986694336], "prob": [0.0055487803183496, 0.0024506808258593082, 0.005866512656211853, 0.004429585300385952, 0.021845264360308647, 0.09587477892637253, 0.010972687974572182, 1.6360267181880772e-05, 0.005945021286606789, 2.3323898858507164e-05, 0.016215160489082336, 4.138464282732457e-05, 0.004041685257107019, 0.0045880782417953014, 0.00011087287566624582, 0.012970315292477608, 0.06590132415294647]}, {"target": [0], "doc": ["this become a much large problem when you start use typing from other project , you can standardize your use of \" string \" and \" number \" across your own code but when someone drop in a \" number \" or \" string \" into their typings file you end up write a ton of type casting for no reason ."], "issue_sim": [0.6497272253036499], "prob": [0.999992847442627]}, {"target": [1], "doc": ["this seem like a huge step back to i", "if the new pipe expect you to know what the offset be for a particular date then you might as well process that on the server  .", "i just do n't get the point of have a date pipe that only use the offset", "we do everything in our backend in utc , then rely on front - end tool like angular to take care of convert that to local time for the user"], "issue_sim": [-0.06071031838655472, 0.3463347256183624, 0.3671056628227234, 0.4235725402832031], "prob": [0.0013302352745085955, 0.9891126751899719, 0.007984058931469917, 0.26644444465637207]}, {"target": [1], "doc": ["the compiler will still emit code in the presence of error unless give the <tag> flag", "emit in the face of syntactic error be a good - effort emit with no guarantee in syntactic validity ."], "issue_sim": [0.47512295842170715, 0.34638774394989014], "prob": [0.5235313177108765, 0.8482065796852112]}, {"target": [5], "doc": ["@markekraus i would say make the use of comment opt - in", "default be today , it will fail parse the file", "if use <tag> then it can parse the file", "it would simplify when it be rfc back", "then the <tag> would be obsolete , and the default be to be able to parse both", "i suggest we do nothing with comment , the comment be comment for the jsonc file , not part of the object or datum , unless and rfc say differently in the future ."], "issue_sim": [0.0426647886633873, 0.19274531304836273, 0.20832112431526184, 0.10113479197025299, 0.11582594364881516, 0.16788683831691742], "prob": [0.005243717692792416, 0.015941482037305832, 0.014459331519901752, 0.012815520167350769, 0.1260693073272705, 0.727898359298706]}, {"target": [1], "doc": ["i be against use the <tag> keyword for this", "<tag> be a boolean operation , it be already take .", "i propose use <tag> like c # do"], "issue_sim": [0.11722935736179352, 0.30349254608154297, 0.160398930311203], "prob": [0.01863284967839718, 0.9952046871185303, 0.005633591208606958]}, {"target": [0], "doc": ["that be say it might be provide as an option"], "issue_sim": [0.024143636226654053], "prob": [0.9999703168869019]}, {"target": [1], "doc": ["for my project , i badly need this feature so i use the recommend custom input approach :", "in my opinion , this approach be very convenient and i decide not to use any v - model modifier at all include <tag> ."], "issue_sim": [0.32612544298171997, 0.3520103096961975], "prob": [0.5152705907821655, 0.47660622000694275]}, {"target": [2], "doc": ["<number> ) why not use <tag> instead", "<number> ) why not use <tag> instead", "the reason , as i understand it , be that in order to sort something you use sort - object anyway  .", "otherwise i do n't see a particular reason against add it"], "issue_sim": [0.13699212670326233, 0.13699212670326233, 0.5327631235122681, 0.14530080556869507], "prob": [0.025469345971941948, 0.024483095854520798, 0.7916237115859985, 0.0010002843337133527]}, {"target": [0], "doc": ["i do n't think azure be the correct module to load in powershell core  .", "you should use azurerm", "netcore which be the one support cross platform", "azure module be only for windows powershell"], "issue_sim": [0.4049881100654602, 0.03786862641572952, 0.0653664618730545, 0.4038395881652832], "prob": [0.8712262511253357, 0.014568240381777287, 0.037795521318912506, 0.003578756470233202]}, {"target": [1], "doc": ["oh i see , i misread that", "the case for promise be valid but i be not sure if it be worth add a specific option / syntax for .", "on the other hand it be possible to use simple callback with <tag> :"], "issue_sim": [0.018689928576350212, 0.3624345660209656, 0.48237940669059753], "prob": [0.010736707597970963, 0.8045287132263184, 0.04663099721074104]}, {"target": [1], "doc": ["@jnizet your assumption about the di be wrong", "di do not stop be di if you be call it with injector.get  .", "do not meter where you be resolve your dependency in a constructor or in a code", "the main benefit that argument be automatically resolve", "and this be widely use in backend framework like", "i have describe above all the problem that will come with the factory", "but i will also put comment in the code provide :", "i have a huge amount of command", "each command can have its own service reference", "problem with the factory :", "you should manually pass and refactor code on each constructor argument call", "this be not di anymore", "in the same manner , you can just instantiate your command in a code , but in this case each component will have unrequited service injection only to pass to a command", "you should refactor factory code and command call each time command code be change , with a simple di that can generate instance you can avoid that", "you be lose the maintenance convenience that default di be provide", "extra code that be not really require", "you have provide example with the factory that can create two command", "in this case you be injection huge amount of service and this will create unassigne wiring of service even if they be not use", "to make it a bit less ugly you have to create factory for each command just to solve this simple task", "what i be propose be just a one - liner argument to solve this problem"], "issue_sim": [-0.03870087116956711, 0.15761440992355347, 0.21562163531780243, 0.09998475015163422, 0.17510567605495453, 0.11437708139419556, 0.020604290068149567, 0.22230322659015656, 0.18416491150856018, 0.18943843245506287, 0.415414422750473, -0.009478103369474411, 0.48588040471076965, 0.4854763448238373, 0.09869229048490524, 0.1085866242647171, 0.34742480516433716, 0.2114020437002182, 0.3670089840888977, 0.19288161396980286], "prob": [8.973829972092062e-05, 0.0514461025595665, 0.0018350265454500914, 0.0022078927140682936, 0.018399154767394066, 0.0017062409315258265, 0.00011851912131533027, 5.0104303227271885e-05, 0.0001792322873370722, 3.055832348763943e-05, 0.012728042900562286, 2.2657788576907478e-05, 0.14186911284923553, 0.03922023996710777, 0.0001647183671593666, 0.00012629297270905226, 0.0002886902366299182, 0.0482005812227726, 0.021283458918333054, 0.0005998607375659049]}, {"target": [1], "doc": ["this would be a totally different syntax but what if you could just add all the event in a single attribute , like this :", "i be not sure this be realistic since there might be some conflict with the normal syntax , but i think this be a lot more readable and to grasp than add a extremely long attribute"], "issue_sim": [0.5284823179244995, 0.3190697133541107], "prob": [0.09463860094547272, 0.672332227230072]}, {"target": [0], "doc": ["so , you need to have a relation between the part in ts code and identity of compile style place in the head tag .", "and because of those identity be generate on the random base , you be look for some fix rule , how to interconnect they together , right", "for <tag> mode it be theoretically possible , but what about <tag>"], "issue_sim": [0.24484944343566895, 0.07399214804172516, 0.1799941509962082], "prob": [0.6005991697311401, 0.4283224642276764, 0.05730854347348213]}, {"target": [3], "doc": ["@groud can we even group visualscript node like in blender", "i do n't remember see that", "perhaps @mhilbrunner should add it to his list", "another important point be make there- ability to create reusable high level action / condition logic block via gdscript would be very beneficial for an event sheet system or the blueprint system .", "the blueprint system already have it - but i do not see any plugin make for it", "again - construct2 be way ahead of we", "their community have create many many many easy to install plugin that add custom condition and action - and their api to register an action and a condition be super simple"], "issue_sim": [0.2826295495033264, -0.026575684547424316, -0.02156423032283783, 0.36591190099716187, 0.20879808068275452, 0.00509322714060545, 0.29690027236938477], "prob": [0.019603576511144638, 0.01628287322819233, 0.011463622562587261, 0.8191665410995483, 0.24883167445659637, 0.004573687445372343, 0.3501168489456177]}, {"target": [1], "doc": ["tentatively put on the 3", "i 'd really like to see this implement soon than later to provide usability enhancement to the editor ."], "issue_sim": [0.017251189798116684, 0.23046785593032837], "prob": [0.05155085772275925, 0.9469702243804932]}, {"target": [0], "doc": ["in the sense that it be that just i imagine artist  would typically use blender or substance painter and godot default would probably surprise they"], "issue_sim": [0.7376325130462646], "prob": [0.9999539852142334]}, {"target": [0], "doc": ["actually , there be already dynamic import available and its syntax <tag> , which be available for angular <number> or high ."], "issue_sim": [0.5817879438400269], "prob": [0.9998562335968018]}, {"target": [1], "doc": ["and i understand the use - case may be rare , but this be something that can and will increase server - side adoption and would be even useful for nuxt", "this would finally allow a head management system to exist in the html / template section of sfc and would make ssr , seo and head management much easy", "if this be not possible , do you know a way to find a solution to this issue"], "issue_sim": [0.22243767976760864, 0.3130052983760834, 0.1998339742422104], "prob": [0.7711508274078369, 0.5464732050895691, 0.03017500415444374]}, {"target": [8], "doc": ["as state , give that the file neither have extension <tag> nor be mark as executable , it be treat as a _ document _ , as if you have run <tag> or , use the native <tag> macos utility , <tag>", "what that do specifically depend on what default program you 've set up ; on my machine , for instance , it open the file in visual studio code", "it be unclear what you mean by \" open a new window \" , but i suspect that the file be open in textedit", "app , the macos default text editor", "give the extended mandate of <tag> in powershell - the ability   to invoke _ anything _ - it make sense to reserve the assumption that the target file contain powershell source code to be source to _ file with extension <tag> only _", "you could argue that this extended mandate should be revoke and that <tag> should _ only _ support source powershell source code , and - like posix - like shell , analogously - should _ blindly assume _ that whatever file argument be pass contain powershell source that should be \" dot - source \" , whereas currently this assumption be currently reserve solely for file argument _ with extension <tag> _", "consider this , however :", "* change the behavior of <tag> would be a break change", "it be unlikely that you 'll want to create _ extension - less _ powershell source - code file _ for the purpose of \" dot - sourcing \" _ ; instead , extension - less powershell source - code file be most likely _ executable script with a shebang line _ , which be design to run _ out - of - process _ , which contradict the purpose of \" dot - sourcing \" .", "now the file be executable , so an _ attempt _ be make to _ execute _ it", "_ presumably _  , powershell delegate execution to the _ system _ , which _ fail _ in this case , because the plain - text file that be mark as executable _ lack a shebang line _ that specify the interpreter to pass the file to", "that say , it should n't fail _ quietly _ , so that be worth create a separate issue for", "as state , <tag> file be special in powershell : you can invoke or \" dot - source \" they at will , whether they be executable file or not", "as for your <tag> command :", "yes , as state , posix - like shell _ blindly _ assume that file you pass to <tag> contain code in _ their _ shell language - powershell deviate from that", "also note that posix - like shell have no \" native \" filename extension , so they - unlike powershell with its <tag> -   _ can not _ infer from a give filename whether it contain shell code or not", "<tag> , as state , _ in violation of posix _ , allow you to do <tag> without need to refer to a file in the current directory with prefix <tag> - this be _ not _ worth support in powershell", "for _ direct _ invocation , posix - like shell also have a _ fallback mechanism _ , if delegate to the system to invoke an _ executable _ file fail due to _ absence of a shebang line _", "they default to execute such a file as either _ themselves _ or with <tag>", "that strike i as another practice that be _ not _ worth adopt in powershell : report an error seem more sensible to i - as note , powershell currently fail _ silently _ , which should be fix"], "issue_sim": [0.4166797399520874, 0.2950064241886139, 0.4243844747543335, 0.28166788816452026, 0.33652326464653015, 0.42779242992401123, -0.0004998515360057354, 0.31263989210128784, 0.3320610225200653, 0.2280595898628235, 0.29810136556625366, 0.10948894917964935, 0.2204364538192749, 0.16912299394607544, 0.4568134546279907, 0.489036500453949, 0.41897645592689514, 0.3875866234302521, 0.13317637145519257, 0.3102462589740753], "prob": [0.2413415014743805, 0.0048030661419034, 0.0025906951632350683, 0.0005840806406922638, 0.012515148147940636, 0.02337486483156681, 3.521074904710986e-05, 0.0006415550014935434, 0.07452259212732315, 2.4399982066825032e-05, 0.0074189030565321445, 0.00010003655188484117, 0.017885811626911163, 6.240565198822878e-06, 0.004926285240799189, 0.0005751949502155185, 0.025500960648059845, 0.002065143780782819, 2.4992050384753384e-05, 0.017490142956376076]}, {"target": [1], "doc": ["discuss this in the room , there be some interesting implication and point of disagreement", "i personally often rename an import identifier and expect it to cascade to the module where i export  , so i be happy with the current behavior .", "but some folk be in agreement with you that this be a local identifier and should be aliase by a rename , and you should have to rename at the definition to cascade throughout the project", "perhaps we need two operation here", "there be some other interesting related point to this", "for example , rename that impact a", "again , i often hand - author one to describe type i want to use throughout a project , so i expect my rename at a use point to rename in the", "however , as you point out , a", "ts file may be generate , and thus do a rename in it simply get overwritten when it be next generate", "there be no way to tell currently if a", "ts be generate or hand - write", "you could make a similar argument for other scenario too - e", "if a class implement an interface and you rename an implement member , then do you intend to rename the member on the interface", "or just rename the method on the class", "again , seem like there be really two operation here  , and have both may be more obvious / intuitive than require folk go to the declaration point and rename if the intent be for a _ global _ rename", "add ' in discussion ' until we arrive at a conclusion"], "issue_sim": [0.048020265996456146, 0.6841304302215576, 0.5505603551864624, 0.05478199943900108, 0.0036372970789670944, 0.2935526371002197, 0.4730380177497864, -0.04136473685503006, 0.4554327130317688, 0.10224489867687225, 0.027520261704921722, 0.06673330068588257, 0.4454234838485718, 0.3121984601020813, 0.4415661692619324, 0.003625389188528061], "prob": [0.0041746217757463455, 0.2205270379781723, 0.6879784464836121, 0.0005859697121195495, 4.675338277593255e-05, 0.0005316213937476277, 0.14209644496440887, 6.931908865226433e-05, 0.008796208538115025, 2.401151868980378e-05, 0.00035349579411558807, 0.00013919646153226495, 0.0033386966679245234, 1.2141895240347367e-05, 0.35721781849861145, 0.00024802659754641354]}, {"target": [3], "doc": ["i have module in my app where i do not import commonmodule this be normal situation", "one more point about this", "right now i suspect that the above explanation will be one of many explanation ng module related explanation that will be give over and over and over", "that be because it be not clear what common - module provide and the library do not explicity give we an option to get a grasp on it .", "this be go to lead to a lot of developer attempt to follow along with example and cut and paste stuff", "on the flip side if they explicitly have to import what they use within the component , even directive within template , then the code become clear and easy to follow", "the suggestion here would allow for both approach", "for example if the developer could turn on tooling that tell the to import <tag> from the common module , if they wish to follow the more explicit approach", "if they do this then it become obvious what part of the library the component depend on", "also with the alternate approach it become very easy to leave ngmodule configuration dependency that be no long need intact , because there be nothing that directly link the module to the correspond component , so tooling warn about this can not be develop", "well i should never say never", "but without explicit import it be much more complicated"], "issue_sim": [0.36644065380096436, -0.015490485355257988, 0.19054879248142242, 0.2967461943626404, 0.15879513323307037, 0.5060455799102783, 0.05889587104320526, 0.46945682168006897, 0.25621938705444336, 0.49155932664871216, 0.07317934930324554, 0.33186209201812744], "prob": [0.0016168217407539487, 0.00107568281237036, 0.23213808238506317, 0.06218812242150307, 0.013316496275365353, 0.13792738318443298, 0.001111033488996327, 0.04423440247774124, 0.006757528055459261, 0.37322798371315, 0.0003480478480923921, 0.0019094642484560609]}, {"target": [3], "doc": ["@ryancavanaugh \" disjoint property be not present for the purpose of property access", "that be very good , i hope that be how it stay", "i be quite disturbed when i read the quote bit of the first comment here", "the disjoint type should n't have anything the only one of the summand have .", "this be also important for something like intellisense , where you really do n't want to have those non - property list", "this be an awesome feature", "it make typescript the first type - safe real - world imperative language with that kind of power in a type system"], "issue_sim": [0.16942542791366577, 0.02463988959789276, 0.04334134981036186, 0.24180001020431519, 0.19876524806022644, 0.05865124613046646, 0.40654122829437256], "prob": [0.003247648011893034, 0.007422300986945629, 0.018172189593315125, 0.8128858208656311, 0.1754865199327469, 0.00030393031192943454, 0.03241179883480072]}, {"target": [2], "doc": ["@airblader   i have check doc but i can not find how to resolve this in a simple manner", "if you be pass argument to the instance manually this be not a dependency injection anymore and you be lose part of the beauty and convenience of the pattern", "in the case of a factory , you be force to refactor the code when service inject to the command constructor  .", "so would be great to have an option just to create a new instance without manual work , , ,"], "issue_sim": [0.19175474345684052, 0.3182097375392914, 0.49063795804977417, 0.32776767015457153], "prob": [0.004066243302077055, 0.030453190207481384, 0.1695326268672943, 0.11199843883514404]}, {"target": [5], "doc": ["base on your question , i be assume that duplicate be bad", "as it stand now , use a template reference variable on an element within an * ngfor create many duplicate template reference", "the proposal would reduce the risk of that happen , although not eliminate it", "a dynamically determine template reference variable do n't necessarily need to depend on the array be use by the * ngfor at all", "maybe it could be something as simple as #", "the point of the proposal be that template reference variable within loop need to be improve .", "in term of work with the element via viewchild / viewchildren , programmer would need to be aware of that possibility and work with it", "but it sound like there may be problem if the variable change on the template side"], "issue_sim": [0.0703003779053688, 0.6903157830238342, 0.021914158016443253, 0.7005360126495361, 0.03720880299806595, 0.4158746898174286, 0.3481123745441437, 0.3211292028427124], "prob": [0.013756489381194115, 0.0679677352309227, 0.004522778559476137, 0.022331837564706802, 0.002686286810785532, 0.2543153166770935, 0.18715794384479523, 0.0016635360661894083]}, {"target": [0], "doc": ["there be two hook <tag> and <tag> since version <number> to get an instance of the component .", "< router - outlet ='onactivate ' ='ondeactivate'></router - outlet >"], "issue_sim": [0.4913528263568878, 0.0879962369799614], "prob": [0.971112847328186, 0.01610415428876877]}, {"target": [3], "doc": ["a few question / concern :", "be we not go to be able to specify typescript file in the config file", "perhaps this be something for down the road instead", "this seem a little odd - it be like we be get close to the _ actual _ structure of <tag> , but we be still expect something we have to parse .", "why not just permit the full command line string or a plain object", "for instance , the following could be equivalent :", "and if we really do n't want user to have to a type the whole word , the following could be allow as well :", "in fact , i do n't think it should be a <tag> file , i think it should be something like <tag>", "dot prefix for filename be an  , and now an artifact from indicate hidden file on unix system when filesystem do n't support a ' hidden ' attribute", "let 's just be explicit"], "issue_sim": [-0.067386195063591, 0.4650859236717224, -0.007593400776386261, 0.03836805000901222, 0.31278300285339355, 0.06357668340206146, 0.08463344722986221, 0.308745801448822, 0.32794272899627686, -0.03838268667459488], "prob": [5.770687948825071e-06, 0.0012269522994756699, 2.9034643375780433e-05, 0.3677147626876831, 1.840367986005731e-05, 6.471256347140297e-05, 0.013028237037360668, 0.007993646897375584, 0.024218453094363213, 7.82310453359969e-05]}, {"target": [0], "doc": ["i 've use <tag> in every single project and every single time i have to look it up , because <tag> be n't trivial to recall ; if many people use it in every project , it make sense to make it part of <tag> right ?", "that be not the same ; and it be not even close"], "issue_sim": [0.23480524122714996, 0.0729670450091362], "prob": [0.9546390175819397, 0.022933803498744965]}, {"target": [0], "doc": ["i do n't think there be case where it be necessary to use <tag> or <tag> to represent ui state ;", "they be not json serializable ;", "the benefit do n't justify the amount of work need to properly support they , especially when they be not available in every browser"], "issue_sim": [0.18880224227905273, 0.15459495782852173, 0.17024767398834229], "prob": [0.8383861780166626, 0.001912845065817237, 0.6649613380432129]}, {"target": [15], "doc": ["first of all ,", "i think we be on 1", "now , i be go to go ahead and  accept as a given that you can find some way of ship all \" the \" facade into the old version of powershell on all oses", "i actually think the whole \" facade \" thing be n't go to work until .netstandard2 , but if it be an option now , that sound great .", "do that mean you be go to ship * * everything * * in powershell core , too -- even if you be not use it yourself", "i mean , otherwise , you be only cover the basic , and you have barely dent the problem", "however , regardless :", "powershell module be still go to have half a metric gigabyte of dependency , , which they only need for core", "we can make a list of what you 've ship to reduce what get package , right , but still", "what do i do with \" native \" library", "i mean , even <tag> and <tag> be compile to _ native _ , but have you see <tag>", "the other day i try", "it have no dependency on", "5 , but when i run", "since package manager 's motto be \" be prepare , \" i manage to get back 318,011,877 byte worth of stuff", "now , for cryptography , you guy might choose to ship it in powershell core , but my question be , in general -- how do i load the right library , when it be * * just not * * cross - platform"], "issue_sim": [0.045234315097332, 0.01002618670463562, 0.4721173942089081, 0.09828578680753708, 0.4017266035079956, 0.030736440792679787, 0.026344377547502518, 0.5395292639732361, 0.17457588016986847, 0.025178836658596992, 0.1969650238752365, -0.018670497462153435, 0.11784394085407257, -0.031041117385029793, 0.24302895367145538, 0.5236287117004395], "prob": [0.00027007641620002687, 0.000113608744868543, 0.21509721875190735, 0.6700814366340637, 0.00048096690443344414, 0.00032815340091474354, 1.2549983239296125e-06, 0.0008467212901450694, 0.00030206466908566654, 2.0879606665857864e-07, 0.0003357642563059926, 1.3468536508298712e-07, 1.890804696813575e-06, 1.2382713521219557e-06, 0.003342467825859785, 0.4141079783439636]}, {"target": [2], "doc": ["make an http request from a service constructor be not support", "if that be the case , then the doc should specify that at some point , and maybe emitt a error message if the service fail to initialize before its inject", "it be also really inconsistent as it only fail to work when the service be inject into a interceptor , and it can easily be solve by a settimeout around the http call ."], "issue_sim": [0.6593358516693115, 0.577785849571228, 0.6193552017211914], "prob": [0.0038904095999896526, 0.3942871689796448, 0.7314162254333496]}, {"target": [0], "doc": ["i still think this should not be a part of vue , it should be a separate directive that you can use ."], "issue_sim": [0.35763221979141235], "prob": [0.9992983341217041]}, {"target": [3], "doc": ["thank a lot for the comment", "here be my thought :", "* concern a <tag> method : sure ,", "it be doable and i think i agree that this would be more \" user friendly \"", "i be honestly unsure about this point", "i think it be very odd to allow change the algorithm on the fly and it would increase the coupling between the rng class", "but when i think about the idea as whole , think about how to use it , there be a lot to like in it", "i would n't refuse to implement the change", "let 's wait for more opinion", "* <tag> already work as you suggest", "i implement this via default parameter , instead of different overload , but the behavior be exactly the same", "* about change the method name : i like your suggestion , but i think i 'll wait for more opinion before change", "i be expect some bikeshedde here :-)", "* about <tag> : i think use it express the intent more clearly than the alternative"], "issue_sim": [0.0819215327501297, 0.16819852590560913, 0.06069211661815643, -0.007792580872774124, 0.0578727200627327, -0.09544827044010162, 0.008294396102428436, 0.07022497057914734, 0.007847776636481285, 0.0010750498622655869, -0.019289737567305565, 0.021502504125237465, 0.03144340589642525, -0.015055472031235695], "prob": [0.00013025038060732186, 0.0001303355093114078, 8.851423444866668e-06, 0.03463396430015564, 1.3725612916459795e-05, 0.037341292947530746, 0.016826126724481583, 0.00044425640953704715, 0.0002493506472092122, 6.340089748846367e-05, 0.016761688515543938, 0.0036732645239681005, 0.02129369229078293, 0.008520865812897682]}, {"target": [2], "doc": ["cc @s - panferov @jbrantly , please chime up if i be not explain this right", "@mhegazy @chuckjaz so i say above that webpack be responsible for serve individual file _ one at a time _ to a loader", "in that case , you ca n't use compilerhost on one ts file at a time  .", "lsh provide the ability to build up your program of file , and then additionally update they only compile that one file in the context of the program", "be there something i be miss"], "issue_sim": [0.024468228220939636, 0.676985502243042, 0.20738141238689423, 0.23428909480571747, -0.018549947068095207], "prob": [0.004648953676223755, 0.0013314582174643874, 0.9567373394966125, 0.17187084257602692, 0.0028113112784922123]}, {"target": [3], "doc": ["if it be contain a security fix , the notification should mention that", "currently it look like \" hey , we fix a typo", "that be not the intention maybe", "also , lower the effort to upgrade , at least on windows would be nice , like a one - liner that be show in the notification .", "love your work though"], "issue_sim": [0.11527470499277115, 0.1105380728840828, 0.0018001478165388107, 0.46600157022476196, 0.06461074948310852], "prob": [0.08501890301704407, 0.10978998243808746, 0.035966724157333374, 0.9732382297515869, 0.002935864729806781]}, {"target": [2], "doc": ["i 've personally never encounter a time where i * absolutely need * to prevent people from editing variable or access a function", "any time where i would want to tell people not to mess with something unless they know what they be do , i prefix its name with an <tag>", "i would not object to a keyword  that would simply hide the variable / function from auto - completion .", "i just do n't think prevent access entirely be need"], "issue_sim": [0.36167681217193604, 0.22313076257705688, 0.5262449979782104, 0.09401054680347443], "prob": [0.2084043323993683, 0.5904170870780945, 0.18762396275997162, 0.003653116524219513]}, {"target": [2], "doc": ["@vexx32 i do n't always have access to the script though", "from my perspective i be just try to evaluate some black box binary which emit datum to a variety of output stream , and i only care about retrieve one of they , which be trivial with other shell and script interpreter", "if some function somewhere do <tag> or <tag> or whatever , i want to be able to retrieve the output san that content ."], "issue_sim": [0.15967664122581482, 0.38236385583877563, 0.36506688594818115], "prob": [0.0034583525266498327, 0.8930968642234802, 0.263197124004364]}, {"target": [0], "doc": ["the new <tag> parameter option give a terminate error for non - https and can only by suppress with <tag> ."], "issue_sim": [0.4816949963569641], "prob": [0.9999589920043945]}, {"target": [0], "doc": ["in monorepo environment you simply organize ngpackages differently for each build application , so it be not possible to fix they to the folder / file structure ."], "issue_sim": [0.3041130602359772], "prob": [0.9999721050262451]}, {"target": [1], "doc": ["this be allow today with the  clear <tag>", "we 've discuss it a bunch and still do n't want to allow truthy check on possibly - unpresent property from union ."], "issue_sim": [0.16966375708580017, 0.30762356519699097], "prob": [0.020222796127200127, 0.9443893432617188]}, {"target": [0], "doc": ["i personally do n't feel it be necessary to add a new language construct . instead of that first what come on my mind be well text editor support .", "a lot of token be highlight in editor , so why not backtick", "and the rest of the line behind the backtick might be in other color with mean \" warning , this might be wrong \""], "issue_sim": [0.21742020547389984, 0.3543925881385803, 0.16096554696559906], "prob": [0.8094594478607178, 0.013244629837572575, 0.20880404114723206]}, {"target": [4], "doc": ["ok how about this as a spec for bind :", "- args which do not match the original function type", "- too many args", "result in compiler error : ' supply parameter do not match any signature of call target", "for an overloaded function where there be ambiguity , ' bind ' should return type any . e.g.", "- a function which be not overload", "- a function which be overload but bind be call unambiguously", "bind return the expect type value :"], "issue_sim": [0.21314874291419983, 0.38573288917541504, 0.06500223278999329, 0.4747951626777649, 0.5708752870559692, 0.25761306285858154, 0.4967477023601532, 0.43003273010253906], "prob": [0.014164536260068417, 0.0077533237636089325, 0.00025147036649286747, 0.0036741201765835285, 0.987825334072113, 0.00034418742870911956, 0.010066057555377483, 0.000622123945504427]}, {"target": [0], "doc": ["i think most devs also prefer to use a more declarative and visually straightforward approach to wire thing up in order .", "it be easy to see how thing be work this way", "then once everything be stable start improve developer efficiency by remove boilerplate and improve the container design", "spring framework use to have massive xml configuration file , and now it be down to almost <number> boilerplate"], "issue_sim": [0.20919954776763916, 0.05447999760508537, 0.186300128698349, 0.3551817536354065], "prob": [0.5835776925086975, 0.00048336980398744345, 0.3132382035255432, 0.007768849842250347]}, {"target": [2], "doc": ["i 've find that if i use <tag> instead of <tag> i be able to use the <tag> arg", "at least it seem to work so far", "the limitation of this be that the <tag> function only work in factory function , you ca n't use it in regular code where <tag> can be use .", "but with some refactoring use of <tag> could usually be move into factory function"], "issue_sim": [0.3995940089225769, 0.006070833653211594, 0.40871569514274597, 0.13303832709789276], "prob": [0.1654772311449051, 0.06112424284219742, 0.33135685324668884, 0.067361980676651]}, {"target": [0], "doc": ["in the same way , static private attribute in class must be allow too .", "already compatible in edge  , node  , chrome"], "issue_sim": [0.34309086203575134, 0.15644827485084534], "prob": [0.881136417388916, 0.017962636426091194]}, {"target": [0], "doc": ["yes it do , i m debug it from android studio on my oneplus <number> t"], "issue_sim": [0.0019281054846942425], "prob": [0.9999432563781738]}, {"target": [1], "doc": ["this be partially implement in 11614d6 - however , this syntax be introduce primarily for make it easy to proxy event in component", "modifier for this syntax introduce too much runtime complexity and be not support ."], "issue_sim": [0.46279579401016235, 0.33349767327308655], "prob": [0.03353828564286232, 0.9830518960952759]}, {"target": [7], "doc": ["while you be of course technically correct we could ask ' what do root mean", "in web application this mean the web root", "there be exactly <number> use case where i want to include anything from the root of my system , my build server or my production server", "one could even argue that it be unsafe to allow that", "in any case , to i it make much more sense that <tag> refer to the root of the application", "i however understand that for some other people  <tag> should mean the directory that contain <tag>", "i would recommend you to either allow for extension to influence the resolve process  and  ) or allow the <tag> set to contain absolute path :", "the default behavior can remain the same and from a naive perspective this change do not seem to involve much as test for an absolute path be rather easy : <tag> ."], "issue_sim": [0.012551508843898773, 0.14499717950820923, 0.28177934885025024, 0.04333798214793205, 0.188320130109787, 0.20423395931720734, 0.33287790417671204, 0.3430534601211548], "prob": [0.068691186606884, 0.005252303555607796, 0.16344846785068512, 0.022292058914899826, 0.00847067590802908, 0.009530714713037014, 0.031158559024333954, 0.26917245984077454]}, {"target": [2], "doc": ["@stevel - msft : thank for the clarification re table view", "we now know that the behavior be by design , but perhaps it be time to revisit that , as @thezim suggest -", "especially give that it be behavior relate to _ for - display - only _ output that no one can expect to rely on for long - term stability and machine parsing , as", "do away with the padding might also help with # <number> and the"], "issue_sim": [0.08974307775497437, 0.034665536135435104, 0.13546426594257355, 0.15546812117099762], "prob": [0.0022198420483618975, 0.058592695742845535, 0.6868864297866821, 0.0017966623418033123]}, {"target": [0], "doc": ["our workaround to this be to create a service at the ' host ' of these route , such that it know about both the main route and the auxiliary route .", "we then have the child route component  always use that service for any navigation", "ts < - provide the authrouterservice", "< router - outlet></router - outlet >", "< router - outlet name=\"aux\"></router - outlet >", "in hindsight , ours be a terrible design to put two router outlet  on the main authorize landing page", "it cause issue with lazy load , component communication , etc", "next time , i 'll just have each component that need a \" bottom \" , define it inside itself"], "issue_sim": [0.2959662079811096, 0.40157851576805115, 0.07239733636379242, 0.2695588171482086, 0.2414880096912384, 0.25327789783477783, 0.2168903648853302, 0.18051213026046753], "prob": [0.9024773240089417, 0.010124935768544674, 0.0014973108191043139, 0.012726133689284325, 0.06471133232116699, 0.07548441737890244, 0.0016538018826395273, 0.022711098194122314]}, {"target": [1], "doc": ["i be think more of how we currently have <tag> and <tag> that do the same thing", "there be in my opinion not so much difference when do <tag> for avoid repetition .", "yes , if there be no way around it , then this solution be a bit * ' dead in the water ' * :/", "i still think have this kind of repetition make the component behavior hard to comprehend :", "or perhaps i be create too complex component or just not the right way"], "issue_sim": [0.2546727657318115, 0.17887632548809052, 0.11886152625083923, 0.24948449432849884, 0.18298491835594177], "prob": [0.4071614444255829, 0.30481740832328796, 0.19975599646568298, 0.012758167460560799, 0.005258094519376755]}, {"target": [0], "doc": ["i like the idea ... maybe we can simply make normal <tag> accept return a promise ."], "issue_sim": [0.29030662775039673], "prob": [0.9995741248130798]}, {"target": [1], "doc": ["why not make a dummy node", "this node would only be use specifically for save empty scene .", "then everything would work perfectly fine , it could even be load and put inside another node at runtime", "as soon as in the ui of the scene editor the user add an actual proper node , that one be save instead", "as for @neikeq i think none of what you say be good reason for this behavior , since the main problem be that no other editor i have ever see do n't immediately allow save a fresh empty project", "it do n't really matter if internally you have a good reason , it be always gon na stump and confuse newcomer", "therefore , unless it really ca n't be do differently without large refactoring or too much add complexity , it be simply unfavorable for usability to stick to the current behavior"], "issue_sim": [0.20779892802238464, 0.4104428291320801, 0.23873625695705414, 0.3788713216781616, 0.4289253354072571, 0.225296750664711, 0.20686018466949463], "prob": [0.0033547491766512394, 0.3521304130554199, 0.024920348078012466, 0.10274689644575119, 0.21231885254383087, 0.005140773952007294, 0.127416729927063]}, {"target": [1], "doc": ["that probably need to be implement then", "multiple selection on script to close they be a far more common functionality than add an ad - hoc \" close above / below \" option ."], "issue_sim": [-0.007726382929831743, -0.0184450913220644], "prob": [0.020863451063632965, 0.9993605017662048]}, {"target": [2], "doc": ["@rafa - as i whip up the following for a declarative component - base <tag> management solution", "could be extend to support more property", "i think a component be the right way to go about this , for the reason outline above , as oppose to a service ."], "issue_sim": [0.24194952845573425, 0.05358252301812172, 0.3771769404411316], "prob": [0.16566920280456543, 0.1526583582162857, 0.4645814299583435]}, {"target": [1], "doc": ["big pain for we", "we have a lot of dynamic component and same problem with cdr ."], "issue_sim": [0.001699589192867279, 0.26690536737442017], "prob": [0.0006638811901211739, 0.9994810223579407]}, {"target": [1], "doc": ["we do some work at sourcegraph in  , but hit some limitation with the current api", "specifically , the  you can provide to the server require the   method that return file content to return synchronously . in a language server however this be most likely do asynchronously because retrieve the file content involve io with the file system or over the protocol stream .", "i would be very interested in help or improvement in the ts server to solve this use case"], "issue_sim": [0.16020266711711884, 0.41770458221435547, 0.3510788679122925], "prob": [0.2835160791873932, 0.8061440587043762, 0.021968530490994453]}, {"target": [5], "doc": ["sorry , wrong link", "i mean # <number>", "it answer to @splaktar 's question about why the syntax highlighting vary across <tag> and <tag>", "regard the styling :", "i be a little torn", "the green on black usually indicate a command that the user can copy / paste into a terminal and run , which be not the case here .", "but the current styling hardly distinguish the command from regular text", "btw , this be also an issue with function api doc", "if we could come up with a well , more distinguishable styling  , i would prefer that", "maybe something similar to class api :"], "issue_sim": [-0.12066715210676193, 0.06225375458598137, 0.3043012320995331, 0.038111861795186996, -0.0148412324488163, 0.42259272933006287, 0.3394566774368286, 0.30267763137817383, 0.14247316122055054, 0.24037504196166992], "prob": [0.00025180738884955645, 9.670574218034744e-05, 0.004717591684311628, 0.0005026590079069138, 5.276506271911785e-05, 0.9564706087112427, 0.0018877001712098718, 0.0011171342339366674, 0.15087489783763885, 0.002586905611678958]}, {"target": [1], "doc": ["what be wrong with c++ 's ternary operator   syntax", "it be great , easy and intuitive ."], "issue_sim": [0.502519965171814, 0.07745383679866791], "prob": [0.18605345487594604, 0.6622921228408813]}, {"target": [0], "doc": ["functional component already have this context feature .  though currently normal component do n't .", "i guess it can be useful if normal component can get access to it too"], "issue_sim": [0.4069520831108093, 0.4055534601211548], "prob": [0.9881282448768616, 0.0018598403548821807]}, {"target": [1], "doc": ["i like this feature personally", "but it seem to break the consistency of the v - bind behavior , like sometimes i still need to bind <tag> property for the root element .", "so how about use a pair of directive as getter and setter like :", "inside the component , define a <tag> anchor :", "when use it :"], "issue_sim": [0.03970607370138168, 0.3963088095188141, 0.2624313533306122, 0.3081445097923279, 0.010915594175457954], "prob": [0.013279227539896965, 0.8342878818511963, 0.162812739610672, 0.07285826653242111, 0.012019983492791653]}, {"target": [0], "doc": ["<tag> do n't exist but you can create your own use the  as a reference .", "you can even publish it to npm a post it here", "yes , the class have to be apply with a v - bind"], "issue_sim": [0.03896709531545639, 0.05553139001131058, 0.17596344649791718], "prob": [0.989912211894989, 0.0008839835645630956, 0.021693890914320946]}, {"target": [2], "doc": ["i do see it , i do not understand why we have to have it and why we can not manage these file ourselves like we use to in 2", "i do not see how it help the workflow ,", "and to be honest i would rather manage the .mesh and these other file and their dependency myself in a more clean / understandable fashion and be able to make sure godot never do that again .", "as an example i use to store all my obj file in a separated directory and every godot project that use the say obj file would have a", "mesh file look up to that directory / file  so that if i modify that one file it would be update on all my godot project", "dae file and texture", "having control over these file allow more fine control and less duplicated content too in that case", "this be just an example but i feel it be always good to let the user manage all his file if he   want to", "i really like that about godot , it do not force you into a way of do thing", "i really think this be the one thing that it do well than any other engine out there please do not throw that away"], "issue_sim": [0.3042224645614624, 0.10308095812797546, 0.3472330868244171, 0.49993056058883667, 0.49287909269332886, 0.16917471587657928, 0.28097012639045715, 0.34206315875053406, 0.2516818642616272, 0.22322732210159302], "prob": [0.39615800976753235, 8.572595106670633e-05, 0.83344566822052, 0.00290341186337173, 0.0004665959277190268, 2.1951405869913287e-05, 0.0002754968882072717, 0.0034290459007024765, 0.0028298685792833567, 0.012335156090557575]}, {"target": [1], "doc": ["i be not sure if require a mono installation to compile godot be a good idea , consider that godot be mostly a c++ project and can be compile without c # support", "the level of performance offer by meson or cmake  should be more than enough for godot 's purpose ."], "issue_sim": [0.6106792688369751, 0.5415596961975098], "prob": [0.9593921899795532, 0.08186541497707367]}, {"target": [7], "doc": ["sorry for my long response time", "here be my suggestion for the api modification :", "i would add a new field to ngupdate :", "this should meet the <tag> and <tag> event", "at least for i it look there be no need to differentiate as download start immediately after the potential update be detect", "same be for <tag> which be basically the same as <tag>", "* * regard @theparad0x   comment :* *", "i guess stick to promise be fine here as observables would require a call to <tag> .", "but i can agree on add a meaningful return value", "i would prefer a signature like this :", "throw an error in case of failure would force application to catch it which would be definitely a break change", "and for <tag> it could look like this : <tag>", "tbh i be not sure if return the event be the good way here", "if an error be throw in case of failure , return a <tag> value would be possible as well"], "issue_sim": [0.0108928382396698, 0.1637275516986847, 0.16066908836364746, 0.1333257108926773, 0.3492662310600281, 0.19343510270118713, -0.08722741156816483, 0.33253902196884155, 0.11207516491413116, 0.027745148167014122, 0.2939804494380951, 0.0745672658085823, 0.19727012515068054, 0.20542606711387634], "prob": [0.028297344222664833, 0.04195600748062134, 0.02247903309762478, 0.0025956686586141586, 0.29269999265670776, 0.006542407441884279, 0.0004539230722002685, 0.15456010401248932, 0.00019592967873904854, 8.197550050681457e-05, 0.0029396484605968, 0.0021267312113195658, 0.0055322349071502686, 0.0814562737941742]}, {"target": [3], "doc": ["the bar for servicing update be high", "we do n't take trivial fix to avoid risk of regression .   there should only be fix that be security , compliance , or customer block issue .", "this  describe the intent and design in detail and way to disable", "auto - update be something i would love to have , but be very difficult to solve whether because it require root or due to open file handle  on windows", "however a cmdlet like <tag> where we make it easy to install an update version the same way you originally instal it  seem feasible"], "issue_sim": [0.16175955533981323, 0.10771834850311279, 0.07166501879692078, 0.27370792627334595, 0.33399254083633423], "prob": [0.0023853962775319815, 0.6006824374198914, 0.020411308854818344, 0.43123599886894226, 0.01829683594405651]}, {"target": [0], "doc": ["perhaps an interesting tidbit : last i try the internal node of graphedit show up in the scene tree , and can be modify .", "but this also totally break graphedit"], "issue_sim": [0.044261906296014786, 0.08435423672199249], "prob": [0.9619399309158325, 0.07439184933900833]}, {"target": [2], "doc": ["i do n't follow", "would n't this all be vs side where it already have the text buffer available", "same as sublime and atom , they do n't give the buffer to the language service to colorize , they do the work themselves base on the editor buffer and the syntax specify by the tmlanguage file ."], "issue_sim": [-0.06023036688566208, 0.08439896255731583, 0.24984565377235413], "prob": [0.013757138513028622, 0.11535810679197311, 0.964937150478363]}, {"target": [7], "doc": ["first , i want to thank you and @danielrosenwasser for the support while you guy be in the midst of a crazy busy and awesome ts2", "i apoligize if this response be messy but its hard for i to track everything in both loader to ensure that the right thing be do here", "not quite , what be need be :", "* * that give a program instance , and a _ single edit _ , generate the follow :* *", "- the * * single * * transpile file", "- give access to <tag>", "- the <tag> for the transpiled file", "this allow loader to add dependency into webpack dependency system"], "issue_sim": [0.12784238159656525, 0.2198227047920227, 0.003369388170540333, 0.05044375732541084, 0.2195495069026947, -0.01229930017143488, 0.221817284822464, 0.6545533537864685], "prob": [0.6260521411895752, 0.4497982859611511, 0.002851613564416766, 0.030023252591490746, 0.000149917061207816, 0.0002723261422943324, 0.0018177811289206147, 0.0012809630716219544]}, {"target": [0], "doc": ["i do n't think a pay user of vs would find something like that acceptable , and i would think that down the line , the other editor should also use our classifier , provide that the experience provide can feel fluid .", "side note : @cyrusnajmabadi template work pretty well ; that do n't tend to be a problem with the tmlanguage format"], "issue_sim": [0.3372212052345276, 0.19049692153930664], "prob": [0.9462970495223999, 0.007800585124641657]}, {"target": [0], "doc": ["i agree with keep vue.js simple but plugin require extra boilerplate code and increase page startup time due to load of extra .js file .", "they also do n't follow the same release schedule and so create an add maintenance headache", "then there be the issue of keep plugin up to date which have become a problem in every project i 've ever use which have a significant number of plugin"], "issue_sim": [0.38350892066955566, -0.015290153212845325, 0.10662487894296646], "prob": [0.5845082998275757, 0.010588697157800198, 0.6444411277770996]}, {"target": [0], "doc": ["it be use successfully in commercial game since quake <number>  ."], "issue_sim": [0.021118521690368652], "prob": [0.9999990463256836]}, {"target": [0], "doc": ["just as an example , a user import different \" select \" , \" tag \" , \" dropdown \" and he himself use vue - portal , now what that mean be that there be now <number> instance of custom \" portal \" code .", "could we re - evaluate the necessity of this feature"], "issue_sim": [0.5601820945739746, 0.06061992049217224], "prob": [0.9832870960235596, 0.0032225295435637236]}, {"target": [2], "doc": ["have the same problem than i", "sublime work with position and it need to translate to line / offset", "so if <tag> could support position , typescript sublime could use directly position and remove <tag> ."], "issue_sim": [0.02257094345986843, 0.5509734153747559, 0.426486611366272], "prob": [0.04835973307490349, 0.10851762443780899, 0.8290257453918457]}, {"target": [0], "doc": ["for game prototyping in general you do not use theme .. people prefer the. simple anchor system and stuff like texturebutton ..", "on may <number> , <number> 3:03 am , \" n - pigeon \" < notifications@github", "com > write :"], "issue_sim": [-0.06870120763778687, -0.02737845480442047, 0.1558493673801422], "prob": [0.9504092931747437, 0.23327602446079254, 0.001257269294001162]}, {"target": [2], "doc": ["i would be happy when godot get mesh deformation", "i guess the json format be something consider far down the line when godot have those miss feature", "i think it would be well to make an importer for dragonbones file  instead of spine  .", "dragonbones editor can import spine json animation datum and convert it to dragonbone animation datum too"], "issue_sim": [0.28836822509765625, 0.3504824936389923, 0.22767215967178345, 0.5133920311927795], "prob": [0.005069651175290346, 0.05079377815127373, 0.9374212622642517, 0.0009861586149781942]}, {"target": [0], "doc": ["i like this option , i often open large amount of script and have hard time to close some of they quickly"], "issue_sim": [0.011838860809803009], "prob": [0.9999804496765137]}, {"target": [0], "doc": ["i be say that once the v - bind syntax that i show be work  , then it be trivial to write a helper function like the one i show , which * create * that object for v - bind .", "that would mean that   we do n't have to introduce new template syntax and can instead solve this with about <number> line of js"], "issue_sim": [0.5439268350601196, 0.2762887477874756], "prob": [0.9119098782539368, 0.15648230910301208]}, {"target": [2], "doc": ["thank a lot for your proposal :-)", "because we be work with the inicontent - object , change its content - and at some time we would like to sort it", "therefore , i think that?| sort - inicontent would be more intuitive because it be similar to?| sort - object .", "kind regard , thomas"], "issue_sim": [0.016607504338026047, 0.2248084545135498, 0.48117923736572266, 0.10708709806203842], "prob": [0.021557055413722992, 0.3577641546726227, 0.5573502779006958, 0.0017160489223897457]}, {"target": [0], "doc": ["follow \" the law of least surprise \" for how thing generally should work , if you be get plain text output , it should not be pad to some arbitrary width that depend on the size of your terminal window .", "if it be pad  it would possibly be well to be pad to a fix width , dependent on the width of the output table", "or , if you be not recoloure the output , it should n't be pad at all", "or somehow have the trail space trim when copy to the clipboard , however this may be out of your control and depend more on the terminal app in use"], "issue_sim": [0.5789347290992737, 0.33987998962402344, 0.26701846718788147, 0.4141385853290558], "prob": [0.8089314103126526, 0.025956999510526657, 0.011136195622384548, 0.2627950608730316]}, {"target": [0], "doc": ["i believe such event sheet could be implement via nativescript , but i do n't see any reason why it would need to rely on the same codebase as visualscripte ."], "issue_sim": [0.3000427484512329], "prob": [0.9994789958000183]}, {"target": [0], "doc": ["we can still do exactly what you be say and eliminate boilerplate .", "here be what i be suggest :", "<number> ) declare that the component use the date picker and import the date picker into that component", "<number> ) do nothing because angular generate the necessary meta datum to include the date picker from now on", "so for the people that only wish to declare the date picker in one place within the app , they can just declare it in the main app shell , and they be good to go", "the only difference then be that all the need to do be :", "<tag> <tag> declaration <tag> calendar card <tag> date picker <tag> date picker <tag> date picker <tag> app shell `", "angular can read the package", "json file and inject the date picker that the calendar component need , and this can all be automate", "angular can also generate a nice dependency graph show you exactly what the ngmodule current provide and use this type of feature to warn you of thing that might be silly", "more live la vida loca"], "issue_sim": [0.17517441511154175, -0.009145074523985386, 0.4331734776496887, 0.28439074754714966, 0.35231414437294006, 0.0297372005879879, 0.23758216202259064, 0.32752954959869385, 0.3599039912223816, 0.4017319083213806, -0.05754765123128891], "prob": [0.512825071811676, 0.00025507391546852887, 0.03740343451499939, 0.019537145271897316, 0.15010981261730194, 9.680443326942623e-05, 0.0070796445943415165, 9.044058242579922e-05, 0.010992353782057762, 0.21082191169261932, 5.268599488772452e-05]}, {"target": [4], "doc": ["i do n't see how this can be expect behavior", "go back to the original example , give the function a name this time :", "both of those call _ should _ have identical value for the <tag> variable inside the function", "<tag> be the last positional parameter define , and have the <tag> attribute", "i can either pass it the whole array in one go  , or i can use the syntax that be enable by <tag> instead .", "but they be not identical , because of the bug that be demonstrate here", "if you look at the discussion for the pr to fix it , there be even more weird scenario involve cmdlet like write - output"], "issue_sim": [0.21817442774772644, 0.1316344290971756, 0.3505004346370697, 0.4263804256916046, 0.3715367317199707, 0.023097233846783638, 0.40853190422058105], "prob": [0.02907489612698555, 0.013378842733800411, 0.4354025721549988, 0.025012828409671783, 0.37280821800231934, 0.0015108929947018623, 0.14860649406909943]}, {"target": [7], "doc": ["i think the stance against namespace be short - sighted", "it make sense from perspective of the engine workflow in general but it ignore the perspective from toolmaker", "godot unit testing  by bitwe for example break due to a naming conflict in one of its update", "there be a likelihood this could have be avoid with a dedicated gut namespace", "i would also like namespace for waiting and testing  so i can i can use class name like test  while not run over other framework  or just the user 's script", "i 've try a number of time use a wat class that contain all of the script use as subclass but that be just a cyclic reference hell", "if we be to be encourage to build tool from within the engine , then we need the tool to make those tool in the engine even if they be n't absolutely necessary for the engine workflow itself", "in summary , a dedicated namespace system which can be both access as well as define from the engine  so tool maker do n't end up walk over each other or their use would be a godsend ."], "issue_sim": [0.19629035890102386, 0.19037652015686035, 0.2521387040615082, 0.11501561105251312, 0.41003158688545227, 0.31724756956100464, 0.27481210231781006, 0.3369104266166687], "prob": [0.0014369901036843657, 0.07737564295530319, 0.0012336134677752852, 0.0017594718374311924, 0.0365767702460289, 0.018521547317504883, 0.4072194993495941, 0.2625006139278412]}, {"target": [4], "doc": ["fyi , i be currently play with this idea as well , and on a big scale , with a target anywhere in the dom", "you can see my progress here :", "as far as i have test it , it work pretty well , but i do n't think i have catch all edge case and i be not sure that this work in all case", "it work like this :", "so far , this only work with the <tag> component , but i be play with the idea of a kind of <tag> prop that will make the <tag> create a target component anywhere"], "issue_sim": [0.38655000925064087, 0.014696165919303894, 0.1633620709180832, 0.10342834144830704, 0.5766369104385376], "prob": [0.06203923374414444, 0.0077974372543394566, 0.6887882351875305, 0.0006261581438593566, 0.5041559934616089]}, {"target": [1], "doc": ["this also have impact for certain minifier", "i think there be a strong argument to allow opt in to the classic behavior  ."], "issue_sim": [0.11582976579666138, 0.2551122009754181], "prob": [0.11940359324216843, 0.958016037940979]}, {"target": [0], "doc": ["i understand your reluctance to add feature but it do parallel the way <tag> and <tag> work together .", "ignore the ability to return datum , <tag> would be just like <tag> but for <tag>"], "issue_sim": [0.27808916568756104, 0.3302309513092041], "prob": [0.9577425122261047, 0.02333325520157814]}, {"target": [2], "doc": ["we do not implement this because there be many thing to be consider in this seemingly easy feature :", "- the build - in modifier be in fact compile - time hint that generate different compile code", "custom modifier likely need to be define use a runtime config , which be a different mechanism .", "- for runtime config , what kind of api should we expose for this", "- we have two - way filter in the past", "a two - way value transform require the user to implement impeccable logic so that the two - way binding can stabilize", "otherwise you risk put your entire app in an infinite loop for edge case", "- the reason we have <tag> and <tag> be because they be in - fact one - way transform  and thus guarantee to stabilize", "- how should custom modifier behave when <tag> be use on a component", "- how should custom modifier behave on non - text input type , e", "<tag> , <tag> and most importantly , <tag>", "all of these question be unanswered and make the request more complex than it seem", "this be why i agree it would be a good candidate for a proper rfc that cover all these if anyone really want this feature", "until then , more +1s do n't move it forward in any way"], "issue_sim": [0.3029661476612091, 0.2902703881263733, 0.4047727584838867, 0.33183228969573975, 0.30371320247650146, 0.3896191716194153, 0.07108903676271439, 0.23199039697647095, 0.44646066427230835, 0.42137837409973145, 0.17428608238697052, 0.030961740761995316, 0.22090312838554382, 0.016949227079749107], "prob": [0.3136127293109894, 0.010814409703016281, 0.1610744595527649, 0.013446363620460033, 0.0008713770657777786, 0.05583760887384415, 0.0041428133845329285, 0.0324615053832531, 0.031294871121644974, 0.0029430300928652287, 0.0005677416338585317, 0.01206523273140192, 0.0059309909120202065, 0.001314610242843628]}, {"target": [1], "doc": ["@isazonov it be not just <tag> , but also <tag>", "listlegacymodule ` might be ok as the long term we want everyone to have module compatible with pscore as well as available in the psgallery ."], "issue_sim": [-0.04403577372431755, 0.35647401213645935], "prob": [0.07604030519723892, 0.7997518181800842]}, {"target": [0], "doc": ["browser 's behavior be that a numeric input have an additional property <tag> which should be use instead of <tag> . and be numeric by default ."], "issue_sim": [0.022756490856409073], "prob": [0.9999988079071045]}, {"target": [2], "doc": ["thank for the all reference", "we be all also very excited about vulkan , but do n't put your hope too high , it wo n't be a priority for a while", "it be not only about available driver , i guess we can trust the industry to make good driver available within a few month , but it be more about focus the work on what will be useful for gamer .", "all the gpu that be mean to get vulkan support be relatively high end , and thus only a small fraction of gamer  own they", "it will likely be another two year before such hardware be widespread enough for it to be sensible to make game for the masse with it", "so the focus will first be on opengl es 3", "1 , and once it be work  , there will probably be some focus on implement vulkan support too as alternative", "of course contribution towards vulkan support will be very welcome , just want to clarify what @reduz have express lately regard what the focus will be for godot 's core developer"], "issue_sim": [0.057577092200517654, 0.4556795358657837, 0.3184143900871277, 0.5848344564437866, 0.2863529622554779, 0.45465710759162903, 0.6045607924461365, 0.603636622428894], "prob": [0.0027920559514313936, 0.20615433156490326, 0.3510686755180359, 0.03061641752719879, 0.04073193669319153, 0.00025255189393647015, 0.04381969943642616, 0.06307897716760635]}, {"target": [1], "doc": ["be there any chance that we support portal natively in vue", "although  be work nicely in most case , it still have side effect like leave an empty wrapper element thus may interfere with something  rely on dom structure like <tag> or <tag> .", "if the <tag> and <tag> can just work as abstract component it would be great", "imo we can not eliminate the empty wrapper but still get everything right unless the feature be support by vue 's core"], "issue_sim": [0.48402848839759827, 0.32696786522865295, 0.3248218297958374, 0.19858890771865845], "prob": [0.15078677237033844, 0.5348263382911682, 0.06354386359453201, 0.31808778643608093]}, {"target": [1], "doc": ["actually , i do n't want to say anything about that ;-)", "i just want to mention that there might be way to work around , independent of how the angular team will proceed with this issue ."], "issue_sim": [0.029587622731924057, 0.45473238825798035], "prob": [0.45804423093795776, 0.8200960159301758]}, {"target": [1], "doc": ["iirc a hard link be n't set as a reparse point so have a check on that wo n't work", "i be unsure as to the speed but you can use  and  to enumerate all hard link on a file without call <tag> .", "as for what that do internally i have no idea"], "issue_sim": [0.14515405893325806, 0.3074549436569214, 0.07871411740779877], "prob": [0.3457897901535034, 0.8833372592926025, 0.0014762554783374071]}, {"target": [7], "doc": ["@ace - dragon not sure if i would ever use it in some of the case", "the for case for example i ca not come up with why i would need a trigger once", "we can already trigger once in a for case , even when it continue iterate", "the for case be not like the if case - it run once , iterate through a list and get the job do", "do not cycle every frame when i use it - that would be expensive", "perhaps i have not use it in other way", "i do not know", "the goal of the trigger be to address the need to limit the execution of event to one time - while their condition be true for more than one frame .", "that usually happen in simple if case - something that be continuously check every frame", "about the syntax , i think that in term of actually get this implement , a trigger once would make more sense in @vnen 's approach", "and if you want to use it the way you do , we could still nest it like this :", "i be assume that if the syntax work the way you want it , more internal part of gdscript in godot will have to be touch to get it to work"], "issue_sim": [0.07093054801225662, 0.4144592881202698, 0.416072815656662, 0.4308568835258484, 0.2895967364311218, 0.04322582483291626, -0.07227317988872528, 0.5342358946800232, 0.3802083134651184, 0.47309041023254395, 0.19039857387542725, 0.35680389404296875], "prob": [0.00024425442097708583, 0.0007143351249396801, 0.0009048007195815444, 0.006678822450339794, 0.00018893230298999697, 3.165471935062669e-05, 0.00011720661859726533, 0.2540833652019501, 3.2710639061406255e-05, 0.0013489023549482226, 0.0002372305898461491, 0.16848193109035492]}, {"target": [0], "doc": ["there be quite a lot of thing which you can do with they but essentially iterate through they and perform some check , add datum \" dynamically \"  , exclude route etc", "you can do some , with a plain function * * unless * * you need to use a service , then you wo n't be able to ; and even for these scenario we have for example a logger service which we can not use for well logging", "a small concreate example would be :", "for example in our app we control <tag> through a service name <tag> to determine whether its in debug mode or not  , and we have some route which be only for developer only  , so if its not run in debug mode the route be remove", "pass additional route datum via a config service"], "issue_sim": [0.36955928802490234, 0.25196218490600586, -0.003114003688097, 0.4647561013698578, 0.38808879256248474], "prob": [0.629347562789917, 0.05491362139582634, 0.001945550087839365, 0.4058590829372406, 1.920950489875395e-05]}, {"target": [1], "doc": ["as @sylvainpolletvillard say ,", "if you want to apply <tag> you should create a class for it ."], "issue_sim": [0.005561094731092453, 0.265847384929657], "prob": [0.0006715740310028195, 0.9961113333702087]}, {"target": [0], "doc": ["mark it as a bug as we be therefore likely expose to all the security vulnerability announce since 1.0.1h .", "note that there be also a 1", "2 branch now , with 1", "2d be the late release", "maintain a build - in dependency such as openssl will always be a pain though if we try to ensure that security vulnerability be patch in a timely manner", "it could be of course that many of those vulnerability be not expose to godot 's api , but that be still bad press after the recent press exposure of thing like heartblee"], "issue_sim": [0.3301679491996765, 0.017062805593013763, 0.07241496443748474, 0.14802993834018707, 0.6332107186317444, 0.3121088743209839], "prob": [0.6231582760810852, 0.00022592728782910854, 0.0018484076717868447, 0.0005012612091377378, 0.30612102150917053, 0.3047173023223877]}, {"target": [0], "doc": ["i think that it be a good idea to allow multiple and no parameter , rn you must run in on a \" compatibility \" function that execute the final wanted function with your correct  argument , so the good would be to pass argument as an array :"], "issue_sim": [0.4100423753261566], "prob": [0.9999779462814331]}, {"target": [0], "doc": ["put the asyncrhronous code aside from the constructor be not enough as the result datum will not be accessible when the httpinterceptor first execute", "my solution , even if it feel dirty to i , be to give access to the asynchronous datum  in an observable and to use that observable inside the httpinterceptor .", "this same use case be describe by daniel crisp on this blog post : <url>"], "issue_sim": [0.5305531024932861, 0.4425838589668274, 0.1355578899383545], "prob": [0.6966279745101929, 0.7818601727485657, 9.620645141694695e-05]}, {"target": [2], "doc": ["maybe we could increase the limit , and center the view when you unzoom , so that the -x and -y be more accessible", "but i see definitely no point in make those infinite", "there be no use case in get lose at  coordinate when your game be at  .", "but as i say , we could make it an option for those who find it useful"], "issue_sim": [0.44675546884536743, 0.17310470342636108, 0.20250475406646729, 0.12306469678878784], "prob": [0.2597319781780243, 0.004193306900560856, 0.9514279365539551, 0.0011663628974929452]}, {"target": [0], "doc": ["the documentation say that for 1.x , too - it be only for element , not component .", "this feature request be valid in vue <number> , as well"], "issue_sim": [0.43661484122276306, 0.28280726075172424], "prob": [0.8494011163711548, 0.035717785358428955]}, {"target": [1], "doc": ["alternately , the stream should just be serialize to the file descriptor correspond to the stream number document  , and", "anyone who want to see progress , warn etc . output on stdout can just manually redirect all of those file descriptor into <tag> ."], "issue_sim": [0.4015151262283325, 0.5890292525291443], "prob": [0.28396669030189514, 0.5731992125511169]}, {"target": [1], "doc": ["and move it into the <tag> tag would also break it", "i be not sure if it would even work if angular do n't manipulate <tag> , but i also would like to be able to use polymer dom module .", "i be pretty sure it ca n't work when <tag> be involve , because angular and polymer use different emulation", "i guess it would require <tag> and for polymer full shadow dom be enable"], "issue_sim": [0.179404616355896, 0.528096079826355, 0.43816226720809937, 0.45619285106658936], "prob": [0.17783308029174805, 0.5617973804473877, 0.23492568731307983, 0.05121443793177605]}, {"target": [9], "doc": ["i be not sure to follow @linusborg , do that syntax mean that for multiple event , we would have something like that", "if that be the case , then you have the same problem that today , which be a lot of duplication", "<tag> have the advantage to just go to the point , without any repetition", "i think take the listener out of the template prevent you to get a full picture of what be go on when look at it", "with this , you 'd have some listener define in the template , other elsewhere", "that seem not optimal", "about the * long attribute * , this notation would just be a shorthand for what already exist", "if you prefer to use one line per event and duplicate the handler name , that be fine", "if the handler definition be too long , you can just use the non - shorthand definition format", "i guess if you have <number> event that call the very same handler , you could perhaps divide those in the template on multiple line too ."], "issue_sim": [0.4640340209007263, 0.2824794054031372, 0.13904280960559845, 0.28918468952178955, 0.18103821575641632, -0.08550822734832764, 0.28683289885520935, 0.4401821196079254, 0.29747313261032104, 0.6321286559104919], "prob": [0.14299987256526947, 0.07577019184827805, 0.009180564433336258, 0.1124405488371849, 0.0024062872398644686, 0.0002702142228372395, 0.01662367209792137, 0.0044024791568517685, 0.01484632957726717, 0.06913090497255325]}, {"target": [1], "doc": ["if what you be try to accomplish be  ,", "you 'll have a hard time in any engine .", "you already can do what you want use  and some programming , albeit it be not easy", "separate the body in areas", "make a <tag> variable in thing use to attack  , and when it enter an area just get it use <tag>", "to apply realistic force , i be not so sure since i be not use to 3d", "but i would guess you 'd have to use different rigidbodies for each member and pin they to the torso"], "issue_sim": [0.1317085325717926, 0.11375582963228226, 0.09575017541646957, 0.12277428060770035, 0.3432561159133911, 0.3193066120147705, 0.161217600107193], "prob": [0.00673300214111805, 0.9196789860725403, 0.006246498785912991, 0.0006029133801348507, 0.08863098919391632, 0.009906262159347534, 0.023937467485666275]}, {"target": [1], "doc": ["i be sorry but this be a rubbish reason", "typescript include feature like private constructor , yet you say that the complexity of different getter / setter be too high and steepen the learn curve .", "like somebody mention here , <tag> should not be an argument against a standard in most modern programming language", "your suggestion to use private / protect be not really helpful either - it make the code less readable and it add complexity to it"], "issue_sim": [0.003844240680336952, 0.5422384738922119, 0.20594769716262817, 0.3863895833492279], "prob": [0.00021678366465494037, 0.792353093624115, 0.031008681282401085, 0.33424651622772217]}, {"target": [0], "doc": ["i imagine it could be annoying to have some progress truncate with ellipsis , especially if you then increase the width of the window and it still clip to <number> char .", "should the scriptwriter be able to affect the single / multiline render decision , or be it completely up to the invoker", "it make more sense to have progress at the bottom as it do n't always work great with a flow of output constantly overwrite it when it be at the top", "well make it consistent between platform", "there be case when both may be valid", "limit by default , but allow it to change", "the thing that annoy i the most with the progress implementation be the inability to express a new \" task \" , where other task that render progress become child", "say that you want to do something like the follow :", "then all progress will end up as sibling when it be clearly a parent / child relationship", "so i would like a way to specify the start of a new \" task \""], "issue_sim": [0.4796985983848572, 0.39307528734207153, 0.42894667387008667, 0.15168991684913635, 0.0031266696751117706, 0.21431054174900055, 0.43632543087005615, 0.04346930980682373, 0.12188249081373215, 0.11723228543996811], "prob": [0.30016037821769714, 0.19220349192619324, 0.4962950348854065, 0.001312627806328237, 0.0011662142351269722, 0.0015320208622142673, 0.45404988527297974, 0.0012748162262141705, 0.006016706116497517, 0.0072227586060762405]}, {"target": [3], "doc": ["i do n't see why they should be more broken than with <tag>", "do you expect people to pack their scene in the root folder of their repo , but code they to expect path start with <tag>", "either we fix path ourselves on install , or we do n't promise that absolute path would work", "i be still not sure what would have hardcode path though , as we exclude template already ."], "issue_sim": [-0.038362085819244385, 0.4158982038497925, 0.32856136560440063, 0.2624608874320984], "prob": [0.011874462477862835, 0.4254661798477173, 0.009542725048959255, 0.8119974136352539]}, {"target": [1], "doc": ["this proposal be just wrong", "i put up with this bad behavior where it already exist for backwards compatibility , but spread it across the ecosystem in the name of consistency be not appropriate .", "find nothing when there be nothing to find be not an error", "it be the correct answer", "it be the correct result"], "issue_sim": [0.1551346778869629, 0.4244556725025177, 0.17400306463241577, -0.05196688324213028, 0.08533225208520889], "prob": [0.02611992135643959, 0.9411396980285645, 0.027133198454976082, 0.021653413772583008, 0.013394057750701904]}, {"target": [3], "doc": ["for raw build speed of a clean clone , i doubt it 'll have any significant difference", "but it can be significant if you consider rebuild speed", "scon always rebuild a lot of stuff that be n't change when i pull a new commit", "as i say before , scon be slow to start  . if you be build the whole source that be negligible , but if you only change a line and be compile to test , it can significantly improve the workflow  .", "so 5s decrease in a 10min build be irrelevant , but 5s decrease in a 10 rebuild be a major improvement", "but i agree that any change in this regard should be test * a lot * to prove it work", "as @reduz state , scon never mess up a build , and that be something to consider"], "issue_sim": [0.21972639858722687, 0.1410534828901291, 0.11159534752368927, 0.40507322549819946, 0.1273200362920761, 0.14279022812843323, 0.17164601385593414], "prob": [0.049455929547548294, 0.029858652502298355, 0.06879562139511108, 0.5252103805541992, 0.15777643024921417, 0.03934841230511665, 0.03620895743370056]}, {"target": [1], "doc": ["@alexsandro - xpt , sorry , i be wrong , compute will be hacky as @inca say ,", "another hacky solution would be use <tag> with a method", ", here be an example"], "issue_sim": [0.05072511360049248, 0.3903799057006836, 0.01977022923529148], "prob": [0.10041435807943344, 0.7157641053199768, 0.029053201898932457]}, {"target": [1], "doc": ["yep - just snip the example for brevity", "there might be a well way , but we use a series of watcher .", "it look like  do the same thing"], "issue_sim": [0.12413263320922852, -0.0569179505109787, 0.023426562547683716], "prob": [0.3353606164455414, 0.7208428978919983, 0.02770962007343769]}, {"target": [2], "doc": ["@djleonskennedy a wrapping component create dom noise and css burden , though , and make it dynamic to have something like", "do n't work since <tag> have to statically define its provider and can not reference they from an input", "so you 'd have to create different wrapper component for every injector , which then become problematic if you build your injector somewhat dynamically as well  .", "my first thought here be a structural directive like", "but this actually turn out not to really lead anywhere either", "* edit :* the above confuse injector and provider a bit , but i think it be still clear enough", "in the end these be separate issue for injector and provider since wrap component can define provider , but not injector for their content"], "issue_sim": [0.48933833837509155, 0.23005008697509766, 0.5442359447479248, 0.0952003002166748, 0.03758303448557854, 0.2886121869087219, 0.5301542282104492], "prob": [0.004387935157865286, 0.07145119458436966, 0.8827115297317505, 0.0008327412651851773, 7.730067591182888e-05, 0.0021767427679151297, 0.11886822432279587]}, {"target": [0], "doc": ["as i say , godot run the game in a separate process , while unity and. unreal do not .", "if you can find for i information on how to dock a", "separate process in another opengl app , that work in all platform , i", "promise that i will implement it", "on we d , aug <number> , <number> at 11:14 pm , manson mamaril notifications@github"], "issue_sim": [0.22933676838874817, 0.34250569343566895, 0.2863021492958069, 0.006606654264032841, 0.14284655451774597], "prob": [0.9854991436004639, 0.005897026974707842, 0.010112990625202656, 0.0037664957344532013, 0.004688714165240526]}, {"target": [6], "doc": ["there be source code and there be user - face message", "i <number> % agree the latter should avoid vulgarity , humor , or for that matter , ambiguity", "what do \" ok :( \" even mean", "source code be another thing entirely", "have a look at the linux source code sometime - this be what programmer do , even professional one", "it be invisible to the userbase , and hardly worth raise a fuss over", "i also agree , there be no excuse for use derogatory language anywhere in the project .", "the two use of \" retarded \" be easily remove with a pr"], "issue_sim": [0.22918951511383057, 0.3292005658149719, -0.026405327022075653, -0.03862345218658447, 0.1605599820613861, 0.047489166259765625, 0.23398883640766144, 0.16706323623657227], "prob": [0.06961771100759506, 0.16958218812942505, 0.01054266095161438, 0.012230332009494305, 0.5249442458152771, 0.042665887624025345, 0.211589053273201, 0.02964950166642666]}, {"target": [1], "doc": ["i also think it be way too specific and rarely necessary to implement as option", "i already find that we have too many confuse close option , i would n't add two more .", "otherwise the next option will be \" close every other tab \" and \" close fibonacci tab \" ;)", "implement multi - select of tab to close they with ctrl+w or a right click > close would be well"], "issue_sim": [0.05130219832062721, 0.04280634969472885, 0.050986431539058685, -0.06766575574874878], "prob": [0.08169142156839371, 0.6996647119522095, 0.12183019518852234, 0.10960351675748825]}, {"target": [1], "doc": ["wait this ca n't be true", "right now , lambert add n.l  to light whereas burley add f n.l where f be a finite  symmetric function of f.", "you can interpret this as burley just * modulate * lambert , in a gentle way", "so when lambert give no or small contribution , burley would do the same"], "issue_sim": [-0.025094062089920044, 0.0328572578728199, 0.07214010506868362, 0.11875711381435394], "prob": [0.01815798319876194, 0.8462424278259277, 0.046861905604600906, 0.08009680360555649]}, {"target": [0], "doc": ["the likely workaround for this be go to be to use the <tag> decorator and not use the <tag> api directly , but that be suboptimal in a lot of case .", "my use case be that i want to provide service at the directive level only if they be not already provide by an ancestor element , use the following :", "implementation , which do n't work b / c it require <tag> and <tag> :", "<tag> <tag> factoryprovider <tag> type < t > <tag> injectiontoken < t > <tag> factory <tag> type < t > <tag> injectiontoken < t > <tag> factory <tag> <tag>", "the workaround be for do the same thing use <tag> be quite a bit less clean - will require constructor modification and inject custom factory on each class in the chain , instead of just use a share provider definition"], "issue_sim": [0.406096488237381, 0.4369361102581024, 0.3243143856525421, 0.31832125782966614, 0.4033752679824829], "prob": [0.35482484102249146, 0.41265738010406494, 0.004144561477005482, 0.004509065765887499, 0.355495423078537]}, {"target": [1], "doc": ["@jiaweihli but all that say be that the actual field <tag> point to <tag>", "it do n't imply anything about whether or not <tag>'d value automatically get a <tag> property ."], "issue_sim": [0.24430398643016815, 0.19461563229560852], "prob": [0.03666416555643082, 0.9436471462249756]}, {"target": [1], "doc": ["aliases in script text be bad", "alias in interactive session do n't make sense due to the intellisense ."], "issue_sim": [0.2758477032184601, 0.15417516231536865], "prob": [0.0022096249740570784, 0.9846709966659546]}, {"target": [2], "doc": ["i think this could be a good fit  if we follow @wostex 's suggestion", "although , a <tag> or <tag> would make most sense in my mind", "this could open the door for pass around event names+handlers , which would shortcut the  repetitive template assignment ."], "issue_sim": [0.08077874779701233, 0.09448671340942383, 0.2424495667219162], "prob": [0.02714809589087963, 0.2679124176502228, 0.7778028845787048]}, {"target": [0], "doc": ["have all the event there , in one place , in the template give you a good idea of what the component react to .", "i be not sure put some logic elsewhere will help achieve that goal", "sorry for shoot down the idea :x"], "issue_sim": [0.35926878452301025, 0.10277003794908524, 0.01127837598323822], "prob": [0.8925632834434509, 0.046834394335746765, 0.027474112808704376]}, {"target": [0], "doc": ["yeah this kind of namespace - ing would be really beneficial and result in clean code .", "example from a personal project :", "at the moment all ui describe variable live in", "yet ui manipulator just live in <tag> and be prefix <tag> which make , imo , some , in fact consistent , yet typo prone code e"], "issue_sim": [0.333644837141037, -0.05787676200270653, 0.08955036103725433, 0.3786606192588806], "prob": [0.9819988012313843, 0.0003296246286481619, 6.131461850600317e-05, 0.5574469566345215]}, {"target": [11], "doc": ["i be ask to post my idea here :)", "this feature request be for @angular / service - worker", "the current api be not very user - friendly", "* * so far , in order to check for update , i have to do the follow :* *", "- call checkforupdate  every n minute", "when it return , * * i do n't know if the check be successful and if there be an update * *", "- i have to subscribe to swupdate", "available  , and i can act accordingly , for example prompt the user", "available  * * seem to fire only once * * , i need to save  that an updateavailableevent be available  seem to be fire twice in a row from time to time , i have not be able to reproduce it consistently", "activateupdate  also do not give my anything useful in return", "- finally , i be have problem update my service worker on an android tablet where my pwa have be \" instal \" , whereas it work when run in a browser", "how i would like the api to be :* *. - checkforupdate  return observable < updateavailableevent > if there be an update , or undefined if not . and an error if the check fail. - activateupdate  return observable < boolean > with true if it be successful , or false if not", "do this make sense"], "issue_sim": [0.034713536500930786, 0.3836711049079895, 0.21023878455162048, 0.2048703134059906, 0.00882556103169918, 0.28781312704086304, 0.088985376060009, 0.11441176384687424, 0.24495287239551544, 0.05125965178012848, 0.3807821571826935, 0.42809978127479553, -0.03811146318912506], "prob": [0.002715770388022065, 0.0061377957463264465, 0.0009078563307411969, 0.0032581023406237364, 0.0013851430267095566, 0.004962218925356865, 0.00046023036702536047, 0.0007259014528244734, 0.20188143849372864, 0.0003334820503368974, 0.09097310155630112, 0.006008231081068516, 5.009974120184779e-05]}, {"target": [1], "doc": ["here be a break change :", "the author of <tag> will have to propagate the strict type of <tag> out , possibly break its consumer ."], "issue_sim": [0.13385680317878723, 0.25750625133514404], "prob": [0.11574302613735199, 0.7602410316467285]}, {"target": [0], "doc": ["i think it should match the default function call behavior : if the number of argument in the call do n't match the function arity , the game should break and the debugger open with an error .", "imo set the parameter to <tag> at the engine 's may lead to confusion too , especially because godot still ca n't debug inside thread"], "issue_sim": [0.4184781312942505, 0.37754905223846436], "prob": [0.7849836945533752, 0.222154900431633]}, {"target": [0], "doc": ["if i be not wrong you want name type argument and partial inference . # <number> , # <number> and # <number> all revolve around the same request , syntax aside ."], "issue_sim": [0.47022441029548645], "prob": [0.9999357461929321]}, {"target": [6], "doc": ["because we already support too many language as build - in", "most use case be already cover , so there not a lot of reason to add on new language to maintain", "we have a language for basic programming  , two for performance  and one for artist / game designer", "there be no reason to add another language as build - in just because some people ca n't handle learn a new language", "honestly , i definitely do n't think this should be add to the core", "it would be well add via a plugin like any other language bind", "we already have enough work on maintain the current language .", "and no , i do n't think we can reuse the visualscripte 's code"], "issue_sim": [0.08553071320056915, 0.1798723042011261, 0.2110433280467987, 0.11483646929264069, 0.04682574421167374, 0.16194461286067963, 0.1327267289161682, 0.08749253302812576], "prob": [0.015094790607690811, 0.0780891552567482, 0.009853053838014603, 0.20297211408615112, 0.00980609841644764, 0.009182179346680641, 0.02772483415901661, 0.03655574098229408]}, {"target": [1], "doc": ["i be for the <tag> keyword , it wo n't even break compatibility .", "instead , make <tag> and <tag> private by use <tag> , would change thing for a few use it for other reason"], "issue_sim": [0.22582337260246277, 0.18351362645626068], "prob": [0.5085251927375793, 0.5901287198066711]}, {"target": [1], "doc": ["this do n't repro for i", "i create a folder with a a few file in it , set they to be foded , then <tag> and <tag> . the item remain foded ."], "issue_sim": [0.034804441034793854, 0.29814061522483826], "prob": [0.0048578050918877125, 0.9869531393051147]}, {"target": [2], "doc": ["i be still not convince that multiple root be even need", "if the core team be currently work on support it then that be great , but i do n't feel like they should if it be not on the roadmap already", "every time i 've think _ \" hey i might need multiple root node for this , \" _ it put i on a dangerous path of add too much complexity to a single component .", "i * always * end up with a well , simple solution that live well within the single root node paradigm", "most of my solution for the above usually rely on _ scope slot _", "i highly recommend learn how to use they well", "you will never need to think about multiple root node again"], "issue_sim": [0.2306932806968689, 0.3541067838668823, 0.4694085121154785, 0.31252986192703247, 0.13832440972328186, 0.0188603475689888, 0.2625805139541626], "prob": [0.08270683139562607, 0.579574704170227, 0.7719327807426453, 0.0855884924530983, 0.01716335117816925, 0.01189663726836443, 0.004104022867977619]}, {"target": [3], "doc": ["my <number> cent on this :", "if you be make a big enough project , you be go to end up with a lot of script  in your project folder anyway", "stuff one - liner into build - in could spare you a couple of file in the project directory but in the end it would n't be much difference", "remove build - in could also theoretically promote well project dir organization as the place where you could put a script in a fire - and - forget manner would be go , which would make you actually think of where to put it ."], "issue_sim": [0.04700600728392601, 0.34249866008758545, 0.39845070242881775, 0.3158860504627228], "prob": [0.008141854777932167, 0.21972058713436127, 0.3316163420677185, 0.47207051515579224]}, {"target": [0], "doc": ["i would support jit compile for gdscript as long as it do n't mean the end of the language  as it be now ,", "- add a new * * static * * variable type , which in turn can be create by way of do something like", "<tag> or something  , but visible in the form of performance when the game be run", "the idea of use c++ here would mean that the godot developer would not have to add a bunch of new library to the source"], "issue_sim": [0.5209441184997559, 0.2627532184123993, 0.21805204451084137, 0.48997268080711365], "prob": [0.26442497968673706, 0.1535574346780777, 0.010642088018357754, 0.2263384461402893]}, {"target": [2], "doc": ["@posva because static attribute be always treat as strings", "its nice and clear", "if you need a number but do n't want to bind it to some property just use a colon - it will be treat as an expression and will be convert into a number .", "same go for booleans", "it be nice because it be explicit", "be it hard to use a colon when you need a number"], "issue_sim": [0.21107885241508484, 0.04506659135222435, 0.49896448850631714, 0.17831945419311523, 0.09722763299942017, 0.21165111660957336], "prob": [0.012056057341396809, 0.011285428889095783, 0.6166943907737732, 0.0019850863609462976, 0.012696865946054459, 0.04878100007772446]}, {"target": [0], "doc": ["hmm , i think <tag> would be useful , in case prop or value of prop be n't pass , that could be more logical imo , because false be false , true be true , undefined be when it be miss .", "but yeah , not a big deal"], "issue_sim": [0.5811841487884521, 0.044370297342538834], "prob": [0.9440841674804688, 0.013345819897949696]}, {"target": [2], "doc": ["fyi you can use <tag> and <tag> to easily pass down thing to the element you want", "you can have multiple root element in functional component :", "personally , i actually like the fact that we only have one root as it clear out the question you just list because there be only one possible answer"], "issue_sim": [0.45512285828590393, 0.44717472791671753, 0.274333119392395], "prob": [0.30292099714279175, 0.13020366430282593, 0.4194541275501251]}, {"target": [4], "doc": ["i do n't think it be that weird", "in my case i have some radio button and select a different one require some other part of the view to be update", "it happen that there be two part of the view that need updating and i already have two separate function to update each part of the view", "as i say above , i be use decorator , so think i 'd just add a <tag> decorator before both of those function , but at the moment only the second one get call because it overwrite the first one", "it be probably possible to change the definition of the decorator so that this work without allow an array  , although this seem a bit hackish and it would n't support different watch option .", "if <tag> accept an array as i suggest in my comment it would be very easy to design the <tag> decorator to support this scenario"], "issue_sim": [0.08895387500524521, 0.26977479457855225, 0.38049638271331787, 0.6352447271347046, 0.614858865737915, 0.5140330791473389], "prob": [0.006254337262362242, 0.4848882257938385, 0.012053546495735645, 0.11635302007198334, 0.1554488092660904, 0.14925582706928253]}, {"target": [0], "doc": ["i ca n't see it work on a phone , tbh , due to available screen space limitation , but why not on tablet ?"], "issue_sim": [0.026540391147136688], "prob": [0.9999982118606567]}, {"target": [1], "doc": ["* * tldr ; * * parent - child selector would provide scope for custom selector and when select native element", "another reason for parent - child selector would be to allow scope of selector , especially now that ngmodules apply every declaration to every component within itself .", "for instance : before , i could override table tag with custom component by add my table directive to the component use the custom table without it bleed into other component", "now , anywhere a table tag be use in the module , my custom table directive be be apply , cause unexpected behavior", "if i could scope my selector :  i could apply one custom attribute to the table and then be assure that any tr tag which do not reside in <tag> would not be select", "normally i would just add an attribute to the child tag , but from a plugin perspective , i would rather my user only have to add one attribute to the table tag :", "rather than use :", "which become burdensome to use , especially when there be already multiple input and output directive necessary for the plugin basic function", "and since table element have specific display property set by the browser , it also do n't make sense to use custom tag selector like"], "issue_sim": [0.5726360082626343, 0.6008317470550537, 0.4711853861808777, 0.41397473216056824, 0.44417595863342285, 0.45855528116226196, 0.020796556025743484, 0.31702008843421936, 0.41629794239997864], "prob": [0.015407636761665344, 0.19032125174999237, 0.08835755288600922, 0.004074868280440569, 0.05402235686779022, 0.17312735319137573, 0.00010226589074591175, 0.005570495501160622, 0.024685218930244446]}, {"target": [0], "doc": ["add to this : i think it might be nice to have human readable label fallback , i.e. :"], "issue_sim": [0.40201446413993835], "prob": [0.9999833106994629]}, {"target": [0], "doc": ["for your own component , one should prefer pass in prop to change the component 's behavior .", "if it be a third party component , then i guess i could see the use case , since you ca n't edit the source of it very intuitively"], "issue_sim": [0.5883902907371521, 0.41413095593452454], "prob": [0.9156369566917419, 0.10555611550807953]}, {"target": [1], "doc": ["do we understand each other", "the <tag> be totally in different place than component and other element inside monorepo structure .", "edit : sorry , i mean ngmodules , of course"], "issue_sim": [0.09830155968666077, 0.2594931423664093, -0.043377477675676346], "prob": [0.017031550407409668, 0.926427960395813, 0.0062716007232666016]}, {"target": [4], "doc": ["if you be not re - set data object as plain json which will kill off their prototype ,   you could create instantiate   class base object with root / nest object method since prototype method / getter / setter be not proxie by vue , but still accessible via the $ datum  itself", "only problem be you do n't get compute cache unless you manually import those nest getter into an optionally namespace flat vue <tag> structure in order to manually proxy into they", "i have a custom haxevx compile - time macro that do this , but haxevx be n't vanilla vue", "nested accessor for vue typically would have to exist in nest   vue component or vuex module rather than object - orient nest accessor , else set up flatten \" object__propertyname \" proxy access to they", "however ,   i think use non compute nest   access of object   method be n't much of a problem for this case though , as long as you do n't reset yr datum as plain json and you do n't need cache ."], "issue_sim": [0.48219215869903564, 0.42213141918182373, 0.3011256456375122, 0.3736358880996704, 0.3457960784435272], "prob": [0.4638274908065796, 0.18771156668663025, 0.026294110342860222, 0.3836594820022583, 0.08293213695287704]}, {"target": [1], "doc": ["@markekraus i second that", "it be easy to merge the multiple page in script , but not trivial to unwind it if merge in cmdlet .", "unless there be a particular efficiency gain from append they in the cmdlet that be", "do the project have any specific single responsibility type guidance for thing like this"], "issue_sim": [-0.06148868054151535, 0.3991205096244812, 0.10050085186958313, 0.0211563128978014], "prob": [0.019659781828522682, 0.9128850102424622, 0.046039801090955734, 0.022057458758354187]}, {"target": [1], "doc": ["we have the same problem", "we wrap unknown return type into an additional promise and can get stick with a resolve type of <tag> if the original type be a promise .", "this nest promise however be problematic :", "here , <tag> be wrongfully see as a <tag> while <tag> be correctly see as <tag>", "why do <tag> and <tag> behave differently", "also why ca n't we assign a <tag> to a <tag> variable", "this be valid js since nest promise always unwrap"], "issue_sim": [0.023237060755491257, 0.4216316342353821, 0.22974027693271637, 0.2971675395965576, 0.23515835404396057, 0.11253000795841217, 0.5060276985168457], "prob": [0.0012320162495598197, 0.9342405796051025, 0.005435708910226822, 0.5075487494468689, 0.00088683603098616, 0.0035328816156834364, 0.0019312385702505708]}, {"target": [3], "doc": ["i think this overcomplicate the problem", "it be quite straightforward if what you need be just sync rendering of head element", "vnode be just object in the shape of <tag>", "you be essentially write a function that serialize a few such object into html string ... it probably be just <number> line of code without have to patch anything in vue itself ."], "issue_sim": [0.04603923484683037, 0.2836899757385254, 0.1959688514471054, 0.5080708265304565], "prob": [0.039194755256175995, 0.043447062373161316, 0.0039938450790941715, 0.8340854644775391]}, {"target": [1], "doc": ["a good idea for a plugin", "but officially maintain two visual scripting system would be a pain , and for little gain ."], "issue_sim": [0.15928226709365845, 0.21136526763439178], "prob": [0.033818431198596954, 0.9206778407096863]}, {"target": [1], "doc": ["both of those form be valid in class", "would be reasonable to support both in interface for consistency sake ."], "issue_sim": [0.10070466995239258, 0.3684290647506714], "prob": [0.027621978893876076, 0.9116089940071106]}, {"target": [18], "doc": ["to unify some of the stuff which i raise in # <number>", "with non - us , culture select    <tag>   return \" <number> january <number> 00:00:00 \" which be   * * what most user would expect * * and therefore * * good * *", "if the culture be us it return \" thursday , september <number> , <number> 12:00:00 am \" , still * * what user would expect * * however use <tag> make a * * non - portable script * * because the output for a give input be n't consistent , and therefore * * bad * *", "cast    with <tag> or <tag> or <tag>   * * always use invariant culture", "if you be on en - us   <tag>   show the time use <number> hour clock where the en - us locale use <number> hour with \" am / pm \"   if you be in france and use \" , \" instead of \"", "\" for your decimal point \"123,45 \"   might give an unexpected result because it use invariant", "<tag> ,   <tag> and <tag> use local  culture", "use these in a script with \" whatever the local culture happen to be \" can also produce non portable script", "if number will be in french format , it be well to state french culture explicitly than assume the script will only ever run with culture set to french", "stay with french we can see that * * the   <tag> operator sometimes support local culture and sometimes invariant", "compile cmdlet parameter seem to follow <tag>   so with french select   <tag>   understand that \" janvier \" be the first month of the year in this culture but    <tag> fail because a space be not accept as a separator", "as a side note , <tag> wo n't process _ either _ form", "i be not sure how <tag> link to <tag> in   what @daxian - dbw   say above :", "when we write <tag>   it   look like a cast , although it be really add an argumenttypeconverterattribute   that _ will do a cast", "_    if would be odd if   the result be not the same as", "it _ could _ have be create to do the same as", "but people would n't expect this version", "this be the solution for the proxy - function case , not to specify a type in the param block and to the use   convert inside the function", "the inconsistency of -as and the different handling of date time parameter in different kind of command be annoying , but the problem that would result from make everything consistent be far great .", "it be worth ensure that help for datetime parameter say whether they accept local format or require invariant"], "issue_sim": [0.01674749329686165, 0.17027392983436584, 0.40848830342292786, 0.35499346256256104, 0.19644232094287872, 0.31369277834892273, 0.25400686264038086, 0.16535136103630066, 0.20700964331626892, 0.14933335781097412, 0.5734361410140991, 0.05899100750684738, 0.065575510263443, 0.15021635591983795, 0.0720939114689827, 0.018958285450935364, 0.02094217576086521, 0.4333110451698303, 0.38177919387817383, 0.28425174951553345], "prob": [0.0058688027784228325, 0.000612603616900742, 0.02768365852534771, 0.001681285910308361, 0.047326840460300446, 0.001357479253783822, 0.000700396834872663, 0.0010353205725550652, 0.028605738654732704, 0.00031888371449895203, 0.004841931629925966, 2.6439396606292576e-05, 4.3943557102466e-05, 0.005499066319316626, 4.0549210098106414e-05, 0.0003554336726665497, 9.598725227988325e-06, 0.014611384831368923, 0.08241420984268188, 0.0034167550038546324]}, {"target": [0], "doc": ["now that i think about it , another option would be stringsonly  .", "i 'll add it to the proposal"], "issue_sim": [0.004650449380278587, 0.014819405972957611], "prob": [0.9915995597839355, 0.0010951344156637788]}, {"target": [0], "doc": ["this would be very helpful in modern nodejs project try to use esm module .", "this will be more and more recurring upon tc39 module proposal be finalize"], "issue_sim": [0.5281175374984741, 0.2218778431415558], "prob": [0.7236034274101257, 0.032790407538414]}, {"target": [0], "doc": ["i think the default fg / bg color should be decouple from the <number> ansi color , and instead be separately be define .", "that be how pretty much all unix terminal do it"], "issue_sim": [0.4798440635204315, 0.21167360246181488], "prob": [0.9718819856643677, 0.00246142758987844]}, {"target": [5], "doc": ["@posva yes , you be right :)", "but firstly i ca n't use <tag> sometimes", "for example , if user have many - many talk  and not refresh page for day , the performance issue will be :) but i agree it be a very good approach and use it ;)", "but you be right , that i need in app level compute property", "and i use vuex :)", "but i need compute property for each item in array ... but i can only define compute property on module level .", "and ca n't to define compute property on each item of array property in module :) but i very want to do it :)"], "issue_sim": [-0.10101546347141266, 0.02546638622879982, 0.36164844036102295, 0.28380680084228516, 0.09702063351869583, 0.46946388483047485, 0.47435247898101807], "prob": [0.00032181257847696543, 0.0014862105017527938, 0.7745287418365479, 0.001966985175386071, 0.000248653203016147, 0.7708067893981934, 0.06641390174627304]}, {"target": [0], "doc": ["as an alternative we could use iterator protocol which work with way more iterable structure than just array and array - like"], "issue_sim": [0.586639404296875], "prob": [0.9999938011169434]}, {"target": [1], "doc": ["that be my concern as well @isazonov", "if we put all of dsc into class and nothing else , there simply be no alternative option when something do n't work quite right / simply fail to work the way someone need or expect it to .", "there be so many issue around class that , while i wholeheartedly think this be actually a really good way to go , i be _ extremely _ wary of even imply it be a good idea to do this without fix a * * lot * * of the outstanding issue and miss feature in powershell 's class support", "this will either be a very good decision , or a really costly decision  , and it really do all depend on the foundation be in place or not"], "issue_sim": [0.07620909065008163, 0.24774718284606934, 0.3549917936325073, 0.01818244159221649], "prob": [0.004188155755400658, 0.7406420111656189, 0.46244415640830994, 0.05324876680970192]}, {"target": [1], "doc": ["/cc @joyceerhl who be own the remote hub file system implementation", "for anycode this be currently opaque and it simply consume thing via <tag> .", "that make it very nice and simple for i but i actually never really know when i be benefit from blob - cache or cause individual fetch - request", "for the <tag> approach there be safari which do n't support it", "a long , long time back we use index - db to share datum between various worker since all can access datum without postmessage - call", "tho , there be still some deserialization happen"], "issue_sim": [0.23065179586410522, 0.14764079451560974, 0.1423402726650238, 0.07432273030281067, 0.3731839954853058, 0.1286933869123459], "prob": [1.5923751561786048e-05, 0.869546115398407, 0.22587257623672485, 4.9459715228294954e-05, 0.0026966999284923077, 6.142709025880322e-05]}, {"target": [2], "doc": ["i absolutely do believe that get 3", "0 out there and focus on the follow release  should take priority over this , for the record", "i know why people do n't like to work on buildsystem  and there be this whole \" opportunity cost \" thing , ie . when the time spend  on improve the build system could be spend on improve the project itself .", "and ultimately , scon really do \" just work \" which for most developer out there will probably be good enough , so while this be something that i hope do eventually happen , i be not hold out my breath for it for 3", "1 or even 3", "2 , if it even garner enough support to actually end up be work on to begin with", "all this say , i might kickstart the poc later this week in my fork , for those who be willing to follow the progress on that  , but i wo n't be open a pull request for this for a while most likely"], "issue_sim": [-0.012854745611548424, 0.010545585304498672, 0.4338024854660034, 0.201282799243927, 0.034796152263879776, 0.10089278966188431, 0.3003397583961487], "prob": [0.0003857417032122612, 0.059101272374391556, 0.5533212423324585, 0.38147035241127014, 0.00019899479229934514, 0.010000431910157204, 0.39608389139175415]}, {"target": [7], "doc": ["so i be not say   this to continue argue but just make a point for othe who come here", "both the case @rkeithhill point out and many other be well think out and in case where they deviate from well - establish dev principle , they be usually follow well - establish op principle where the cost and intuitiveness be n't lose", "case in point , <tag> be already an establish operator for shell redirection", "once you know about this and know of <tag> , you will likely never have trouble about this", "in this case , sysadmin have be ahead of the curve to make process launch straightforward", "the programming language way of do it be not canonical but give that process launch be n't really the bread and butter , they can get away with it", "although at least one language that i know of- scala , have process relate api that make they as easy as shell to handle", "speak of <tag> , besides a \" convention \" that most on the bash / ksh side do n't even think of at first usage and nobody like , i do n't see anything go for it in the current form .", "i use <tag> all the time know fully well that it capture output", "yet when i write return statement on a function and see in my shell status that the function return value be in shell but the assign value be output , i scratch my head", "good thing i be not alone", "7 million google hit for <tag> and go so far back as page <number> , i find a question that deal with exactly this : ' <url> '", "at some point you have to break from convention if it help make progress", "one of the usp of microsoft be it do n't break backwards compatibility which be what make it so reliable", "so i would n't want they to break anything but create a very straightforward simple operator would hurt nobody  )", "@vors maybe take inspiration from scala process api", "i have n't do this for a while so its probably even easy than this but quick intro : you can launch process like <tag> , which be the equivalent of <tag> in powershell", "you can also do  <tag> and now x have the return value and the <tag> have capture output", "clean , very elegant , break no assumption"], "issue_sim": [0.2192201018333435, 0.10832399874925613, 0.3472751975059509, 0.007725994102656841, 0.10407146066427231, 0.22523140907287598, 0.3344852328300476, 0.27730369567871094, 0.19591158628463745, 0.43936657905578613, 0.09652222692966461, 0.14532199501991272, 0.027473209425807, 0.37241989374160767, 0.42218929529190063, 0.27792808413505554, 0.28966575860977173, 0.36118650436401367, 0.20598022639751434], "prob": [0.0018535938579589128, 0.06609330326318741, 0.00026264891494065523, 0.001283304300159216, 0.002791281323879957, 0.006355050019919872, 0.0005112941726110876, 0.16811902821063995, 1.631957638892345e-05, 0.016269823536276817, 2.470088020345429e-06, 0.003811784088611603, 1.367023833154235e-05, 0.0002049103641184047, 0.00227822782471776, 1.5114308098418405e-06, 0.09714793413877487, 0.0005789591814391315, 0.0014237285358831286]}, {"target": [0], "doc": ["in my case , i be try to do this on a disable button element  , but apparently chrome do n't fire the necessary event , and the element should be wrap in a div or similar to catch the event ."], "issue_sim": [0.5216368436813354], "prob": [0.9999377727508545]}, {"target": [0], "doc": ["thank , that be a nice method of get they into controller , but it would still require a bit of code to pull the routerlinks out of the array and associate they with other component in the controller .", "be able to directly reference in the view seem much more elegant", "for reference , i be try to do thing like this :", "that be a nice and self contain bit of view template that require no extra logic in the controller", "your method would require involve the controller", "now , i assume it be possible to use <tag> in a custom directive , and that may be what i do", "however , it still seem fairly trivial and quite useful to be able to refer to and directive directly from the view"], "issue_sim": [0.38641929626464844, 0.31042295694351196, 0.06994065642356873, 0.23715826869010925, 0.12534505128860474, 0.5922749042510986, 0.3994167745113373], "prob": [0.9818456172943115, 0.0016796948621049523, 9.233759192284197e-05, 0.037721775472164154, 0.011911136098206043, 0.05485536903142929, 0.06448037922382355]}, {"target": [4], "doc": ["let take the <tag> example", "menu have a list of child menuitem component", "see the below code snippet", "now if you have <number> different component that use menu - item component on the page and you want to style the menu - item differently on the page", "use global style  in the menu component  will also change the style of the 2nd menu item on the page unless some other unique identifier be use to scope the style .", "nothing be stop i from use bem , but why use it when there be scoped style that can solve the problem"], "issue_sim": [0.1478259265422821, 0.4103601574897766, 0.20692870020866394, 0.5537338256835938, 0.5559958219528198, 0.39559048414230347], "prob": [0.028772050514817238, 0.021105187013745308, 0.002501634880900383, 0.1788208931684494, 0.43446922302246094, 0.023645766079425812]}, {"target": [3], "doc": ["@bevinhex why not use a <tag> in this case", "constant be \" static \" by nature", "in any case , if you need local state , create a new object", "i do n't see it a problem to use object when you need more persistent datum ."], "issue_sim": [0.1277158558368683, 0.25858527421951294, 0.1205313578248024, 0.14078150689601898], "prob": [0.0008286889642477036, 0.05216818302869797, 0.004185958299785852, 0.9672685265541077]}, {"target": [10], "doc": ["hello , i take the liberty of intervene because i share the same problem", "it be desirable to avoid many extra space , like <number>  <tag> in :", "<tag> <tag>long long long paragraph", "that do not contain new line", "but actually be <number> char long", "and would hardly fit in one line <tag> <tag>", "for various reason :", "- the one describe by @bravier ,", "- it confuse human  translator ,", "- indent or deintende the surround code block cause problem too", "be there a way to use <tag> differently  ` ? ) to allow break string on multiple line ?", "for instance , in many language it be usual to write :"], "issue_sim": [0.06023571267724037, 0.14372754096984863, 0.21309389173984528, 0.19443245232105255, 0.18127380311489105, 0.21165822446346283, -0.041027940809726715, 0.06535180658102036, 0.0893818661570549, 0.2721289098262787, 0.5490899085998535, 0.07167400419712067], "prob": [0.060466594994068146, 0.3651300072669983, 0.02011297084391117, 0.006235272157937288, 0.004156805109232664, 0.005444954615086317, 0.004309814423322678, 0.007864933460950851, 0.015523958019912243, 0.05880764499306679, 0.13708628714084625, 0.004625869449228048]}, {"target": [0], "doc": ["i think this be a duplicate of # <number> ."], "issue_sim": [0.031789179891347885], "prob": [0.9999176263809204]}, {"target": [2], "doc": ["a <tag> might be more appropriate than <tag> , so that you can pass in the currently select span", "i think in vs this would roughly map to an implementation of", "i do n't see any cause for concern with the propose command / response schema ."], "issue_sim": [0.4012215733528137, 0.3087621331214905, 0.2515870928764343], "prob": [0.7208951115608215, 0.014790220186114311, 0.10615266859531403]}, {"target": [0], "doc": ["look like a bug , the type signature say we that there be third option for flag , but under the hood the implementation do not take this option into account ."], "issue_sim": [0.27864688634872437], "prob": [0.9999812841415405]}, {"target": [1], "doc": ["do n't think it be a good idea", "<tag> be not call on service provide via <tag> , only on service provide via <tag>  .", "and service provide via <tag> must be annotate with <tag>", "only annotate service can be initialize eagerly", "so , to i , it make much more sense to use annotation"], "issue_sim": [0.14115719497203827, 0.36183154582977295, 0.2577340006828308, 0.4513833522796631, 0.35623300075531006], "prob": [0.021347085013985634, 0.8259453177452087, 0.037489570677280426, 0.014200344681739807, 0.015834441408514977]}, {"target": [3], "doc": ["from study the internal , it seem the two option be :", "make the lodash template compiler able to handle await ( which would probably mean implement a custom template compiler for the <tag> set", "expose an api for synchronously render vnode in the <tag>", "the simple option would be rewrite the template compiler for the <tag> to allow <tag> expression , this would also remove the lodash template compiler dependency"], "issue_sim": [0.026529695838689804, 0.3624208867549896, 0.5556252002716064, 0.36110424995422363], "prob": [0.06548751890659332, 0.14285947382450104, 0.009514854289591312, 0.42850181460380554]}, {"target": [0], "doc": ["as you explain yourself , for parent / child event , you can already<tag> , so i think @posva be interested in understand what use case require to emit and listen to an event * within the same component * , instead of , for example , call a method if <tag> be set in the component 's local datum .", "it be not something i 've ever come across so far", "the reason for ask for the use case be this : add a new api for the purpose of a \" fringe use case \" be n't really anything we would consider right now , so we have to understand the prevalence and severity of the use case for any new api / feature we add"], "issue_sim": [0.6608698964118958, -0.04647032544016838, 0.37543582916259766], "prob": [0.8473742008209229, 0.013390369713306427, 0.4166746735572815]}, {"target": [2], "doc": ["@yyx990803 there be no way to use getter on every item of array", "excuse i , but i think you be not right in this question", "that be why somebody try to use dynamic module , another person try to create <tag> for each item in array .", "and every time you say that \" we have getter , we have compute property \"", "but they be not helpful with array", "sorry for negative comment", ":( i really very like vuejs", "but this problem make i sad every time i face it"], "issue_sim": [0.40474772453308105, 0.03314068913459778, 0.31793490052223206, 0.35735684633255005, -0.0035813404247164726, -0.031783927232027054, 0.2866043448448181, 0.09183208644390106], "prob": [0.0007200484978966415, 0.01725209876894951, 0.5812265276908875, 0.1656983643770218, 0.0016371578676626086, 0.0005627762875519693, 0.003767061745747924, 0.0009443372837267816]}, {"target": [0], "doc": ["look through the comment in that issue  , i would say that this issue should be completely and utterly block on massive improvement in more useable and complete class support in ps , with the inclusion note in that issue by @seeminglyscience .", "in other word , if this be the route y' all wanna go down , please be * * absolutely sure * * that the underlie infrastructure here be actually up to the task and much more complete than it be currently , so we do n't have hundred or thousand of folk depend heavily on a subsystem that be fundamentally incomplete", "foundation be extremely important if you be try to put all of the dsc infrastructure on top of it and it alone"], "issue_sim": [0.11460554599761963, 0.10029618442058563, 0.2591044008731842], "prob": [0.8439765572547913, 0.5982993245124817, 0.0187731571495533]}, {"target": [0], "doc": ["static var will allow to make real singleton , autoloade script and scene be not singleton and wo n't   be replace by one  , it may also help to translate quickly structure from other engine / framework ."], "issue_sim": [0.33149170875549316], "prob": [0.9999922513961792]}, {"target": [0], "doc": ["a practical problem would be , however , how the framework can decide at which point the ondestroy hook can be run ?", "also this come at the cost of framework bundle size which the angular team be try to prevent", "other feature that have idiomatic solution be reject because of that and i do n't really see how this would be any different", "you only pass the dependency from the factory to the constructor in a single place", "if command share dependency you can even just create an abstraction for that as well"], "issue_sim": [0.29417499899864197, 0.23588824272155762, 0.15274667739868164, 0.29863691329956055, 0.3875057101249695], "prob": [0.547837495803833, 0.04042291268706322, 0.1444517970085144, 0.021191958338022232, 0.008047303184866905]}, {"target": [1], "doc": ["@posva your example be work because you be use <tag> in the 2nd component <tag> and you be import the button into the root <tag> component", "in my example , button be import by the <tag> component so its nest inside the 2nd level component .", "here be my example :"], "issue_sim": [0.6435784101486206, 0.5802540183067322, 0.013699685223400593], "prob": [0.29345518350601196, 0.8941907286643982, 0.004045769106596708]}, {"target": [0], "doc": ["for user experience , in a spa it be as simple as update the title on a route change .", "however , it be not deterministic when it may be need to update", "for example some use case could dictate open a model window be enough to change the title", "this be simple javascript , inevitably create an abstraction in vue to just change the document title be too much", "as say if use as a spa , which now day be become and   consider an anti - pattern , then your only real focus on meta data be the title for the ui experience", "which be simple to do and even a plugin would not cater for many use case , and will essentially be a wrapper to change the document title", "the real problem with dynamic meta information , fall to the server level", "at server level many tool can be use , many template engine and many other variant", "thus , suggestion and advice to a simple solution be good imho", "if vue dictate a setup or we officially stamp approval on a plugin , it will prevent choice of tooling out of scope of vue", "thus these be problem domain that be subject to what tool you use , which vue should avoid create friction with"], "issue_sim": [0.3268558382987976, 0.11830437183380127, 0.19371986389160156, 0.37323594093322754, 0.2933116555213928, 0.41648608446121216, 0.26639991998672485, 0.20696759223937988, 0.0443820096552372, 0.18573309481143951, 0.25316619873046875], "prob": [0.30551573634147644, 0.0034347432665526867, 0.015226038172841072, 0.0030046661850064993, 0.052855461835861206, 0.010596688836812973, 0.0005387040437199175, 0.00015231582801789045, 0.0002596860867924988, 0.017641987651586533, 0.0015564706409350038]}, {"target": [0], "doc": ["the highlight be pretty much my only concern with place the tab stop"], "issue_sim": [0.3832588493824005], "prob": [0.9995120763778687]}, {"target": [2], "doc": ["i like this syntax too :", "i suggest it to be an option that you append to an if case , because that be how other software with the feature do it", "but it could just as well be a new type of a condition block that you put event in in order to force their execution only one time when it become true . a trigger !", "for example we could nest the event under a trigger , which could be nest under an if case or other type condition check :", "it be good to note that the trigger once will trigger the event once when a condition be meet", "but it will also trigger once again if the condition become false and then true again", "trigger once force it to execute one time when meet", "it be not limit to trigger it only one time in the life cycle of the application", "instead it limit it to execute one time in the sequence of frame in which the condition be true", "we could call it ' the trigger operator '", "in any case - whoever implement it should decide what the good syntax would be"], "issue_sim": [0.20500779151916504, 0.3170435428619385, 0.543667733669281, 0.39129096269607544, 0.4527345299720764, 0.3961929976940155, 0.4043618440628052, 0.35754701495170593, 0.49946582317352295, 0.18017688393592834, 0.2898412346839905], "prob": [0.033513907343149185, 0.3393026292324066, 0.6842976808547974, 0.2412152886390686, 0.09839367866516113, 0.007177146151661873, 0.002132207388058305, 0.005536715034395456, 0.017912941053509712, 0.0008440451929345727, 0.040701836347579956]}, {"target": [1], "doc": ["yes , @sqal 's solution be a good one and with inline like @yyx990803 's show be close enough to what i have in mind", "this lead i to a deep issue though : if a rebind happen  and upon evaluation the condition change  , exist event subscription be * * not * * clean up . they will still  be dispose at the end of the component 's lifecycle but not when they ' should ' which be when v - on rebind .", "this may be an edge case that do not have a large impact for most scenario but just for reference :", "in my scenario i have a complex svg and need to  attach mouse over / out handler to specific element base on some logic", "the component be a long live one and the underlie data change lead to rebind where i need to attach the event handler to different element at each rebind - hence my need to dispose of the previous subscription so they do n't dangle orphan and sad and drink memory", "a typical solution - and what i be go to end up do - be to set up one ' top level ' event listener  and let event bubble up to it   but to explain my motivation for try it the vue way first , there be quite a bit of processing that have to happen in my handler which i have intend to pre - calculate   and bake right into the event subscription itself so that the handler have less to do  and be not invoke at all for element that do n't require it"], "issue_sim": [0.19868941605091095, 0.5219120383262634, 0.16592496633529663, 0.388480544090271, 0.5258738398551941, 0.5987983345985413], "prob": [0.1267833113670349, 0.5150677561759949, 0.030709579586982727, 0.04382331669330597, 0.05338800698518753, 0.24688312411308289]}, {"target": [0], "doc": ["i think it be too complicated , do we also need to consider custom event ?"], "issue_sim": [0.42519184947013855], "prob": [0.9999548196792603]}, {"target": [1], "doc": ["@groud that be a good point , but consider the ratio of programmer to artist in gamedev", "some of the great , most beautiful retro 2d game have be make with fusion <number> by artist who want to make game in an intuitive way that fit their way of thinking .", "here be a bit outdated showreel of fusion make game :", "they have many many succesful kickstarter project and game on steam - game on many platform", "people like to use this approach in visual programming - even professional team", "i would n't be present it here if i do n't see potential of expand the userbase"], "issue_sim": [0.20535898208618164, 0.2246856987476349, 0.14397424459457397, 0.07635988295078278, 0.16369913518428802, 0.07557448744773865], "prob": [0.0006333449855446815, 0.8358961939811707, 0.002317173173651099, 0.0020644667092710733, 5.553890332521405e-06, 0.003955741412937641]}, {"target": [0], "doc": ["with class level mean those variable that belong to a class  , not to instance or any scope , these be use sometimes like for global behaviour change or static pool of thing", "of course that tend to make a mess here and there , autoload script or node can be well organize and call group for mass change .", "be kind of pointless for the way godot work but could be nice to have they as option some day"], "issue_sim": [0.2054644078016281, 0.12442091852426529, 0.3201383948326111], "prob": [0.70168137550354, 0.8028839230537415, 0.002640591934323311]}, {"target": [1], "doc": ["who need a short version of a deprecate method", "clear be well than short imo  .", "i could rename <tag> to just <tag> though"], "issue_sim": [-0.019528884440660477, -0.0546136349439621, 0.03870696946978569], "prob": [0.7611402869224548, 0.23808196187019348, 0.14017707109451294]}, {"target": [0], "doc": ["actually , structural directive seem to work as parent now .", "still seem a bit awkward , but fairly usable", "i can inject dynamic variable <tag> into <tag> with :", "< summary > full example</summary >", "export class appcomponent {", "readonly version = version ;", "color1 = \" blue \" ;", "color2 = \" red \" ;", "const tmp = this", "color2 = tmp ;", "export class appmodule { }"], "issue_sim": [0.21316683292388916, 0.031090036034584045, 0.48628634214401245, 0.06712222099304199, 0.35459572076797485, 0.08865781128406525, 0.022678902372717857, 0.10425359010696411, 0.22192789614200592, 0.0872517079114914, 0.3705487847328186], "prob": [0.32795625925064087, 0.10933510214090347, 0.17842598259449005, 0.036693114787340164, 0.02828093059360981, 0.06860242784023285, 0.16705945134162903, 0.037410639226436615, 0.0454598143696785, 0.02282283641397953, 0.03210167586803436]}, {"target": [0], "doc": ["or set to a user define string .", "as in my use case : the result / value of a dynamic form be send to a pdf generation service that do n't know anything else", "break standard for practical reason be probably not good practice , hope that be not the case here"], "issue_sim": [0.10602361708879471, 0.28653866052627563, 0.21432898938655853], "prob": [0.1624356508255005, 0.605370283126831, 0.05598245933651924]}, {"target": [1], "doc": ["<url> be hard code <tag> as the folder ,", "probably because <tag> and <tag> be n't available in the current version of coreclr we be build against .", "look like these api be should be available in", "will revisit this once that work be complete"], "issue_sim": [0.20541897416114807, 0.09709040820598602, 0.08332587778568268, -0.03842771053314209], "prob": [0.02755873091518879, 0.9705877304077148, 0.04385937377810478, 0.031063277274370193]}, {"target": [0], "doc": ["the main problem be , in order for the a character rig to react to physical impact in such a manner , it need to move only the affected part of its joint .", "say , you attach a rigid body node to either a physical bone or bone attachement of your rig 's head", "but i doubt if the character would jerk its head when you call <tag> on that rigidbody , because the rigidbody be a child of the head bone , not vice versa", "and also , have to attach a rigid body or area node for each major bone would be problematic itself , as it be inconvenient and would make the rig setup still more cluttered than as it be now  , and most importantly , it could be bad for performance too since we be essentially double the number of collider"], "issue_sim": [0.3877248167991638, 0.3056986331939697, 0.3386242389678955, 0.32345515489578247], "prob": [0.6808145046234131, 0.0022067048121243715, 0.16141904890537262, 0.21176885068416595]}, {"target": [2], "doc": ["the current parameter binder be work as i expect too .", "you can get the desire output by use splatte :", "that say , it might be nice to have a convenient syntax for splatte unnamed / positional argument that take an array like :", "but to make it really convenient it should work on an array literal e", "not exactly sure what the syntax should be since today this do n't work with hashtable literal either"], "issue_sim": [0.27493903040885925, 0.21367347240447998, 0.4183482527732849, 0.3106808662414551, 0.3825809955596924], "prob": [0.8310413360595703, 0.023320019245147705, 0.7893993854522705, 0.0018667789408937097, 0.0011470330646261573]}, {"target": [1], "doc": ["iteration protocol do not ensure that iterator can be rewind  , which mean it will break when render function be call again", "also , array - like generally do n't simply read value from memory but do some extra work which should n't be repeat on each render .", "that be say i do n't think you would need to be able to iterate through array - like or custom object directly", "instead , you need array representation of underlying value  , which will always be a native array", "or possibly other build - in iterable , when they be support"], "issue_sim": [0.3619133234024048, 0.41116076707839966, 0.5867984890937805, 0.598510205745697, 0.16724476218223572], "prob": [0.1049027070403099, 0.6885237693786621, 0.08486323803663254, 0.004805265460163355, 0.010923541150987148]}, {"target": [3], "doc": ["@posva v - hide do not apply a class to the element when hide", "if it do this would be a non - issue", "would n't a class have to be apply via v - bind", "seem like a contrived way to go about hide an element and would make v - hide completely useless when do responsive design in a popular css framework ."], "issue_sim": [0.44354432821273804, 0.11306679993867874, 0.20260277390480042, 0.6123372316360474], "prob": [0.018117625266313553, 0.05750982090830803, 0.014220256358385086, 0.70085608959198]}, {"target": [0], "doc": ["it do n't make sense to i that vue have an excellent way of keep the url in sync with these navigational change but do not have a sensible way to keep metadata in sync along with it ."], "issue_sim": [0.452825665473938], "prob": [0.9999730587005615]}, {"target": [68], "doc": ["thank for open this issue , i think this be a topic where there be a big difference between the rationally good choice and what the majority will ask for", "the most important reason why more than one engine exist be because besides one - dimensional factor like performance in general purpose task or accessibility of the interface there be multi - dimensional factor like performance for specific situation  or usability for specific group of user", "so in order to find a place among other engine an engine have to pick a \" philosophy \"", "now a scripting language be an integral part of an engine , so the philosophy of the language should fit the philosophy of the engine , or at least it should n't contradict it", "so what be godot 's philosophy", "let 's look at some fact :", "- compare to godot every other major engine be bloated", "godot 's download be small than <number> mb , the whole \" installation \" be one executable that be less than <number> mb in size", "lumberyard on the other hand have an initial download size of about 5", "5 gb , currently my installation folder of it be 15", "the main reason for that be amazon 's philosophy regard dependency", "that initial download contain 10", "5 gb of build image of <number> dependency , and if you have work with amazon web service before you know that the aws sdk be not that different in that aspect , so it be not a matter of necessity or ability , it be a matter of choice", "for example while lumberyard include boost and lua , godot contain its own version of the most imporant stl container and use gdscript rather than lua , which keep the size down , remove dependency and make the code a lot more readable and accessible", "- godot 's source code be very accessible", "that start with the choice of the build system  which use python as a build language", "most other project use exist build system with proprietary build language or write their own proprietary build system , both of which have a negative impact on the readability of the build code", "the source code itself be also above average in that aspect", "it take i about the same time to find out how to write a single unreal blueprint node in c++ as it take i to write the code for my first pull request to godot", "that be not to say that unreal 's c++ code be unreadable , it be simply not as clean as godot 's as it use more macro and require the user to understand more of unreal 's default project code than godot", "- godot promote kiss and oo principle", "in order to illustrate that let 's look at some simple object in unity", "the first concept you be confront with in unity be that of gameobjects with attached component", "\" composition over inheritance \" as it be often call  be a successful pattern due to the flexibility it offer", "that flexibility come at a cost though", "if everything in your game be a gameobject you ca n't really get a reference to \" the player \" , because there be no player , there be just a gameobject that may or may not have a player component attach", "the unity developer see the same issue , sometimes you just want to create a button , not a gameobject with button component", "so what they do be this : they allow you to create \" a button \" through the editor interface which do actually create a gameobject with a button component attach", "in addition to that they route the most important member of gameobject through every component , so that now you can use a reference to a button just like you would use a reference to a gameobject", "you can ask a button for its position , you can ask it for a list of its component - even though the button be actually a component , not the object it be attach to", "so now we have a mixture of the two most popular way to describe a game world - composition base and in plain object", "but when you look at beginner ' project  you will find that unity also facilitate the third way to interpret a game world : procedural programming", "in unity every object be always part of a \" scene \"", "unlike in godot that term describe a top level part of the game  , mean that if an enemy want to shoot at the player it can just search it be current scene for the player and interact with it", "that be the core idea of procedural programming - you have a sequence of command that alter the state of the environment without regard for ownership", "of course technically it be still object orient programming , but as every object can expect to be part of the same scene you be enable to write code that behave like global code", "for example if you want to instantiate an object all you have to do be call \" instantiate \" and a copy of the templateobject will be instantiate and add to the scene", "there be no need to ask which scene to add the object to because there be always the one scene that everything be currently part of", "so unity promote a mixture of composition , object orient thinking and procedural programming", "godot on the other hand promote object orient thinking as for example every single object in your game can be build as a scene of its own", "those scene can be start by themselves , allow you to test they , alter they by themselves etc", "that in turn require you to build those scene in a way that do not require access the environment", "for example if an enemy want to interact with the player it be much more feasible to use signal to tell the underlying scene that an interaction be request or to simply require the scene to give the enemy a reference to the player", "you still can search the game scene for the player , but if you do that the enemy scene will not be able to run on its own , so that design simply do n't fit the tool as well", "so how do this make a difference regard the choice of scripting language", "c # be to language what unity be to engine", "c # 's philosophy have always be that if some feature would be nice to have it be add into the language", "just look at the list of feature that be add with each version : <url>", "now you may argue that have a feature be n't something bad , right", "you do n't have to use it , just leave it if you do n't like it", "unfortunately that be not true for a language", "with the importance of the internet today language be n't tool anymore , they be culture", "soon or later you will have to google for help , you will use module or object build by other , you will use new feature build by the community into the engine , and soon or later that will require you to use language feature that you never intend to use", "also if you be work in a team you will learn to appreciate use a language that promote a common coding style and do n't offer you dozen of way to write the same code", "now you may wonder if i mean to say that a language with less feature be always well than one with more feature", "of course that be not the case", "let 's compare how java solve the problem", "c # allow you to write unmanaged code", "just use the appropriate keyword and you can use it right in the same file", "it also allow you to write functional code use linq , which read like sql code and behave like functional code", "in order to completely understand what one file do you may need to know quite a lot about programming paradigm", "if you be write java you can use functional programming as well , you just have to write it to a separate file , use a different compiler and call it \" program clojure \"", "if you prefer to combine object - orient and funcitonal programming you can call it \" program scala \"", "the important part be that you be still write code for the jvm that can easily interact with code from other jvm language", "net - language have the same capability , it be just not use in the c#-philosophy", "they could just as well have decide to stick to one or two programming paradigm in c # and create a new language to add new paradigm , but instead they go with \" one language to conquer they all \" - which be totally fine , it be great to have a language like that", "you should just be aware of that philosophy and the choice you have as a programmer", "long story short : of all the language we have i think c # be just the bad fit for godot .", "it be a natural fit for unity , but if you have all those option then why choose a language that promote mix - and - matching of paradigms in an engine that promote clean oo - principle and kiss - programming in every other one of its part", "so if you think that c # would be a nice addition to godot then i be not disagree with you - i be merely say that alternative exist that be even well , that should be evaluate first and that would be immediately forget once c # be implement"], "issue_sim": [0.06464293599128723, 0.25929102301597595, 0.19428136944770813, 0.4643430709838867, 0.2365172803401947, -0.011591269634664059, 0.32237231731414795, 0.23359724879264832, 0.10361327230930328, -0.035802483558654785, 0.15183037519454956, -0.06092788279056549, 0.2678210735321045, 0.47964516282081604, 0.37485119700431824, 0.3554620146751404, 0.42446982860565186, 0.15009889006614685, 0.38671571016311646, 0.5118792057037354, 0.2096939980983734, 0.26875829696655273, 0.2751692831516266, 0.21412131190299988, 0.005830664187669754, 0.2815883457660675, 0.27434104681015015, 0.29022014141082764, 0.3301388621330261, 0.2115750014781952, 0.18093988299369812, 0.3099653422832489, 0.2423095852136612, 0.15967263281345367, 0.18056441843509674, 0.3641749322414398, 0.24843932688236237, 0.1268197000026703, 0.22892950475215912, 0.2714720070362091, -0.03101450204849243, 0.06686760485172272, 0.18724817037582397, 0.17384126782417297, 0.2813037037849426, 0.4491395950317383, 0.35983943939208984, 0.1102944165468216, 0.0011188555508852005, 0.08991464972496033, 0.1539127379655838, 0.1415199637413025, 0.35436850786209106, 0.29609036445617676, 0.27726227045059204, 0.04795689508318901, 0.33432483673095703, 0.3610524535179138, 0.13973252475261688, 0.32056406140327454, 0.26272064447402954, 0.5017581582069397, 0.3709731101989746, 0.5903444886207581, 0.36773884296417236, 0.454156756401062, 0.156033456325531, 0.4477672576904297, 0.3698109984397888, 0.4412160813808441], "prob": [0.24993540346622467, 0.008244901895523071, 0.024882595986127853, 0.06725667417049408, 0.002230191370472312, 0.0016453653806820512, 0.0009217389160767198, 0.03982972726225853, 0.0009020766010507941, 0.0007361364550888538, 0.0005221342435106635, 0.00014046761498320848, 0.024512987583875656, 0.009493635036051273, 0.00024836434749886394, 0.0007873618160374463, 0.014197691343724728, 0.0003399275301489979, 0.01595384255051613, 0.011484021320939064, 0.00017572735669091344, 0.0007437545573338866, 0.002057368867099285, 0.0020912117324769497, 0.00025407166685909033, 0.018763815984129906, 0.0009289660374633968, 0.0021299326326698065, 0.003728891722857952, 0.002703880425542593, 0.0006486381753347814, 0.0009432880906388164, 0.00017398853378836066, 0.006452339235693216, 0.0009831058559939265, 0.003454970195889473, 0.0042501213029026985, 0.0013399816816672683, 0.0005996551481075585, 0.06118989363312721, 8.934504876378924e-05, 0.00011689724487951025, 0.0031946899835020304, 0.005492508411407471, 0.00227138283662498, 7.028577238088474e-05, 0.0010230992920696735, 0.00015599279140587896, 0.00020661178859882057, 0.0004960569785907865, 5.5268072173930705e-05, 0.0002832268946804106, 0.007982850074768066, 0.003949735779315233, 0.006249850615859032, 0.00019683003483805805, 6.580891931662336e-05, 2.4100598238874227e-05, 7.924164674477652e-05, 0.0004539380024652928, 9.259505168301985e-05, 0.002999179298058152, 0.00022364576580002904, 0.0007904989179223776, 0.00018162187188863754, 0.013475212268531322, 0.0007096765330061316, 0.008463066071271896, 0.1496228724718094, 0.01810091733932495]}, {"target": [2], "doc": ["i think this be pointless , because :", "<number> ) game be always distribute with executable", "if you want to exploit godot to do something malicious , you can do. anyway , it be not that protect", "i think as a sandbox , webassembly will work much well in the future", "on tue , feb <number> , <number> at 7:28 pm , emmanuel leblond < notifications@github"], "issue_sim": [0.013801159337162971, 0.3044538199901581, 0.3881590962409973, 0.3449710011482239, -0.032909806817770004], "prob": [0.04718824848532677, 0.04705682769417763, 0.5845243334770203, 0.06058543547987938, 0.024408215656876564]}, {"target": [0], "doc": ["please use git submodule against <url>. that will remove some of maintenance pain .", "on sat , mar <number> , <number> at 7:10 am , est31 notifications@github"], "issue_sim": [0.25891661643981934, -0.06620702147483826], "prob": [0.8259694576263428, 0.19413739442825317]}, {"target": [3], "doc": ["you be right , i will probably just do that", "but i still actually like the function - base template", "it allow async operation in the template", "- make the bundle renderer easy to use , and more js templating  instead of <tag>", "- the documentation could be simplify", "- could potentially remove / deprecate string - base lodash template dependency", "* * with template function * *", "< html$ { context", "' ' + context", "htmlattr : '' } >", "$ { await context", "$ { result }", "< script>$ { bundle", "client } < /script >", "< /html > <tag> <tag>", "* * vs string template * *"], "issue_sim": [-0.007392385043203831, 0.18308715522289276, 0.2084241509437561, 0.5938445329666138, 0.16549333930015564, 0.37277498841285706, 0.1188562661409378, 0.09497296810150146, 0.07182592898607254, 0.026298832148313522, 0.034409262239933014, 0.017514387145638466, 0.06729623675346375, 0.20443511009216309, 0.41933247447013855, 0.15971913933753967], "prob": [0.017298715189099312, 0.3184420168399811, 0.02051668055355549, 0.1994694173336029, 0.0026162711437791586, 0.011299570091068745, 0.0055541968904435635, 0.0004324073379393667, 0.00015689143037889153, 0.0005038948147557676, 8.92876269062981e-05, 0.00026166089810431004, 0.00028601576923392713, 0.003269698703661561, 0.00894936267286539, 0.0006297781364992261]}, {"target": [0], "doc": ["yes , but the code and logic be share and ngmodel have the same problem ."], "issue_sim": [0.10168875753879547], "prob": [0.9998155236244202]}, {"target": [14], "doc": ["@isazonov   that be helpful , thank", "the documentation talk about the \" last _ operation _ \" , without define what _ operation _ mean in this context", "in practice , as you 've demonstrate , that mean it be about the last _ command _ or _ expression _", "by _ command _ i mean specifically mean something parse in _ argument mode _  , as oppose to an _ expression _", "i be not sure if there be an establish umbrella term for both  , but call the umbrella term \" command \" too be obviously not a good choice", "note that even if we assume that \" operation \" mean command or expression , the claim that <tag> reflect the _ last _ operation be n't always true :", "* * exception * * :", "even though <tag> succeed , <tag> still reflect the  failure of <tag>", "another exception appear to be when the last expression be execute inside a _ conditional _ :", "even though <tag> be the last expression evaluate - and be clearly evaluate successfully - <tag> still reflect the failure of <tag>", "there _ be _ a case where the command 's <tag> status be preserve , at least a command in the _ syntactical _ sense : if a command by the specified name can not be find :", "despite embed in an expression , the inability to find the command be reflect in <tag> - contrast this with <tag>", "yes , there be a difference between powershell not find the command and an invoked command report a non - terminating error , but be it worth treat these two case differently in term of their <tag> behavior", "* * conclusions :* *", "currently , make a command part of an expression invariably lose its <tag> status - except if the command name be n't recognize at all .", "* you could make the case that error in _ expression _ should always result in _ terminate _ error  that should be handle with <tag> , with <tag> only report _ command _ error , irrespective of whether a command be part of an expression or not", "do it really make sense to treat <tag> as a _ non_-terminate error , for instance"], "issue_sim": [-0.030370134860277176, 0.11055286228656769, 0.01825609616935253, 0.18468761444091797, 0.08746224641799927, 0.2703419327735901, 0.02354525774717331, 0.2660589814186096, 0.10018002986907959, 0.3054066002368927, 0.2011355459690094, 0.3300049901008606, 0.2891705632209778, 0.033094316720962524, 0.13270975649356842, 0.29622024297714233, 0.21443529427051544], "prob": [0.0038533350452780724, 0.09701261669397354, 0.007709347177296877, 0.0014462631661444902, 0.0018101402092725039, 0.0036692912690341473, 0.00042473478242754936, 0.011697638779878616, 0.0018762267427518964, 0.02978552132844925, 0.03952927142381668, 0.014801775105297565, 0.17063848674297333, 0.00027099388535134494, 0.05940494313836098, 0.06019742041826248, 0.03653816133737564]}, {"target": [1], "doc": ["i think you should consider it in next version", "i have few complex situation that will be easily fix with this thing", "it can make angular to the good framework ever", "however ' componentfactoryresolver ' if i can change the template with this service or an outer please let i know"], "issue_sim": [0.08314640820026398, 0.08827702701091766, 0.31988054513931274, 0.2701990604400635], "prob": [0.024721264839172363, 0.2570130527019501, 0.011887863278388977, 0.8554641008377075]}, {"target": [2], "doc": ["@zoechi , you say that the problem describe in this feature request be too complicated", "i be not much good to know angular <number> to make pr to correct this problem , but i think it be not difficult to fix", "do you believe that the removal of all html - unsafe attribute , without validate they , it be normal practice ?"], "issue_sim": [0.17244194447994232, 0.34042859077453613, 0.5905431509017944], "prob": [0.02256765030324459, 0.6279792785644531, 0.4359563887119293]}, {"target": [1], "doc": ["i have something like this in my project , use for , basically , the same use case : i inject via directive or custom component a token that represent a styling  for the application button", "this approach work for component and directive  , but not for structural directive , as you mention .", "this be really a shame , imo , and should be fix asap , because the hierarchy of injectors be break , when talk about structural directive :", "regard the specific of this issue , i do n't think the require feature be need , except for the requirement of the aforementioned issue # <number>", "custom directive \" provide \" token seem to be  exactly what this issue be request"], "issue_sim": [0.5780131816864014, 0.3564707338809967, 0.23691698908805847, 0.15016889572143555, 0.29869234561920166], "prob": [0.5259360671043396, 0.7624847888946533, 0.16875337064266205, 0.011467504315078259, 0.0001943291281349957]}, {"target": [0], "doc": ["to clarify , the intention be not to give more priority to mobile than pc ,. but that both platform must get the same attention due to the diversity of. our userbase .", "on fri , feb <number> , <number> at 11:38 am , juan linietsky reduzio@gmail"], "issue_sim": [0.19899573922157288, -0.0009075822308659554], "prob": [0.9134988784790039, 0.16353753209114075]}, {"target": [6], "doc": ["@cristian - mocanu - mob angular compiler will only compiler html template while collect metadata in typescript", "it wo n't change any typescript code except the special handling for metadata part", "even if it could extract metadata from kotlin and then compile the html template , you 'll still get logic code in kotlin and generate code in javascript / typescript", "so what you need be :", "bridge for extracting metadata from kotlin  ;", "compile kotlin to javascript * * per file * *  ;", "the real problem be the second , how can you perform the single file compilation from kotlin to javascript without bundle ?", "that be a general problem for to - javascript compilation itself , not relate to typescript", "* * if this problem not exist , like use coffeescript , then it be quite possible to support it by just wrap the compiler"], "issue_sim": [0.6356134414672852, 0.3999703526496887, 0.5707255601882935, -0.06737208366394043, 0.27403682470321655, 0.47301939129829407, 0.5595855712890625, 0.6311931610107422, 0.5732654333114624], "prob": [0.00013876661250833422, 0.012099568732082844, 0.5281708240509033, 2.1101184302096954e-06, 0.33149948716163635, 1.1231043572479393e-05, 0.14632399380207062, 0.03727405518293381, 0.002369544468820095]}, {"target": [1], "doc": ["there be one : portability", "but would n't implement static typing be well and easy at least for now ?", "not to mention c # support which may eventually happen"], "issue_sim": [0.22753089666366577, 0.29514122009277344, 0.15128019452095032], "prob": [0.10124091804027557, 0.855966329574585, 0.05436866357922554]}, {"target": [3], "doc": ["i think such a proof - of - concept would be very valuable because", "- it give we a well idea if the new build system handle everything we need and how well it do it", "- it give we concrete instead of abstract datum to discuss", "for the second point , this mean we can see the difference in build speed * for godot * , we can see how much easy  * our * build script become , and we can compare the difference more easily to make a choice instead of make educate guess base on what whe think it could offer .", "now , personally , i have to say i be neither for nor against this , but i think there be more low - hang fruit to <appname> instead of  change the entire build system", "especially at this critical point in time , where as many hand as possible be need to make sure 3", "0 and the first patch be in the good shape possible", "but * if * we want to improve the build system , i 'd look at the ci build time and the hassle of the mono build situation", "also , the bugged parallel build on windows suck , but that be more on a personal would - be - nice - if - it - be - fix basis", "- i agree scons documentation / resource be lack , the build script be easy python somewhat counteract that , imo", "- as a new - ish contributor , the godot build system be one of the least annoying to setup , really low time to first successful compile", "- i 'd rather see the effort spend on improve 3", "1 as much as possible and * maybe * think about this once those be stable", "- better ci build time & easy mono build could be more important"], "issue_sim": [0.23410473763942719, 0.28224924206733704, 0.10181717574596405, 0.35220223665237427, 0.27168047428131104, 0.04314354807138443, -0.08458966016769409, 0.45113667845726013, 0.27513423562049866, 0.49052590131759644, 0.4541328549385071, 0.06955556571483612, 0.06687512993812561, 0.3549739420413971], "prob": [0.01653844676911831, 0.04410264641046524, 0.0011962493881583214, 0.26337385177612305, 0.13897432386875153, 0.0014116002712398767, 0.00014211826783139259, 0.011322098784148693, 0.059851858764886856, 0.00432061729952693, 0.06580518931150436, 0.0001763043983373791, 0.005176094360649586, 0.00017870029842015356]}, {"target": [0], "doc": ["well , thank for the comment , but \" use a different module loader \" do n't help with the underlie problem at all .", "i assume testbed could just be change to only compile once and cache the result for that suite , which would mean that subsequent call should resolve immediately", "the only thing i be not sure of be whether there be some _ reason _ why the compilation result be n't reuse"], "issue_sim": [0.2298283576965332, 0.5922331213951111, 0.2973862290382385], "prob": [0.7789387702941895, 0.10001970827579498, 0.019175659865140915]}, {"target": [9], "doc": ["as an aside , use new with a factory function will work as expect", "the return value of the factory function will be use", "however , i concede that it be n't idiomatic javascript , and cause an unnecessary object creation", "that be say , i think i can address <number> and <number> in one or two way :", "with just the propose syntax above , note that you can still set annotation directly , give you control over composition and factory vs new :", "or , if you really want composition in the syntax , then i would propose the follow alternate array syntax , which would require the es6 spread operator", "the following would be equivalent to the above sample :", "i think either of these be sufficient to overcome concern <number> and <number>", "with respect to your third comment , i specifically avoid \" decorator \" in this proposal", "first of all , you do n't really need new syntax for decorator - as you say , function wrapper give you everything you need , and the syntax be already about as concise as it could possibly be .", "secondly , mutate decorator have implication for type", "if a decorator modify the prototype of the class it be apply to , say add a set of function , how do typescript know", "you could annotate the class with an interface , but you 'd have to stub everything that the decorator add to your class first , because the typescript compiler ca n't tell that a decorator add implementation for the interface", "and even if you stub the field out , the interface check be effectively turn off , because you ca n't enforce that the decorator be add field / method that match the interface anyway", "in those kind of case , i think use the type system for that kind of type augmentation be a superior option , especially if we support mixin", "finally , i think there really should be a separation between decorator and annotation", "decorator function / wrapper be good candidate for be consumer of the metadata", "make annotation inert also improve their reliability - it would cause a lot of confusion to have to track down issue relate to mutate annotation", "there be no way to document to the type system  , what it be that the mutate annotation be do to your type , field , function argument , or method", "thus , i propose a more conservative passive approach to annotation"], "issue_sim": [0.20768919587135315, 0.06823058426380157, 0.2627474367618561, 0.058388493955135345, 0.47422125935554504, 0.5238929986953735, 0.02299356460571289, 0.045838188380002975, 0.25317519903182983, 0.40648001432418823, 0.3097922205924988, 0.5734505653381348, 0.5721982717514038, 0.35502976179122925, 0.3468475341796875, 0.4875549077987671, 0.3548773527145386, 0.4599955976009369, 0.5860174894332886, 0.3061763048171997], "prob": [0.0034221489913761616, 0.004933910444378853, 0.0760355293750763, 0.000670075707603246, 0.008783066645264626, 0.010501000098884106, 2.746137761278078e-05, 5.494659853866324e-05, 0.00035797033342532814, 0.03192542865872383, 0.037490103393793106, 0.0005721081979572773, 0.003246140666306019, 0.00206212536431849, 0.0007481013308279216, 3.304283745819703e-05, 9.872721420833841e-05, 0.0017136480892077088, 0.1515856385231018, 5.385063559515402e-05]}, {"target": [0], "doc": ["i think we should support cell in the table have a background , but not the entire table .", "alternatively , if we want to support colored background , then we can special case that to preserve padding"], "issue_sim": [0.09997853636741638, 0.10131947696208954], "prob": [0.7343584299087524, 0.3557819128036499]}, {"target": [4], "doc": ["the processing of <tag> be somewhat unusual in this case :", "unless you take extra action , pass <tag>   and _ omit _ <tag> be equivalent", "the <tag> parameter variable will be a <tag>-typed variable whose <tag> property  be <tag> in _ both _ case", "from what i understand , that be the intent behind <tag> , which normally only exist to facilitate _ programmatic _ construction of a command line", "the only way to distinguish these two case be to do something like <tag>  , which be apparently what happen here : <tag> return <tag> despite <tag> return <tag> imply that <tag> be pass", "thus , <tag> function as a signal to _ override _ the <tag> variable  be a semantic anomaly , but it be helpful and document ."], "issue_sim": [0.0686783492565155, 0.21219442784786224, 0.3151807188987732, 0.18050238490104675, 0.4365847110748291, 0.3500239849090576], "prob": [0.003104119561612606, 0.02868766151368618, 0.2151651382446289, 0.06447260826826096, 0.18943612277507782, 0.12239173799753189]}, {"target": [1], "doc": ["anyway , i ca n't verify that , but it be very likely that <number> % of the computational time spend to build godot be spend in the compiler", "so even if the overhead of the building software be none , this would lead to a <number> % decrease of the build time . even a <number> % decrease would not be worth , unless it allow less code and more reliability  ) ."], "issue_sim": [0.4750581681728363, 0.3536831736564636], "prob": [0.6385952234268188, 0.578687310218811]}, {"target": [0], "doc": ["i feel it may over complexify the * template * syntax . any of compute property , method and component can solve these problem easily ."], "issue_sim": [0.44211921095848083], "prob": [0.9999924898147583]}, {"target": [0], "doc": ["should n't be possible to autorun over the blaze datum and then just affect it to the vue instance  ?"], "issue_sim": [0.4384336471557617], "prob": [0.9999439716339111]}, {"target": [9], "doc": ["you be right : we should take a step back :", "let 's revisit at what i propose in the op :", "i still think this be by far the good choice , but it be technically a break change", "while i 'd say this fall into bucket <number> and therefore make it an acceptable break change , if that be n't the consensus then have it as an opt - in , via <tag> be the next good choice - and user can decide whether they want ets member or not", "if we deem the break change acceptable , and someone really want to serialize <tag> _ with _ the - relevant - for - display - formatting - only - ets property - which strike i as unlikely - they can do :", "note that to - json serialization in the vast majority of case fall into the category of serialization of \" property bag \" type : dtos  that be implement as <tag> instance , hashtable , or   custom  class design specifically for that purpose", "such  type be ultimately solely compose of data type that serialize as json primitive : string , number , booleans , and date", "all other type be n't really suit for json serialization", "in short , my vote be for :", "all type that serialize to json primitive , include <tag> and <tag> , should _ always ignore _ ets property .", "* <tag> be the only type where powershell itself add such property , via <tag> , and _ solely for output format _ , which have nothing to do with serialization", "* all such type - comprise string and", "net primitive type that be _ value type _ - all of which conceptually be and present as as a _ single value _ , be poor candidate for have ets property attach to in general", "* in the rare event that someone still want such ets property serialize , they can use the <tag> solution show above", "* the above alone will cover the vast majority of use case", "separately , even though my sense be that it will be rarely , if ever , need : there be no harm in also give user a <tag> option to opt - out of ets property"], "issue_sim": [-0.05506506562232971, 0.012112213298678398, 0.029912903904914856, 0.16392096877098083, 0.36824938654899597, 0.5344633460044861, 0.40017977356910706, 0.39120346307754517, -0.05480526387691498, 0.5346717238426208, 0.6193934082984924, 0.04470260441303253, 0.31308770179748535, 0.4662131667137146, -0.011612486094236374, 0.18590548634529114], "prob": [0.006712495815008879, 0.006939150858670473, 4.251478458172642e-05, 0.016335347667336464, 0.025661690160632133, 0.03657668083906174, 0.008275792002677917, 1.738136234052945e-05, 1.5916255506454036e-05, 0.0529312938451767, 0.01122288778424263, 9.415032764081843e-06, 0.01695183292031288, 0.0014437835197895765, 4.8620699999446515e-06, 0.16742785274982452]}, {"target": [0], "doc": ["all the idea in the proposal relate to multiple tagger and certain tag override other be base on how our semantic classifier work .", "and the semantic classifier work very well , and do the right thing , and be low cost", "we have have good experience with it", "it add teal coloring to all the type , and yet we do not think of that as over the top", "why not do the same with the syntactic classifier"], "issue_sim": [0.5399237871170044, 0.3448370397090912, -0.004597007296979427, 0.16572794318199158, 0.4675902724266052], "prob": [0.9668735861778259, 0.13835681974887848, 0.0011456428328529, 0.1264481395483017, 0.009288032539188862]}, {"target": [0], "doc": ["i 'll release it as a standalone plugin", "out of curiosity , what would be the idiomatic way to achieve this sort of functionality   in vue <number>"], "issue_sim": [0.1724058985710144, 0.46779415011405945], "prob": [0.09065410494804382, 0.836310625076294]}, {"target": [5], "doc": ["what i be try to do be something like this", "i think this code be quite intuitive when you see it write down", "however , when <tag> change , <tag> be never call", "this be because the decorator be implement as follow", "so the second <tag> decorator overwrite the first", "in order to support multiple <tag> decorator for the same path i think <tag> should support an array ."], "issue_sim": [0.08241258561611176, 0.13170364499092102, 0.21584434807300568, 0.4488382935523987, 0.35625699162483215, 0.5760120153427124], "prob": [0.00014868036669213325, 0.001317466958425939, 3.2132222258951515e-05, 0.020076775923371315, 0.0006956024444662035, 0.773880660533905]}, {"target": [7], "doc": ["i just make a proposal which address this issue over in # <number>", "i 'd be very interested in any feedback you might have", "specifically , it allow a service to add / remove error from a control", "because error be key to the service which add they , one service can not overwrite another 's error", "for example , this hypothetical service check the <tag> to see if the enter username already exist or not", "it use debounce time to ensure that check be n't make too frequently", "more broadly , this allow you to programmatically add error to a control however you see fit , either synchronously or asynchronously", "it would allow you to create a custom \" validation \" interval ."], "issue_sim": [0.15181179344654083, 0.03459438309073448, 0.3101452589035034, 0.22186416387557983, 0.2920404374599457, 0.1403639018535614, 0.22940734028816223, 0.390217125415802], "prob": [0.010207516141235828, 0.021611999720335007, 0.00641205720603466, 0.10778402537107468, 0.31105172634124756, 0.011267460882663727, 0.10447904467582703, 0.03826963156461716]}, {"target": [8], "doc": ["hmm , there be many problem at the moment to implement that", "the syntax be not currently possible", "_ note that space be not possible , so that would be a common source of error that we want to avoid ( people will want to use they between event for readability _", "we could use other character like <tag> though", "a more realistic version with current syntax", "would n't work because there be only one arg for directive and that would lead to this modier object :", "so , to put it in a nutshell , a syntax like :", "could be possible but it be a new syntax that people will need to learn to replace something that be already feasible :", "personally , i think the second version be more straightforward and easy to read so imo we should pass on this but i think it be worth listen to other ' opinion"], "issue_sim": [0.17696210741996765, 0.17865394055843353, 0.3846150040626526, 0.0941472202539444, 0.1735987365245819, 0.36845922470092773, 0.1298934519290924, 0.271079421043396, 0.20311076939105988], "prob": [0.013002375140786171, 0.01691412553191185, 0.8294736742973328, 0.005586473736912012, 0.0005043769488111138, 0.01290402002632618, 0.008627606555819511, 0.015909405425190926, 0.22960831224918365]}, {"target": [2], "doc": ["i be try to use the deactivate guard to prompt user save or discard their change on a record", "on save i would let they continue to where they be route , and on discard i would re - route they to a record list view", "have the ability to make candeactivate return a urltree on the surface seem to be exactly what i need , but as report here , this wo n't work .", "which be fine , i can solve this other way", "but now i can help but wonder when would it ever make sense to return a urltree from a deactivate guard", "be this add to candeactivate just because canactivate get it"], "issue_sim": [0.33360785245895386, 0.29815417528152466, 0.19189861416816711, 0.10597928613424301, 0.4487473964691162, 0.20689374208450317], "prob": [0.07414484024047852, 0.36539095640182495, 0.5119613409042358, 0.0017717768205329776, 0.04185923933982849, 0.01047426275908947]}, {"target": [1], "doc": ["<tag> work just fine with data structure :", "it do exactly what you would expect from other language : it create a _ durable _ reference to a _ specific _ instance .", "the so item in question be use <tag> when they do n't need to not understand that they already have a reference to the parent object and also not understand how array concatenation be do in powershell", "if they have assign to an _ element _ of the array it would have work fine", "but by append an element , they create a new object which , of course , do not update the reference"], "issue_sim": [0.2841264009475708, 0.35161811113357544, 0.4806078374385834, 0.281877726316452, 0.36419224739074707], "prob": [0.04246969893574715, 0.6602928042411804, 0.09609923511743546, 0.020066436380147934, 0.2751530110836029]}, {"target": [2], "doc": ["that would add unnecessary complexity :", "it require create , maintain , shipping , document   a new executable , even though its sole purpose would be to ignore the <tag> / <tag> option .", "* user will need to know and remember that they must specify that a different executable when change their default shell to powershell with <tag> , which be far from obvious"], "issue_sim": [-0.004706237465143204, 0.18939334154129028, 0.6067363619804382], "prob": [0.021294565871357918, 0.7726197838783264, 0.4934479892253876]}, {"target": [0], "doc": ["also the current code state of the port be on the hacky side , it be kind of a poc in some of it , but it should n't take too long to make it properly from here"], "issue_sim": [-0.0043834419921040535], "prob": [0.9999881982803345]}, {"target": [0], "doc": ["that be not true subclassing - see  for more detail .", "only es6 + support something like <tag>"], "issue_sim": [0.1697029173374176, 0.3241361379623413], "prob": [0.9968152642250061, 0.004952029325067997]}, {"target": [4], "doc": ["i think the wise move be definitely to make it as generic  as possible , though , i expect most framework that rely on jsx will over time migrate to the new <tag> and <tag> style function , if history be any precedent here", "the real issue with leave it up to be plugin , be that the compiler api documentation just be n't great", "it feel very neglected in comparison", "also , with plugin you can only load they via the node compiler api , you ca n't have  transform plugin add into the tsconfig under <tag>", "if the story around plugins get clean up  , then rely on plugin be the way forward , and you could use react as a reference implementation of say plugin .", "i think that would be very acceptable"], "issue_sim": [0.5869094133377075, 0.34633439779281616, -0.0628582239151001, 0.37722793221473694, 0.3462345004081726, 0.04126901179552078], "prob": [0.4477790296077728, 0.36232736706733704, 0.009895416907966137, 0.4067925810813904, 0.35692328214645386, 0.0037300216499716043]}, {"target": [4], "doc": ["that be true when you write sequential code", "statement after statement , function after function etc", "in initial example add last line \" var f = new a ) ; \" result that a", "ctor will have non null param argument", "in ts code there be nothing that indicate you be refer to something that be not define yet .", "still not understand why it s correct behavior"], "issue_sim": [0.15150927007198334, 0.24870720505714417, 0.3491905629634857, 0.27634724974632263, 0.3846747875213623, 0.10534064471721649], "prob": [0.0010027624666690826, 0.004898512735962868, 0.017411286011338234, 0.00013721801224164665, 0.8717437386512756, 0.0012258188799023628]}, {"target": [0], "doc": ["basically i be look for a feature / way to export component build with angular like say button / list / form ect as stand alone standard web components so that they can be use in other project that do not use angular without initialize the entire angular application .", "of course assume i be still use that component api externally", "a way to pull in and re - use the angular component  in plain javascript or in application with other library / framework", "if each angular component be default be export as a web component they could be re - use in non - angular project"], "issue_sim": [0.7974519729614258, 0.40935391187667847, 0.6271355152130127, 0.7656353712081909], "prob": [0.8802072405815125, 6.418859265977517e-05, 0.06345123052597046, 0.0061284685507416725]}, {"target": [2], "doc": ["actually i be with @simplesmiler @herringtondarkholme", "we might need a way to reuse render logic in template without mess up data context", "another parallel mechanism will definitely increase complexity but i think it be well than introduce something like <tag> to reuse template piece after all ."], "issue_sim": [-0.004586383700370789, 0.4666649401187897, 0.4334353804588318], "prob": [0.010463494807481766, 0.7563623785972595, 0.6885852813720703]}, {"target": [1], "doc": ["the close thing for variable be to use <tag> to lead to a function that either do nothing or print a warning", "but no , no true private variable or function ."], "issue_sim": [0.4967479407787323, 0.2514874041080475], "prob": [0.027870848774909973, 0.9881165027618408]}, {"target": [3], "doc": ["my guess be you be have hard time update your app to the late version , while you want your code to work as it be now", "or it may be the question of a habit", "to my opinion auto - convert prop be a bit excessive", "there be at least <number> way of solve the problem : add a colon to attribute , use a custom filter , a coerce function .", "i do n't think add an extra layer of magic be a good idea", "plus there will be new edge case , plus it will affect performance"], "issue_sim": [0.28803277015686035, 0.06166418641805649, 0.3013676404953003, 0.5157928466796875, 0.11571335792541504, 0.08279872685670853], "prob": [0.3591926395893097, 0.002234470099210739, 0.00045414295163936913, 0.35028672218322754, 0.0068487985990941525, 0.011462819762527943]}, {"target": [1], "doc": ["@mklement0 i just do n't think this be possible or desirebale", "how would <tag> know if what it be get be a wrap object result from <tag> or <tag> or a psobject create by a user that look like one ?", "that be why i think he fix for this need to be with each command that do some wrapping", "i 'll keep my issue open because it apply to more than json conversion for date", "but i be not sure what the approach be for this issue", "there be always unexpected behavior around psobject black magic"], "issue_sim": [0.11156920343637466, 0.33849722146987915, 0.08419731259346008, 0.29819661378860474, 0.03991322964429855, 0.11274995654821396], "prob": [2.8193022444611415e-05, 0.9111087918281555, 0.009647327475249767, 0.04783349111676216, 0.0034376108087599277, 0.005753527395427227]}, {"target": [1], "doc": ["i have n't step through the code yet , but it seem logical that this list < object > be what be be build up any time a valuefromremainingargument parameter be in play", "that would be logical , and i would expect it to be a <number> - element list that contain string if we have pass the value as separate argument instead of a single array .", "if that be what be happen , then what seem to be miss be some logic to check , when valuefromremainingargument be in play , whether the list contain only a single element", "if so , perhaps the list should be unwrapped before the parameter binder start try to do type conversion"], "issue_sim": [0.36928799748420715, 0.49674391746520996, 0.15543867647647858, 0.27566832304000854], "prob": [0.36604875326156616, 0.5239763259887695, 0.09161242842674255, 0.0029200061690062284]}, {"target": [0], "doc": ["i still think this should be implement natively into vue because this be one of the most common thing that library implement their own way of do it and it result only in code bloat , bug and increase bundle size .", "in other word , it would stop people from reinvent the wheel"], "issue_sim": [0.3152391016483307, -0.057069480419158936], "prob": [0.9195960760116577, 0.03991575166583061]}, {"target": [0], "doc": ["@tirithen - it really be on a case by case basis here , and from my personal experience with use angular 's web component integration , thing run pretty smooth - ish", "there be some thing to consider , for example , routing , rxjs and other be like that , but by use the middleware angular project that i suggest might come in handy when export one component to also be able to bundle all the require dependency , especially if there be some sort of lazy load involve in the original project .", "when use web component with angular , there be one more thing that really boggle the mind and that be the webpack export module which cause a lot of issue when work with multiple \" angular project \" in the same context", "have in mind that you might need ngx - build - plus to overwrite the output", "jsonpfunction to a proper unique name", "but without know more info about your particular case , it be hard to help out , so i be just put thing out there that i have come across while do roughly the same thing :)"], "issue_sim": [0.5639933943748474, 0.6727428436279297, 0.7373976707458496, 0.19306300580501556, 0.05294039472937584, 0.09386778622865677], "prob": [0.3413495123386383, 0.25452566146850586, 0.018200872465968132, 0.006441653240472078, 0.002211780985817313, 0.4826200306415558]}, {"target": [3], "doc": ["could n't a lot of this be alleviate by empower the current visual scripting with more and well function", "a lot of the example be trivial in ue4 's blueprint", "\" on keypress w , move this actor forward \"", "you could build most of these in a very similar way in blueprint and even the visual difference  would be minimal .", "we should focus on make the visual script we have usable and work in a intuitive , smooth way , imo", "as be , the visual script * * we already have * * feel a little forgotten and do n't seem to get much love", "how would have * * two * * visual scripting system improve this situation at all"], "issue_sim": [0.2707662582397461, 0.32184159755706787, 0.009567697532474995, 0.18181098997592926, 0.2796947956085205, 0.16991181671619415, 0.27762076258659363], "prob": [0.2777521312236786, 0.06672410666942596, 0.07564927637577057, 0.5450423359870911, 0.03581665828824043, 0.6741952896118164, 0.00907210260629654]}, {"target": [1], "doc": ["this issue be more likely to happen if you be use an ngrx type store , where the value get patch back onto itself", "interestingly chrome can deal with the same value get patch back and will leave the cursor wherever it be , but ios will jump to the end of the field even if the value be n't change - which it wo n't be most of the time !", "i be not sure if this be the case when this issue be open", "since there be be no activity on this - i think i be go to have to do something like this , to only patch unchanged value :", "const currentdata = this", "const addresscopy =   {", "address } ;    // where ' address ' be my new incoming datum"], "issue_sim": [0.2894947826862335, 0.47090473771095276, 0.0880071371793747, 0.3028436303138733, 0.2006823718547821, 0.20534679293632507, -0.015305990353226662], "prob": [0.13153976202011108, 0.7916135787963867, 0.02554684691131115, 0.7985572814941406, 0.0010455537121742964, 0.005673047620803118, 0.04351227357983589]}, {"target": [3], "doc": ["@posva yeah i understand what that mean", "like i say before i think that seem like a contrived way to do it and would defeat the purpose of have <tag> for those that use responsive class .", "i be remark on the philosophy of the design choice", "if the design be to allow component to override the show directive i argue that be a poor design choice if support for popular css framework be intend", "this issue will return many time in the future from folk use responsive class since it will simply look like <tag> be not work", "i agree with @codysherman in that vue should take precedence over something like a responsive class since the model should represent a more accurate picture of display intent"], "issue_sim": [0.05069165304303169, 0.23931854963302612, 0.06236747279763222, 0.5681039094924927, 0.4179733991622925, 0.5122193694114685], "prob": [0.009875515475869179, 0.5397406816482544, 0.00426301546394825, 0.41324377059936523, 0.04680730402469635, 0.010763725265860558]}, {"target": [7], "doc": ["so , i finally give this proposal a proper investigation , and it end up be more complicated than it seem", "the problem lie within consistency between different input type", "the current implementation in # <number> assume a text input and ignore non - input event", "while this simplify wrap plain text input field , it make the whole thing inconsistent and feel like a special - case convenience hack", "i manage to make it work with <tag> , which require the component to specify the <tag> option , and then inject the event type and prop type back into the component <tag> handler", "it be already messy than i hope - but even if this work , it become prohibitively complex to mimic the full behavior of native <tag>", "at this point i feel the implementation cost and the inconsistency outweigh the simplification this change would bring", "take a step back , the whole idea of component <tag> be open up fine - grained control over the two - way binding of form input , not simplify it .", "its job be expand the sugar consistently into a pair of input and output , and let you fill in the detail", "mix that up with <tag> and <tag> feel like magic where it do n't belong"], "issue_sim": [0.03831404075026512, 0.04586969316005707, 0.39898568391799927, 0.34268176555633545, 0.6018095016479492, 0.2914625406265259, 0.16177934408187866, 0.47101855278015137, -0.02347496896982193, 0.18142595887184143], "prob": [0.11667169630527496, 0.0015998566523194313, 0.02683689258992672, 0.023061135783791542, 0.14622154831886292, 0.06579654663801193, 0.008236085064709187, 0.08845052868127823, 0.0018197159515693784, 0.001970275305211544]}, {"target": [1], "doc": ["this be debatable exactly because some user feel the other way", "and the point be that this * * will be a break change * * , so i prefer to leave it in current state unless everyone agree it should be change ."], "issue_sim": [-0.003148086369037628, 0.23608490824699402], "prob": [0.30852431058883667, 0.7411447763442993]}, {"target": [3], "doc": ["the result be consistent to what i try use react", "benchmark use jmh framework show that typically nashorn version server side render be <number> % slow than node", "i think of waste time in <tag>/<tag> nashorn context", "since vue.js use <tag> module and react.js not , i expect well performance ssr use vue.js .", "run ssr in nashorn be more robust than in node", "thread - control , ability to terminate render at any time , cache across thread", "@wojtask9 how about share your benchmark code to see if something can be optimize"], "issue_sim": [0.2557671070098877, 0.573532223701477, 0.09719717502593994, 0.49196261167526245, 0.4680754244327545, 0.16616880893707275, 0.1872972846031189], "prob": [0.017547057941555977, 0.24443528056144714, 0.08722616732120514, 0.9005585312843323, 0.00450098654255271, 0.09963525831699371, 0.00277334195561707]}, {"target": [3], "doc": ["this seem to be a topic that a few people be passionate about and that be great , and there a some really creative idea about how to tackle this , which also be great", "however for i personally , every syntax proposal so far still seem too complicated , too \" abstract \" , too far away from html & js", "it be great to save keystroke and get rid of repetition , but not at the cost of an easy to grok syntax", "and generally , i be increasingly oppose to any new syntax , at least any that do n't bring new * feature * with it because in my opinion ,   our api surface be big enough as it be .", "i would rather see that we get <tag> work with modifier :", "then it would be trivial to write a helper method like this :", "and we can keep all of those listener definition out of the template"], "issue_sim": [0.1635752171278, 0.2715887129306793, 0.30741745233535767, 0.24892288446426392, 0.29612016677856445, 0.3417883515357971, 0.14121857285499573], "prob": [0.5974620580673218, 0.30239972472190857, 0.0982055589556694, 0.7122662663459778, 0.03246519714593887, 0.008055849932134151, 0.004418798256665468]}, {"target": [0], "doc": ["this feature can be achieve by extend the current <tag> as show in the blog post link in <url> .", "such an implementation require add a dependency on <tag> , which be about <number> kb", "support this would require add to the size of the common package or at least the locale data file", "moreover the data change year on year depend upon each city 's daylight saving plan", "so there be a considerable maintenance cost involve in support this", "since the moment - timezone project be already handle this , and create a custom date pipe be fairly straightforward , we have decide not to implement this in the framework itself"], "issue_sim": [0.1791691929101944, 0.09636886417865753, 0.23062580823898315, 0.1107308566570282, -0.01426791399717331, 0.5115478038787842], "prob": [0.31011396646499634, 0.015365377068519592, 0.032763972878456116, 0.013364732265472412, 0.01209031231701374, 0.4890749752521515]}, {"target": [1], "doc": ["come from an argument about api surface in another issue , i must repeat that i be not a fan of the <tag> idea", "it introduce another \" way thing work \" , and do n't work for jsx without also implement something special there , etc .", "one thing i respect about react folk be their commitment to a slim api and use the language 's feature as much as possible", "in that spirit , re - use a pattern we already have for prop for attribute seem much well than introduce another abstraction"], "issue_sim": [0.20864051580429077, 0.30519771575927734, 0.1654113531112671, 0.3699612617492676], "prob": [0.016092929989099503, 0.5905725955963135, 0.05722861364483833, 0.16970635950565338]}, {"target": [1], "doc": ["i be not quite see the argument against add support for <tag>", "<tag> itself can be cleanly polyfille , and unless i be miss something , it seem like vue 's approach for add reactivity to array could very easily be extend to set .", "we 'd only need to wrap <tag> , <tag> , and <tag>"], "issue_sim": [0.3365051746368408, 0.4174787402153015, 0.28013893961906433], "prob": [0.04596913605928421, 0.45675769448280334, 0.1803051233291626]}, {"target": [0], "doc": ["the _ ! important _ level be already use in some component to purposely override vue v - show behaviour .", "the current level as inline style be the most appropriate", "just put the condition on your _ visible- _ class instead of use v - show", "it make no sense to have a hidden element with some _ visible- _ class anyway"], "issue_sim": [0.5255794525146484, 0.145119309425354, 0.4349862337112427, 0.4634072184562683], "prob": [0.8968055844306946, 0.012251395732164383, 0.05581343546509743, 0.005891921930015087]}, {"target": [0], "doc": ["it seem like the <tag> method of a function just can not return a type value .", "in order to determine the type we have to find a mapping of an array  to a number of tuple", "it can only be do if we know the number of element in the array and their type", "have these <number> thing we can view the array as a tuple", "match tuple to tuple be a solvable problem", "now in order to know the number of element in an array and their type at the compile time it have get to be an array literal", "only in this case we can deduce the type , but restrict <tag> to array literal only would be a significant and pointless limitation", "all this mean that in order to have a type version of apply there have to be a different syntax that take array literal , or just tuple straight , and deduce the type of the result", "in order not to introduce new syntax there can be a type overload of <tag> that take an array literal or just a list of argument as they list in the original function", "even when the original signature of a function match the one of the <tag> method of that function it should not be a problem", "in this case there will be no overload , but just one single way to call it which be what it have now"], "issue_sim": [0.40689435601234436, 0.3611592650413513, 0.29530656337738037, 0.2175266146659851, 0.27373576164245605, 0.4171378016471863, 0.3877948820590973, 0.4898054599761963, 0.5157402753829956, 0.2826193571090698, 0.27624791860580444], "prob": [0.44257599115371704, 0.04217161238193512, 0.003030726918950677, 0.0006798420799896121, 0.00023050284653436393, 0.015018630772829056, 0.005028777290135622, 0.059015560895204544, 0.03809988871216774, 0.025269174948334694, 0.023815937340259552]}, {"target": [13], "doc": ["on my very specific table use case i have a <tag> component that i would like to contain two <tag> root element", "in the first <tag> i will show the category information , in the second <tag> i will list all the category items with its detail", "and the main category body will control the visibility of the second one", "i want it to look something like this :", "now i know i could move they to two separate component and have they communicate , but they really belong together , they have compute property and method they will share , and yes i can move those to a mixin , but that just make everything a bit more complex", "now , regard bootstrap , i recently stumble on this :", "i be use an <tag> and i need to have something like this :", "now , the input / vue - numeric pair be reusable , i actually have quite some logic around those two , so i want to reuse they , but the input - group itself be not reusable , since in some place i do n't need an input group or the input group be very different", "now when i move the <tag> and the <tag> into its own component i be force to use <tag> and <tag>", "unfortunately , that cause a whole lot of other problem , i need both element to be mount at all time , and work around it be n't fun , my problem would be go if i could just have they both mount and just <tag> they as necessary", "of course , i find a way to work around it , but it be n't the clean simple approach i want and that i can achieve in other framework", "i truly love vue , this be really just neat picking", "it would just be nice to have the option", "the nice thing about this feature be that if you do n't want to you do n't have to use it even think about it , just keep wrap everything in a div ."], "issue_sim": [0.5633262395858765, 0.22131052613258362, 0.0840955302119255, 0.07078516483306885, 0.38907191157341003, 0.2865602672100067, 0.22585250437259674, 0.2775980830192566, 0.32633447647094727, 0.2674866020679474, 0.30530035495758057, 0.035789310932159424, 0.13513383269309998, 0.4273713231086731], "prob": [0.37935012578964233, 0.13764625787734985, 0.00985975656658411, 0.003342482028529048, 0.10140444338321686, 0.0009988648816943169, 0.01082533784210682, 0.062323421239852905, 0.011796827428042889, 0.022440094500780106, 0.01160832867026329, 0.0007004351355135441, 0.00042325822869315743, 0.0986403152346611]}, {"target": [5], "doc": ["@sjtrimble , i do n't understand your example", "i only see command that be suppose to be type in the terminal there", "we have two different thing here :", "- show a command as it should be type in the terminal", "- show the \" call signature \" for a command", "i do n't feel these two thing should have the same style ( and i be big on consistency too btw", "if anything , the \" call signature \" be more similar in nature with show class or function signature , so i would consider make they look the same", "but , i do n't feel too strongly about it", "leave it up to you"], "issue_sim": [0.09294742345809937, 0.47896698117256165, 0.02098381333053112, 0.5232020616531372, 0.3358476161956787, 0.09301672130823135, 0.3013148903846741, -0.006551307626068592, 0.05266040191054344], "prob": [0.006509074009954929, 0.04079655557870865, 0.004668229725211859, 0.008884577080607414, 0.025543849915266037, 0.23447126150131226, 0.6305797100067139, 0.005372985266149044, 0.009746178053319454]}, {"target": [0], "doc": ["hope that we can implement this in angular since next and react have it .", "also , it be not a complicated addition", "what step can we take to build this into compilation"], "issue_sim": [0.47028204798698425, 0.0014044959098100662, 0.2446836531162262], "prob": [0.8573278188705444, 0.023292092606425285, 0.32511457800865173]}, {"target": [3], "doc": ["the issue be , the <tag> can not be pass to the server , besides by put it in the template  .", "you ca n't use complex function in template bracket , as they be single - expression only", "* * note * *", "it can not be render within the <tag> function inside the <tag> file because rendering be an async operation , which mean it can not assign a variable to <tag> safely , as <tag> be synchronous"], "issue_sim": [0.2446449100971222, 0.20099280774593353, -0.007002390921115875, 0.49667346477508545], "prob": [0.43080854415893555, 0.10593561828136444, 0.0007248572655953467, 0.5318169593811035]}, {"target": [0], "doc": ["actually it would probably make more sense for <tag> to accept an array of the currently support type since each <tag> decorator could take different option ."], "issue_sim": [0.5588867664337158], "prob": [0.9999735355377197]}, {"target": [11], "doc": ["you would be wrong ;)", "the acl example and dacl require the child parent relationship in <number> of the api i work with", "again , that would be an opinionated implementation which would lead to a bad ux", "there be <number> i use on a regular basis : json , xml , and multipart / form - data", "xml be increasinly rare , but multipart / form - datum and json be about equal", "more often than not , most rest api do n't even require a body", "only u operation in crud tend to need a body and even then a good portion of endpoint i work with still use query field instead of body payload", "i be not sure that be accurate", "the weblistener in this project be testament to that", "again , i understand that add the ability to directly serialize an object as json in the web cmdlet seem useful", "i have consider it myself", "however , whatever implementation we use would be opinionated unless we add more parameter to accommodate various json serialization need or risk endless support issue and question about why our opinionated implementation do n't serialize the way the user expect it to .", "at that point , it be good to stick to _ do one thing _ and let the json cmdlet handle the serialization and the web cmdlets handle web request", "on improvement to json serialization , there be quite a few i would like to make as well", "@mtman can you please open a separate issue for your suggestion of loop detection", "honestly , once the experimental features feature be add , i want to possibly redo the entire json implementation", "at this point in my own code , i be make raw", "net call to newtonsoft", "json because the current cmdlet be too simplistic and opinionated", "when you be work with <number> + api , you start to see the entire spectrum of json and that require great flexibility"], "issue_sim": [-0.016948875039815903, 0.22586679458618164, 0.11063503473997116, 0.45129936933517456, 0.42476755380630493, 0.3557640314102173, 0.36583513021469116, -0.033258065581321716, -0.059320054948329926, 0.4485190510749817, -0.0258902907371521, 0.4190511703491211, 0.39524465799331665, 0.33653828501701355, 0.2086380571126938, 0.3491296172142029, 0.038713544607162476, 0.08106735348701477, 0.4276171922683716, 0.366057813167572], "prob": [0.021773066371679306, 0.009848387911915779, 0.011831752024590969, 0.17855723202228546, 0.0011040159733965993, 0.00031828664941713214, 0.011095225811004639, 6.127746019046754e-05, 0.00048450357280671597, 0.023494277149438858, 1.813103699532803e-05, 0.02649829164147377, 0.024579912424087524, 0.01264579314738512, 1.8983504560310394e-05, 0.005883377976715565, 0.00014662608737125993, 4.384629937703721e-05, 0.0010675149969756603, 0.043018363416194916]}, {"target": [0], "doc": ["i honestly do n't think the physics engine would lag with only <number> entity", "can you copy - paste the code you use in the <tag>"], "issue_sim": [0.2794649004936218, 0.09861361980438232], "prob": [0.5801107287406921, 0.19498653709888458]}, {"target": [2], "doc": ["cc @chuckjaz as we have a chat with about this issue", "so why do you use <tag> to do the load", "i would expect you just use <tag> all the time , give that there be no language service operation need here ."], "issue_sim": [0.14782802760601044, 0.20630234479904175, 0.2578403353691101], "prob": [0.011549882590770721, 0.008686574175953865, 0.9973830580711365]}, {"target": [0], "doc": ["that be a dealbreaker unfortunately , because the file be not available locally in the container ."], "issue_sim": [0.1446191519498825], "prob": [0.9999974966049194]}, {"target": [3], "doc": ["i be curious why we be call the \" textmate \" solution ' simple '", "to i it be much more complicated than an actual syntactic classifier", "in order to get it ' right ' you need to find a way to effectively support context free grammar in a regexp - orient framework", "even if that be something support well by tm solution , you 'd still effectively be build a parser / grammar in that world ts so that you can properly classify thing", "this seem _ order of magnitude _ more complex to i than just reuse the exist parser / syntax model _ we already have _ ."], "issue_sim": [0.2047228366136551, 0.4286801517009735, 0.3095186650753021, 0.3800262212753296, 0.4254048466682434], "prob": [0.02211129665374756, 0.08688664436340332, 0.22586727142333984, 0.2221275120973587, 0.10002565383911133]}, {"target": [0], "doc": ["as long as that do n't break exist code , i be all for few keyword / name to remember ."], "issue_sim": [0.17240232229232788], "prob": [0.9998639822006226]}, {"target": [1], "doc": ["so i be afraid this be totally the expect behaviour", "javascript template literal string always include all the character between the two back - tick .", "as i see it you have a few option", "the first be to accept that the string be go to be long on a single line and replace the actual newline with <tag> character string :", "<tag> <tag>long long long long long long long long long long long long\\n                     multi - line string <tag> <tag>", "obviously this mean that you have really long line for some message but at least you have full control over the character that appear", "the other option be to use custom id for your message , which would ensure they receive the same translate string :", "<tag> <tag>:@@long - message - id : long long long long long long long long long long long long", "multi - line string <tag>:@@long - message - id : long long long long long long long long long long long long", "multi - line string <tag> <tag>", "in this case the actual string will be ignore for translation purpose"], "issue_sim": [0.02737383171916008, 0.46328213810920715, -0.04529848322272301, 0.5633954405784607, 0.3581225872039795, 0.21336106956005096, 0.4477158188819885, 0.21832549571990967, 0.33817046880722046, 0.4470962882041931, 0.3471093475818634], "prob": [0.004241407383233309, 0.29124629497528076, 0.01680273562669754, 0.22730658948421478, 0.0855007916688919, 0.12666618824005127, 0.06677085161209106, 0.015834126621484756, 0.005836616735905409, 0.0048859636299312115, 0.022965263575315475]}, {"target": [1], "doc": ["actually , i do n't see this feature be very useful in argument list , b / c the variable you name in the destructure expression implicitly label the element of the tuple :", "as for why one would use tuple in a return type vs. object , or really , why one would use tuple over object generally ; sometimes , it be easy to have data structure with positional value rather than name value , such as when one have to write a bunch of these value  .", "use tuple get rid of a lot of repetition / noise", "additionally , in recent news ,  which be base on return / destructuring tuple", "using name tuple as a return value :", "seem much more descriptive than use unnamed tuple :"], "issue_sim": [0.5909571051597595, 0.5323904752731323, 0.295301228761673, 0.34033066034317017, 0.49784228205680847, 0.47921597957611084], "prob": [0.7490436434745789, 0.9739083647727966, 0.03365118429064751, 0.06771424412727356, 0.0026268542278558016, 0.005208915565162897]}, {"target": [4], "doc": ["@chrisdahmcs i do n't know we could set updateon on the form group itself", "it certainly do make sense to", "however , i be not sure it will be able to fix the issue though , since the default value for \" updateon \" seem to be", "' default ' , wich appear to update whenever there be any change in the \" scope \"", "base on this observation , i expect the validation of the formgroup to only check the validity status of its child formcontrols , without force they to actually rerun the validator .", "anyway , i 'll give it a try when i be give the opportunity , sadly i be just assign to another project so i guess it 'll have to wait a bit long"], "issue_sim": [0.3294820189476013, -0.015058641321957111, 0.2048831433057785, 0.21169112622737885, 0.45179885625839233, 0.1113005131483078], "prob": [0.008882446214556694, 0.006240157410502434, 0.30586323142051697, 0.02377389743924141, 0.7190989255905151, 0.22724339365959167]}, {"target": [2], "doc": ["<tag> be a parameter switch to do what exactly", "i think it be a new parameter that be pull out from previous pr specifically for this discussion of whether a warning or error should happen if no parameter be specify", "what i be suggest be that for warning proposal , it be very confuse and do n't make any sense .", "if i run <tag> and it work with a warning display then you have by default allow it to happen", "so why would i need to set <tag>", "now , if you want <tag> to happen so the user interactively choose yes or no", "then it make sense to have an <tag> switch to hide confirmation and choose yes", "error proposal be fine , i just think the wording do n't make sense if credential be still send with just a warning let the user know it happen"], "issue_sim": [0.32666999101638794, 0.4164178669452667, 0.1824215054512024, 0.19321800768375397, 0.0916057899594307, 0.2009977251291275, 0.15658965706825256, 0.4835625886917114], "prob": [0.011758317239582539, 0.26690223813056946, 0.2357124239206314, 0.02060147002339363, 0.0012239179341122508, 0.014814266003668308, 0.005585924722254276, 0.2114088088274002]}, {"target": [1], "doc": ["this be tricky than it seem", "if you use render function , then you can not modify anymore <tag>  afterwards , because it be not a top - level component anymore ."], "issue_sim": [-0.02750452235341072, 0.5623103976249695], "prob": [0.03890453279018402, 0.9446172118186951]}, {"target": [0], "doc": ["this sound almost good for i i think , tho after some thinking , i think its not go to work for lazy load route"], "issue_sim": [0.18516531586647034], "prob": [0.9999586343765259]}, {"target": [2], "doc": ["@arnavion why would a union be useful here", "i do n't think that would change anything", "i want to be able to use the intersection to override property of the initial object with valid assignment - in this case , reset they back to void  .", "edit : for example , i have one large interface and i want to specify that everything other than this property be require", "<tag> <tag> c <tag> <tag>", "this be a pretty common pattern for i - where i may have a function that define the ideal object and then some of it can be populate at a later time", "for instance , a database model that be currently two object but after the first object be store it add the <tag> to the second object", "currently i have to make a bunch of small interface and keep extend / intersecting to build they upward - but it require refactoring interface with each change instead of just override once"], "issue_sim": [0.14278115332126617, 0.17316268384456635, 0.4963701367378235, 0.26868507266044617, 0.35084837675094604, 0.2805527448654175, 0.1785704791545868, 0.3554076552391052], "prob": [2.4016160750761628e-05, 6.505641795229167e-05, 0.4523652493953705, 0.004375236574560404, 1.7929913838088396e-06, 0.006524204276502132, 0.0010083181550726295, 0.2805189788341522]}, {"target": [1], "doc": ["this sound good to i", "since we be not change the default behavior for the exist app , and just clean up the meaning of various flag and deprecate the confusingly name <tag> flag , we be make the current situation strictly well without downside .", "the only break change be the default to the behavior of new ssr project , without affect the default of exist application"], "issue_sim": [-0.005657118745148182, 0.3684924244880676, 0.3914138078689575], "prob": [0.0006175932358019054, 0.9762819409370422, 0.09021419286727905]}, {"target": [6], "doc": ["this be different only in the sense that it provide a feature that give you more flexibility and support by other framework .", "i would assume that this kind of dependency can be instantiate only from injector", "get and in this case it can be exclude from the lifecycle workflow", "\" also this come at the cost of framework bundle size which the angular team be try to prevent", "all code be there , this fix can be one or two liner i guess", "might be a solution to allow a flag for injector", "get to resolve dependency for the constructor of the class , this will also mean that the create instance be exclude from the lifecycle"], "issue_sim": [0.12385086715221405, 0.3946675658226013, 0.2664886713027954, 0.23588824272155762, 0.12913654744625092, 0.26406559348106384, 0.43631941080093384], "prob": [0.2295345515012741, 0.09801287204027176, 0.03835706785321236, 0.2589362561702728, 0.060805439949035645, 0.022468512877821922, 0.17101356387138367]}, {"target": [1], "doc": ["not have this feature be a real pain for i and  make i switch from ts / nodejs to something more", "it be all fine and dandy , but when you be work on a complex project with a * a lot * of data structure  and you can not model the datum properly , you get the feeling that this be not a language \" for big boy \" .", "in my particular case , i want the property to be readonly , but modifiable from the inside", "and also serialize to json", "too many hoop to jump through"], "issue_sim": [0.11316647380590439, 0.23580798506736755, 0.5538665056228638, 0.2684984505176544, -0.09251721203327179], "prob": [0.044187888503074646, 0.9390457272529602, 0.08212477713823318, 0.0002740154159255326, 0.0001742117601679638]}, {"target": [8], "doc": ["ah , i see what you be say", "but since it be not available in ts - land as a global , you would n't be reference it as a global", "it be , but", "this be an area that i be passionate about since i help maintain the definition for react", "i really want ts to improve in this area", "i be n't clear on this point", "if that be the case then it be actually a whole lot like this proposal", "again , i think the right approach here be for ts to not complain", "it be not a guarantee that the global will conflict  and it just seem like it would be really hard to somehow tell ts to not spew a bunch of error in this situation even though you know the runtime wo n't conflict ."], "issue_sim": [0.04608860984444618, 0.23189085721969604, 0.06387794762849808, 0.20118576288223267, -0.02830716222524643, 0.031560249626636505, 0.16261282563209534, 0.03470705449581146, 0.1907423734664917], "prob": [0.0002745224046520889, 0.21008974313735962, 0.0012363060377538204, 0.0048525528982281685, 0.0004646854940801859, 1.502752820670139e-05, 0.00011516675294842571, 0.0002516258100513369, 0.913262665271759]}, {"target": [2], "doc": ["i do n't see why that 'd happen unless you have leak on increasingly take up memory", "imo we do n't need anything new", "we can already solve those issue with vuex and keep - alive as mention above"], "issue_sim": [0.1392447054386139, 0.043088920414447784, 0.20360518991947174], "prob": [0.5932877659797668, 0.03120342455804348, 0.16782520711421967]}, {"target": [0], "doc": ["portability be n't a big concern , since we could just run the gdscript as we do now on unsupported platform ."], "issue_sim": [0.2565832734107971], "prob": [0.9993765950202942]}, {"target": [0], "doc": ["here be a pure css solution that might help anyone catch in this dilemma out :"], "issue_sim": [0.31832611560821533], "prob": [0.9998319149017334]}, {"target": [0], "doc": ["that be back when there be only a hairy map - type base definition of <tag> which we do n't particularly like , so do n't want to add ."], "issue_sim": [0.23566792905330658], "prob": [0.9999333620071411]}, {"target": [0], "doc": ["ow , i just find out that we ca n't get resolve datum in guard , even from the parent ... that s really bad !"], "issue_sim": [0.2803114056587219], "prob": [0.9998770952224731]}, {"target": [0], "doc": ["i think about the use case and i do n't think <tag> on <tag> would make sense , because it be not really about <tag> or the component be switch .", "instead , i 'd make a custom transition component that communicate over a share event bus : <url>", "you can use this component as the base and make variation of it for different view , but they can all share the same communication channel as long as they belong to the same <tag>", "note the fix for <tag> be not release yet so i be not include it in the fiddle"], "issue_sim": [0.43190330266952515, 0.5474042892456055, 0.37312328815460205, 0.31259071826934814], "prob": [0.5321758389472961, 0.034112002700567245, 0.4198968708515167, 0.006477906834334135]}, {"target": [4], "doc": ["my current project have a modal , and yes , the title and other metadata  need to change depend on what the modal be show", "it do n't matter that it be just a modal , and vue should n't care that it be just a modal", "it be declare as a child in vue - router just like any other child", "i should be able to just include the require metadata change in the component declaratively , kinda how vue - meta work", "as you say , change something like the og image be obviously important to be handle by the server , but vue do n't offer a _ clear _ way of go about that .", "as for say spa be an anti - pattern , well that be just go with the current wind of javascript trend , which change every few month", "as evan point out in a recent tweet : \" people like different thing , you know", "i wish more programmer understand that too", "\" and in many project , an spa make the most sense"], "issue_sim": [0.3549104332923889, 0.2566896080970764, 0.2261386215686798, 0.4131568968296051, 0.4892629384994507, 0.24875898659229279, 0.06845910847187042, 0.16216212511062622, 0.10368575900793076], "prob": [0.29084599018096924, 0.08410578966140747, 0.00044795384746976197, 0.031735338270664215, 0.26122644543647766, 0.03191264718770981, 0.0024053880479186773, 0.0003293335612397641, 0.0005092669161967933]}, {"target": [0], "doc": ["if there be two version of a node i would always append 2d/3d suffix ."], "issue_sim": [0.35382720828056335], "prob": [0.9999291896820068]}, {"target": [0], "doc": ["argh update openssl and get it to compile on every single platform be. such a giant pain in the ass", "on fri , nov <number> , <number> at 8:35 am , r  mi verschelde notifications@github"], "issue_sim": [0.5403878092765808, 0.05939596891403198], "prob": [0.9163979887962341, 0.023809591308236122]}, {"target": [2], "doc": ["this be useful to know , but user do n't understand that because it be very much contrary to how most software treat version number - nobody see an 0", "1 increase and think \" wow , i should definitely get that , it be almost certainly security relate", "if this be the case , powershell need to call out security update differently than \" we add new stuff \" release , and do thing to educate user about how powershell use version number differently than most project"], "issue_sim": [0.2969163656234741, 0.15669816732406616, 0.4846478998661041], "prob": [0.6436947584152222, 0.008870589546859264, 0.637204110622406]}, {"target": [0], "doc": ["yeah vulkan be still not stable or widely support", "on fri , feb <number> , <number> at 9:37 am , nuno donato notifications@github"], "issue_sim": [0.5703465938568115, 0.027118753641843796], "prob": [0.5466092824935913, 0.05940036103129387]}, {"target": [4], "doc": ["step to reproduce : add an asset remove it after the import directory be create : watch how the import directory still have the file inside it", "these information be important yes let i play with they", "you like to hide your toy under your bed i like they sorted and in box that i manage myself why ca not we have it both way", "yes it be what i be talk about how bad this design decision be and how it affect flexibility and user control in the end", "you want meta data file look at unity3d they do it and that be the reason i come to godot i want a open source and simple and minimalist engine , with no meta file and shadow area that you should not look at , with full user control", "you be take that away", "the problem i have : i want to be able to import my asset from where i want the way i want .", "i would like to avoid have duplicate file"], "issue_sim": [0.4298669993877411, 0.1014140397310257, 0.24064411222934723, 0.33065637946128845, 0.5401169657707214, 0.01080300472676754, 0.31829410791397095, 0.30910900235176086], "prob": [0.03132057189941406, 0.0016300220740959048, 0.4188992381095886, 0.04763928800821304, 0.34001728892326355, 8.906811126507819e-05, 0.13228879868984222, 0.00020495169155765325]}, {"target": [0], "doc": ["i still feel that have an extra composition model greatly muddle the structure of the program and only make the mental model more complex then it should be .", "although the propose solution may make certain use case a bit more manageable , i be not really convinced of the tradeoff"], "issue_sim": [0.2927398085594177, 0.29634761810302734], "prob": [0.7653355002403259, 0.3660464286804199]}, {"target": [5], "doc": ["<tag> work differently for component and native element : <url>", "therefore , i guess make <tag> \" smart \" be not trivial", "the input event probably need to be modify manually from the inner component to the outer component <tag>", "in my app , i be wrap a third party component and just add custom style", "i think it should work with <tag> , but i notice that add <tag> be also require", "i think it be a bit weird that a component with a declare <tag> have <tag> in <tag> but do n't have <tag> in <tag> .", "think about it twice , i guess this be because <tag> be automatically add to the accept <tag> due to <tag> , and thus it be not include in <tag>  anymore", "however , <tag> do not exist unless <tag> be specifically declare", "perhaps <tag> could be add to <tag> if it be not manually specify as a prop"], "issue_sim": [0.4196678102016449, 0.08960874378681183, 0.4890572428703308, 0.4858842194080353, 0.4784018397331238, 0.5702641010284424, 0.3918316960334778, 0.1701297014951706, 0.44923314452171326], "prob": [0.0011511262273415923, 0.007463695481419563, 0.06988582015037537, 0.002939544152468443, 0.049494486302137375, 0.11469872295856476, 0.08109869062900543, 0.009217078797519207, 0.02429768815636635]}, {"target": [1], "doc": ["the behavior change if i switch back to the old way of provide the service", "the old way cause an infinite loop where a new instance of the service be create each time the interceptor intercept a new request , and each new instance of the service fire a new http request .", "it never stabilise before exceed max call stack size", "stackblitz example : <url>"], "issue_sim": [0.1977766901254654, 0.47003743052482605, 0.08766891807317734, 0.1292368769645691], "prob": [0.10078459233045578, 0.8863027095794678, 0.010878185741603374, 0.0056688543409109116]}, {"target": [0], "doc": ["imo , an <tag> should be the default , despite the fact that it would probably be a bit of a break in behaviour from what it be previously ."], "issue_sim": [0.17610779404640198], "prob": [0.9999672174453735]}, {"target": [0], "doc": ["just because a solution work do n't mean it be a good solution", "- in the context of a webapp , reload the window mean load and parse once again all the init chunk of your app plus lazy load all the remain chunk", "and the user have to wait for the app to start again", "also , you might have some context that you wish to preserve between user login and logout", "- in my context , the angular be package with electron as a \" native desktop app \" and launch in full screen", "the point be that the user feel like they be use a native application as much as possible", "if i have to reload the browserwindow every time a user log out , it kind of kill the native app feel", "- still in my context , i do indeed need to preserve some context between user session and i think that save this context somehow  be an ugly hack than the one i 've explain early"], "issue_sim": [0.051242999732494354, 0.4727640748023987, 0.12680113315582275, 0.1234479621052742, 0.2103099226951599, 0.08571908622980118, 0.40763798356056213, 0.20951204001903534], "prob": [0.003318093717098236, 0.5068349242210388, 0.00041097551002167165, 0.0008567547192797065, 0.0017533153295516968, 0.000777972920332104, 0.0032085306011140347, 0.28821197152137756]}, {"target": [0], "doc": ["i be also not aware that python and lua support such a syntax , but at first sight it seem highly confuse to i", "what would be the output of <tag>", "imo it make more sense to stay consistent and treat <tag> and <tag> as conditional in all situation , such they should always resolve to true or false .", "what you suggest in the op can be achieve with <tag> , which be imo clear than <tag>"], "issue_sim": [0.5155335664749146, 0.16022491455078125, 0.41473788022994995, 0.1682048887014389], "prob": [0.17774821817874908, 0.007340635173022747, 0.4484737813472748, 0.016547903418540955]}, {"target": [3], "doc": ["this be what firefox say when add the <tag> to the end of a script file that be n't a module", "as an error and it break the code", "and in chrome :", "so , long term this really need to be fix since it be clearly a bug on typescript 's side ."], "issue_sim": [0.31480997800827026, 0.24871176481246948, 0.057302363216876984, 0.28250449895858765], "prob": [0.8525742292404175, 0.055907487869262695, 0.0009382338030263782, 0.20621924102306366]}, {"target": [0], "doc": ["actually i do like the idea , but i would call it <tag> because it add aditional value in scope that be already create by <tag> ."], "issue_sim": [0.4393605589866638], "prob": [0.9998583793640137]}, {"target": [2], "doc": ["i do n't think compare a 2d game engine layout to a 2d image editor be at all a good comparison", "when create a 2d level you generally do n't know how large your game area will be  , and the size of the boundary will expand as you progressively add to   the level", "whereas in an image editor you know your canvas or document size from the outset and there would be little reason to add to the outside of these initial boundary .", "a well comparison be to the other popular 2d game engine", "gms and unity both allow you to freely pan without restriction", "construct have the side scroll bar , but these dynamically resize if i remember correctly", "i also use a trackpad some of the time , and just use either the hotkey or the + - arrow to zoom in and out with no issue", "also the option to frame up the select object be right there in the view menu , so the user do n't have to hit the f key", "the good solution would be to have the limit unlock as a user define option as you mention in an early comment"], "issue_sim": [0.13414070010185242, 0.3307352662086487, 0.2973717451095581, 0.06498605012893677, 0.0722474604845047, 0.34536898136138916, 0.1592145562171936, 0.28173381090164185, 0.31539490818977356], "prob": [0.004273117985576391, 0.35325196385383606, 0.7527317404747009, 0.00010779708827612922, 0.0011699487222358584, 0.002365445252507925, 0.04236621782183647, 0.02698463201522827, 0.012869269587099552]}, {"target": [1], "doc": ["let i try to summarize the debate :", "we 've establish that <tag> in powershell script block / script / function be just syntactic sugar  , and that anything not capture or redirected go to the success output stream _ by default _ - no operator or output command need - and that be something that must n't change .", "* the only way to get traditional <tag> semantic in powershell be via _ class _ method", "* assign statement output to _ variable _ , as @dragonwolf83 have show , can be use to prevent unintended implicit output", "* if suppress output be the only goal , i", ", if you know you be not interested in the output , you can simply assign to <tag>  <tag>", "| out - null <tag> write- * <tag> write - host <tag> out - host <tag> <tag> powershell", "complexcommandwhoseoutputiwouldideallyliketoreadwhenitisexecuted | out - host", "' regular output '", "<tag> <tag> out - host <tag> write - host <tag> write- * <tag> out - host <tag> write- * <tag> write - host <tag> out - string <tag>", "| out - string | write - host `", "at this point i be unclear on what be actionable here and whether any enhancement be need", "@stevel - msft , can you clarify what , specifically , be up for grab"], "issue_sim": [0.05386127904057503, 0.4364590346813202, 0.36366426944732666, 0.2830979824066162, 0.25258347392082214, 0.38835495710372925, 0.25610119104385376, 0.05950954928994179, 0.11307850480079651, 0.19881239533424377, 0.21397316455841064, 0.28578388690948486, 0.24866540729999542], "prob": [0.0019988592248409986, 0.9476590752601624, 0.00033145106863230467, 0.004470528569072485, 7.094953616615385e-05, 0.026684217154979706, 0.00701028760522604, 4.6338878746610135e-05, 2.518398332540528e-06, 0.002599784405902028, 0.0003195774042978883, 0.0021449748892337084, 2.0314359062467702e-05]}, {"target": [5], "doc": ["this seem to make sense to i base on the doc :", "it seem like you 'd still be deactivate the current route in the new navigation", "it may be that the intend use for this would be to first modify the state such that when <tag> run in the new navigation , it return <tag>", "also see somewhat relate discussion", "it be from <number> so some of the statement be slightly outdated , but some still hold true", "\" run guard be a part of a navigation . \" and \" every navigation be independent \""], "issue_sim": [0.13099409639835358, 0.2245650738477707, 0.40747058391571045, -0.03757227957248688, 0.08220920711755753, 0.2160620093345642], "prob": [0.005114807281643152, 0.01050708256661892, 0.9593467116355896, 0.0007504608947783709, 0.0330909825861454, 0.018541395664215088]}, {"target": [0], "doc": ["i do n't want to wait a huge amount of time to get notify that an update be available ...   the <tag> be take several second before completion so your idea be non - sense for a critical update scenario .", "the simple solution would be to send the <tag> just when we know a new version be available", "i do n't know why it be n't the case"], "issue_sim": [0.4388047456741333, 0.2652752101421356, 0.030854441225528717], "prob": [0.8231011033058167, 0.17187990248203278, 0.010082327760756016]}, {"target": [0], "doc": ["an alternative i think about could be to make a simplified , generate. from binding , godot api for this to link from c or c++ .", "it would at least", "make it easy to link and keep compatibility between version", "on we d , jun <number> , <number> at 3:02 pm , ignacio etcheverry < notifications@github"], "issue_sim": [0.43146589398384094, 0.07435230165719986, 0.3653653860092163, 0.07294262945652008], "prob": [0.9769980907440186, 0.003352972911670804, 0.013441810384392738, 0.0110384002327919]}, {"target": [1], "doc": ["i do n't remember <tag> value above the monitor 's refresh rate cause any issue", "that say , it would be helpful to have a function to retreive the monitor 's refresh rate , but the implementation be quite os - specific and would have to be do for every desktop platform ."], "issue_sim": [0.46702009439468384, 0.4859170913696289], "prob": [0.03266311064362526, 0.9852232933044434]}, {"target": [3], "doc": ["@kschwidder ah , separately , like plugin , right", "and you mean that it be still an angular module", "yep , it be a real problem , because there be many edge case when those separate module use something from angular core - libs", "it mean , that you either have to include all that duplicity many time or you have to include the full angular core - libs into the main bundle , so no tree - shake", "and still with the primary condition , that all part use the same angular version", "now the whole app , all module , together with all dependency package be compile in one build path to know what should be keep and what can be throw away", "<tag> be introduce to solve the problem as the web component concept", "we will see what new ivy bring on the table"], "issue_sim": [0.10855540633201599, 0.4171404540538788, 0.5401928424835205, 0.38075166940689087, 0.19434350728988647, 0.4349434971809387, 0.24550095200538635, -0.03356681391596794], "prob": [0.010309385135769844, 0.03377130255103111, 0.11542472243309021, 0.19924108684062958, 0.05935105308890343, 0.21594181656837463, 0.012111971154808998, 0.012969153001904488]}, {"target": [3], "doc": ["i be sorry that you do n't like my \" idea \" , @odonno : grin :", "technically , there be no update available by the sw until it have successfully download the necessary file", "the sw should not advertise an update before it be able to serve it", "in the future , we could consider have more granular report , so the sw could emit event for both when an update be available on the server and when the update be ready to be serve by the sw .", "for the time be , though , <tag> refer to an update be available to be serve by the sw"], "issue_sim": [0.07860800623893738, 0.313551127910614, 0.1724679321050644, 0.37816694378852844, 0.2215227633714676], "prob": [0.0015692212618887424, 0.008265436626970768, 0.008662725798785686, 0.8804419636726379, 0.010459817945957184]}, {"target": [1], "doc": ["i think i find a possible solution on how to handle this", "i have see that the <tag>  in the router accept an instance of thar <tag> .", "* * <url> * *", "with that in my mind i implement an own implementation of the <tag> which accept a modulewithprovider", "use this implementation i can do the following in my route :", "some feedback on the solution would be nice , since my knowledge about the injector and compiler be limited , i do n't know if i be do thing i should n't"], "issue_sim": [0.19782795011997223, 0.21186570823192596, -0.019595470279455185, 0.32798779010772705, 0.37168896198272705, 0.3153160810470581], "prob": [0.09472331404685974, 0.5214598774909973, 0.0016332842642441392, 0.025960417464375496, 0.0006378130055963993, 0.3367120027542114]}, {"target": [1], "doc": ["i would rather use the v - else with v - if", "v - empty or v - else with v - for be not that easy to understand .", "keep it simple stupid"], "issue_sim": [0.15545883774757385, 0.07217207551002502, 0.06815077364444733], "prob": [0.005936372093856335, 0.8878348469734192, 0.022945158183574677]}, {"target": [0], "doc": ["it seem like a date transform for the date / datetime input type would be useful .", "however , i be more interested in be able to register transform", "- momentjs transform instead of a potentially build in date transform"], "issue_sim": [0.4640752077102661, 0.369577556848526, 0.6155221462249756], "prob": [0.9236017465591431, 0.09837259352207184, 0.1188545823097229]}, {"target": [3], "doc": ["all pc gpus from <number> be support currently", "and maybe than older will have a subset of vulkan in the forthcoming driver", "so all gamer have a compatible card , and vulkan will be support on all os , even bsd", "also a big part of the vulkan driver implementation will be share with the exist opengl implementation , so more they will be vulkan games  well we will have opengl driver :)", "again sorry for my bad english", "i think that vulkan should be the priority of godot , because if it be one of the first engine to support it , godot will be massively use"], "issue_sim": [0.502841591835022, 0.5368124842643738, 0.5710500478744507, 0.6453462243080139, 0.031527530401945114, 0.6756125688552856], "prob": [0.0057189506478607655, 0.24568018317222595, 0.006864718161523342, 0.27169060707092285, 0.003282850841060281, 0.6037225723266602]}, {"target": [0], "doc": ["i believe this to be by design and desirable . what be undesirable , imo , be the operation of <tag> .", "i have # <number> to address this", "this issue be kind of a duplicate of that"], "issue_sim": [0.21124441921710968, 0.03696907311677933, 0.04512188956141472], "prob": [0.9976213574409485, 0.00045655525173060596, 0.029368102550506592]}, {"target": [4], "doc": ["to provide eclipse completion , you must implement", "where <tag> be the position of the cursor", "so eclipse work with position for completion and as you have say you can transform position to line / offset by use getlineofoffset / getlineoffset", "but i think it be very shame to transform position to line / offset although tsserver convert every time   line / offset to position <url> :", "if tsserver can accept just position , it will avoid convert position to line / offset on client eclipse side and line / offset to position on tsserver side .", "yes i be aware that it exist <number> eclipse typescript plugin  and  but even if they have do great job , i be developpe   , why", "let 's i explain the reason : at first i be the author of  which support angular 1", "x and it be base on the  which provide the capability to use  a very powerful javascript inference engine   in a java context", "it work great but now i would like to support angular2 and so support typescript", "for that i have <number> choice :", "- extend the javascript parser  with typescript language  to support typescript completion with tern", "- use typescript language service", "so i be experiment the second choice now , and the first thing i want to do be to", "- * * use tsserver instead use custom typescript server * *", "eclipse typescript do n't use tsserver and customize the type language service with their own server implementation", "imho , i prefer use tsserver", "when you will do a new release , user will just do <tag> and that be all", "- eclipse typescript implement their own texteditor", "in eclipse word , it exist jsdt which be the official javascript editor", "i would like to do the sam ethe with typescript", "- eclipse typescript seem very slow", "eclipse typescript write and read after when command must be send", "it can not support \" event \" command", "-  be not only for eclipse", "it be for java and i hope netbeans , webstorm guy will be interest to implement that and consume typescript", "hope you will understand my explanation"], "issue_sim": [0.31248733401298523, 0.2578803300857544, 0.6592247486114502, 0.5543686747550964, 0.659532904624939, 0.29882824420928955, 0.02410747855901718, 0.28173065185546875, 0.18605853617191315, 0.025512725114822388, 0.2195228487253189, 0.1035546213388443, 0.05957509204745293, 0.20078973472118378, 0.2575034499168396, 0.1895626187324524, 0.036139026284217834, 0.32320326566696167, 0.41653913259506226, 0.14967988431453705, 0.2765263319015503, 0.39849406480789185, 0.13347624242305756, 0.19848285615444183, 0.31457868218421936, -0.025468163192272186], "prob": [0.03735428676009178, 0.001575618633069098, 0.25929638743400574, 0.013466092757880688, 0.06224117800593376, 0.01553027518093586, 0.0006880350410938263, 0.0007745298207737505, 0.00028870071400888264, 0.0006007319898344576, 0.00034111368586309254, 8.031063043745235e-05, 0.005759002175182104, 9.306113497586921e-05, 0.00018090337107423693, 1.4717267731612083e-05, 0.00013409010716713965, 2.219840644102078e-05, 3.782874409807846e-05, 2.6699734007706866e-05, 1.7570288036949933e-05, 3.6975634429836646e-05, 3.1138319172896445e-05, 3.990618643001653e-05, 0.01239029597491026, 5.573075031861663e-05]}, {"target": [0], "doc": ["base on the initial feedback , i think it make sense to have the windows powershell psmodulepath add by default as many module just work ( or seem so without exhaustive testing", "-  implement in the console host instead of userprofile", "-  make configurable in startup json", "-  blacklist or whitelist windows powershell module", "this should also resolve <url>"], "issue_sim": [0.603926420211792, 0.2761188745498657, 0.19111594557762146, 0.5241924524307251, 0.06769609451293945], "prob": [0.9632810950279236, 0.013939782045781612, 0.012389644980430603, 0.019866706803441048, 0.0026751882396638393]}, {"target": [2], "doc": ["this discussion be so convoluted that i be not sure what be the good", "it start as the <tag> problem , but then the problem be in the word <tag> too", "sum up the original point , the issue be that <tag> be use more often than <tag> so the name of the former should be simple .", "<tag> and <tag> make the name more explicit , put a great burden in the game programmer to pick the good one for their use case , so it might solve the misuse issue", "as for the word <tag> , it be very c - like in nature so it might be an issue for people not use to the language , but it be also a establish standard"], "issue_sim": [0.12025405466556549, 0.2059958428144455, 0.5142785906791687, 0.42735758423805237, 0.4072258174419403], "prob": [0.04285740107297897, 0.03682924807071686, 0.1539137214422226, 0.10981912910938263, 0.14351782202720642]}, {"target": [1], "doc": ["i still would find it usefull", "pwsh have nice number  . and can not use fsharp for as it be too type . but for simple and small formula in console it be great . so have 2.pow   or 2**512 would be great ."], "issue_sim": [0.05768267810344696, 0.43714749813079834], "prob": [0.016680320724844933, 0.95726478099823]}, {"target": [0], "doc": ["such a workflow would also be brilliant for angular1 app where you may have a main file that inject all your dependency and a separate file that specify your controller .", "the controller file export a function / class", "it receive its dependency but do not inject they directly , be able to tag they use jsdoc as a type that be define in a different file in your workspace would be invaluable there"], "issue_sim": [0.32902467250823975, 0.19404208660125732, 0.31532585620880127], "prob": [0.8412082195281982, 0.0008779510390013456, 0.7826210260391235]}, {"target": [10], "doc": ["just to mention , this be not quite correct", "actually <tag> file store the import setting in a", "ini - esque format , while the <tag> folder store cache import file", "the user be n't require to use the import tab , just as he be n't require to use the editor to write", "but , fact be , it be much simple to use the import tab and the editor , as compare to edit by hand .", "the idea behind the new import system be to make import much less painful", "in the previous version , you have to worry about remembering to import file , while the new version import automatically for you", "now , there be likely some case in which manual import be need", "we would like to support only automatic import now , for the sake of consistency , so we would view such case as more - or - less bug", "similar to package management solution , you do n't really want the user to have to mess around with file manually , when there be an automatic and  bug - free method available", "so , remove the import folder for the sake of not have an import folder , or give an option to manually import for the sake of manual import be a no - go", "as  , you have to mention the problem you have , instead of just rant how the new version be bad and the old one be well"], "issue_sim": [0.031092528253793716, 0.24256764352321625, 0.391510009765625, 0.2187834531068802, 0.13808834552764893, 0.30380839109420776, 0.2704436182975769, 0.12171050161123276, 0.18611502647399902, 0.3898612856864929, 0.46119773387908936, 0.21422484517097473], "prob": [0.0009983160998672247, 0.004537636414170265, 0.0663902759552002, 0.040531352162361145, 0.17603260278701782, 0.0002669923414941877, 0.009415657259523869, 0.00024950323859229684, 0.019994571805000305, 0.014281871728599072, 0.1155843734741211, 0.031627267599105835]}, {"target": [0], "doc": ["if decouple ngc from tsc require a huge effort / rewrite , my use - case definitely do n't merit it :)"], "issue_sim": [0.3263483941555023], "prob": [0.999970555305481]}, {"target": [2], "doc": ["@brian428 a question , that be basically this issue , be raise during the qa session of the last angular connect", "it be at 2:34:56 in this", "basically igor minar answer that incremental compilation be introduce in version <number> and that they know there be some more thing they can do with the test bed and that this will be work on in version <number> and <number> .", "so interpret that as we can expect it some time next year and this issue be in fact on their radar and current plan"], "issue_sim": [0.3456655740737915, -0.02521520107984543, 0.4950101375579834, 0.12033184617757797], "prob": [0.12678271532058716, 0.002782846335321665, 0.3782871961593628, 0.133356511592865]}, {"target": [7], "doc": ["@dddugan it be certainly a difference of opinion on how it should work", "on the one hand , we need to maintain parity with the object as they be return from the api and on the other be convenience", "i can not condone make the default behavior break parity with api", "as someone who work heavily with api , i can not stand it when something make assumption about how the object should be provide to i , especially when that assumption break with what the api have document", "the api say it will return an array of object per page , i would expect and array of array from <tag>", "my vehicle for obtain these object from the api may change , and i do n't want to adjust my logic to fit with what ever api breaking format that vehicle have decide to impose on i", "we could _ maybe _ add a switch to unwrap array , but , i be not real excited about do so", "i think it be good to just return the object as they be and let the user decide how they want to process they .", "and they do n't", "1 for this operation to work you need", "fall back to <tag> ,", "check for error ,", "inspect content - type header ,", "convert the <tag> to an object ,", "handle serialization error ,", "inspect the header for <tag> ,", "regex parse the single <tag> header ,", "and finally repeat the process with the <tag> link uri", "0 <tag> manage all of that for you"], "issue_sim": [0.01038844883441925, 0.12720778584480286, 0.30099958181381226, 0.22657530009746552, 0.45816999673843384, 0.26819780468940735, 0.164280503988266, 0.16799122095108032, 0.05118022486567497, 0.039036598056554794, 0.13277770578861237, 0.08675218373537064, 0.20480948686599731, 0.23639991879463196, 0.3214520215988159, 0.07870396971702576, 0.27950507402420044, 0.19548934698104858, 0.09155510365962982], "prob": [0.0034208118449896574, 0.1294541358947754, 0.0053400518372654915, 0.5128366947174072, 0.10821177810430527, 0.5585610270500183, 0.001556563307531178, 0.18798896670341492, 0.0002621118619572371, 0.00014138009282760322, 0.0011629171203821898, 7.502451626351103e-05, 6.422416481655091e-05, 0.00020389968995004892, 5.8106426877202466e-05, 0.00010514831228647381, 0.00019006378715857863, 0.0011975272791460156, 0.00047913106391206384]}, {"target": [8], "doc": ["perhaps the tutorial for scon compilation , on the wiki , be just not thorough", "if this be truly the case , i welcome anyone to show i how to correctly compile use scon in window", "i instal python 2", "7 32bit , then scon 2", "i set the environment variable and alias for window up", "then i do as the instruction say and run \" scons", "bat bin / godot", "exe \" from the godot directory in c", "no luck , it be not compatible with new version of visual studio .", "it could not find my vs <number> install and i have no interest in instal multiple copy of vs on my system", "if you know how to get scon to recognize vs <number> then please post how to do this", "so then i do a work around with mingw", "it work like a charm after i manually modify the build file to include the correct directory for lib and header file", "i should not have to do this with a build system", "it should just work", "if you use scon then at least include a find routine in the build system for find the dependency in mingw", "i unfortunately do not know scon well enough to write such a routine", "i deal in cmake and c mainly", "personally i do n't mind use mingw , i prefer it actually", "i just should not be force to modify the build file to get it to work", "if anyone have any suggestion for make this process easy on window then please post it in the godot wiki where it may be of use", "otherwise i will just go ahead with my own cmake write up", "it will take a while , but will be worth it for more up to date window system"], "issue_sim": [0.336189329624176, 0.4567081034183502, 0.2453806847333908, 0.06805911660194397, 0.3343846797943115, 0.32231882214546204, 0.07093656808137894, 0.2509133219718933, 0.4286457300186157, 0.4488948583602905, 0.23391124606132507, 0.540147066116333, 0.5118336081504822, 0.4796818494796753, 0.06715227663516998, 0.6235677599906921, 0.1698417067527771, 0.4680100381374359, 0.4152779281139374, 0.4967845678329468, 0.30988556146621704, 0.5604207515716553, 0.2623335123062134], "prob": [0.05262091010808945, 0.01393673475831747, 0.000738989096134901, 0.0016330264043062925, 0.001784209394827485, 0.0014141617575660348, 0.00011578600242501125, 0.00046988754183985293, 0.03212035447359085, 0.03544355183839798, 0.01566818542778492, 0.0001493234740337357, 0.02034139819443226, 8.329165575560182e-05, 2.35826191783417e-05, 0.0018986338982358575, 9.347697050543502e-05, 2.7793288609245792e-05, 0.00024777569342404604, 0.0008416724158450961, 0.06946485489606857, 7.638616807525977e-05, 0.003591724205762148]}, {"target": [3], "doc": ["@brian428 i finally spend a day focus on this issue", "i publish my result in the  function in", "so far it seem to be work well", "it work exactly as you suggest , call <tag> extract their <tag> , then pass they in to a refresh <tag> .", "the test environment be reuse between test  ` )"], "issue_sim": [0.1465960443019867, 0.06748469173908234, -0.0361153669655323, 0.2733929753303528, 0.1835852563381195], "prob": [0.06802833080291748, 0.09800335019826889, 0.0872412845492363, 0.6039908528327942, 0.015776893123984337]}, {"target": [1], "doc": ["@kai - h if you use the numeric enter key in textedit , do it show <tag> or a newline", "seem like your keyboard be configure incorrectly and probably not an issue with powershell ."], "issue_sim": [0.5250877737998962, 0.4210568964481354], "prob": [0.0009286442655138671, 0.9918083548545837]}, {"target": [0], "doc": ["the intersection type do n't really have anything to do with the behavior here .", "we currently report an error because <tag> be not present in _ all _ constituent of the union type", "this be the reason for the error in the original example", "we might consider an alternate behavior in <tag> mode", "we could say that the set of property be _ every _ property in every constituent , with type of similarly name property unione together and with <tag> add to their type unless the property be present in _ all _ constituent", "this would make the original example work", "so , for purpose of property access , the type", "and it would require type guard to access the value in <tag> and <tag>"], "issue_sim": [0.2506667673587799, 0.25324487686157227, 0.15305067598819733, 0.1992289274930954, 0.23054629564285278, 0.0685989111661911, 0.10982402414083481, 0.17615383863449097], "prob": [0.05497914180159569, 0.1001102551817894, 0.02075532265007496, 0.01616998203098774, 0.7127587199211121, 0.004557290114462376, 0.0058928378857672215, 0.026545194908976555]}, {"target": [0], "doc": ["it might be more logical to give it the type of the property x in a or b."], "issue_sim": [0.2506749629974365], "prob": [0.9990560412406921]}, {"target": [0], "doc": ["hmm , i do n't know about that but for component like that i think you could use jsx or <tag> to spread prop ."], "issue_sim": [0.45054465532302856], "prob": [0.9999562501907349]}, {"target": [0], "doc": ["i do n't think there be a way to do that for now", "@voidale if you be use angular <number> , you can use  directly  when you write your own pipe"], "issue_sim": [0.07839825004339218, 0.32346561551094055], "prob": [0.5751582980155945, 0.0966266319155693]}, {"target": [3], "doc": ["well , at least it should display  before crash", "~~we should also test for this <number> function individually", "all these function be from the  extension , which supersede", "so we could test for these extension at the same time than we test for the 2.1 version .", "though , accord to the spec , there be some little difference between the ext and arb version", "edit : into the godot source code , i 've find no difference between the way the arb version of these function be use , and the way the ext version should be use", "edit2 : though do n't think it be a good strategy to replace arb function by their ext counterpart in a hardcoded way like you propose , because there might be some implementation that might support the arb extension  , and not the old ext extension"], "issue_sim": [0.24887415766716003, 0.08768299221992493, 0.07385732233524323, 0.14327242970466614, 0.09116803854703903, 0.36969196796417236, 0.1920970231294632], "prob": [0.0002922808052971959, 7.408466626657173e-05, 0.00023246833006851375, 0.6030634045600891, 0.037975091487169266, 0.6598017811775208, 0.6005906462669373]}, {"target": [3], "doc": ["the issue be that that static reflector do not use the type checker of typescript", "currently , if there be an expression in the <tag> clause we ignore it", "this mean we have no idea that the base class implement <tag> nor an easy way to calculate it as it would require we to ask the type - checker", "we avoid use the type - checker because we need to be able to produce factory function before type checker or we would have to do two full type - check .", "we should consider recognize the pattern <tag> as meaning we should just ignore the <tag> and treat its parameter as the base class", "however , this would mean that we would not catch thing like ,"], "issue_sim": [0.4722060561180115, 0.10123848915100098, 0.3839178681373596, 0.3251495957374573, 0.31279075145721436, 0.049958936870098114], "prob": [0.03115442767739296, 0.007453294936567545, 0.41103118658065796, 0.3645452857017517, 0.008712894283235073, 0.0005039182142354548]}, {"target": [0], "doc": ["technically , you should be able to do this by use a function that return the vnode and render use what vue already export  .", "not sure of the utility of a feature like this", "fyi you can use <url>"], "issue_sim": [0.4043526351451874, 0.03331689164042473, 0.10621890425682068], "prob": [0.9957097768783569, 0.010136445052921772, 0.0026328405365347862]}, {"target": [1], "doc": ["@craigkovatch i do n't think use <tag> be good practice", "there be basically no benefit to use it , and a number of downside that you might run into .", "i do n't want to tangent this thread on the point ; but i 've describe in detail some of the downside here : <url>"], "issue_sim": [0.22805923223495483, 0.052109528332948685, 0.07822403311729431], "prob": [0.0012547698570415378, 0.979036271572113, 0.2781367003917694]}, {"target": [2], "doc": ["+1 for custom modifier", "seem like a no brainer , unless there be a good reason not to", "mask input and parse the value for application use be a very common practice , and make some \" syntatic sugar \" like v - model.lazy.currency=\"amount \" would be amazing !"], "issue_sim": [0.29207494854927063, 0.03939209133386612, 0.30585727095603943], "prob": [0.006732012145221233, 0.07190792262554169, 0.9717150330543518]}, {"target": [0], "doc": ["note that you 've always be able to use <tag> and <tag> interchangeably on windows - while there may be individual external utility that do n't support <tag>  , all the major api support it  .", "thus - aside from rule out illegal - in - a - filename character - literal use of <tag> work as a cross - platform filesystem - path separator"], "issue_sim": [0.3891882300376892, 0.49016085267066956], "prob": [0.7856844663619995, 0.44238677620887756]}, {"target": [0], "doc": ["propose feature do n't improve readability in call site .", "this be obvious if use interface instead of tuple :", "rule be very straightforward : if meaning of element be obvious , then use tuple", "otherwise , use interface", "similar to positional and name argument", "i be afraid that with new syntax people will start to use tuple in unsuitable place", "the provide example be synthetic", "how propose feature should improve readability in such case", "also , you can always write helper function to reduce repetition", "moreover , the propose feature do n't   protect from error at compile time when order of element in tuple be change :"], "issue_sim": [0.28751838207244873, 0.49895718693733215, 0.40354692935943604, 0.13646304607391357, 0.21501624584197998, 0.45804786682128906, 0.08555568754673004, 0.33328697085380554, 0.20103353261947632, 0.47045350074768066], "prob": [0.029926104471087456, 0.11230386048555374, 0.28199055790901184, 0.010111037641763687, 0.023796146735548973, 0.09550254046916962, 0.004492088686674833, 0.003642141353338957, 0.007911721244454384, 0.21356745064258575]}, {"target": [2], "doc": ["i do not really find scon to be slow , and its flexibility  be probably unmatched by anything else .", "scon be also extremely proven , i find it that it never screw up a build", "honestly , unless someone volunteer to rewrite * * the whole build system * *  , and * * show that it be either simple * *  or * * much fast * * , i would not even consider anything else , not even a bit"], "issue_sim": [0.15244758129119873, 0.2973603904247284, 0.39103806018829346], "prob": [0.6222546696662903, 0.022886479273438454, 0.6082110404968262]}, {"target": [1], "doc": ["would also be nice for other end up here look for a similar solution", "i have parent module lazy load some feature module and depend on the parent some thing need to be configure differently , would be great to see some feedback on what @kristofdegrave propose here ."], "issue_sim": [0.22921332716941833, 0.446904718875885], "prob": [0.08289767056703568, 0.9090422987937927]}, {"target": [1], "doc": ["at this point i do n't think this be godot fault anymore", "after vsync be. implement it do no long depend on godot ..", "on mar <number> , <number> 7:17 pm , \" arcfutahito \" < notifications@github", "com > write :"], "issue_sim": [0.03593337535858154, 0.24037696421146393, -0.00272297952324152, -0.0577186681330204], "prob": [0.10473034530878067, 0.8633555173873901, 0.23880121111869812, 0.00680223572999239]}, {"target": [1], "doc": ["map / set be useful stucture .", "it be urgent to support they in vue , otherwise it 'll be inefficient to use they in vue app"], "issue_sim": [0.25572189688682556, 0.3268912434577942], "prob": [0.04991282522678375, 0.9338869452476501]}, {"target": [2], "doc": ["that be an excellent point", "i be not sure why the current behavior do not produce a compile time error", "it might break a lot of build , but it probably should have be in place from the start .", "this may have be raise before"], "issue_sim": [-0.053318288177251816, 0.4607201814651489, 0.10479642450809479, 0.020604901015758514], "prob": [0.0032806547824293375, 0.00042297536856494844, 0.9303407669067383, 0.00044774264097213745]}, {"target": [0], "doc": ["you be right , tz name be no more support any more in 5.0 .", "you can check the changelog for detail", "tldr be we switch from an intl", "js base implementation to a custom implementation to fix a great deal of bug", "@ocombe could you please follow up to make sure the doc be up to date and may be give some pointer on how this could be implement in <number>"], "issue_sim": [0.28671473264694214, 0.06876172125339508, 0.14666959643363953, 0.11912912130355835, 0.21847710013389587], "prob": [0.5063149333000183, 0.031450849026441574, 0.024237480014562607, 0.04620043933391571, 0.4040137529373169]}, {"target": [1], "doc": ["this be discuss at length in # <number>", "the goal of disable the <tag> be accomplish by set input to <tag> or <tag> .", "this be a change in behavior and land for the v13 release", "<tag> will not be respect"], "issue_sim": [-0.006420912221074104, 0.2087796926498413, -0.013108542189002037, 0.11592011153697968], "prob": [0.07069404423236847, 0.8721340894699097, 0.0747491791844368, 0.011399706825613976]}, {"target": [1], "doc": ["i disagree with this change , because i think this will create some confusion", "it be _ prop _ , not _ attribute _ .", "i like to think that prop always need to have value , so instead of <tag> , i prefer <tag>", "say , if template be partially render on server and if it come with <tag> , i would n't want that   cast to boolean , i would like to restrict that prop to boolean only", "also , vue have some \" directive param \" that be use without value , e", "<tag> , so it will be confuse again"], "issue_sim": [0.17165377736091614, 0.39420831203460693, 0.3131777048110962, 0.6040931940078735, 0.3531506061553955, 0.08828206360340118], "prob": [0.018384579569101334, 0.2681092917919159, 0.04710370674729347, 0.5114611983299255, 0.07456658035516739, 0.009102794341742992]}, {"target": [2], "doc": ["thank you for the warm word", "we aware of the return semantic concern", "as you can imagine it be quite hard to make any reasonable non - breaking change in the exist semantic to alternate it for <tag>s .", "our approach to address these concern be ps class as @rkeithhill point out", "class be relatively new and not a fully - bake feature", "one of their goal be to provide more developer - orient experience for people who be use to language like c #", "they should help people write more safe and maintainble ps code fast"], "issue_sim": [0.010775897651910782, 0.17301799356937408, 0.25868165493011475, 0.15635696053504944, 0.23320385813713074, 0.29303309321403503, 0.02023671567440033], "prob": [0.005989579483866692, 0.0060904561541974545, 0.5276713371276855, 0.011499160900712013, 0.01630154810845852, 0.2459874004125595, 0.01172658707946539]}, {"target": [0], "doc": ["by the way , i search up a couple of tutorial video on unity 's ragdoll wizard to confirm what i remember , and it seem that they indeed attach collider and rigidbody component for each bone which make it easy to detect a collision  and apply arbitrary force on that specfic part of the rig :"], "issue_sim": [0.5133326053619385], "prob": [0.9999746084213257]}, {"target": [0], "doc": ["<tag> as the dependency have to specify the value and this be available for the factory function which return the final value ."], "issue_sim": [0.3188348412513733], "prob": [0.9998563528060913]}, {"target": [0], "doc": ["while everything currently go to stdout in the absence of redirection or in the presence of only   stdout redirection  , at least with a   <tag>  redirection it be currently possible to capture the _ error stream _ separately  - but _ only _ the error stream : streams <number> - <number> invariably go to stdout .", "here be variation of a simple test command that exercise all stream :"], "issue_sim": [0.4965478777885437, 0.2737995982170105], "prob": [0.9787241816520691, 0.002633380703628063]}, {"target": [1], "doc": ["i have already +1 this , but want to throw a note for people who need something ow", "while modifier be way more effecient , i have be able to achieve the same effect use a transparent input / component with a compute getter / setter field .", "i can share an example if someone need it"], "issue_sim": [0.04178132861852646, 0.42935478687286377, 0.13618788123130798], "prob": [0.027121642604470253, 0.9898747205734253, 0.003230463480576873]}, {"target": [1], "doc": ["yes , however , cmake do not automatically install ninja for you , and it be not the default generator", "most of cmake 's time be spend configure the project , in my experience , and while recent version of cmake have vastly improve performance , not everyone will have the late cmake ."], "issue_sim": [0.36698752641677856, 0.46552878618240356], "prob": [0.3571886122226715, 0.7628276348114014]}, {"target": [0], "doc": ["they should make the all available in the resolve , so you can subscribe to other , even if they be on the same level or not .", "it should not matter , as it can be that you move one later on , and then you do n't want to rewrite resolve that depend on that one"], "issue_sim": [0.21207518875598907, 0.2826051115989685], "prob": [0.6567044258117676, 0.4780404567718506]}, {"target": [3], "doc": ["@yortus   i understand the mechanic of how it work now and you be right   in what you say", "i be question the very premise that narrowing ca n't go beyond a member of a union type", "i see no reason why it ca n't", "what i be suggest be that narrowing should be allow to any sub - expression include lone term ."], "issue_sim": [0.02007545530796051, 0.25126326084136963, 0.26815012097358704, 0.20931145548820496], "prob": [0.003939702641218901, 0.3353728652000427, 0.000894030265044421, 0.9633828401565552]}, {"target": [2], "doc": ["i have a look at your commit", "look pretty nice and simple", "could you also add <tag> to formgroup and formarray ?", "and also to the <tag> method", "then there would be equal behavior across all class and method"], "issue_sim": [0.09126155823469162, -0.02506515011191368, 0.21622198820114136, 0.010709788650274277, 0.13608531653881073], "prob": [0.0005136629333719611, 0.04492891579866409, 0.45310908555984497, 0.0004196510708425194, 0.0015942270401865244]}, {"target": [1], "doc": ["you _ can _ import thing from an index file into the es module to use in an <tag> declaration", "<tag>s be design around the idea of an explicit compilation context for component though - it be a very intentional choice to not \" auto - discover \" component in an application .", "this would be especially problematic for code publish in library - without a direct import to something in the library , the compiler wo n't even be aware of the existence of those component", "this fr be n't really actionable for we - we be not go to make any substantial change to <tag>s", "instead , our focus be on reduce the need to author <tag>s via the new standalone components functionality"], "issue_sim": [0.4168611168861389, 0.3543244004249573, 0.37211716175079346, 0.08907628804445267, 0.17561522126197815], "prob": [0.03328521177172661, 0.36072197556495667, 0.3465449810028076, 0.017353877425193787, 0.021909860894083977]}, {"target": [2], "doc": ["first , i totally ack that certain object and type require complex business logic for proper sorting", "that be a very real business problem , so the question from here be \" what be the right technical solution to solve that business problem", "afaik , the original intention of reserve <tag> be to discourage user from write all sort of custom sort cmdlet that be incompatible with one another .", "the fact that anything * can * be sort with <tag> lend itself to be the \" one true way \" to sort object", "for discoverability 's sake , you do n't have user have to cycle through <tag> , <tag> , <tag> , etc", "until they get the right one", "from that perspective , i think the right solution here be to expose some sort of way for you to implement the proper custom sort method in your own output type", "for instance , maybe if you implement a <tag> method for your output type , we run that thing by default with <tag>", "that way , you can house that custom logic in the cmdlet itself , and user can continue to use <tag> as they would with any other object", "side note @schittli : your english be fantastic", "i genuinely do n't notice until you say something", "thank for be patient with we"], "issue_sim": [0.4366031587123871, 0.03362404182553291, 0.4701659381389618, 0.4496285021305084, 0.07475397735834122, -0.037339892238378525, 0.4092158377170563, 0.1494956612586975, 0.45311012864112854, 0.06120484322309494, 0.025073399767279625, 0.00988063309341669], "prob": [0.0006735564675182104, 0.006415779236704111, 0.153469979763031, 0.0033954123500734568, 0.016018450260162354, 2.2717400497640483e-05, 0.026663634926080704, 0.0008951521595008671, 0.015076055191457272, 2.090339279448017e-07, 3.299520903965458e-05, 0.00013869538088329136]}, {"target": [2], "doc": ["i do n't agree", "i do n't have any experience with the other game engine you mention , and to i if i see <tag> i expect it to destroy the node when the statement be run , not defer", "since we be all bikeshedde about what be more user - friendly for first time user  , i would not accept to rename <tag> to something that hide its deferred nature .", "godot 's api be mean to be very explicit about what it do", "if other engine be happy with less explicit name hide the defer status of the call , that be cool for they , but we do n't have to copy they", "many first time godot user do n't have any experience with other engine , we should n't assume that copy unity would make we more user friendly"], "issue_sim": [0.10354293137788773, 0.34715813398361206, 0.4355687201023102, 0.18950191140174866, 0.2694573700428009, 0.25401538610458374], "prob": [0.0003570068220142275, 0.5026203989982605, 0.1561126410961151, 3.822881626547314e-05, 0.0847175121307373, 0.010477395728230476]}, {"target": [0], "doc": ["i still do n't see the real in - game use for this , since this would fail :"], "issue_sim": [0.11840628832578659], "prob": [0.9999377727508545]}, {"target": [2], "doc": ["@reduz   also consider @ndee85 who have a blender animation tool that export to godot currently", "he want to add mesh deformation to it 's exporter", "if godot can use the open json format that dragonbone have , @ndee85 will not have to write several exporter so different game engine can use his tool - animation make with it will work on unity and all the other 2d game engine that dragonbone currently support , as well as godot !", "otherwise you be ask to make an exporter exclusive to godot and if he want to support the other game engine that can use dragonbone datum , he will have to do another exporter for dragonbone"], "issue_sim": [0.4905211329460144, 0.21336837112903595, 0.6693376302719116, 0.4132961928844452], "prob": [0.011889750137925148, 0.10245341807603836, 0.7840461730957031, 0.45844972133636475]}, {"target": [1], "doc": ["while we have take break change , i believe none of they fall under bucket <number> or <number> in the", "i believe this one fall under bucket <number> : reasonable gray area because i do think real world script depend on the current behavior ."], "issue_sim": [0.08395643532276154, 0.07374024391174316], "prob": [0.7428114414215088, 0.15085850656032562]}, {"target": [1], "doc": ["@airblader true , i have add a few sentence about this", "it be relatively easy to make it backwards compatible ."], "issue_sim": [0.008581047877669334, 0.11873559653759003], "prob": [0.0013328141067177057, 0.995582640171051]}, {"target": [0], "doc": ["i think , all we developer need to make modding be a quick and simple { gd , visual , etc?}script sandbox , and to be let to decide which class and singleton it can access  .", "that should be enough for most case , and in the bad situation you be go to have a global mock each real class or something like it"], "issue_sim": [0.4894465208053589, 0.20904198288917542], "prob": [0.8139613270759583, 0.22710959613323212]}, {"target": [0], "doc": ["i do n't want to have a bunch of annotation for every field , property and method", "i would rather have more keyword", "if people do n't like a ton of keyword we can remove some of they"], "issue_sim": [0.46470412611961365, 0.1727682501077652, 0.22012777626514435], "prob": [0.6510381102561951, 0.017003023996949196, 0.3252829313278198]}, {"target": [1], "doc": ["@toger5 i be do that when i be create the theme , the only problem be that sometimes you need to modulate use two color , for example in input , the background need to modulate to the bg color and the line need to modulate to the highlight color , i thing it could be solve by render two texture or use a custom shader", "but i m not sure if it be worth the effort , as i say we could offer <number> variation , i really do not think it be good to offer the full range of color i mean we will do this just for someone who want the engine to be green and purple .", "most people eante gray - ish variation , we could offer dark - grey , standard , and light - grey"], "issue_sim": [-0.035301342606544495, -0.0035753920674324036, -0.028959158807992935], "prob": [0.8536595106124878, 0.4271796643733978, 0.06453156471252441]}, {"target": [0], "doc": ["actually , you can , the tbody can be a component"], "issue_sim": [0.24789778888225555], "prob": [0.9997391104698181]}, {"target": [2], "doc": ["@andreacatania i still do n't get how my problem would be easily solve by use an <tag> node , and that be what @mateusak have be say in this thread mostly", "anyway , i think i already know how to construct a ragdoll which be more or less the same in both godot and unity", "my main point , however , be in unity the ragdoll creation process make each bone an actual rigid body with a collider , so <number> ) it can easily detect a collision on itself and <number> ) we can easily apply an arbitrary impulse on it , and both of those thing be provide out - of - the box .", "with godot 's current <tag> implementation , however , there be no easy way for a <tag> to detect a collision  , and it also lack an api to apply an arbitrary force to it , like <tag>", "i do n't see how such limitation could be easily solve by use any exist node type godot provide , include <tag>"], "issue_sim": [0.2635393738746643, 0.4129970073699951, 0.5765691995620728, 0.45167630910873413, 0.31852859258651733], "prob": [0.03263184428215027, 0.1903625726699829, 0.3582685589790344, 0.24645915627479553, 0.09311291575431824]}, {"target": [0], "doc": ["the activatedroute trick do n't actually work , but listen to router.events do work : +1 :", "but yes , even on the module level you get to enjoy di"], "issue_sim": [0.08584621548652649, 0.22234298288822174], "prob": [0.6966599822044373, 0.057869188487529755]}, {"target": [4], "doc": ["the goal here be indeed to be able to use the same function for multiple event , without have to copy / paste the function name x time in the template", "if you * \" need to listen to the same set of event in multiple place \" * , then this point be moot since the goal be to call the same function * * within * * that same component", "if you need to do :", "then just do :", "on the other hand , if you be think about call the <tag> function from multiple component , then i think it be out of this feature request scope .", "for this i would just use a <tag> in order to keep <tag> dry"], "issue_sim": [0.5893006920814514, 0.45466357469558716, 0.026416398584842682, 0.005266101099550724, 0.5516890287399292, 0.2455342710018158], "prob": [0.18364162743091583, 0.4927629828453064, 0.00012805379810743034, 0.0007283940212801099, 0.6304749846458435, 0.0008874727645888925]}, {"target": [11], "doc": ["all this sound terrific", "at first glance , it look terrific too", "the <tag> section of the <tag> have these among other :", "quality / driver / driver_name=\"gles2 \"", "batch / option / use_batche = false", "batching / option / use_batching_in_editor = false", "if i quit , remove  the line about <tag> and restart , the ui look normal", "at startup  it say invariably that batching be on though :", "at your service to help debug it", "ps : too many visual regression to report", "not sure whether they shall be discuss in this thread or in a bug report", "with lovely different color on every launch .", "i already start regret this be fix ;-)"], "issue_sim": [0.04841932654380798, 0.02598891407251358, 0.0508829802274704, 0.1198248565196991, 0.11597646772861481, 0.16707879304885864, 0.1445811539888382, 0.1585274040699005, 0.10169482231140137, 0.10712018609046936, 0.14974814653396606, 0.1295660138130188, 0.09753724932670593], "prob": [0.0053298515267670155, 0.05101681500673294, 0.06404455751180649, 0.025409959256649017, 0.005655687768012285, 0.018746046349406242, 0.03369765728712082, 0.015363630838692188, 0.004395341034978628, 0.0034066017251461744, 0.018890252336859703, 0.01849820837378502, 0.008133729919791222]}, {"target": [0], "doc": ["in general , i 'd say for low - level component lib , render function should be prefer when template be get awkward to work with .", "but i agree that the following would be valuable :", "disable the default behavior of \" auto apply binding that be not find in prop as attribute to the root element \"", "expose an easy way to \" inherit \" external binding on the component onto an inner element that be n't necessarily the root", "ideally with consistency between template and render function"], "issue_sim": [0.4447266161441803, 0.054939787834882736, 0.5389582514762878, 0.5466353893280029, 0.20674024522304535], "prob": [0.9675746560096741, 0.014493853785097599, 0.029691580682992935, 0.016175396740436554, 0.0028403284959495068]}, {"target": [0], "doc": ["i personally use my phone and i know a lot of people use their android tablet as laptop , i have a foldable keyboard always on i ...", "and for now the editor work with almost no change to the code", "make the last few fix should not take too much time , and by the issue  you can see i be not the only one that think that way", "edit : link the original issue in the first comment"], "issue_sim": [0.025364775210618973, -0.012509923428297043, 0.03404533118009567, -0.034773483872413635], "prob": [0.9041455388069153, 0.004291868302971125, 0.15267641842365265, 0.00025653428747318685]}, {"target": [2], "doc": ["@t1bb4r , thank you", "that <tag> - it be your own pipe", "i want it do through <tag> , but without delete attribute <tag> , <tag> ."], "issue_sim": [0.04449033364653587, 0.04737740755081177, 0.41981014609336853], "prob": [0.004590021446347237, 0.09689949452877045, 0.9826138615608215]}, {"target": [7], "doc": ["a type <tag> have a property <tag>", "you can access it use <tag> or as <tag> , and in both case the type of the property be <tag>", "similarly a type with an index signature , <tag> , say it can be access with any string , and the property type be always a <tag> , so it can be access as <tag> or <tag>", "a type with no explicit member declaration or index signature have no property", "in this case , both <tag> and <tag> be consider error", "you could argue that both should be the same , but that would be most property access", "the change only allow type with index signature", "i view this change as fix to an inconsistency in the system ."], "issue_sim": [0.3363969922065735, 0.44068872928619385, 0.502203643321991, 0.2758966088294983, 0.308337539434433, 0.23744776844978333, 0.43397703766822815, 0.19395890831947327], "prob": [0.015590769238770008, 0.2059626579284668, 0.8197678327560425, 0.012446236796677113, 0.008838145062327385, 0.08287793397903442, 0.0013636621879413724, 0.09905983507633209]}, {"target": [1], "doc": ["no , it be not , and that be where the confusion lie", "if you pass <tag> to a parameter that be define as an array type , then the parameter will be an array with <number> element , _ not _ an array contain one element which happen to be another array .", "the good example i can give for this be the -argumentlist parameter of new - object", "it be an <tag> type , because new - object ca n't know ahead of time what type of argument the object 's constructor might expect", "most of the time , this be n't a problem , _ except _ when the constructor expect a single argument that be itself an array", "for example , the <tag> class let you pass in an array of byte :", "if you want to pass in the <number> - element array as a single argument to a constructor , you use the lead unary comma :", "that be how it have always work for any parameter that do _ not _ include the buggy valuefromremainingargument attribute"], "issue_sim": [-0.05669175460934639, 0.5516056418418884, 0.2806970477104187, 0.2467723935842514, 0.28720834851264954, 0.305618017911911, 0.46934160590171814, 0.35261255502700806], "prob": [0.004697884898632765, 0.257699191570282, 0.012793831527233124, 0.09014943242073059, 0.04896035045385361, 0.0009720055968500674, 0.0530753992497921, 0.005188072565943003]}, {"target": [0], "doc": ["type guard return must be a subtype because they introduce new property in their guard expression , not remove they"], "issue_sim": [0.3883724808692932], "prob": [0.9996192455291748]}, {"target": [7], "doc": ["here be another use - case for this feature request", "a model entity with many field ,  a crud form and component to view / edit all field ,  a search form and component with a subset of the same field", "there be a lot of overlap , but not an exact match , between  and", "a few field be not appropriate for search , some need a slightly different data entry method , and some field grouping have a different precedence in  vs  per user requirement", "the feature request here would be a useful tool in solve this problem in the clean possible manner", "so for example , consider that component  have field that could be contain in multiple html file a - b - c - d - e", "and component  have field contain in those same html file but need the field like this , a - c - e - d", "contrary to some of the thought above , join template file to accomplish this be actually a very good example of composition .", "the composition of component on the page be very important , but there be also a composition of element within each component 's space", "the feature request would provide a lot of flexibility with this low level of composition"], "issue_sim": [0.35720086097717285, 0.3612739145755768, 0.04168219119310379, 0.12996576726436615, 0.213265061378479, 0.4386661648750305, 0.34236177802085876, 0.253387987613678, 0.23688779771327972, 0.21444624662399292], "prob": [0.00014535445370711386, 0.09509006887674332, 0.002965769497677684, 0.09832227230072021, 0.00027427379973232746, 0.005236825905740261, 0.0008425423293374479, 0.18165969848632812, 0.001969971228390932, 0.00037408509524539113]}, {"target": [2], "doc": ["i like the use of the backtick", "i 've be do this for a long time and i like it", "so , why change something that work ?", "by the way ,   a script with code have backtick copy / paste to a console work", "i use it all the time"], "issue_sim": [0.3349721431732178, 0.03155110031366348, 0.06361252069473267, 0.38445818424224854, 0.021330270916223526], "prob": [0.012577570043504238, 0.0845683142542839, 0.15688908100128174, 0.20449164509773254, 0.0011614435352385044]}, {"target": [1], "doc": ["any update for this", "well - support mixin would be a powerful feature ."], "issue_sim": [0.07208266109228134, 0.3952462375164032], "prob": [0.021784650161862373, 0.9754505157470703]}, {"target": [9], "doc": ["i be surprised there be so much discussion whether the ability of change meta tag or title be an important feature", "i be manage a large application", "content marketing , seo , share on social medium be important marketing tool", "it be no question to i , whether it be a need feature or not", "i go through available plugin", "there be always something miss", "i be use <tag> to serve complete application", "it be already work fine , i take the example from <tag> template", "what i would like to do now , be to change the meta tag , directly from component", "every route have a coresponding page , most of they be dynamic page , for example <tag> .", "when a page mount , i be fetch corresponding datum from api , in this example the <tag> informaiton", "from the same endpoint i would like to serve meta - data", "which mean * * one api call per page * *", "other solution propose to fetch datum on server level", "that would mean that i have to modify the componenet , to use this datum", "or to make two api call", "it seem overly complicated to i , while the setup already be insanly complex", "for the propose solution to work , i would have to change the meta tag from component level", "- @jqemprendedorve i 've try your solution , but the meta end up in the body as <tag>", "- i 've try to use <tag> , which expose <tag> , except it do n't expose it in my case , i be not sure why and how to fix it", "- i 've try <tag> , which be not work , not to mention the entire <tag> package have completely different architecture , to \" simplify \" thing , which in my case would be much additional   work fix nuxt bug or develop workaround", "do anyone have a solution to modify the < meta > tag from component level"], "issue_sim": [0.259483277797699, 0.18209697306156158, 0.1022956445813179, 0.16680440306663513, 0.1370280385017395, 0.09918810427188873, 0.23988153040409088, 0.24492809176445007, 0.3750154972076416, 0.2675215005874634, 0.26772090792655945, 0.2509397864341736, 0.25250300765037537, 0.1936107575893402, 0.02674224227666855, 0.13847407698631287, 0.16488873958587646, 0.33619144558906555, 0.16386261582374573, 0.3595292568206787, 0.432528555393219, 0.317658007144928], "prob": [0.24514175951480865, 8.026415889617056e-05, 0.00027095494442619383, 0.0011815796606242657, 6.898762876517139e-07, 9.263041533813521e-07, 1.583705125085544e-05, 2.8980979550397024e-05, 0.0005484366556629539, 0.011712022125720978, 6.307789135462372e-07, 2.6779196559800766e-05, 5.281120252220717e-08, 2.8496134518718463e-07, 1.220193735207431e-05, 2.4203605789807625e-05, 0.00039795110933482647, 0.016604868695139885, 4.456478848169354e-07, 0.12064093351364136, 0.3279835879802704, 0.0006847713957540691]}, {"target": [2], "doc": ["how you compile a product use the product you have yet to compile be a", "little confuse , but i appreciate the result", "anyway , run android x86. on my nettybook , so i 'll take a crack at a dirty port and see what happen .", "on apr <number> , <number> 11:34 am , \" theoxd \" notifications@github"], "issue_sim": [0.3089389204978943, -0.03003159537911415, 0.44492781162261963, -0.10071708261966705], "prob": [0.3466087877750397, 0.01455212663859129, 0.580994188785553, 0.1529119908809662]}, {"target": [0], "doc": ["relate : the  call for include the command prompt , but i think that only make sense in guide where we show what user enter and what the command write back", "we be not use command prompt at all in doc command line example ."], "issue_sim": [0.5209656953811646, 0.37399035692214966], "prob": [0.6694966554641724, 0.11971710622310638]}, {"target": [2], "doc": ["i agree with ranoller in his first post", "rename free to be more descriptive would be a good idea", "i also agree queue_free should not be rename to free as this will essentially make an api that lie to the person use it .", "my personal suggestion would be :", "this way auto - complete will offer both method when type \" free \"", "edit : free_queue  make it sound like you be free a queue of some sort instead of add this to a queue to be free in the future , thus free_queue**d * * seem well to i"], "issue_sim": [-0.01153254508972168, 0.3201174736022949, 0.34678053855895996, 0.009512504562735558, 0.18416820466518402, 0.2588106095790863], "prob": [0.007278145290911198, 0.004123217426240444, 0.47954288125038147, 0.00018655405438039452, 1.0812366781465244e-05, 0.06613186746835709]}, {"target": [0], "doc": ["please let it be cmake that win out and not stick with scon or waf , what ever that be , since i can only think of one obscure project that even use it .", "use something that more people would know how to use like cmake , i would rather have anything other then waf , even the old auto - tool or even stick with scons"], "issue_sim": [0.5036268830299377, 0.5889177918434143], "prob": [0.7845868468284607, 0.26186826825141907]}, {"target": [0], "doc": ["context in functional component only provide datum from the direct parent  , it do n't solve the problem of pass datum to deep descendantswhich be what context in react do , it be the same name for something different ."], "issue_sim": [0.5865412354469299], "prob": [0.9999809265136719]}, {"target": [0], "doc": ["yes , it be the same issue , but windows powershell also do n't support an empty array / <tag> <tag> value : try <tag>", "as an aside : unfortunately , the way <tag> currently work may require additional , embed quote to pass argument through", "for instance , your function would fail if the session have be invoke with something like <tag> , due to the space in the filename - see # <number>"], "issue_sim": [0.6311966180801392, 0.3254872262477875, 0.4518887996673584], "prob": [0.39019837975502014, 0.0932108536362648, 0.5442239046096802]}, {"target": [0], "doc": ["another benefit of always use scopedslot insteadof slot be lazy evaluation of slot content :", "imagine a component with the follow template <tag>", "the load comp would not display the slot content until item become truthy , but \" normal \" slot be render eagerly cause error despite the slot content not be display"], "issue_sim": [0.27412015199661255, 0.3723154067993164, 0.42114579677581787], "prob": [0.16459999978542328, 0.002684899838641286, 0.9480090737342834]}, {"target": [4], "doc": ["if static var be make part of the script , then yes : they 'll be destroy as soon as the script be unload", "thread safety also get in the way", "there be no true concept of \" global \" in godot", "autoload be not truly global , it be just add to the scene tree", "so add persistent static variable would require a new setup just for that , which imo be not worth it", "if you need persistent state that be always available , just make an autoload"], "issue_sim": [0.21797189116477966, -0.03613024204969406, 0.2362557202577591, 0.15178468823432922, 0.19537538290023804, 0.16281095147132874], "prob": [0.5991978049278259, 0.0012681634398177266, 8.508046448696405e-05, 0.004011749755591154, 0.05383624508976936, 0.0077759623527526855]}, {"target": [1], "doc": ["i would say this be not vue 's problem , but bootstrap 's problem", "it be bootstrap use ! important that force everyone into this specificity war .", "if i be you i 'd not use static css that have", "important unless for very specific reason like printing", "and i do n't think this be a common case"], "issue_sim": [0.4426971971988678, 0.45380330085754395, 0.3575122356414795, 0.17851108312606812, -0.001470433548092842], "prob": [0.32907816767692566, 0.5961208343505859, 0.017532655969262123, 0.010683401487767696, 0.02839818224310875]}, {"target": [0], "doc": ["yes , but many argue against use exception unless absolutely need .", "try / catch be a very slow operation", "also you lose much context about what", "many , include myself , prefer to deal with error where", "on mon , jun <number> , <number> at 9:09 am , azamat notifications@github"], "issue_sim": [0.09667662531137466, 0.17892923951148987, -0.026380587369203568, -0.023501228541135788, -0.03353435546159744], "prob": [0.9948676824569702, 0.001753337448462844, 0.0007771259406581521, 0.015154790133237839, 0.01022438146173954]}, {"target": [1], "doc": ["@andreacatania , i apply the second option , and still lag", "it will not collide because i disable the collider and mask and layer be set to <number> .", "if you need access to the source code i can give it to you by a private way to see and test it"], "issue_sim": [0.029116187244653702, 0.4435052275657654, 0.1597733199596405], "prob": [0.006058024242520332, 0.6216694712638855, 0.38690388202667236]}, {"target": [0], "doc": ["yes and i be suggest this would introduce that ambiguity", "in my example you could consider <tag> the positional parameter for <tag> and <tag> as the string parameter for <tag>", "that be not what i as a user would expect", "i would expect to be tell i forget to provide a value for <tag>", "instead , i would just get nothing in return assume i do n't have a <tag> command in a <tag> module", "if any change be make , i would say that this one be the way to go", "i do n't even know <tag> could begin any unquoted string value", "as for the rest , i be not sure that be the case unless i misunderstand you", "it appear you be seek consistency between parent shell and powershell syntax", "try to make the powershell cli consistent with other shells be a bit futile", "when powershell be the parent shell , you already have to quote <tag>", "i would n't expect powershell 's argument parse to be consistent with bash , cmd , ksh , python repl , or other interactive cli"], "issue_sim": [0.07316611707210541, 0.6177963614463806, 0.04716517776250839, 0.24593165516853333, 0.3279881775379181, 0.07219970226287842, 0.3307458758354187, 0.10243012011051178, 0.3354581296443939, 0.3380759656429291, 0.4569987654685974, 0.3473830223083496], "prob": [0.00275703938677907, 0.03258039429783821, 0.0006396076059900224, 0.00322826043702662, 0.08630456775426865, 0.0025978998746722937, 0.018143897876143456, 0.008136531338095665, 0.005133271683007479, 0.017425836995244026, 0.008834656327962875, 0.4908199608325958]}, {"target": [0], "doc": ["we would like to re - initialize service provide in lazy module too .", "# <number> look like what we need", "be the fix be plan"], "issue_sim": [0.49583953619003296, -0.014921559020876884, 0.09569446742534637], "prob": [0.9765636920928955, 0.005931177642196417, 0.060012511909008026]}, {"target": [3], "doc": ["just want to pop in and quickly say thank for this", "i 've be work on a dwarf fortress - like colony sim in godot 3", "3 stable and have resign myself to use gles2 for the batching", "with this pr it look like render the massive pile of tilemap in my game be in the neighborhood of 6x fast on gles3 , about the same speed as gles2 on 3.2.3 .", "i have n't notice any issue so far but i 'll come back and make a proper report if i do"], "issue_sim": [-0.00010795518755912781, 0.12035395205020905, 0.2298605740070343, 0.3458173871040344, 0.14899422228336334], "prob": [0.0005880204262211919, 0.01753304712474346, 0.019345765933394432, 0.8586133718490601, 0.008983513340353966]}, {"target": [1], "doc": ["it might still be a bug", "i also think it should work when then <tag> be omit and the content of the <tag> be set to the option value"], "issue_sim": [0.24808144569396973, 0.33540675044059753], "prob": [0.04256477206945419, 0.9366331100463867]}, {"target": [3], "doc": ["how much value do all this work get we over a simple textmate like solution", "we have to maintain a tmlanguage file anyway for our sublime plug - in , and editor such as sublime or atom manage fine with textmate base solution", "yes there be a few case where you can get a token that be n't colorize perfectly , but this be rarely a cause of notable user confusion or complaint", "i think we should be very practical and deliberate in assess just how much complexity we want to add  , compare to the real value we get out of it ."], "issue_sim": [0.16704416275024414, 0.14315882325172424, 0.21297436952590942, 0.12342188507318497], "prob": [0.05359536036849022, 0.6629970073699951, 0.19624370336532593, 0.24676965177059174]}, {"target": [1], "doc": ["i think i 've make that : <url>", "the thing be , if you 'll inspect with dev - tool preview window , you can see a <tag> tag without any attribute ."], "issue_sim": [-0.021509487181901932, 0.2904045879840851], "prob": [0.0016267746686935425, 0.9958428740501404]}, {"target": [0], "doc": ["if you 'd like , you can just restructure the dt org  to publish npm package in the new style , and accept contribution in kind .", "the contribution model be not contingent on the distribution one"], "issue_sim": [0.3964720368385315, -0.13600227236747742], "prob": [0.9226862192153931, 0.03875862434506416]}, {"target": [0], "doc": ["imo this would be ideal , and we just get rid of the \" main screen \" editor plugin .", "asset lib can go somewhere else or be a float window , it wo n't change much", "it be some work though"], "issue_sim": [0.37029027938842773, 0.2696535587310791, 0.09291413426399231], "prob": [0.8376345038414001, 0.09435950964689255, 0.031900569796562195]}, {"target": [14], "doc": ["i be definitely pro private function and variable as well", "yes , we do have a convention for private use a _ in front of a method name but the very same convention be use for virtual function", "so if i see an underscore it could mean either \" do by no means touch that function", "\" or \" overwrite that function", "that be hella dangerous , honestly", "if i be work alone or in a very small team on a small project , it do n't weight in too much because i know what function be mean to be use and what function be for internal usage only", "but with grow team , this get more and more difficult", "people work with class they do n't write themselves all the time and i since i be a person who write a lot of small internal function to make thing work i really want to be able to prevent people to call these function , because if they use those it might lead to unintentional behavior and bug and it cost time to fix these thing once mistake be do", "and despite a common convention , these thing * will * be happen in a large team , because they after all * be * callable from outside", "last but not least ; auto completion", "i be someone who use this a lot to learn what a class can do", "i just put that '", "' at the end and see what function pop up", "if something sound useful , i use it", "it would be much clean if it would n't be clutter with all those function that be not suppose to be call anyways .", "besides - and again - i still do n't know whether these _ name function be private or virtual"], "issue_sim": [0.3350600004196167, 0.3573232889175415, 0.37053489685058594, 0.15920530259609222, -0.006301619112491608, 0.31001853942871094, -0.06286729872226715, 0.4041130542755127, 0.06622855365276337, -0.024670403450727463, 0.1550341695547104, 0.026652175933122635, 0.11664701998233795, 0.12888790667057037, 0.249365895986557, 0.27303066849708557], "prob": [0.0004776761052198708, 0.43260565400123596, 0.005594282411038876, 0.00033443208667449653, 0.0007395618013106287, 0.513346254825592, 0.00029770133551210165, 0.10977425426244736, 0.043808773159980774, 0.00016198006051126868, 0.004882211331278086, 2.003958979912568e-05, 0.00012054280523443595, 4.461821663426235e-05, 0.29202523827552795, 0.0025234324857592583]}, {"target": [0], "doc": ["how would you bind to such dynamic template variable from within a component", "spontaneously it seem hard due to the fact that the template variable resolve at runtime"], "issue_sim": [0.561087429523468, 0.4448758363723755], "prob": [0.4459262788295746, 0.44757282733917236]}, {"target": [1], "doc": ["i agree with the benefit of consistency .", "the path do n't matter so much since you can just set up psdrive 's in a profile , and i be n't personally attach to the path i propose -- i simply choose it base on the other similar path like"], "issue_sim": [-0.039925605058670044, 0.286815345287323], "prob": [0.9335949420928955, 0.22921186685562134]}, {"target": [6], "doc": ["i know , but the comment still stand - typescript would error on <tag>", "edit : i see your concern", "i just try out some test", "edit <number> : i know it be probably a bit of work , but maybe it could work with exist flow control then", "<tag> and warn on other usage of it like <tag>", "edit <number> : give all this , i be not sure it be relevant now", "i do n't think there be anything stop it from happen today . if you want to use one side of the union today , you 'd need to rely on type coercion which remove type safety already .", "how be you use type like the one you mention above in today 's code"], "issue_sim": [0.46396297216415405, 0.027200084179639816, 0.03980901837348938, 0.2335650771856308, 0.29700177907943726, 0.103550024330616, 0.2777481973171234, 0.26707789301872253], "prob": [0.009248725138604641, 0.0016537810442969203, 0.004921258892863989, 0.0861029103398323, 0.00483930017799139, 0.001828900189138949, 0.9818096160888672, 0.0038479482755064964]}, {"target": [0], "doc": ["what your screenshot show be that <tag> trigger the download of something call <tag>  , not of any of the online - only file in the <tag> folder !"], "issue_sim": [0.49182114005088806], "prob": [0.9999626874923706]}, {"target": [6], "doc": ["angular element work just fine for your use case", "the only change that need to be make be to actually use the customelements", "define for each component that you want to export", "this be assume that the component be export from an angular app instead of an angular library project", "in that case , you can resort to a hack - ish method and build an angular app that expose one component for each angular library component that you have", "basically you would wrap those library components and export they yourself", "the downside be that you would basically need an instance of the angular runtime in every app where you plan to use those component .", "maybe add some sort of support for angular elements in an angular library project be a feature worth consider"], "issue_sim": [0.6482522487640381, 0.1778291016817093, 0.34718865156173706, 0.7512421011924744, 0.6968165636062622, 0.32041680812835693, 0.6408882141113281, 0.6989359259605408], "prob": [0.008463433012366295, 0.06323998421430588, 0.021215973421931267, 0.05646407976746559, 0.39829757809638977, 0.007429237477481365, 0.15027762949466705, 0.015145417302846909]}, {"target": [2], "doc": ["it be quick to add once you know the syntax , but it be one more thing to know and add another way of do the same thing", "that say , i see the benefit and simplicity of it ,", "i simply think it be well to use a component , even if it be just declare on one component , because if you know that way you know a more powerful way of abstract thing , and will probably understand well how to use component"], "issue_sim": [0.2600516974925995, -0.016123715788125992, 0.46176132559776306], "prob": [0.44853001832962036, 0.009555329568684101, 0.8852633833885193]}, {"target": [0], "doc": ["yes , something like that would be very useful , provide it can be specify exhaustively for all powershell stream ."], "issue_sim": [0.38356244564056396], "prob": [0.9999715089797974]}, {"target": [1], "doc": ["+1 for implement this", "i have a tree datum structure with an iterator , convert to array would result in large , unnecessary overhead ."], "issue_sim": [0.1822255402803421, 0.3796939253807068], "prob": [0.04627864435315132, 0.9503307938575745]}, {"target": [2], "doc": ["what be the status on this issue", "i actually never notice it ,", "i guess i 'll have to check my animation to see if they be not actually behave as i intend they to  ."], "issue_sim": [0.04756587743759155, 0.10006572306156158, 0.2608507573604584], "prob": [0.06519697606563568, 0.00888682808727026, 0.9482930898666382]}, {"target": [25], "doc": ["@fian46 @drineo well , yes and no", "load script and use script class take care of that already , but the problem extend beyond that", "the problem be not achieve a uniform interface which you be right , duck - typing solve just fine , but rather organize  group of related implementation efficiently", "1 , with script class , you can define static function on a reference script  and then use that script as a namespace to globally access those function in gdscript", "func _ ready :", "however , when it come to non - static content , especially stuff that use node - specific function , it be troublesome to divide out one 's logic .", "for example , what if i have a kinematicbody2d and i want to have a \" jump \" behavior and a \" run \" behavior", "each of these behavior would need access to the input handling and <tag> feature of the kinematicbody2d", "ideally , i would be able to swap out each behavior 's implementation independently and keep all of the code for each behavior in separate script", "currently , all the workflow i be familiar with for this simply be n't optimal", "if you keep all of the implementation in the same script and just swap out which function be be use", "change \" behavior \" may involve swap out several function as a set , so you ca n't group the implementation change effectively", "all of the function for every behavior  be sit in your single script , so it can get bloated very quickly", "you can just replace the entire script , but then that mean you have to create a new script for every * combination * of behavior * plus * any logic that use those behavior", "if you use child node as script dependency , then that mean you 'd have these weird \" component \" node2d node that grab their parent and call the <tag> method for it which be kind of unnatural , relatively speak", "- you have to make an assumption that your parent be go to implement that method or do logic to check that it have the method", "and if you do a check , then you can either fail silently and potentially have a silent bug in your game or you can turn it into a tool script unnecessarily just so you can set a configuration warning on the node to visually tell you in the editor that there be a problem", "- you also do n't get proper code completion for the * intend * operation of the node since they derive from node2d and the whole point be to drive the behavior of a kinematicbody2d parent", "now , i 'll admit that option <number> be the most effective workflow currently , and that its problem can largely be resolve by use the handy - dandy static typing for gdscript in 3", "however , there be a more fundamental issue at play", "godot 's node - scene system generally have the form of user create node or scene that do a particular job , in their own enclose system", "you might instance those node / scene within another scene and have they compute datum that be then use by the parent scene", "however , the vanilla engine 's usage and general good practice recommendation be to keep the * behavior * of your scene lock to the root node and/or its script", "hardly ever do you have \" behavior component \" node that actually tell the root what to do", "the animationplayer / tween node be the only arguable exception i can think of , but even their operation be direct by the root", "it be simple and more natural to allow a trait implementation to organize the code as it keep the relationship between the node strictly data - up / behavior - down and keep code more isolated into its own script file"], "issue_sim": [0.05967181921005249, 0.45006391406059265, 0.22709476947784424, 0.43114396929740906, 0.09443816542625427, 0.28053802251815796, 0.12868961691856384, 0.20676422119140625, 0.37081846594810486, 0.09697595238685608, 0.33803996443748474, 0.2980155348777771, 0.2841883897781372, 0.39900803565979004, 0.532601535320282, 0.24977757036685944, 0.4520775377750397, 0.47387123107910156, 0.21663489937782288, 0.01155063696205616, 0.37640708684921265, 0.3374636173248291, 0.35049939155578613, 0.3720514178276062, 0.3447566330432892, 0.48003172874450684], "prob": [0.007451657671481371, 0.03695886954665184, 0.07852478325366974, 0.011814074590802193, 5.927372694713995e-05, 0.06666354089975357, 0.001980415778234601, 7.781362364767119e-05, 0.00024129894154611975, 9.866243635769933e-05, 0.0003010070649906993, 0.00015262022498063743, 7.590003224322572e-05, 0.0008274191641248763, 0.004758365452289581, 0.00020457019854802638, 0.004934289027005434, 0.002718286821618676, 0.02204204723238945, 1.386126041325042e-05, 0.0024415894877165556, 4.456941314856522e-05, 0.017255613580346107, 3.8706057239323854e-05, 0.0004127878346480429, 0.07030484825372696]}, {"target": [2], "doc": ["i play around with this after look at the issue link in the op", "as mention in the op , they be not suppose to be meddle with", "they be * * vital * * for their parent node type  to _ function _ .", "no , but i think those be specific case that need to be deal with", "a developer can simply create a node and use it as a container to put their node in", "then <tag> the child in there", "if they really want to loop through the child and remove they", "the developer can also call <tag> on the parent node , and it will not cause the crash", "the developer can also use", "also , some gui nodes it be quite obvious they have internal node", "maybe an option to toggle the internal node in the editor node list could help", "the real solution though   imo , be for godot not to silently crash when an internal node be free'd", "not sure how to fix that , since they be not suppose to be free'd", "other people might have a well solution , though"], "issue_sim": [0.021857544779777527, 0.014287954196333885, -0.03513781726360321, 0.05561249703168869, -0.0321473628282547, 0.054894253611564636, -0.0569879524409771, 0.05896477401256561, 0.019082751125097275, -0.08711490035057068, -0.06505108624696732, 0.031924664974212646, 0.028270874172449112, 0.023229215294122696], "prob": [0.01657821610569954, 0.03690464049577713, 0.28665947914123535, 0.026101114228367805, 0.006459514610469341, 0.0013768099015578628, 0.0020978187676519156, 0.00909087061882019, 0.0030693395528942347, 0.00625258544459939, 0.018088892102241516, 0.03229043632745743, 0.028132108971476555, 0.002788115292787552]}, {"target": [2], "doc": ["fwiw - some background :   this behavior be actually intentional", "prior to the v1 release of powershell , the ui designer pick color for the powershell console", "since the background color they choose be n't part of the standard palette , one of the less used standard color be remappe to produce what the designer want .", "it be be ship that way ever since"], "issue_sim": [0.26234522461891174, 0.422024130821228, 0.20957419276237488, 0.03694162145256996], "prob": [0.00026151060592383146, 0.041818052530288696, 0.9421660900115967, 0.0006332615739665926]}, {"target": [3], "doc": ["i think you not get the same result when use", "be not unique and get share )", "when i start with godot i create a single scene and put everything inside", "nearly every node have have his own script . so i need to work a lot with get_root  and get_parent  .", "during time i learn that it be a very bad design", "i think you get this kind of problem also in other programming language until you learn to use design pattern", "perhaps documentation should have a part for godot design pattern and there should be also some demo project which be construct that way"], "issue_sim": [0.07534710317850113, 0.09399336576461792, 0.35464316606521606, 0.3328697383403778, 0.18149766325950623, 0.35103774070739746, 0.46898794174194336], "prob": [0.05089327692985535, 0.0030925702303647995, 0.031253963708877563, 0.3398846685886383, 0.0025473011191934347, 0.039036888629198074, 0.08539313822984695]}, {"target": [3], "doc": ["this really seem like it be work as intend and document though", "return a <tag> be n't a redirect that continue the previous navigation", "again , the doc state", "a new navigation _ would _ trigger all deactivate guard relate to the previous route as well as the activate guard for the route that get activate by the <tag> .", "i 've file this as a feature request for an option to not trigger some guard in some case because as i understand thing , the current behavior be not a bug"], "issue_sim": [0.056669145822525024, 0.313285768032074, 0.19051766395568848, 0.3741191029548645, 0.41935694217681885], "prob": [0.05085825175046921, 0.1402161568403244, 0.009758848696947098, 0.32462069392204285, 0.2661167085170746]}, {"target": [3], "doc": ["i think @johlju have the right idea about add an \" -allowcomments \" switch", "that way the cmdlet default to rfc - compliant behavior", "unless someone want to write a new rfc", "one very important argument in favor of support comment be the visual studio \" azure resource group \" sample project .", "the powershell wrapper that upload the artifact to azure storage and execute the deployment fail to run when one of the template or parameter have a comment in it", "i strip out all the comment from the file manually and everything be fine -- with they there , the error that @chriskuech receive be what stop the deployment", "if i have an \" -allowcomments \" switch , i could just modify the wrapper script and there would be no problem", "arm template can become very confuse and stretch to thousand of line , and not everyone be <number> % dedicate to automate pipeline - base deployment yet", "put a set of comment in to clearly mark what need to be modify by a human reduce the chance for error"], "issue_sim": [0.032719098031520844, 0.2967749238014221, 0.07160114496946335, 0.5537053346633911, 0.6719356775283813, 0.29622602462768555, 0.13828808069229126, 0.2656404674053192, 0.0613221600651741], "prob": [0.00998323317617178, 0.011290390975773335, 0.0016157148638740182, 0.5807666778564453, 0.015599057078361511, 0.00905302632600069, 0.01090335939079523, 0.08581236004829407, 0.001572572160512209]}, {"target": [1], "doc": ["so you want to access datum from <tag> inside <tag> , correct", "if yes , why would n't you combine they into a single resolver ?", "it would simplify thing"], "issue_sim": [0.07675193250179291, 0.08298017829656601, 0.1711036115884781], "prob": [0.19286471605300903, 0.8715524077415466, 0.011618147604167461]}, {"target": [0], "doc": ["or eventually inform user that be impossible to save empty scene and propose to save scene with generic <tag> as root ."], "issue_sim": [0.4389234781265259], "prob": [0.9999827146530151]}, {"target": [1], "doc": ["i 'll need to read through this tomorrow for any lucid feedback , but be there anything we can learn from roslyn 's version of this for c #", "i think theirs even recommend thing from package you do n't yet have instal , so i imagine they 've put work into the appropriate heuristic for this , albeit tune to their user base ."], "issue_sim": [0.2940444350242615, 0.20000827312469482], "prob": [0.6597998738288879, 0.5517792105674744]}, {"target": [2], "doc": ["actually , it could be <tag> by default and <tag> in binding", "that mean null check everywhere the crash might happen", "it would negatively impact performance  and fail node be useless anyways .", "the idea of this pr be to make some node less obvious to access and more importantly - impossible to access accidentally , which only lead to confusion and unexpected behavior"], "issue_sim": [0.08664333820343018, -0.013464830815792084, 0.10485472530126572, 0.006069871596992016], "prob": [0.23402895033359528, 0.007958713918924332, 0.5827024579048157, 0.5515114665031433]}, {"target": [0], "doc": ["the solution would be for <tag> not to re - wrap if it be already a <tag> .", "that way , we can never end up with nested <tag>s", "here be a little proof of concept :"], "issue_sim": [0.272024005651474, 0.030278967693448067, 0.07207982987165451], "prob": [0.8735828399658203, 0.03205874562263489, 0.023383235558867455]}, {"target": [1], "doc": ["in my opinion , this be separate from <url> because the other issue be presumably cause by driver bug ,", "whereas this be an ' expect jitter ' cause by fix our physics timestep ."], "issue_sim": [0.21448451280593872, 0.388626366853714], "prob": [0.07517222315073013, 0.9762439131736755]}, {"target": [1], "doc": ["by use <tag> and <tag> ,", "unfortunately . there be no well way , because while ts will narrow num it won narrow t for you .."], "issue_sim": [0.17404672503471375, 0.28850290179252625], "prob": [0.03175885230302811, 0.9327723383903503]}, {"target": [4], "doc": ["well , remove <tag> in powershell 5", "1 would have be a lot more timely , consider", "i definitely agree that select , where , and foreach be the most common alias that get leave in script -- because they be basically more readable than the full command", "but i have to repeat , again , i do n't want to break anything", "i be try to * * _ stop _ break thing * * , by move the alias into module where nobody will have any excuse to change they anymore ."], "issue_sim": [0.3378700613975525, 0.017392292618751526, 0.41798117756843567, 0.08747885376214981, 0.3863026797771454], "prob": [0.025519900023937225, 0.009486177936196327, 0.6872431635856628, 0.0027746357955038548, 0.48957327008247375]}, {"target": [2], "doc": ["come'on that be not that hard to understand , once again we be not target kid", "and regard the code organization , the problem be the same for event sheet", "if you do n't bother grouping node and organize your code you end up with unreadable code , whether it be due to lengthy event sheet or huge node graph ."], "issue_sim": [0.1114053726196289, 0.21817350387573242, 0.3986876308917999], "prob": [0.4016573429107666, 0.03842593729496002, 0.6996480226516724]}, {"target": [1], "doc": ["i do n't think this be something we would have as part of powershell", "similar to tmux , screen , cmder , i think it be something that be outside the shell ."], "issue_sim": [0.5973337888717651, 0.37903597950935364], "prob": [0.015354537405073643, 0.9901549816131592]}, {"target": [1], "doc": ["the <tag> property will only be correct if the constructor function choose to initialize it", "although typescript generate code to do so , it be not a requirement and you ca n't generally rely on it for an arbitrary constructor function  .", "for that reason typescript do n't strongly type the <tag> property"], "issue_sim": [0.3351607322692871, 0.3386484384536743, 0.21706852316856384], "prob": [0.02316765859723091, 0.9842377305030823, 0.014726342633366585]}, {"target": [1], "doc": ["i do n't think it will help", "there be a state sync issue between <number> directive : <tag> and <tag> .", "example form <url> : <url>", "hero object be load async this be why during component render <tag> be undefined", "be not equal to <tag> and <tag> evaluate to <tag> which be ok", "then , when hero finally arrive from subscription , <tag> become <number> instead of undefined , but it be too late , active status have already be calculate  somehow )", "i think we should drop <tag> and just use <tag>", "<tag> can calculate active status itself and bind active class to its host element", "we do n't need to sync status between <number> directive", "it will be more efficient because we can implement some smart caching mechanism and not recalculate status during every change detection cycle", "it will also simplify implementation of <url>"], "issue_sim": [0.06816823035478592, 0.26797568798065186, 0.07354611158370972, 0.31780415773391724, 0.22433626651763916, 0.25175631046295166, 0.09039382636547089, 0.2914121150970459, 0.161939799785614, 0.2442532330751419, 0.036660924553871155], "prob": [0.1287153661251068, 0.01975748874247074, 0.008215006440877914, 0.48782673478126526, 0.012842967174947262, 0.23986461758613586, 0.001610813313163817, 0.16262882947921753, 0.004598091822117567, 0.610175371170044, 0.004990253131836653]}, {"target": [3], "doc": ["one area where i really miss transition be css class change", "it would be great to be able to assign transitional <tag> and <tag> class , when a certain css class change , like in angular <number>", "this would be a great help when , let 's say , you be build a responsive site , and you want to hide the mobile sidebar with transition on mobile , but be it always visible on desktop", "today , you can not do that : if you use <tag> , the content disappear  , and if you only use pure css transition , then you can not apply <tag> to the element .", "so yeah , i would love to see the ability to add transition - class to css class change"], "issue_sim": [0.6246109008789062, 0.5853590965270996, 0.4987449645996094, 0.6074151992797852, 0.6357108950614929], "prob": [0.008617319166660309, 0.35886335372924805, 0.34320324659347534, 0.3177747428417206, 0.006444653030484915]}, {"target": [1], "doc": ["the idea of this feature proposal be to take advantage of the exist <tag> directive , which already work with every <tag> element", "to save the work of write _ inputcustom.js _ in every project , because that have be do already in <tag> , have only to write the equivalent of _ inputtext.js _ in a custom modifier , which contain all the logic which need to be modify most of the time .", "the fact that <tag> already ship with modifier prove that it be an intuitive and desirable pattern", "it be only natural to facilitate the creation of custom modifier , to save the work of create custom element and have to implement dom / model bind manually", "if it make sense from the api perspective , would be interesting to know what be the technical limitation which be drive the decision of not implement this feature"], "issue_sim": [0.3047908842563629, 0.4915139675140381, 0.14510416984558105, 0.39909428358078003, 0.31592121720314026], "prob": [0.3252921998500824, 0.20452576875686646, 0.012752674520015717, 0.12999288737773895, 0.1257910281419754]}, {"target": [1], "doc": ["seem like a good idea", "if this feature be add , i think it would be important that it also work with <tag> .", "maybe this would be a small", "step toward project references : wink :"], "issue_sim": [-0.0060162656009197235, 0.22566363215446472, -0.047637008130550385, 0.09068025648593903], "prob": [0.0034648184664547443, 0.9802718758583069, 0.00030946650076657534, 0.0009037968120537698]}, {"target": [1], "doc": ["grab a big coffee and read # <number> for some history on this", "one nit be that <tag> be n't a generic type  , so it 'd be wrong to provide it \" type argument \" .", "it be tempting to revisit <tag> as a potential syntax , though", "with the advent of conditional type , overload be become less common and we might be able to get away with not support overload resolution for this process"], "issue_sim": [-0.110117107629776, 0.4555620551109314, 0.16780267655849457, 0.2803407609462738], "prob": [0.012842894531786442, 0.3060718774795532, 0.03099595196545124, 0.3641885221004486]}, {"target": [2], "doc": ["i would like to try this one", "most information be gather from pr # <number> , which be close due to non - address comment", "the easy way to implement the option to make <tag> always mandatory , unless the user explicitly state to send the mail without a subject be to use <tag> as state by @dantramsft .", "~~though i would like to go with the <tag> switch , due to consistency with other cmdlet as suggest by @stevel - msft", "base on community feedback  the <tag> switch will be use in its own parameter set", "this will therefore exclude the parameter <tag> completely from the propose parametersetname \" nosubject \"", "parametersetname \" default \" : this would prompt for missing parameter <tag> due to be a mandatory parameter", "~~parametersetname \" force \" : this would not prompt for missing parameter <tag>~~", "parametersetname \" nosubject \" : this will exclude the parameter <tag> from the parameter set", "no error or prompt will be show due to miss email subject", "one problem be , that <tag> use positional parameter , where <tag> be at position <number>", "two option would be available :", "parametersetname \" nosubject \" : do n't use positional parameter at all", "parametersetname \" nosubject \" : make <tag> positional parameter at <number> instead of <number> and <tag> <number> instead of <number>", "example for solution <number> :", "-  submit pr to powershell repository with suggest modification", "-  implement <tag> switch", "-  include test case which use <tag> switch", "-  submit pr to powershell - docs repository to reflect alternative parameter set", "any feedback be highly appreciate", "edit <number> - <number> - <number>", "- change switch parameter <tag> to <tag>", "- change parametersetname \" force \" to \" nosubject \"", "- change <tag> to correct <tag> cmdlet name"], "issue_sim": [0.0647997185587883, 0.08123863488435745, 0.4631320834159851, 0.44451892375946045, 0.03491219878196716, 0.15406213700771332, 0.41249769926071167, 0.2608954906463623, 0.2639004588127136, 0.34778928756713867, 0.297121524810791, 0.014231055043637753, 0.2781450152397156, 0.4368968605995178, 0.06136950105428696, 0.42665785551071167, 0.09208010137081146, 0.19408294558525085, 0.40365535020828247, 0.01525871455669403, 0.11817432940006256, 0.2397877424955368, 0.09661166369915009, 0.42513009905815125], "prob": [0.028344448655843735, 0.14619943499565125, 0.2061525583267212, 0.37411025166511536, 0.004417433403432369, 0.0381561703979969, 0.08004884421825409, 0.02154134400188923, 0.0046506160870194435, 0.00023667214554734528, 0.008229740895330906, 0.0004250838537700474, 0.002696952084079385, 0.013413063250482082, 0.0004039029299747199, 0.0009006212931126356, 0.00018119266314897686, 0.0002554682141635567, 0.0016201265389099717, 0.0013520446373149753, 0.0018604567740112543, 0.0004672500363085419, 0.0013271101051941514, 0.009762180969119072]}, {"target": [0], "doc": ["why not something like the"], "issue_sim": [0.09538891911506653], "prob": [0.9983128309249878]}, {"target": [3], "doc": ["if <tag> should suppress <tag> from write to console then <tag> should also suppress console output for consistency", "but for i it seem more natural that <tag> should always write to host", "its interaction with informationstream can be control use informationaction and informationpreference variable", "if the appearance on the console shall be control use these then write - information should be use instead .", "that be my understanding of the difference between these two command"], "issue_sim": [0.36763057112693787, 0.18865126371383667, 0.16436663269996643, 0.17715191841125488, 0.1756928414106369], "prob": [0.23381084203720093, 0.05045047402381897, 0.3151325583457947, 0.2612057328224182, 0.005574510432779789]}, {"target": [1], "doc": ["do you try it with <number> component", "i post an example with <number> component and i want to style the button component which be the most deeply nest component which i could n't overwrite   the scoped style from the root component .", "maybe i be do something wrong"], "issue_sim": [0.4654482305049896, 0.7609731554985046, -0.029009433463215828], "prob": [0.04306682199239731, 0.9508782625198364, 0.039510857313871384]}, {"target": [5], "doc": ["@mhegazy , thank for start work on this", "i have a couple of comment and question", "i be in favor of have a", "alternative name be ts", "i agree with arnavion to store the compiler option as a json object instead of a string", "it ease readability and will ease to manipulate and read the config file from other tool .", "i like the approach of find a config file by walk up the directory structure and then use it", "however from the writeup it be unclear to i what happen if the directory contain the pick config file have a subdirectory that have its own config file", "will it first call tsc with the config file of the sub directory and when finish tsc with the config file of the parent directory exclude the file from the sub directory", "and what do we do if the parent have two subdirectory with a config file", "do we need to specify a build order then", "and +1 to be able to specify an exclude list in the config file"], "issue_sim": [-0.03902236372232437, -0.0682670921087265, 0.0023942887783050537, 0.13641776144504547, 0.3544842004776001, 0.109180748462677, 0.4486461579799652, 0.428640216588974, 0.525489091873169, 0.24337060749530792, 0.2111983597278595, 0.25715675950050354], "prob": [8.704519859747961e-05, 0.0005007273284718394, 5.197497011977248e-05, 1.888874248834327e-05, 0.013256924226880074, 0.2611338198184967, 0.00210648775100708, 0.049243468791246414, 0.030557524412870407, 0.003235960379242897, 0.00012655417958740145, 0.0004129651642870158]}, {"target": [8], "doc": ["also we do repeat path parsing and rebuilding , to be more resource - efficient and fast we need to delegate common method to provider ,", "net and kernel api", "even in powershell , i think", "the other problem , like i mention in <url> , be that we already promise to support multiple", "aspx ) that use conflicting path separator and legal name character", "so powershell have to do some abstract , provider - base path handle i imagine", "but once we know it be a filesystem path , i agree that we should do as little as possible on top of", "also , by \" break change \" above , i mean that pscore <number> have already ship as ga and people be already write script with backslashe in their path to be use cross - platform", "i fervently agree that just use <tag> would be well , especially since all the major api support it , it be design into windows from the start , and backslashe be just the bad legacy of cmd / dos .", "but i think there be script already be write as cross - platform that would break , and script from old powershell version that should work cross - platform with ps6 if not for the path - separator change"], "issue_sim": [0.24602970480918884, 0.21914425492286682, 0.27008646726608276, 0.056927502155303955, 0.32980796694755554, 0.3082709312438965, 0.2961592972278595, 0.27238959074020386, 0.3772231936454773, 0.49689146876335144], "prob": [0.04447593912482262, 0.0006022583111189306, 0.0010165912099182606, 0.0016880566254258156, 1.8115293642040342e-05, 0.00026979087851941586, 0.0584188774228096, 0.028705935925245285, 0.7177948355674744, 0.5128488540649414]}, {"target": [1], "doc": ["gdscript feel quite c++-ish to i despite the fact that it be a dynamic language", "when i switch from write code in c++ to gdscript i miss those access modifier .", "that be say , gdscript be miss full support for oop indeed"], "issue_sim": [0.20773322880268097, 0.28211188316345215, 0.14462602138519287], "prob": [0.3158295750617981, 0.4634310305118561, 0.04356035217642784]}, {"target": [0], "doc": ["the beauty of <tag> be that it can import both esm and cjs :", "this be highly desirable to maintain interop as the ecosystem slowly move towards esm because i can import a file without know the module system", "the current all - or - nothing approach be too painful", "i would be okay with either solution , but the pragma would give the most flexibility if it can be configure per call site"], "issue_sim": [0.2272830605506897, 0.4168132543563843, 0.03757180646061897, 0.3725571036338806], "prob": [0.20740659534931183, 0.48061782121658325, 0.005646649748086929, 0.5503485798835754]}, {"target": [0], "doc": ["i just do not wanna see an internal method with intellisense in gdscript , and make it more like c # and other statical type language", "yeah , i agree its difficult to implement and require new keyword , too much effort for very tiny result", "the solution with \" _ _ \" prefix be partially solve the problem , thank ,"], "issue_sim": [0.40994346141815186, 0.30840110778808594, 0.19493955373764038], "prob": [0.507680356502533, 0.13170315325260162, 0.11663774400949478]}, {"target": [2], "doc": ["@stevel - msft , @isazonov : i be glad that * * we agree that the doc need update * *", "for the sake of update the doc , * * let 's see if we agree what the _ current _ behavior be * * :", "again , use the term \" command \" in this abstract way be invite confusion , give the fundamental distinction between a command proper  and an expression", "when i use the term \" command \" an \" expression \" below , i be refer to their _ specific _ definition , and by \" operation \" i mean the _ abstraction _ over the two , _ exclude _ multi - command pipeline", "i be not cover the case where _ terminate _ error be treat as non - terminating one", "also note that the behavior describe be arrive at by trial and error , not source - code analysis", "* * current behavior * * :", "* if a command be execute by itself , boolean variable <tag> reflect whether it run successfully ; success / failure be determine by  if a cmdlet / script / function generate at least one non - terminating error , or  in the case of call an external utility , if its exit code be zero", "* inside a conditional , _ command _ success be by design _ not _ reflect in <tag>", "if a command be embed in an expression - whether via <tag> , <tag> , or <tag> - its <tag> status be lose , because the success of the expression _ itself _ be reflect in <tag>", "* reason why expression   may fail include : invalid operand  <tag> $", "<tag> $ false <tag> $", "<tag> try / catch <tag> try / catch ` to catch they - something you can not do with non - terminate _ command _ error", "i be happy to create a new issue focus on just that"], "issue_sim": [0.1911611258983612, 0.26117751002311707, 0.09799528867006302, 0.1805630326271057, 0.14549925923347473, 0.31313303112983704, 0.29988643527030945, 0.19112080335617065, 0.3285403847694397, 0.26958930492401123, 0.16249161958694458, 0.280456006526947, 0.23179513216018677, 0.13386665284633636], "prob": [0.05194755271077156, 0.30610620975494385, 0.058308906853199005, 0.36782434582710266, 0.003963591530919075, 0.0140283964574337, 0.0017993850633502007, 0.3556572496891022, 0.010254346765577793, 0.21749931573867798, 0.0008063048589974642, 0.00013925325765740126, 0.011930115520954132, 0.0011335195740684867]}, {"target": [0], "doc": ["i be think a well approach would have be to add a flag to the <tag> file like <tag> rather than break browser base code .", "as of now it seem like the good way would be to make a break change in typescript <number> and move this change back and add in a flag", "in the interim it would be nice to have a flag that say <tag> that will stop the auto creation of <tag>", "i do n't know all the in and out of typescript and the decision make but this decision seem highly irregular for code that should also work in the browser and in service worker script"], "issue_sim": [0.4494645595550537, 0.3380342721939087, 0.18429279327392578, 0.4661065340042114], "prob": [0.3116146922111511, 0.2938808798789978, 0.02582329884171486, 0.5186160206794739]}, {"target": [1], "doc": ["@cyrusnajmabadi and @vladima can weigh in on this ,", "but my understanding be that even if we have one classifier for the entire file , it will still marshall a very large string over to vs , and the performance will be just as bad .", "and it will cause lag while type , since it will be on the ui thread"], "issue_sim": [0.042092423886060715, 0.38063573837280273, 0.1443651169538498], "prob": [0.013731841929256916, 0.9270855188369751, 0.11206042766571045]}, {"target": [2], "doc": ["i be disinclined to support this operator", "* c # do n't have it , so do powershell really need it", "an operator be potentially confuse - different language use different token", "* the operator be n't use all that often , especially in typical powershell script", "* <tag> be really readable"], "issue_sim": [0.2662872076034546, 0.3330262303352356, 0.2627353072166443, 0.41159114241600037, 0.1253678947687149], "prob": [0.011604396626353264, 0.25208690762519836, 0.042277343571186066, 0.5566145181655884, 0.010328374803066254]}, {"target": [0], "doc": ["there be two case when getvalue  should be call in my opinion .. <number> . before a submit when use reactive form to force an update of all control .. <number> . by the form directive like <tag> or <tag> .", "at the moment we have the <tag> option for form", "but imagine you have a complex control like tinymce and you set this value to <tag>", "then the form system do the follow :", "change : cve convert dom to html and send it as value to the directive", "the directive maintain a <tag> which be update", "see here : <url>", "// thousand of change in a few minute of writing", "blur : cve invoke callback", "the directive forward the pendingvalue to the reactive formcontrol", "so we have a lot of conversion from dom to html and we need to maintain the pendingvalue to make it work", "but in our example we should only do it when the control loose the focus", "instead the directive now just call getvalue", "either in the blur callback or in the change callback"], "issue_sim": [0.5201912522315979, 0.11327969282865524, 0.42382097244262695, -0.01924031414091587, 0.5566241145133972, 0.2702891230583191, -0.041723042726516724, 0.15557309985160828, 0.34910258650779724, 0.15203461050987244, 0.381686806678772, 0.14838603138923645, 0.22077886760234833, 0.4389194846153259], "prob": [0.5936977863311768, 0.025610072538256645, 0.09527299553155899, 0.0015901054721325636, 0.03231531009078026, 0.0007957282941788435, 0.0002435659262118861, 0.0012319659581407905, 0.0003704046248458326, 0.0019765417091548443, 0.09282263368368149, 0.0029966451693326235, 0.0010384774068370461, 0.003561516758054495]}, {"target": [5], "doc": ["but this may lead to the situation where the compiler emit es6 code without complaint , which will only work when you be indeed go to pull they through babel", "if you 'd use a non - dynamic - check - loader , it will fail at runtime", "but simply ' automagically re - type ' it as something else  be not the right solution either , as it only work if you be use babel", "even though the package may be generate use babel  , it be not guarantee that the user will also use babel", "what do you mean", "i think both ' proper external ' be equally applicable to cjs and es6", "i think our discussion show that there be valid use - case for it , but that it should not be the default behaviour :)", "certainly not just base on --target es6", "maybe some other switch that ' tweak ' the resolve behaviour", "i be sure there will be more of these anyway", "anyway , this be only really relevant for the algo a case", "in algo b , people would still explicitly list their reference somehow  , and can handle it there", "i 've be think about that recently as well , but i come to the conclusion that an es5 / cjs package should _ not _ provide such definition if it do n't also provide the implementation", "i think it would be a good thing that the compiler tell i \" unknown type promise \" , such that i know i need to provide a polyfill myself when i be use node 0", "or that if i be compile for 0", "12 , it will already work without complaint", "seem the ts team be already work on something to facilitate the latter in # <number> , btw"], "issue_sim": [0.2723308503627777, 0.20842428505420685, 0.24517011642456055, 0.26571837067604065, 0.05309751629829407, 0.22612446546554565, 0.21269148588180542, 0.1876634657382965, 0.12193560600280762, 0.04044182226061821, 0.07099840044975281, 0.1188555508852005, 0.33685940504074097, 0.3461230397224426, 0.12140648066997528, 0.014162377454340458, 0.17820626497268677], "prob": [0.09570766985416412, 0.04688461869955063, 0.36286911368370056, 0.04967566207051277, 0.00032887194538488984, 0.0039757429622113705, 0.14202450215816498, 0.0024025491438806057, 0.00264413608238101, 0.0018920877482742071, 0.002071058377623558, 0.00810291524976492, 0.2648523449897766, 0.05123937875032425, 0.0009006155887618661, 0.0029693313408643007, 0.006874649785459042]}, {"target": [0], "doc": ["this would somehow inverse the current <tag> order that we all know .", "i be not sure have it reverse just so we can use multiple callback be the way to go", "it 'll likely confuse the user"], "issue_sim": [0.23841652274131775, 0.3970181941986084, 0.019575662910938263], "prob": [0.9848002195358276, 0.012719596736133099, 0.0026199736166745424]}, {"target": [0], "doc": ["i 've never like module be store under document .", "seem to i they should have be store under <tag> or some path like that", "btw i define this symlink a while back in my home dir :", "i wonder if <tag> should be hide by default like they be on linux", "i suppose mostly developer will wind up with these so perhaps it be ok that they be not hide", "re <tag> , i like the idea but you 've get some other team to convince :"], "issue_sim": [0.07400912046432495, 0.10447464883327484, 0.16222520172595978, 0.173109769821167, 0.0839962586760521, 0.05699747055768967], "prob": [0.9680820107460022, 0.11103099584579468, 0.0007546477136202157, 0.02847471833229065, 0.003987539559602737, 0.1481676697731018]}, {"target": [3], "doc": ["the recommendation here be to use a public readonly getter and a private / protect backing field", "accessors be symetrical with property in the type system", "anything we do will need to be manifest in the type and expressible on property", "add new access modifier to enable private_set / public_get would increase the complexity of the language and the learning curve , and the value gain from this would not match the add complexity ."], "issue_sim": [0.5980881452560425, 0.458168089389801, 0.2236964851617813, 0.28261178731918335], "prob": [0.25713029503822327, 0.01564706303179264, 0.04972417652606964, 0.3790196478366852]}, {"target": [0], "doc": ["well that be the point of have your own extension , it mean you can use they to store and have that extra level of cached information as well as make the datum more digest for the engine .", "these godot extension be the reason we do not have to have that", "import directory in the first place in previous version", "people can be unhappy that godot use its own extension and it look like it be what motivate this change in design", "but that be the way it be and i find it way cleaner and more honest", "have application specific extension be also a very common way to deal with that problem actually a lot of good software do have their own extension  why not a game engine since when be that a problem", "if people want to work only with their raw file  that be just never go to happen they be just not sufficient and adapt enough , the clean solution to that problem be to get your own extension the way godot do", "hide they away in a different place wo not change that fact", "but it open the way to more shadowy and less efficient meta file and all the messy stuff that come with they", "i understand it be something people , come from engine that use meta file to handle that problem , might at first be ask : \" why we need our own extension \"", "and can be a bit salty about", "now if you tell they that this be either have application specific extension or have disgusting meta file all over the place they might understand why godot 's way be more honest and clean and why they might want to stick with it", "now people come from other engine like unity might be accustom of have unclear and polluted filesystem this be not my case as i pretty much ditch unity over godot because of these meta file ,   and unclear / inefficient way of deal with my asset , godot be just so much clean about it", "now i understand there be a switch in the design direction and we be on the edge of ditch extension for the meta way of do thing", "i rarely ever speak up but i feel this be sufficiently important for i that i have to", "sorry if i annoy you you guy be free to take it or not", "i know how critic can be tough to take at the same time if we never express our opinion"], "issue_sim": [0.2969077229499817, 0.11777079105377197, 0.3028497099876404, 0.27961888909339905, 0.13370415568351746, 0.411815345287323, 0.3039292097091675, 0.18305213749408722, 0.2368997037410736, 0.3920440673828125, 0.02501695230603218, 0.3627273440361023, 0.5953900814056396, 0.23628927767276764, 0.14058218896389008, 0.1203870177268982, 0.0832706168293953], "prob": [0.2879716753959656, 0.007586643099784851, 0.0038424497470259666, 0.0037609264254570007, 0.002558362204581499, 0.2008046656847, 0.03706173598766327, 1.186338431580225e-05, 0.0017115281661972404, 0.004027530550956726, 5.371521183406003e-06, 0.03412562608718872, 0.021059416234493256, 0.0012330272002145648, 0.0004016221791971475, 4.139472002862021e-05, 0.0003110551042482257]}, {"target": [0], "doc": ["i think that be potentially one of its great advantage over the current spaghetti system - due to its design it will ease people into learn programming and gdscript / godot 's api .", "some people here commented- but why bother do it- its too similar to script in   presentation", "my answer to that be - precisely", "you learn spaghetti , you be leave with spaghetti", "you learn the event sheet , you will know gdscript by see what it generate and use those expression field", "it will teach you about execution order and how to read code", "see what convert to gml do in game maker"], "issue_sim": [0.3203129768371582, 0.204271599650383, -0.012084373272955418, 0.11832911521196365, 0.27597326040267944, 0.17075155675411224, 0.21261104941368103], "prob": [0.9698696136474609, 0.06367384642362595, 0.002619789680466056, 0.08244555443525314, 0.2722790837287903, 0.021638046950101852, 3.548986205714755e-05]}, {"target": [0], "doc": ["if you use <tag> to get an instance of your command , it be not di either .", "i do n't see how a custom - make factory would n't solve your issue", "let 's write an example to make it clear :", "this do n't need any specific support from angular , it still hide the dependency of the command from the component , it still use di to manually inject the service in the command , make they easy to test with mock , and it still use di to inject the factory in the component , allow you to inject a mock factory create mock command in test"], "issue_sim": [0.3341752886772156, 0.25123700499534607, 0.11248058080673218, 0.5913071632385254], "prob": [0.8833447098731995, 0.002622827887535095, 0.0014707533409819007, 0.5552548170089722]}, {"target": [0], "doc": ["i would love to see something like  implement as a general transition component , either in core or as a helper library ."], "issue_sim": [0.511734664440155], "prob": [0.9991747736930847]}, {"target": [4], "doc": ["this be my first time comment", "i come over from unity and the move to gdscript have be a dream", "i pick up the language in less than a day", "i love how well the language be implement into the engine and my productivity have jump considerably", "my main concern be that with add c # support gdscript will be leave behind or see less development after a flood of unity developer .", "c # be a fine language but not my personal favorite", "also i be concerned to see godot try to be more like another engine instead of stand on its own", "unity be a fabulous success story but not the good engine i 've ever use", "it be bloated and buggy", "once it delete my entire project without confirmation", "deal with bug and thing not work like they should be a constant struggle", "i ca n't count how many time i have to completely rebuild a scene i be work on because thing be n't work right", "i once copy and paste all the content from an old buggy scene into a new scene to have it suddenly work despite both scene be identical", "i lose week hunt physics bug that would magically appear and magically disappear", "i really like that godot be lean and simple to understand", "work with godot have be like use a well tune musical instrument", "after almost a year of work in it i just know how to do anything i need to do , even if i have n't do it before", "i just hope the influx of unity user wo n't steer the direction of the engine more towards unity", "if i want unity then i 'd be use unity"], "issue_sim": [-0.061080269515514374, 0.1494472324848175, 0.18698135018348694, 0.29597941040992737, 0.3637208938598633, 0.30263665318489075, 0.2280840277671814, 0.2524573802947998, 0.11186853051185608, -0.007165346294641495, 0.07567998766899109, 0.09248509258031845, 0.04936457797884941, -0.004235472064465284, 0.27224022150039673, 0.23152214288711548, -0.03340195119380951, 0.28766804933547974, 0.33152222633361816], "prob": [0.01474685501307249, 0.04193730652332306, 0.04001208022236824, 0.16020290553569794, 0.4657953381538391, 0.007181594148278236, 0.3675307333469391, 0.003582039615139365, 0.0012681041844189167, 0.0005077259265817702, 0.002376007614657283, 0.015617595054209232, 0.008110580034554005, 0.002032013377174735, 0.0007807189249433577, 0.00046844163443893194, 0.06175873428583145, 0.028532903641462326, 0.007078275084495544]}, {"target": [1], "doc": ["personally i be fine with sconstruct , it work perfectly for i on my mac / win setup", "but i do agree with you , cmake would be a great addition since it be much well maintain ."], "issue_sim": [0.29427000880241394, 0.413616418838501], "prob": [0.25848349928855896, 0.7177254557609558]}, {"target": [4], "doc": ["i be suggest to add a way to concretize the type of a generic function", "the example with <tag> should demonstrate how the suggest feature would work , but it be not a use case where i would really need it", "even this work fine as well :", "well use case be the one provide in the link issue by @bradennapier , or the one in my proposal about discriminate union", "in general , it would be useful to help typescript infer the correct type without provide it explicitly .", "i agree that this be probably not need very often , but when it be , it would very useful", "also , i do n't think it would be a big change , at least not on the surface of the language , so it could be well worth the effort"], "issue_sim": [0.5313237309455872, 0.33161336183547974, 0.06511040776968002, 0.2941845655441284, 0.49964439868927, 0.10458335280418396, 0.15510910749435425], "prob": [0.11038556694984436, 0.15186235308647156, 0.00017059731180779636, 5.602705277851783e-05, 0.3056410551071167, 0.006935913115739822, 0.47915053367614746]}, {"target": [2], "doc": ["i say your request need to be clarify", "as steve mention , please see the code of conduct he link ; if you want we to assist , we need to be clear on what you be actually ask for", "powershell 's style be typically verbose and i would imagine a more sensible parameter name would likely be <tag> or some such .", "<tag> be not _ take _ on <tag> but imply probably too similar a thing to <tag> without a distinction of what it be do", "if you just want the last <tag> byte , though , as @mklement0 mention , you already can :", "your request be n't clear", "do you want the last n byte , or the last n _ properly encode / decode character _", "those be two different thing entirely", "the latter be perfectly doable , though a little messy to do , and yes you could conceivably design such a parameter"], "issue_sim": [0.06552593410015106, 0.12403470277786255, 0.3266199231147766, 0.024835744872689247, 0.28634053468704224, 0.03560638800263405, 0.3311936557292938, -0.023647405207157135, 0.12273410707712173], "prob": [0.023338662460446358, 0.32781559228897095, 0.37805959582328796, 0.14515382051467896, 0.03092585690319538, 0.0007036271854303777, 0.0218266099691391, 0.001586533384397626, 0.0768088549375534]}, {"target": [0], "doc": ["private property and method should not be accessible from outside the class instance .", "own method of a class should have access to private method of a class if they be static or not", "can be a constructor private", "if it be not , be this singleton example valid"], "issue_sim": [0.350496768951416, 0.4512284994125366, 0.32326140999794006, 0.27824491262435913], "prob": [0.5946736335754395, 0.4137204885482788, 0.004761472810059786, 0.011931512504816055]}, {"target": [6], "doc": ["i 've be read you guy claim it be too complex", "remember the \" c++ way \" why it be different from :", "i can see a lot of use case for this , that be why i be here right now", "what if i want myattribute to be publicly accessible but allow only to be modify inside its class", "what if i want to add some custom logic each time the attribute be modify", "it can be a business rule , it can be just a logging to understand why it have be assign a specific value , together with a breakpoint condition for debug purpose , etc", "basically , we want a method to be use each time we modify the attribute together with the syntactic sugar that make it seem we be just assign a value , instead than call a method .", "c # have the concept of property for this and i think ts inherit that concept , but not allow different accessibility be a big limitation for people that think like i and make we fall back to the \" c++ style \""], "issue_sim": [0.06612950563430786, 0.18526402115821838, 0.0312538743019104, 0.5437265634536743, 0.39999228715896606, 0.4063326120376587, 0.5205082297325134, 0.46841710805892944], "prob": [0.09760301560163498, 0.013205897063016891, 0.03050186112523079, 0.05291038751602173, 0.0012988857924938202, 0.15991328656673431, 0.18971391022205353, 0.28928542137145996]}, {"target": [0], "doc": ["i also find this annoying , especially in the -x and -y as note by mateusak .", "i tend to put a few dummy sprite on far reach just to free up the navigation space", "have n't notice this kind of restrictive behaviour in other 2d application"], "issue_sim": [0.12020862102508545, 0.329365611076355, 0.1248588040471077], "prob": [0.754824161529541, 0.1413479745388031, 0.033532269299030304]}, {"target": [1], "doc": ["i mean why have \" normal \" <tag> anyway", "from a dev history perspective <tag> be just there before <tag> , but in retrospect the scoped slot approach be more flexible .", "but there be no need to have split approach anymore", "it be more work for the child component that have to check <tag> * and * <tag>", "just deprecate <tag> altogether , mirror its property into cloning function of <tag> and trigger deprecation when try to use <tag>", "no library author need to do anything in this case , except when make a release for the next major vue version , when the deprecate stuff get kick out"], "issue_sim": [0.07368561625480652, 0.3058691918849945, 0.06596000492572784, 0.2406626045703888, 0.45718520879745483, 0.26693636178970337], "prob": [0.0003739048552233726, 0.8521162271499634, 4.4559408706845716e-05, 0.0020451436284929514, 0.1527574360370636, 0.11016014963388443]}, {"target": [0], "doc": ["as long actual result be different from expect result , its hard to call it \" this be correct \" .", "i understand that there be not too much workforce to fixe all issue , but you should choose one of :", "- mark it as know issue , that maybe in future it will be fix", "you admin that current behavior differ from ideal , expect one", "- mark decorator feature in documentation as \" sometimes might work , sometimes not \" and live with that", "- add compiler warning for case when it might occur", "- remove decorator feature completely"], "issue_sim": [0.30110231041908264, 0.16944585740566254, 0.18072566390037537, 0.13531671464443207, 0.2593878209590912, 0.2861097753047943, 0.18132328987121582], "prob": [0.9671795964241028, 0.06607367843389511, 0.0022347706835716963, 0.0009399388218298554, 0.05724150314927101, 0.04274652525782585, 0.008584480732679367]}, {"target": [0], "doc": ["because  be what type guard do ! : stuck_out_tongue_winking_eye :"], "issue_sim": [0.25036704540252686], "prob": [0.999754011631012]}, {"target": [0], "doc": ["main thought be that we should have simple possibility to switch default windows and core version user - wide and system - wide .", "ideally powershell should take version parameter and/or configuration option to run a desire version"], "issue_sim": [0.49692466855049133, 0.49847981333732605], "prob": [0.8134727478027344, 0.2614375352859497]}, {"target": [1], "doc": ["please do n't remove build - in script", "the project folder be already a mess with metadata for every image and there be time there be just not sane to add new file to it when a <number> - line builtin script do the job .", "not all logic have to be reusable and manage as separate file", "some script can be literal one - liner", "not to mention project use they heavily will be _ fatally cripple _ by this", "the maintenance cost would be plain absurd", "there be already plenty of work to be do to port a project from 3", "i do n't want year of work to go down the drain again", "i know some of the developer have an aversion to builtin , but consider user too", "if there be a feature offer for i to use and i deem it convenient to use , it be my right to use it , whatever the limitation be", "with that i mean that i ponder the pro and con and decide that it be still the way to go", "have they just yank out from my grasp do n't seem very fair"], "issue_sim": [0.41497963666915894, 0.5390584468841553, 0.16906636953353882, 0.17951634526252747, 0.20725905895233154, 0.08708193898200989, 0.14677605032920837, 0.06943412870168686, 0.23450890183448792, 0.12160664796829224, 0.03411500155925751, 0.031048808246850967], "prob": [0.00045387251884676516, 0.7282819747924805, 0.0028892054688185453, 1.272463305213023e-05, 0.0008847631397657096, 0.009027882479131222, 0.00015576262376271188, 0.00011027989239664748, 0.005598916206508875, 0.17486260831356049, 0.054792605340480804, 0.021425066515803337]}, {"target": [3], "doc": ["i believe i should also move my example here from related issue :", "here , property <tag> actually * * can * * have a setter but it * * should not be accessable * * outside of   <tag>", "moreover this setter contain complex logic and a simple readonly or an absence of a setter be not enough", "i agree that private setter be just a syntax sugar for private method with additional logic  but i think it be inconsistent when part of logic relate to a field be in a property  and another in a method  .", "this way getter / setter be implement in <tag> , i think it would be usefull to allow different visibility at compile time , though this contract will be lose in runtime"], "issue_sim": [0.19092974066734314, 0.5629433393478394, 0.475005567073822, 0.6204230189323425, 0.68213951587677], "prob": [0.0027780167292803526, 0.18555912375450134, 0.05074365809559822, 0.3258698582649231, 0.10890667885541916]}]}