{"dataset": [{"target": [2], "doc": ["i do n't understand how angular can pride itself on its test - drive development angle if this be still an issue year later", "it take i hour to realize why i could n't put test - suite setup code in the beforeall  method", "how can i have a sane developer tdd experience when it take several minute to run spec once for my project .", "at the very least there need to be a mention of this horrible testbed compiler side effect in the documentation because on the surface , there be no distinct error message or explanation for why test ca n't be set up in the beforeall  method"], "issue_sim": [0.27567577362060547, 0.3338336646556854, 0.432346910238266, 0.4451998472213745], "prob": [0.10297262668609619, 0.07230838388204575, 0.13027867674827576, 0.21574127674102783]}, {"target": [2], "doc": ["i do n't think trait be necessary", "what we need the most be fast engine release cycle", "i mean we need to make the engine more flexible to add new feature as simple just add new dll or so file and the engine auto integrate with it self , like plugin style in most ide .", "for example i really desperate need for websocket to work , i do not need to wait it until 3", "1 too break right now with so many bug", "it will be great if we have this feature", "new class can auto inject to gdscript from random", "so in some path", "i do n't know how much effort this to do in c++ but i hope this be not too hard"], "issue_sim": [0.13086602091789246, 0.1493840217590332, 0.35085514187812805, 0.16859033703804016, -0.008760569617152214, 0.10353375226259232, 0.2266368567943573, 0.022443871945142746, 0.15672451257705688], "prob": [0.040903490036726, 0.06064566597342491, 0.1404561549425125, 0.004745029844343662, 0.0011682701297104359, 0.0016562746604904532, 0.003525125328451395, 0.004434497095644474, 0.39857468008995056]}, {"target": [0], "doc": ["angular have throw native shadow dom out anyway , so i do n't feel strongly about keep browser contract : innocent :"], "issue_sim": [0.174554243683815], "prob": [0.9999433755874634]}, {"target": [0], "doc": ["in case the <tag> path be occupy , a unique name should be create to avoid overwrite a potential other addon with the same name .", "it could easily be do by append a number to the name just like do when duplicate node"], "issue_sim": [0.20163044333457947, 0.17234721779823303], "prob": [0.8706148266792297, 0.018436292186379433]}, {"target": [1], "doc": ["any update on this", "i might be underestimate the difficulty but it seem like the nodeinjector could easily implement the correct injector function .", "it be currently pass in undefined to getorcreateinjectable for the injectorflags"], "issue_sim": [0.060414571315050125, 0.2150830626487732, 0.20794975757598877], "prob": [0.014533252455294132, 0.7278693318367004, 0.26798215508461]}, {"target": [1], "doc": ["when do you need to call multiple watcher function on the same property", "it be really weird to split a watcher up"], "issue_sim": [0.5384824872016907, 0.17174506187438965], "prob": [0.7520462870597839, 0.05874074995517731]}, {"target": [2], "doc": ["i agree with the op on this issue", "i recently upgrade my win10 and now i get those file in onedrive / document as well", "while i like the idea of share my default profile and possibly script across pc use onedrive , this should be do use the proper windows folder , namely appdata local / roaming , because this be the convention on windows and it work well .", "also well than dotfile and dotfolder in the home directory", "so the correct path would be something like <tag> or <tag>"], "issue_sim": [-0.06312691420316696, 0.4538179337978363, 0.5519136190414429, 0.07502245903015137, 0.12474261224269867], "prob": [0.016873536631464958, 0.5321369171142578, 0.7074257135391235, 0.015524768270552158, 0.009331443347036839]}, {"target": [0], "doc": ["i do n't understand the issue - since sort be a valid verb it can be use in all noun combination .", "can you clarify what you actually want to achieve and what be block you"], "issue_sim": [0.3326573073863983, 0.1260412037372589], "prob": [0.8336334228515625, 0.037453558295965195]}, {"target": [1], "doc": ["see issue # <number> <url>", "build system be way too complex and migrate it at this point would take. week .", "also , i do n't like cmake , if i be to switch , i 'd rather use a", "build system with a real scripting language", "on sat , feb <number> , <number> at 12:37 am , marynate notifications@github"], "issue_sim": [0.0272225234657526, 0.3491291105747223, 0.5675498247146606, 0.35880783200263977, -0.030545007437467575], "prob": [0.00984277855604887, 0.6768779754638672, 0.2057742029428482, 0.025852221995592117, 0.14721845090389252]}, {"target": [2], "doc": ["<number> quick comment :", "this would not be a good idea", "there be a a few common type which have recursive parent - child property that would result in some very unexpected behavior if this be the default ."], "issue_sim": [0.014346886426210403, -0.024180028587579727, 0.2150818407535553], "prob": [0.010445580817759037, 0.04779580608010292, 0.9848201274871826]}, {"target": [0], "doc": ["seem we have already discuss that we could use different file name to address such scenario  .", "for the issue we could create <tag> or <tag> runner"], "issue_sim": [0.1514594405889511, 0.10360638797283173], "prob": [0.9881653785705566, 0.005709466990083456]}, {"target": [6], "doc": ["i be also interested in this", "in my specific case , i do n't have very granular component , however several ' page ' where i need different ' layout '", "currently , i be solve this use _ appearance - only _ component , as op state it", "i have a <tag> which import further stuff like <tag> etc", "as well as a <tag> which have nothing but a <tag> as it be template", "composition be do with child component inside the _ vue - router _ configuration", "this ' top - down ' approach have a major drawback though : it result in a god object  which define the entire composition of the application , instead as have modular component which could inherit certain aspect of their parent  ."], "issue_sim": [-0.009275749325752258, 0.38506150245666504, 0.3313055634498596, 0.1721503883600235, 0.2993451952934265, 0.5038329362869263, 0.4976954460144043], "prob": [0.002070634625852108, 0.6844470500946045, 0.04185405373573303, 0.01101794932037592, 0.04032984375953674, 0.044114261865615845, 0.6168310046195984]}, {"target": [0], "doc": ["furthermore , <tag> do not work for service provide via component 's <tag> , quite disappointing , because it would much more usefull ."], "issue_sim": [0.2337285727262497], "prob": [0.9999351501464844]}, {"target": [2], "doc": ["@lunelson unfortunately , not call <tag> do n't work", "you can see for yourself here : <url>", "the result be that bar do n't disappear and the router just keep wait for the transition to finish .", "and for the hook : i do n't understand , how i would make use of they", "i ca n't call they to cancel the transition", "they just allow i to * react * to cancel transition", "my problem be how to cancel transition manually in the first place"], "issue_sim": [0.1527763307094574, -0.005892574787139893, 0.26389414072036743, 0.08188476413488388, 0.1863442212343216, 0.2507290244102478, 0.370158314704895], "prob": [0.00668421620503068, 0.012698053382337093, 0.41006335616111755, 0.2374092936515808, 0.01900787465274334, 0.029288286343216896, 0.01955876126885414]}, {"target": [1], "doc": ["@bradennapier you be right , you show how this feature would be useful for infer parameter type as well , not only return type", "this be another key difference between this proposal and the <tag> syntax proposal , since the latter would always yield the return type , and never a parameter type ."], "issue_sim": [0.5593829154968262, 0.5103198289871216], "prob": [0.04274305701255798, 0.8611542582511902]}, {"target": [0], "doc": ["if you support object then it be only consequent to also support maps and set for exactly the same reason ."], "issue_sim": [0.18812304735183716], "prob": [0.9999921321868896]}, {"target": [0], "doc": ["ditto , remove filter seem to beg for some hook on v - model to accomplish type / value transformation ."], "issue_sim": [0.369684636592865], "prob": [0.9999610185623169]}, {"target": [1], "doc": ["i do n't think that the documentation clearly state that return a <tag> might retrigger this guard and possibly create an infinite loop", "this usage case of the <tag> guard be like an interceptor .", "you be modify this request / navigation base on certain condition", "if we translate this current behavior to interceptor it would mean that you 'd need to keep state in every interceptor in the stack , since every interception would trigger again the entire interceptor stack and you 'd need to check if you have modify the request already or not"], "issue_sim": [0.5363582372665405, 0.28730809688568115, 0.19947388768196106, 0.5002323389053345], "prob": [0.20109185576438904, 0.14589902758598328, 0.026245111599564552, 0.7164181470870972]}, {"target": [1], "doc": ["@dzmitryshylovich , nope , it need to be two resolve , as on other route , i have they in different level + they resolve to two separate observable", "put they together will just end up in code duplication , which be very bad , as you have to make sure you edit it in all place ....", "i use resolve to construct the app state , where some state depend on other , but the level they be on be n't always know"], "issue_sim": [0.4456250071525574, 0.2722465395927429, 0.2516363859176636], "prob": [0.0006917190039530396, 0.9348711371421814, 0.43090638518333435]}, {"target": [1], "doc": ["i think this change complicate thing beyond just add <tag> .", "if this pattern be adopt en mass , user will be force to redo large section of code to accommodate where <tag> command currently return nothing when nothing be find but do produce error whenever other condition occur", "where before the presence of an error indicate a failure and no result indicate not find , now the user must do error inspection", "this pattern will result in error message scrape because many author do n't make error generation easy to consume", "because error generation in powershell be neither intuitive nor easy", "do add a ton of <tag> command fix that", "but now i need more code to do the same thing i have be do for yeas and i need to make massive adjustment to my exist windows powershell code to make it work with core", "if i be a small shop , this would just add another reason to not move to core and stay on windows powershell", "be the original design wrong", "but it have result in a unique - to - powershell shortcut that have be widely use as a good practice recommendation", "the current behavior do n't break anything", "it do n't stand in the way of progress", "the new behavior , if adopt from the start , would have build a body of work and recommendation that would have maintain it", "however , now a decade of example , text book , blog post , help document , course material , etc be all seed of confusion and frustration for new user who come in to this after the behavior be change", "what do change this behavior solve and at what cost"], "issue_sim": [0.28045976161956787, 0.40056729316711426, 0.35753148794174194, 0.30625826120376587, 0.32745903730392456, 0.3240439295768738, 0.34404119849205017, 0.3130722641944885, 0.08584579080343246, 0.22461728751659393, 0.35326921939849854, 0.020916804671287537, 0.26455622911453247, 0.21904680132865906, 0.2694680094718933], "prob": [0.0026808881666511297, 0.2816855013370514, 0.024503692984580994, 0.024407370015978813, 0.001998309511691332, 1.4839858522464056e-05, 0.11072853952646255, 0.0013735026586800814, 1.2001682080153842e-05, 0.0022768843919038773, 1.592323496879544e-05, 5.5275289923883975e-05, 0.005228819325566292, 0.3458390235900879, 8.485127909807488e-05]}, {"target": [0], "doc": ["ca n't you just remove unused asteroid from the scene  and add they back  when need ?"], "issue_sim": [0.4578089416027069], "prob": [0.999966025352478]}, {"target": [5], "doc": ["i think this be debatable", "in javascript , the sole purpose of <tag> be precisely this case : explicitely say that no value have be affect", "this be the sole definition of <tag> value in the ecma specification : <url>", "it should n't be interpret as a value but as the absence of value", "this be also why <tag> will dump <tag> key but not<tag> one", "so , in my opinion , when <tag> be set as property anywhere , it should be interpret as \" no value be assign \" and in the case of vue property , it should trigger default ."], "issue_sim": [0.03323061019182205, 0.4473935067653656, 0.21262872219085693, 0.22231443226337433, 0.0970163643360138, 0.6630167365074158], "prob": [0.003779104445129633, 0.07602370530366898, 0.009367415681481361, 0.005840408615767956, 0.006518006324768066, 0.7404560446739197]}, {"target": [2], "doc": ["what be the argument against variardic", "other than be ugly , i do n't know of any issue use that syntax , whereas array style i know would take a hit in garbage collection after repeat call", "that is , create an array every time render be call would have an adverse  effect on performance in a very large application .", "i be try to understand your position well , since i be suggest add an additional signature , not replace the exist behavior"], "issue_sim": [0.04721178114414215, 0.260206937789917, 0.2866041660308838, 0.2793680727481842], "prob": [0.00014150398783385754, 0.5912318229675293, 0.48915719985961914, 0.07878171652555466]}, {"target": [0], "doc": ["i be a 2d person , so for node with mainly 2d application , keep the node name without a suffix if it do n't already have one seem fine to i .", "this seem like a more painful refactor for 3d user , but it do make a lot of sense where certain node have only a 2d or 3d application for the most part that they retain the short name for their intend domain and have a suffix elsewhere", "anything else that can be unify would be nice to see unified , specifically <tag>"], "issue_sim": [0.5246584415435791, 0.5504100322723389, 0.31985729932785034], "prob": [0.7460368275642395, 0.4760012924671173, 0.024372275918722153]}, {"target": [1], "doc": ["to put it differently : in a way we already have a potential over - promising problem , by support <tag> value ; e", "i think it be sufficient to _ document _ the limit of accuracy and to otherwise make do with <tag> for <tag> ."], "issue_sim": [0.28448352217674255, 0.23785144090652466], "prob": [0.8262296319007874, 0.27343645691871643]}, {"target": [0], "doc": ["this really need to be raise in the powershellget repo as this be n't a powershell issue as such but an issue with that module -"], "issue_sim": [0.4438956379890442], "prob": [0.9999771118164062]}, {"target": [0], "doc": ["you could experiment with implement option <number> just for your component , like in  ."], "issue_sim": [0.39138534665107727], "prob": [0.9999707937240601]}, {"target": [1], "doc": ["@calinou in game you need speed by default to keep those <number> fps run", "i 've never hear a complaint about normalize vector be 0.1 % off but lot about slow game .", "if you ever need > 99", "9 % accuracy you can normalize your vector use the math sqrt function"], "issue_sim": [-0.005972203798592091, 0.03013061359524727, -0.04148055985569954, 0.1072450801730156], "prob": [0.030879778787493706, 0.9798720479011536, 0.02078939601778984, 0.1360798329114914]}, {"target": [1], "doc": ["he do say that the alias be for interactive use", "practically , on the command line alias be simple , fast and let you get more on the line . that be why we have they .", "also , have a parameter that serialize if it be a hashtable or validate then pass the value through as a string seem like a nice accelerator", "@markekraus   i would interpret \" depth <number> \" to be something like \" for hash table , serialize to every level of the hashtable with a check for loop \"", "the hashtable value themselves would n't be serialize beyond the default <number> level", "@mtman be this along the line of what you be think of"], "issue_sim": [0.09856993705034256, 0.2424154281616211, 0.4580519199371338, 0.23716813325881958, 0.20689159631729126, -0.06939086318016052], "prob": [0.015560618601739407, 0.34951820969581604, 0.4582667350769043, 0.001447253511287272, 0.2218446433544159, 0.005294799339026213]}, {"target": [1], "doc": ["@mattmccutchen you be right , # <number> propose a different solution for the same problem", "however i think this one could be implement much more easily as it do n't have any break change and do n't colide with something as basic as ... parenthesis ."], "issue_sim": [0.14439547061920166, 0.3226833641529083], "prob": [0.0006169289117679, 0.9982566237449646]}, {"target": [15], "doc": ["@posva - yes , and we currently do this", "i guess my problem be that i have vague  dissatisfaction with the api for deal with various datum type", "i have some thought that have n't really form into anything cohesive", "- boolean value and array selection be handle magically for input of <tag>", "- number value be * * not * * handle magically for input of <tag> , and require a <tag> paramater", "- any other data type require a two - way filter", "the result of all of these leave we with :", "- give that checkbox have magical behavior , it be understandable that someone would expect that number would have magical behavior as well", "- forgetting to add the <tag> parameter be an easy source of bug", "- why do <tag> get special treatment anyway", "should it be replace by a filter", "- filter seem like they should be use for * * value * * transformation , while this request be more about * * type * * transformation", "- i also do n't like the idea of pollute the filter namespace with type transformation filter", "out of a form context , they do n't make much sense", "at the very least , it be great that vue have global and component - local registration , so this be n't really an issue", "regardless of opinion on the above , i do think it would be good to add a section on two way filter to the form doc as a way of handle type conversion .", "- also , really want to reemphasize that these be very minor consistency / api nitpick", "vue have be a huge boon and the exist form binding * * work * *", "- one downside to the proposal be that there would be some overlap between two - way filter and v - model type transform", "- i apparently like bulleted list"], "issue_sim": [0.07823222875595093, 0.21028056740760803, -0.006489522755146027, 0.1714634895324707, 0.1061473935842514, 0.08657529205083847, -0.07572963833808899, 0.11913470178842545, 0.17978620529174805, 0.060639820992946625, 0.15703432261943817, 0.5694157481193542, 0.4191136956214905, 0.04624968022108078, 0.2056826800107956, 0.3368327021598816, 0.19277355074882507, 0.1338220238685608, 0.2224307656288147, 0.08085516095161438], "prob": [0.00014464346168097109, 0.0030478108674287796, 0.004198439884930849, 0.004907868802547455, 0.05010121315717697, 0.00042684501386247575, 7.270537935255561e-06, 0.035612836480140686, 0.006933347787708044, 4.0847575291991234e-05, 0.0002087010070681572, 0.0027832125779241323, 0.004053801763802767, 9.183577640214935e-05, 0.004390038549900055, 0.23602434992790222, 0.0012025204487144947, 5.9236568631604314e-05, 0.026534901931881905, 6.957042933208868e-05]}, {"target": [4], "doc": ["@oresoftware it do not matter how often you nest a promise , the result be the same :", "this be just how promise work", "you simply can not get the \" inner \" promise , it be go , flatten .", "i be not say that the type <tag> be wrong , it might just be the result of a function , wrap something into a promise", "however , typescript should always collapse nest promise when type checking and compile because that be what javascript do"], "issue_sim": [0.19997936487197876, 0.1883174180984497, 0.12155230343341827, 0.4265625476837158, 0.4984745681285858], "prob": [0.018920177593827248, 0.003064133692532778, 0.7639569640159607, 0.22358077764511108, 0.42093372344970703]}, {"target": [3], "doc": ["i develop mainly procedural generate game", "those can be do on gdscript on a small scale , but sometimes you need more", "but if you use any of the available option you ca n't really use gdscript together with they", "there be a lot of thing you need to translate between the two , call function from each other cost a lot and be generally hard to setup and maintain  .", "i just wanna use gdscript goddammit"], "issue_sim": [0.22991301119327545, 0.09232185781002045, 0.18843455612659454, 0.2872379422187805, 0.09414205700159073], "prob": [0.00292985700070858, 0.3069600760936737, 0.05306355282664299, 0.46859875321388245, 0.001387573080137372]}, {"target": [5], "doc": ["where be we at with this decision", "in my opinion it be embed in the nature of javascript for a schema to use the default value of the property if the property be pass as undefined", "actually it be n't embed but that be how mongoose schema definition do it and it be logical in my opinion", "how else do you make a < component v - for=\"item in item \" : item=\"item \" > < /component >", "with a default item value resort to the default when you want to add a new item to item , and do so by push an undefined value into the item list", "so that the component take care of the default value , because you should n't have to put any component logic into the parent , be i right .", "what workaround be there for my use case to ensure that : item be only pass if it be not undefined", "so i can get the default value work", "thank you kindly vue team"], "issue_sim": [0.04116520285606384, 0.5954195261001587, 0.25824302434921265, 0.4582101106643677, 0.3614448606967926, 0.55146324634552, 0.45778656005859375, 0.23322582244873047, -0.07069391757249832], "prob": [0.001902743591926992, 0.17046301066875458, 0.03442796319723129, 0.005258582066744566, 0.019240256398916245, 0.22057953476905823, 0.0018082506721839309, 0.0009531515534035861, 8.514685032423586e-05]}, {"target": [0], "doc": ["i call this a workaround because your original solution return <tag> do n't work & mdash ; ideally the language would never surprise you and you could just write the program you want to write in the first place .", "@hoqhuuep good to know it be work as desire", "i 'll close the issue"], "issue_sim": [0.33575439453125, -0.03583550080657005, 0.023532148450613022], "prob": [0.9641228318214417, 0.02502049319446087, 0.027184907346963882]}, {"target": [6], "doc": ["@bdbaddog scons do not generate intermediate stage build file", "it do the \" project dependency \" step in the same step as it do compile , and they can not be separate", "its like tell cmake to generate the project file * everytime * before you hit your build tool , whether it be msvc , ninja - build , make , llvm , pick your poison", "if i switch git branch , i can not update visual studio without perform a scon command line build to regenerate the proper", "sln file - and i almost always clean build branch change since i have run into issue in the past", "those intermediate file be not just for building , they can be use by static analyzer and other project as well", "while i agree that cmake be n't perfect  , and i would prefer the flexibility of python , cmake have the good integration and support of all the build tool on the table ."], "issue_sim": [0.36810460686683655, 0.385414183139801, 0.5251363515853882, 0.3784986138343811, 0.3065827786922455, 0.36121222376823425, 0.5522041320800781], "prob": [0.00040549359982833266, 0.16247935593128204, 0.5662787556648254, 0.05182277038693428, 0.025255795568227768, 0.09425779432058334, 0.49584174156188965]}, {"target": [2], "doc": ["@yona - appletree it be close as there be no concrete proposal", "if you 've get one that would allow to specify which directive you be reference i would be more than willing to re - open", "btw , reference a type wo n't work since you could n't minify your code ."], "issue_sim": [0.03978746384382248, 0.44803935289382935, 0.2635757029056549], "prob": [0.005869754124432802, 0.4190080165863037, 0.6381577849388123]}, {"target": [3], "doc": ["@dietergeerts i be at the same brick wall", "i actually go as far as to step through all the code for resolver to make sure i be n't crazy", "what be even more confuse be i figure if i simply make a", "this.router.events.subscribe  in the resolver and have it wait for other one to be do or even loop until it resolve the correct   none undefined datum that it would work .", "sadly that do n't even work"], "issue_sim": [0.006846223026514053, 0.1881897747516632, 0.1396748125553131, 0.46782422065734863, 0.09243078529834747], "prob": [1.9072032955591567e-05, 0.04713088646531105, 0.005221101455390453, 0.7801951169967651, 2.7214144211029634e-05]}, {"target": [0], "doc": ["tr  make a lot more sense for in - game content , i vote for that too .", "on fri , aug <number> , <number> at 11:01 am , ignacio etcheverry <", "com > write :"], "issue_sim": [0.009544549509882927, 0.01620250567793846, 0.1558493673801422], "prob": [0.8731991648674011, 0.23181968927383423, 0.05642205849289894]}, {"target": [5], "doc": ["gdscript already have an optional static typing", "it do n't improve performance for now but if i remember correctly @vnen be write about multiple idea to improve it in the future", "jit be also mention in the old roadmap but that will come most likely much later in the godot 's timeline", "there be also this person who post in the <appname> group who work on the gdscript to gdnative compiler : [ <url>", "so maybe something cool will come out of it", "consider all of this i do n't think that another official custom language be viable because the engine itself be already really big and add more module would make it even hard to manage ."], "issue_sim": [0.2721918821334839, 0.26393380761146545, 0.3221426010131836, 0.1720489263534546, 0.10620733350515366, 0.547987699508667], "prob": [0.0014029910089448094, 0.02970839850604534, 0.007227087393403053, 0.02595071867108345, 0.001764131709933281, 0.7210464477539062]}, {"target": [0], "doc": ["there be the destroy  method that can be use for it .", "abstract class ngmoduleref < t > {", "abstract injector : injector", "abstract componentfactoryresolver : componentfactoryresolver", "abstract instance : t", "abstract destroy : void", "abstract ondestroy = > void ): void"], "issue_sim": [0.1934506893157959, 0.19586890935897827, 0.19940096139907837, 0.049801647663116455, 0.14323167502880096, 0.24087941646575928, 0.2880043685436249], "prob": [0.6959969997406006, 0.00014300398470368236, 0.011155453510582447, 0.6836028695106506, 0.00043541050399653614, 0.0011403895914554596, 0.5363614559173584]}, {"target": [1], "doc": ["imo <tag> , definitely", "<tag> be too long .", "why not <tag> though"], "issue_sim": [0.034500300884246826, 0.005805695429444313, -0.026067271828651428], "prob": [0.12193029373884201, 0.6075004935264587, 0.11414570361375809]}, {"target": [1], "doc": ["i guess it be introduce here <url>", "it work because we do n't compare query param"], "issue_sim": [-0.006852615624666214, 0.27635183930397034], "prob": [0.6559725403785706, 0.11507242918014526]}, {"target": [5], "doc": ["jit in dynamically type language like lua be do by do type inference", "from the entry point through the call tree , go as deep as possible", "not say this would n't be possible in godot , as pretty much every entry", "the code completion in godot do something similar , which", "be why it be able to guess so much type information", "however there be many case where the type be not obvious , and while the. code completion work great by guess the get_node  call on the tree. be edit , this information might be different or change in run - time .", "i be honestly not sure how efficient type inference might be", "to help on this , it would be easy to allow gdscript to allow the user to", "\" force \" the type of a variable", "be go to do this , then you might as well just go full static typing", "i be not convince of any approach at the moment", "on sun , jun <number> , <number> at 5:37 pm , ace - dragon notifications@github"], "issue_sim": [0.5224841237068176, 0.10988781601190567, 0.2557819187641144, 0.4081841707229614, 0.0016534226015210152, 0.3577696681022644, 0.24307170510292053, 0.1320822834968567, 0.2008688747882843, 0.16785715520381927, 0.07898986339569092, -0.003276567906141281], "prob": [0.0005601742304861546, 0.0002488496247678995, 0.0006020344444550574, 0.00045037412201054394, 0.0006472603417932987, 0.6495224237442017, 0.0042775957845151424, 0.014305117540061474, 0.0001853857102105394, 0.0003271048190072179, 5.833924296894111e-05, 0.0014240926830098033]}, {"target": [1], "doc": ["thank for take the time", "so you be actually propose to change the implementation of how reactive form work and not just extend the api , that be n't clear to i from the initial post .", "indeed i think that 'd require ugly workaround at the moment"], "issue_sim": [-0.030666232109069824, 0.38608598709106445, 0.1545228362083435], "prob": [0.003348170081153512, 0.9645039439201355, 0.01627201959490776]}, {"target": [2], "doc": ["it be not that the directive be so big", "it be that their definition will be include in the app chunk along with kotlin which be load after the shell", "while the directive declaration will be in the shell chunk because that be where the vue instance be instantiate", "so the declaration and definition will be in two different chunk", "the shell will be download quickly , show the basic ui and a spinner or two , then when the rest of the app be load the spinner disappear and show the content as well as the rest of the ui that make the app fully functional", "in the shell chunk i be able to asynchronously load the vuecomponents define in the app chunk by create a communication layer between the two chunk and follow the instruction for asynchronous components here : <url>", "i already have that work with components", "what i be look for be the same type of asynchronous load for directive so that i can include they in my app chunk , which be the only place they will be use anyway .", "i actually may have think of a solution already since directive do n't need a render function", "i 'll be test it out today but it would be nice if vue have a build in way of do", "and if my idea do n't work then i feel that vue definitely need a build in way of do it", "so my idea do work", "i create a plain empty js object in the shell , pass it to the directive definition  which be also in the shell , then pass it to my communicator that communicate between the shell and app chunk", "when the app chunk finish load it create its own directive definition and pass it to the communicator", "the communicator match the two up base on the directive name and concatenate the directive definition object in the app chunk on the empty object from the shell chunk , which have already be register use vue", "directive in the shell", "and there we go , asynchronous directive definition load", "everything work as it should", "here be my github repo where i have it work : <url>"], "issue_sim": [0.2479386031627655, 0.32734695076942444, 0.4186539649963379, 0.14708535373210907, 0.28417664766311646, 0.4358668625354767, 0.31476539373397827, 0.5444398522377014, 0.5302571058273315, 0.15005265176296234, 0.14160998165607452, -0.029347099363803864, 0.46846815943717957, 0.45174628496170044, 0.4409513473510742, 0.35618463158607483, 0.39660513401031494, 0.0023429025895893574, 0.05622833967208862], "prob": [0.002720219548791647, 0.049069683998823166, 0.08999308943748474, 0.026823218911886215, 0.09585241228342056, 0.0576644167304039, 5.147730189491995e-05, 0.0535145103931427, 0.004404454026371241, 0.0015899345744401217, 0.0017916876822710037, 2.037428566836752e-05, 0.02616387978196144, 0.0019815745763480663, 0.021194713190197945, 1.2576488188642543e-05, 0.0004702274745795876, 8.127637556754053e-05, 0.0016240162076428533]}, {"target": [6], "doc": ["let 's start with the case where there be no <tag> :", "that result in :", "that be your initial expect output", "but this do n't accept extra args : <tag>", "so you add in <tag> to handle that case and voila , that case work :", "unfortunately the original array case behavior have change", "i can see how that appear to be buggy and i guess it come down to what the semantic be for <tag> .", "i think the semantic change pretty significantly for a parameter decorate with valuefromremainingargument", "obviously , for such a parameter , ps aggregate all remain / unbound argument into a single argument value  to supply to the parameter", "that appear to work as you 'd expect for multiple space separate args", "but for array the behavior be perhaps not expect", "however , i think for the follow case it be work as expect :", "i be not sure what else powershell could do here but treat the first array as a \" single \" argument in this case", "but what to do about the case where you have a single argument that be an array", "should powershell be clever and if the first  argument be an array , assign it as sort of the splatted value of the parameter instead of treat it as a single value in the array or remain args", "i do n't know", "but i can see a case be make that if the user want those as mulitple args they would have specify they as multiple args", "not try to be snarky but really just wonder if there could be a case where the user really want the first  argument to be treat as a single argument  and this cleverness take away that ability"], "issue_sim": [-0.09340249747037888, 0.02205943688750267, 0.13024787604808807, 0.34468328952789307, 0.052820514887571335, 0.2556757926940918, 0.0062608784064650536, 0.25897151231765747, 0.47597095370292664, 0.3761061429977417, 0.2435206025838852, 0.09243625402450562, 0.6741495132446289, 0.2705550193786621, 0.6934880018234253, -0.02497934177517891, 0.3423565626144409, 0.29007959365844727], "prob": [0.00746798375621438, 0.005384398624300957, 0.0033823829144239426, 0.0025417909491807222, 0.011983473785221577, 0.0012347237206995487, 0.183977872133255, 0.01127753034234047, 0.10934939980506897, 0.00042122541344724596, 0.00038713988033123314, 0.001165093737654388, 0.03046545386314392, 0.0004864977963734418, 0.30702483654022217, 0.00026665552286431193, 0.20537829399108887, 0.09011013060808182]}, {"target": [2], "doc": ["why be    gdscript 's syntax be modify so heavily", "it be originally design to be simple , easy to learn and intuitive", "i fear with all these new addition  it will become very confuse for new developer .", "for example , if a new person to godot be to watch a tutorial and see the code that be in likelakers2 's post , i 'd imagine that would make their head explode", "if anything they 'd have to ask bunch of question about it / how it work , etc", "i totally understand everyone 's love for gds and how the contributor want to make it well , etc", "i just feel like there might be a possible disconnect between actual game devs , and the contributor", "not everyone need to utilize these feature", "i just fear that gds might stray far and far away from its simplicity , that be all", "it be already * * more * * than enough", "also , have <number> line   for a export keyword be very cumbersome , compare to just   specify everything in one line", "for example : <tag> be so much more cleaner", "and regard to point # <number> , this can be do in the   editor afaik", "also , imo , have annotation all over the place in code to ' disable certain warning ' could lead to very messy code"], "issue_sim": [0.24480891227722168, 0.10961303114891052, 0.19871604442596436, 0.2848682999610901, 0.04072641208767891, 0.12621355056762695, 0.016418948769569397, 0.09493404626846313, 0.07323045283555984, 0.08326232433319092, 0.2638232707977295, 0.09195339679718018, 0.10574811697006226, 0.5058275461196899], "prob": [0.01228543370962143, 0.002806681441143155, 0.05185386538505554, 0.30311575531959534, 0.010782643221318722, 0.0039164661429822445, 0.01040278933942318, 0.0003355639928486198, 0.0035689782816916704, 0.0010176555952057242, 0.0547136552631855, 0.0010307645425200462, 0.0010192578192800283, 0.13843244314193726]}, {"target": [3], "doc": ["can i bring up a third option", "i think option <number> be the more flexible way of reduce duplicate declaration", "however both option <number> & <number> have limitation :", "support a global type and have <tag> extend it be pretty good because it be simple , and other environment  can use this too .", "but it would not solve the duplication problem in custom sandboxe environment , whereas the equally simple option <number>  would solve it", "generate <tag> with all global mirror on <tag> - but then do other environment miss out", "<tag> have similar duplication of declare global with the <tag> interface , and then there be web worker , custom environment , etc", "a third option would be a declaration that tell the compiler to augment the global environment with all the declaration in a particular interface", "eg <tag> for <tag> , <tag> for <tag> , etc", "this be similar to option <number> but in reverse , and allow additional scenario like sandboxing", "an example of this scenario be give in <url>", "note that if option <number> be use , then there would be no way to write a set of declaration that be just a normal interface in the host code but be be global in the sandboxe code", "they would all still have to be duplicate", "custom environment may be niche , but it would be nice if the mechanism choose here would work for they too"], "issue_sim": [-0.011425269767642021, 0.3496745228767395, 0.03679138794541359, 0.45523446798324585, 0.32065463066101074, 0.4092387557029724, 0.5244948863983154, 0.4552047550678253, 0.21254736185073853, 0.18345177173614502, 0.036342356353998184, 0.5029715299606323, -0.05730415880680084, 0.16648463904857635], "prob": [0.0022961259819567204, 0.016565153375267982, 0.008009640499949455, 0.40235841274261475, 0.035861458629369736, 0.00032143096905201674, 0.0012438218109309673, 0.002852102741599083, 0.00032234194804914296, 0.0011994227534160018, 3.0442002753261477e-05, 0.06537558138370514, 0.00019092694856226444, 0.0007936499314382672]}, {"target": [2], "doc": ["@mklement0 i make change to info : prefix , but i observe different behavior in <tag> than you describe", "it be present in transcript but not in the console", "i think that write - host should always be visible in both console and transcript regardless of informationaction and $ informationpreference ."], "issue_sim": [0.4295644760131836, 0.15296795964241028, 0.26099589467048645], "prob": [0.024889931082725525, 0.022256402298808098, 0.9756553769111633]}, {"target": [1], "doc": ["in my mind , i 've be think like :", "short - term be to finish startup config and put a value in there that concatenate windows ps psmodulepath", "* long - term be the compat module that help with whitelist and warning", "we should do short - term , i think , before 6"], "issue_sim": [-0.03898775577545166, 0.3552719056606293, 0.28406423330307007, -0.009564032778143883], "prob": [0.05154122784733772, 0.3142695426940918, 0.0199107825756073, 0.018574077636003494]}, {"target": [0], "doc": ["i be not convinced about that one , while it be handy , it make the template less readable .", "and i think vue", "js excel at readability", "i be not against it , actually i really like it , it be sexy : dancer : , i want people to discuss about it"], "issue_sim": [0.2723448872566223, 0.02702736295759678, 0.10178042948246002, 0.15850825607776642], "prob": [0.7400982975959778, 0.019400671124458313, 0.011624722741544247, 0.6103554964065552]}, {"target": [1], "doc": ["sorry , i do n't understand what you mean", "when i try to _ right click > > open powershell _ in windows explorer , it take quite long time and as you see , there be no text display here .", "i think affter excute command <tag> , powershell do response but it ca n't display any text"], "issue_sim": [0.004923458211123943, 0.5592432618141174, 0.5602816939353943], "prob": [0.01016487367451191, 0.7176756262779236, 0.024120522662997246]}, {"target": [0], "doc": ["with  component tend to become so granular that they end up be a div with a class , thus make the abstraction so thin that it might as well not even be there .", "that be what i mean by \" obstructiveness \"", "i would have like to avoid large example , but that would defeat the purpose , so please bear with i", "say you need to develop a panel component that would encapsulate the look of panel in the app", "generic panel have a title in the header and slot for content", "but panel may have a lot of variation :", "some panel need subtitle along with the title , some need an icon before or after the title , some need action button or other widget align to the opposite side of the title", "some panel need their header shade with color , some need header the same color as body", "some panel need their content to be pad  , some panel need their content to be flush with the panel border", "to accommodate for this variation you decide to go with granular appearance component", "your panel when use , start to look like this :", "all be good so far", "then you recognize , that among all the possible variation there be common use case", "so you decide to write component for these common use case to avoid code duplication", "this way you end up with <tag> , <tag> , <tag> , etc", "and this be where thing start to go a little bit south", "if you want to write a specialized panel that behave exactly like an exist one , but have some altered behavior / interface  then either :", "you need to put this variation into the parent component", "you need to redefine the child template completely , because there be no way to reuse parent template", "of course you could define component that encapsulate common variation of part of the panel", "but at this point you will already have three level of abstraction", "and every level require you to proxy prop , slot and event"], "issue_sim": [0.47497713565826416, -0.013313662260770798, 0.11435312032699585, 0.3728170394897461, 0.2316591739654541, 0.04230818152427673, 0.18372535705566406, 0.20730239152908325, 0.1494763195514679, 0.3204341530799866, 0.15923021733760834, -0.030952177941799164, 0.06641089916229248, 0.41855135560035706, 0.15778860449790955, -0.09757177531719208, 0.269382506608963, 0.3965303301811218, 0.5814615488052368, 0.43607574701309204, 0.15135617554187775, 0.180008202791214], "prob": [0.8180791139602661, 0.017268087714910507, 0.05571264773607254, 0.0027687931433320045, 0.00189427868463099, 0.001112976111471653, 0.14757834374904633, 0.0027624170761555433, 0.002390027977526188, 9.905279148370028e-05, 0.00012593940482474864, 1.6354661056539044e-05, 0.0003441824810579419, 9.162040805676952e-05, 0.0045006657019257545, 1.5681951481383294e-05, 0.031893063336610794, 2.5761506549315527e-05, 0.00042065823799930513, 0.0008027873700484633, 0.00021864435984753072, 0.012298437766730785]}, {"target": [2], "doc": ["you say \" all the gpu that be mean to get vulkan support be relatively high end , and thus only a small fraction of gamer  own they", "it will likely be another two year before such hardware be widespread enough for it to be sensible to make game for the masse with it", "not on pc desktop , all opengl 4.x compatible gpu card be vulkan compatible !", "0 fully support vulkan", "i do n't know for nvidia and intel", "also the need of performance for 4k and virtual reality and steam os will accelerate it be adoption"], "issue_sim": [0.5610818266868591, 0.2863529622554779, 0.5517808198928833, 0.6135820150375366, 0.37714263796806335, 0.3314710855484009], "prob": [0.7076109051704407, 0.24900169670581818, 0.006136575248092413, 0.00017193157691508532, 0.0015593472635373473, 0.020666049793362617]}, {"target": [1], "doc": ["i think it be easy to read if you inline and shrink the type :", "the problem be that , even with control flow analysis , the compiler still do n't do much \" type math \" .", "all control flow will do be narrow -- that is , throw out member of a union", "what need to happen here be for the compiler to reach inside the intersection , throw out the nested union member , then create a new intersection type", "i will go see if there be other issue relate to this", "i think it come up every couple of week"], "issue_sim": [0.22800719738006592, 0.24278119206428528, 0.173536017537117, 0.33753353357315063, 0.021531779319047928, -0.10438060760498047], "prob": [0.025399908423423767, 0.5231725573539734, 0.033066604286432266, 0.38698065280914307, 0.0033581340685486794, 0.004824681207537651]}, {"target": [1], "doc": ["@djrm yes , some art resource be not adopt yet", "the reason why i do it like this be that we ca n't change color for each ui element with texture .", "i hope you to understand for it", "i would like to contact to you before this pr , but for personal reason , i be in hurry", "i be sorry for that"], "issue_sim": [0.02220616489648819, -0.0021388595923781395, -0.06317265331745148, -0.02044387347996235, 0.1354997754096985], "prob": [0.02397129125893116, 0.8904763460159302, 0.019170211628079414, 0.3719884753227234, 0.013963998295366764]}, {"target": [0], "doc": ["i think <tag> be well because all of component 's option  be json .", "if it be <tag> , there should be change to json again maybe"], "issue_sim": [0.3341975212097168, 0.24261917173862457], "prob": [0.6272980570793152, 0.1736755222082138]}, {"target": [2], "doc": ["with powershell <number> offering  , some more discussion around sxs installation of powershell should be have soon so that if there be some change that can be make in the current release timeframe , by the ps team or the community , there be time to do so", "the notion of a <number> year support cycle without side - by - side support be a scary proposition", "today we can install stable and preview side - by - side , but we need to consider support multiple stable version instal side by side so that scripter can take hard dependency on one lts version of powershell without lock that machine down to that version for <number> year !", "can we please talk about this _ now _ and see what can be do so that management solution can be build on the reliability of a lts release without an unnecessary system lockdown to just that version during that time"], "issue_sim": [0.5254839658737183, 0.2124587595462799, 0.6084948778152466, 0.3268197178840637], "prob": [0.28347665071487427, 0.03825605288147926, 0.435615211725235, 0.1654461771249771]}, {"target": [0], "doc": ["you do n't have to , you can safely .gitignore the .import/ folder ."], "issue_sim": [0.28912484645843506], "prob": [0.9999929666519165]}, {"target": [2], "doc": ["thank for use vue for so long", "what you describe there  look like app level compute property , which be pretty much vuex", "if your piece of state be share across many component that do not have a common parent or it do n't make any sense to pass that datum deep until that component that need it  .", "you definitely need vuex", "otherwise <tag> should help you out by not reuse those component when they come back into the view"], "issue_sim": [-0.007314359303563833, 0.402473509311676, 0.3001668453216553, 0.09101638197898865, 0.21834012866020203], "prob": [0.00904611311852932, 0.16313813626766205, 0.5988916158676147, 0.0036886255256831646, 0.12007056921720505]}, {"target": [0], "doc": ["i find that concatenate all the handler with dot and ampersand everywhere be pretty hard to parse when read that template ."], "issue_sim": [0.5000514984130859], "prob": [0.999922513961792]}, {"target": [0], "doc": ["this would collide with typescript ."], "issue_sim": [0.38178661465644836], "prob": [0.9999959468841553]}, {"target": [0], "doc": ["and even if you protect it , someone will find the way to bypass your protection in no time .", "not worth the effort imo"], "issue_sim": [0.171537846326828, 0.047927338629961014], "prob": [0.995248019695282, 0.0004900317289866507]}, {"target": [1], "doc": ["i be specifically test its use with normalize in vector3", "although the fastsqrt may be fast than sqrt , that do n't mean it will be the fast approach in the context of the whole function  .", "in the context of the vector3::normalize , the crucial thing be that the cpu can do everything at once", "i test this myself yesterday in another context", "the difference between do this operation :", "consider you want to divide a vector3 by a", "i be expect approach  to be fast", "in fact , when profile , although the multiply be marginally quick than the divide , the extra divide at the beginning translate to an extra op , whereas the rest can be do with simd", "so the actual result i find be that approach  be a similar speed to  in the case of non - inline , and in the case of inline ,  be many time fast than", "this be the opposite to what i be expect", "a similar thing may be happen in the vector3::normalize", "not because of the fast sqrt itself , but because it end up split into more operation"], "issue_sim": [0.016789548099040985, 0.03642783313989639, -0.050331853330135345, 0.11591102927923203, 0.0648689791560173, -0.02701745554804802, 0.06748349964618683, 0.010348500683903694, 0.07061713933944702, 0.05890066176652908, -0.11246083676815033, 0.0451311357319355], "prob": [0.007795544341206551, 0.1737852692604065, 0.3096688687801361, 0.00254080630838871, 0.007847296074032784, 0.015119476243853569, 0.0010276397224515676, 0.7080621719360352, 0.5057342052459717, 0.0028193865437060595, 0.019766900688409805, 0.02248324826359749]}, {"target": [1], "doc": ["i know this be close and archive already  , but access modifier be a pretty important feature in any programming language", "if i want to create a new node addon for godot and my new node have internal state variable that should not be modify outside of the node , there be nothing prevent that from happen .", "i understand that you can use leading underscore to mimic this feature , but it still do not prevent access which be the whole point of access modifier", "in my opinion this be a pretty big deal as there be no way to control the way in which other interact with your object"], "issue_sim": [0.37657105922698975, 0.3691379427909851, 0.42655569314956665, 0.2111445665359497], "prob": [0.13259218633174896, 0.7335705161094666, 0.21092955768108368, 0.04809613525867462]}, {"target": [0], "doc": ["i be afraid <tag> way be hardly scalabe .", "consider the trivial example above , it already have be quite verbose to specify <tag>", "readabilty and conciseness be objective , but at least for i the propose solution be n't the sweeti syntax", "a large component will probably worsen it", "for example , you also want to show the attendant 's meeting note in the component", "more logic be cram to <tag> directive", "the template will soon become unreadable and atrocious to modify", "note : we do n't have , sadly , a decent syntax / type checker for expression in template", "to reduce the complexity of template one will move the logic to vm / script , which be contrary to   the point of this proposal", "the predicate in <tag> directive will also become more complex", "consider : you want to display a person in meeting , but only if they be available accord to their schedule", "the function become <tag> , and it will become more complex with project grow and requirement change", "a large team will also worsen it", "a programmer want to skip a compute property , so do another programmer", "in team work a <tag> directive will , base on my own observation , promote more logic in template because one easy<tag> directive add initially will grow to a huge code blob by different team member", "we be always too lazy to add abstraction"], "issue_sim": [0.00583444070070982, 0.4445713758468628, 0.3067592978477478, 0.17139917612075806, 0.1545831710100174, 0.007725278846919537, 0.05217031389474869, 0.22813543677330017, 0.2638109028339386, 0.03225401043891907, 0.11708760261535645, 0.11472869664430618, 0.025059837847948074, 0.1679631769657135, 0.30139070749282837, 0.08993978053331375], "prob": [0.16129930317401886, 0.01281056459993124, 0.024820832535624504, 0.00032576199737377465, 0.004714361857622862, 5.687031080015004e-05, 0.0017206153133884072, 0.002178959082812071, 0.006895656231790781, 0.0006092234398238361, 0.0004597743973135948, 0.001226718071848154, 7.096001354511827e-06, 0.00014627889322582632, 0.7793657183647156, 0.0012442499864846468]}, {"target": [1], "doc": ["@zylann for what @reduz propose , gdscript be not require at all", "for what i propose in # <number> , you raise a good concern but gdscript be always bundle with godot , so it 'd be the good way to distribute wrapper  .", "what other language aside from those two would you suggest for wrapper", "would you rather not have wrapper at all than have they in gdscript"], "issue_sim": [0.16968122124671936, 0.4014076590538025, 0.1617262363433838, 0.053322963416576385], "prob": [2.739325827860739e-05, 0.8886114954948425, 0.0030645905062556267, 0.02770380675792694]}, {"target": [1], "doc": ["feel free to continue discuss , but i be close the issue because i ca n't see add more complexity to the parameter binder to change this behavior", "the \" workaround \" be in my opinion the preferred style - use quote .", "there be no confusion to human reader", "there be no potential ambiguity for the parameter binder to deal with", "the script be future proof , add a new parameter that might match some argument wo n't cause a problem"], "issue_sim": [0.3896545171737671, 0.2433023750782013, -0.004384595900774002, 0.31354260444641113, 0.3240956664085388], "prob": [0.6375090479850769, 0.37575116753578186, 0.00016611457976978272, 0.019668368622660637, 0.009300059638917446]}, {"target": [0], "doc": ["when i talk this over this @jrieken from the vs code team , it sound like we will need a specialized typescript server api to implement this correctly and efficiently . determine outgoing call in particular be very difficult use current tsserver apis .", "can we please revisit this for 3"], "issue_sim": [-0.006297748535871506, 0.04482138529419899], "prob": [0.9634457230567932, 0.051394764333963394]}, {"target": [0], "doc": ["it solve the child - nodes - as - script - dependencies problem that  , but do n't come with any of the same kind of  because it be constrain to a single language .", "the gdscript module can isolate logic on how the trait relate to each other and the main script whereas resolve the difference between different language would be a lot more complicated"], "issue_sim": [0.5655810832977295, 0.3855544328689575], "prob": [0.7907496094703674, 0.24392743408679962]}, {"target": [4], "doc": ["oh , that be right , the symbol will be different", "although , i should have raise this other point right from the start : why be you try to async load two component that use inject", "i suppose you be create an app and not a lib", "and i wonder if you need to use inject / provide which more target towards lib", "imo if you relate two component the way you do , they should be in the same chunk"], "issue_sim": [0.22704830765724182, 0.4715847969055176, 0.15243324637413025, 0.35328060388565063, 0.17369848489761353], "prob": [0.03456199914216995, 0.6740971803665161, 0.009202555753290653, 0.04149920493364334, 0.02419050969183445]}, {"target": [2], "doc": ["typedef vector2 size2 ;", "typedef vector2 point2 ;", "this just seem to needlessly add confusion , no ?"], "issue_sim": [0.2492256462574005, 0.2500743865966797, 0.15403157472610474], "prob": [0.3556302487850189, 0.0850258395075798, 0.39138737320899963]}, {"target": [0], "doc": ["i can see how i can attach an additional area node to each major physical bone , and use it to detect collision .", "but let 's assume we have a two character fist fighting in a game , each have such an area  node on its fist and head", "so , let 's say the character a 's fist have ' enter ' an area node attach to the character b 's head bone", "i will certainly receive a <tag> signal from the event , but how would you use that information", "as i say above , <tag> only report the node instance that have enter its bind", "so how _ exactly _ you would know the exact global position where the hit have occur , and what velocity the character a 's fist have , and also with much force", "you already say the node would somehow provide all such information with its property , but even i be not entirely a newcomer to godot myself , i could n't find any way to do that", "so if you know how to obtain such information , please tell i with a specific instruction", "and let 's say somehow you manage to extract that information from the impact , then what now", "i have no idea how to convey that force to the character b 's head bone , so that it would jerk backward realistically , since it be not even a rigid body so you ca n't use <tag>", "you may consider use the ragdoll system , but the hit have already happen in the past so start physics simulation now would n't do any good either", "and as you may know , it be not usually practical to keep an active ragdoll when the character be move around in a kinematic mode", "if you believe <tag> node attach to a physical bone  could be move that way without have to resort to a premade hit animation , again i 'd be grateful if you could give i a specific instruction , rather than a vague statement that it would somehow work", ": by the way , an equivalent of godot 's <tag> in unity be call <tag>", "and while i be not much knowledgeable about make 3d game yet , i think i 've hear enough time from various different source how have too many , dynamic , or overly complex collider / collision shape would affect the performance negatively", "if they be really overhead free as you seem to believe , people would n't even bother to use primitive collision shape in most case , as they can simply generate a trimesh or convex collision shape out of the actual mesh itself , which would provide the most accurate contact information"], "issue_sim": [0.45028722286224365, 0.3468828797340393, 0.32210415601730347, 0.18919238448143005, 0.2666960060596466, 0.45850446820259094, 0.3503423035144806, 0.08310919255018234, 0.22874270379543304, 0.41739267110824585, 0.4921020567417145, 0.38261356949806213, 0.5146119594573975, 0.3586360216140747, 0.4199860095977783, 0.3632088303565979], "prob": [0.7867516279220581, 0.1279561072587967, 0.012031079269945621, 0.000478199974168092, 7.708212797297165e-05, 0.12184154242277145, 0.11828604340553284, 2.2435573555412702e-05, 2.984964885399677e-05, 0.013209719210863113, 0.0013754020910710096, 0.000799239962361753, 0.03502803295850754, 0.00020665724878199399, 0.1562052220106125, 0.07939167320728302]}, {"target": [0], "doc": ["yep same for i at the moment i do use a custom directive like :. <tag>"], "issue_sim": [0.3381940722465515], "prob": [0.9999845027923584]}, {"target": [2], "doc": ["type import be not the same as import actual javascript file", "regardless , i do n't think typescript should be create random code in our code base", "even if it be a module if i do n't want to export anything i should have some random <tag> append to my file .", "if the way forward be to make everything global , that be fine", "the behavior of inject random code into our code basis do n't seem right though"], "issue_sim": [0.3583706021308899, 0.48609715700149536, 0.2795589566230774, 0.11376692354679108, 0.4868757426738739], "prob": [0.00024199180188588798, 0.30285730957984924, 0.16504202783107758, 5.926278026890941e-05, 0.024815751239657402]}, {"target": [0], "doc": ["i always end up inject the router and call <tag> manually with the \" normal \" route command array , include aux route . i be a little surprised that <tag> be not conceptually in sync with this ."], "issue_sim": [0.49046626687049866], "prob": [0.9998775720596313]}, {"target": [2], "doc": ["ok , callback be not a bad option", "i still like the idea of a <tag> option", "it could really simplify parent / child interaction with out couple they ."], "issue_sim": [0.214296355843544, 0.12088741362094879, 0.212915301322937], "prob": [0.0012101356405764818, 0.007628359831869602, 0.9859440326690674]}, {"target": [0], "doc": ["you can combine <tag> with <tag> , in which case you get a stream of the request number   of byte as <tag> instance  .", "note , however , that that be not the same as simply pass the raw byte through", "powershell do n't support output raw binary datum via the pipeline - see # <number>"], "issue_sim": [0.17847377061843872, 0.12223335355520248, 0.3652843236923218], "prob": [0.8528405427932739, 0.09010603278875351, 0.013882089406251907]}, {"target": [0], "doc": ["you can try to get change you do to the openssl source code merge upstream , that way you do n't have to repeat they every time you update .", "also note that the openssl 1", "1 line will cease to be support with security update on dec <number> this year , so good to switch to 1"], "issue_sim": [0.5506731271743774, 0.46901410818099976, 0.3503168821334839], "prob": [0.9748338460922241, 0.0005743580986745656, 0.19818691909313202]}, {"target": [0], "doc": ["on the other hand idle_process group should be unnecessary to begin with"], "issue_sim": [0.19961319863796234], "prob": [0.9998390674591064]}, {"target": [1], "doc": ["in this case wee represent an object as a string , which be what tostring be make for", "i believe json.stringify be only use to make pretty output or object and array when they have no nice tostring format .", "we might get around this by check if the object tostring method be the last in the prototype chain", "this way we can use tostring if we add it to the prototype ourselves"], "issue_sim": [0.399654746055603, 0.3189740478992462, 0.45285654067993164, 0.3432592451572418], "prob": [0.028437834233045578, 0.8594635128974915, 0.016287900507450104, 0.0033257007598876953]}, {"target": [3], "doc": ["and in general , i completely disagree", "one of godot 's strength be its ability to hide the complexity of make a game to the user", "there be no point in make every technical consideration available , this be definitely the bad ux you can offer", "godot be a simple software , i do n't want user to wonder \" what be this import folder about ? \"", "- > in the general case , you never have to modify it , so we hide it", "however , i think all those technical thing should be well document , so that if user ask \" what be the import folder for", "\" , they should find an answer easily"], "issue_sim": [0.09936469048261642, 0.27577391266822815, 0.16960325837135315, 0.4967957139015198, 0.21931272745132446, 0.41973984241485596, -0.04238402098417282], "prob": [0.008123334497213364, 0.07884669303894043, 0.05456453934311867, 0.804989218711853, 0.026526717469096184, 0.021578075364232063, 0.00021716274204663932]}, {"target": [0], "doc": ["i need this feature too , i be get around create simple array with one item to force vuejs transition but this solution be a bit messy", "every time <tag> change , the transition will be use. it would be awesome to have something simple and a bit less \" hacky \""], "issue_sim": [0.6020972728729248, 0.5906865000724792], "prob": [0.5904546976089478, 0.29298606514930725]}, {"target": [0], "doc": ["my understanding be that the ngc compiler be a wrapper / enhancement of the regular tsc compiler and therefore assume typescript .", "i still think it should be possible support aot with js though", "it do n't seem like the concept of aot be tie to typescript for other reason than current tooling", "we will have to wait for feedback from the angular team about how feasible this be though"], "issue_sim": [0.6070929765701294, 0.43777140974998474, 0.5026601552963257, 0.3417755365371704], "prob": [0.6302796602249146, 0.02043907344341278, 0.5461079478263855, 0.046339474618434906]}, {"target": [1], "doc": ["to work around that , i be currently use an ugly hack :", "by reset the router config ,   i be effectively destroy the reference to the ngmodule instance"], "issue_sim": [0.08178001642227173, 0.41369593143463135], "prob": [0.24592220783233643, 0.5123082995414734]}, {"target": [0], "doc": ["if the issue be that within the same powershell session the env var be n't be update , then as @isazonov note , that be expect and <tag>"], "issue_sim": [0.4968631863594055], "prob": [0.9994537234306335]}, {"target": [3], "doc": ["@stevel - msft ,", "thx for your reply , i have two main usage of the split window", "1/ when i connect to my remote admin server by psremote from my desktop", "as it be a admin server , i often need to launch multiple powershell window to manage other server .", "and as we do n't have the split window yet , i have to launch multiple psremote from my desktop , it take time", "2/ in vscode for windows , we can only see one terminal at the same time , i really need multiple terminal console at the same time instead of   switch among they each time", "cmder be a gui application that can not be intergrate into vscode terminal", "if the powershell team do n't want to implement the split window , we do n't have any other choice"], "issue_sim": [0.256093829870224, 0.2813456058502197, 0.16283947229385376, 0.6030387878417969, 0.3719601035118103, 0.3358156979084015, 0.22710773348808289, 0.6654617786407471], "prob": [0.0017559241969138384, 0.039520781487226486, 0.04144583269953728, 0.19964885711669922, 0.15744556486606598, 0.2943977117538452, 0.0015771470498293638, 0.0696849450469017]}, {"target": [2], "doc": ["i understand that but , even if right now vue be different from react in term of render fn args , that may not be the case in the future : other lib  have or will adapt the array syntax instead of the variadic one as it make more sense and be simple to use", "there be also other vdom engine that use the array syntax instead : <url> , <url>", "to put it in a nutshell , now that we can , we should keep the array syntax because it be well and we should throw away the variadic syntax .", "this will prevent the whole js community to keep that old bad syntax as a backwards compatibility", "javascript be already hold a lot of that , so i think it be well not to add that as well to lib while we can"], "issue_sim": [0.477092981338501, 0.22700998187065125, 0.25720226764678955, 0.2637391686439514, 0.27206888794898987], "prob": [0.6527537703514099, 0.006717420183122158, 0.40891072154045105, 0.00028777084662579, 0.010793059132993221]}, {"target": [1], "doc": ["thank for the extra detail", "actually , i just want the compiler to pass it through unchanged as meteor in this case will properly interpret the path in the result js . it implement its own module loader .", "i might have hijack this thread a bit but ideally i just want typescript to find the file in the right location so that it can typecheck everything but i be fine if it just pass the path through unchanged and have the framework handle it at in its exist way at runtime", "so perhaps i should open a different issue for my case as it be somewhat different than the op 's issue"], "issue_sim": [0.0032088463194668293, 0.551830530166626, 0.6001524925231934, 0.12618166208267212], "prob": [0.0038032555021345615, 0.40272340178489685, 0.2463059276342392, 0.0017451680032536387]}, {"target": [3], "doc": ["some tool like jake allow both <tag> and <tag> for the \" default file \"", "json could be allow here", "well they do have the nice property of automatically become hide file , and of be a shell convention rather than a filesystem attribute .", "filesystem attribute require support not just from every filesystem the code be go to live on , but also from tooling like version control", "git do n't support they , for example"], "issue_sim": [0.21150735020637512, 0.09964017570018768, 0.27539822459220886, 0.38196510076522827, 0.21328628063201904], "prob": [0.3237728774547577, 0.006302504800260067, 0.306245356798172, 0.29796457290649414, 0.005799169186502695]}, {"target": [2], "doc": ["@mysticfall i apologize for not be clear , and i realize i may have be rude", "what i mean for non - issue be that godot have be use to make very complicated game , so there be a way already , that be why i tell you q&a would help you more", "now on to why what you propose ca n't be implement ; collisionshapes be a gimmick .", "it have no function by itself : it only specify an area that be use by a body", "the equivalent to a unity collisionshape in godot be an area", "that be why i say it wo n't cause a performance issue", "in unity do you worry on how many collisionshapes do you have", "and as i 've say before , you do n't need an area for each of these", "a human body can be divide in <number> part ; <number> upper arm , <number> low arm , upper torso , low torso , <number> upper leg , <number> low leg , head"], "issue_sim": [-0.05515144765377045, 0.27841779589653015, 0.10778959840536118, 0.23646309971809387, 0.2502135932445526, -0.012331651523709297, 0.2003902941942215, 0.04260297492146492, 0.15015676617622375], "prob": [0.00734754791483283, 0.40885433554649353, 0.22019720077514648, 0.005407672841101885, 0.0024460076820105314, 0.0033465183805674314, 0.004980284254997969, 0.017308028414845467, 0.300629585981369]}, {"target": [0], "doc": ["generate c code should be pretty easy , it would be interesting to apply some global type inference on the gdscript code in question .", "because it would all be do at export time there could be a lot more effort involve in figure out type", "unresolvable method signature could be make type generic and instantiate accordingly", "that would be quite the undertaking , but i be pretty certain that it would yield in a huge performance increase overall", "i think the big question be how cross - platform export can be make as painless as possible", "the pick toolchain  would be pretty important", "there be still some problem with well window compatibility , but i think we can rule this out later on"], "issue_sim": [0.41787639260292053, 0.2533659338951111, 0.2975781559944153, 0.3441365361213684, 0.25354909896850586, 0.22607964277267456, 0.12386249750852585], "prob": [0.48949432373046875, 0.08153803646564484, 0.00384319550357759, 0.05388996750116348, 0.1018836721777916, 0.00043914010166190565, 0.014139866456389427]}, {"target": [0], "doc": ["in fact i be observe this behavior right now in my application , so i be pretty sure it do not work in all case , however it be difficult to extract relevant part , it be somehow relate to dynamic component creation ."], "issue_sim": [0.267040491104126], "prob": [0.9999516010284424]}, {"target": [2], "doc": ["@powershell / powershell - committee have reject the pr # <number>", "quote the decision here :", "due to the potential for break many exist module , it be too risky to make this change so that c # and script cmdlet be alike for this case .", "we should keep the current behavior", "i will close this issue as ' wo n't fix '"], "issue_sim": [0.42996180057525635, 0.003313180059194565, 0.4228562116622925, 0.07671855390071869, 0.06215495616197586], "prob": [0.07168057560920715, 0.016705935820937157, 0.9191657304763794, 0.022194722667336464, 0.03268249332904816]}, {"target": [0], "doc": ["there do n't seem to be an actionable suggestion here apart from whatever happen when the new decorator spec appear"], "issue_sim": [0.23028016090393066], "prob": [0.9996333122253418]}, {"target": [0], "doc": ["i think wrap <tag> be need since it simply use <tag> on merge mixin .", "afaik , most of vue component decorator be use <tag>"], "issue_sim": [0.3810923099517822, 0.2564000189304352], "prob": [0.7698351740837097, 0.10992138087749481]}, {"target": [13], "doc": ["an attempt to summarize and clear  conceptual fog :", "* the purpose of <tag>  ) be to enable pass powershell _ variable _ _ by reference _ to", "net method _ parameter _ mark as <tag>/ <tag> / <tag> or , rarely , to powershell function parameter type as <tag>", "* when use as such , a regular powershell variable be _ directly cast _ to <tag> , the variable be wrap so that modify the <tag> instance 's <tag> property be equivalent to assign to the variable directly", "* this indirect access to a variable _ only _ work with a _ direct cast _ :", "* the conceptually clean idiom be :", "* define a _ regular _ powershell variable", "* cast it to <tag> _ as part of the invocation only _ ; e", "* that way , the by - reference passing be a localize aspect of the give invocation ; this mirror c # usage , where you _ must _ use the <tag> / <tag> / <tag> keyword on invocation", "* outside of this use , there be no good reason to use <tag> :", "* there be no point in use <tag> with a _ value _ rather than a _ variable _  - see below", "* if you really want an alias variable  , use <tag> :", "* * why <tag> should not be use with _ value _  * *", "note : there be one edge case : <tag> be useful for case where you do n't care about what the target method / function return via the by - reference parameter ; that say , you can conceive of <tag> as a _ variable _ too  .", "when you use <tag> with a _ value _ :", "* it obviously do n't work with the cast - to-<tag>-on - invocation idiom , whose purpose be to pass a _ variable _", "* * * if you save a <tag> expression in a variable  <tag>", "value <tag> $ ref <tag> ref <tag> out <tag> in <tag>  <tag> $ ref", "value <tag><tag> $ var = <number> , <number> , <number> <tag>  $ var <tag>  <tag> $ ref =   # pointless ; just use the expression result directly <tag>  <tag> get - help about_ref<tag><tag> ref <tag> out <tag> in ` parameter be not mention", "* the description be confuse"], "issue_sim": [0.1873036026954651, 0.3605024814605713, 0.4518619775772095, 0.3694750666618347, 0.13943062722682953, 0.19375884532928467, 0.2974782884120941, 0.23351360857486725, 0.42342597246170044, 0.32522642612457275, 0.399688184261322, 0.3576231896877289, 0.28231000900268555, 0.45917749404907227, 0.17416365444660187, 0.3201436400413513, 0.3075641095638275, 0.168727308511734, 0.45247504115104675, 0.15440525114536285], "prob": [0.042223140597343445, 0.06422283500432968, 0.04736999049782753, 0.058638934046030045, 0.0023749920073896646, 7.716039544902742e-05, 8.434077608399093e-05, 0.007548156194388866, 0.0488227978348732, 0.00024739347281865776, 0.014117846265435219, 0.0004973880713805556, 0.00017495948122814298, 0.12028749287128448, 9.820636478252709e-05, 0.16950127482414246, 0.0001309226208832115, 0.0001418633182765916, 0.0012462286977097392, 1.980532761081122e-05]}, {"target": [0], "doc": ["the dependency graph be not something that be provide today by the ls or the compiler api .", "so we can use this issue to track add it"], "issue_sim": [0.24516472220420837, 0.06605289876461029], "prob": [0.8632027506828308, 0.022902676835656166]}, {"target": [1], "doc": ["@ravenscar either of these look good", "however , i would point out that <tag> be a <tag> , which apply to the compilation process , and would not necessarily , and possibly should not , apply to the process by which ts read in and process its configuration .", "there be potentially no need to worry about any conflict between the compiler 's module resolution set and that apply by ts in resolve <tag> path", "i see no problem with the latter always use node resolution strategy", "for instance , afaik tslint always use node resolution semantic for its <tag> option", "if it be consider important to have both resolution strategy available for <tag> , then i would slightly prefer a new <tag> property at the top level of <tag> instead of embed this information in the <tag> path itself with the scheme - like <tag> notation", "or , allow <tag> , with the default for <tag> hopefully be <tag>"], "issue_sim": [0.014094429090619087, 0.24220219254493713, 0.38599106669425964, 0.2489975392818451, 0.25790610909461975, 0.45303547382354736, 0.14291289448738098], "prob": [0.0017928326269611716, 0.9165726900100708, 0.061700910329818726, 0.003324296325445175, 0.008430449292063713, 0.4483909606933594, 0.0005393857136368752]}, {"target": [0], "doc": ["i like that idea , since <tag>/<tag> be get more common that would probably be a nice thing to have ."], "issue_sim": [0.028975557535886765], "prob": [0.9997883439064026]}, {"target": [0], "doc": ["not interested in such a format , instead i prefer we focus on our internal. animation tool and support everything require .", "on sun , sep <number> , <number> at 6:39 am , todor imreorov notifications@github"], "issue_sim": [0.3274577260017395, -0.011318652890622616], "prob": [0.8436254858970642, 0.19212093949317932]}, {"target": [2], "doc": ["it be be very frustrating each time i type <tag> or <tag> in a console and the wrong thing happen", "now at the eve of ga , yet another alias have be remove : <tag>", "it be time to put an end to the madness , and just clean the slate so this ca n't ever happen again ."], "issue_sim": [0.12271438539028168, 0.2502609193325043, 0.02211717888712883], "prob": [0.28776636719703674, 0.009789303876459599, 0.980901300907135]}, {"target": [11], "doc": ["i agree with eska014", "there be basically two reason why you would want to have such a find_node-function , and those be a ) you be write procedural code or b ) you be write component , and both be not encourage in godot", "a procedure be a sequence of command that alter its surrounding", "if your class acquire the tree and modify it it be technically not object orient , it be procedural , since the function in a class be suppose to alter their own state only  , that be what make they method rather than procedure", "a component on the other hand be a class that impose requirement on its environment", "if you be acquire node outside of the current scene in order to read datum from they and react to they you be write code that will only work in a game where the scene tree have the node you be search for", "object orientation be so successful because it help avoid bug and create reusable code", "if you stick to the rule that method should only modify the member of the class they be in you be make your debugging session a lot easy because you know that if an object end up in a faulty state it can only be one of the class 's method fault", "the issue with component on the other hand be that the requirement they impose make it hard to test and reuse they , because any such requirement have to be fulfil by any future project you intend to reuse the component in , and component ca n't be run on their own", "that be especially a red flag in godot where there be a button that allow you to run and test every scene individually", "you mention that reference node especially as the tree mutate be a major barrier , and as well it should", "it be because scene that reference external node impose requirement on the scene structure , so change in the environment could lead to bug in the scene and therefore affect how the scene itself work .", "if you stick to aggregation you wo n't need to touch your scene unless it be the functionality of the scene itself that be suppose to change", "but from the view of someone who intend to use a scene it be completely encapsulate and you do n't need to care about how it work apart from the public interface", "every engine and every language have its own focus", "for example in unity you can add an attribute to a class declaration to express that one component can only be attach to a gameobject that also have a different component", "unity have that feature because it focus on component", "in godot such a requirement be n't necessary , because if you want to express that your object should always have a certain combination of child you just create a scene with these child", "instead of explicitly declare requirement you declare object and hide those requirement as an implementation detail", "i be a teacher as well and use godot for my introductory course , and it be because of the fact that it have more tool that encourage correct use of object orientation  and less feature that help you evade oop than other engine", "if you want to go more into detail you can send i a message and we 'll talk about our course some more", "i be always interested in how other teacher teach game development"], "issue_sim": [0.0500066876411438, 0.44169431924819946, 0.09847834706306458, 0.40797334909439087, 0.16023939847946167, 0.5980896949768066, 0.317564457654953, 0.37457650899887085, 0.2109842598438263, 0.20011427998542786, 0.5165708065032959, 0.3916240632534027, 0.2575571537017822, 0.2092360258102417, 0.19714659452438354, 0.46304774284362793, 0.3092643618583679, 0.45641764998435974, 0.35749369859695435, 0.4843670725822449, 0.08438451588153839, 0.24338270723819733], "prob": [0.003485986730083823, 0.25385743379592896, 0.00015168690879363567, 0.07125458866357803, 0.00015908756176941097, 0.10755686461925507, 9.701221279101446e-05, 0.007421203888952732, 0.005411568563431501, 0.00028836855199187994, 0.0001681602152530104, 0.00667667668312788, 0.00027043730369769037, 0.010350382886826992, 2.0345598386484198e-05, 0.003152545541524887, 5.104624960949877e-06, 0.007608579937368631, 5.469268944580108e-05, 0.04225892946124077, 0.0002906481677200645, 0.00012081727618351579]}, {"target": [7], "doc": ["@yyx990803 i have many case and some of they be not simple as case above", "for example , i have <tag> in every talk", "also i have <tag> - the first <number> symbol of first line of last message body", "i have <tag> in talk , that can be different demand on type of talk", "but when dialog 's opponent change his firstname and lastname , i want the title of the talk with this user also automatically change", "also i have automaically generate avatar for talk that contain first char of first two word of chat title", "and many - many other property", "i want that change of one property have influence to another dependency property automatically .", "it be very hard to keep all this dependency in the head", "that be why knockout", "js invent the compute property", "and that be why awesome vuejs have compute property too", "because they be great for this case", "and problem , that my talk object have some property that i want to be compute", "but not simple method", "because compute property be cache and not recalculate before any of dependency property be change and something describe to these change", "i have many talk object , that be why i think about performance problem", "and the problem that i ca n't define these compute property", "because i have array of talk"], "issue_sim": [0.11273863911628723, 0.061920035630464554, 0.1562420129776001, 0.14671818912029266, 0.13050532341003418, 0.07078544050455093, 0.12765154242515564, 0.416258841753006, 0.10296821594238281, 0.15630251169204712, 0.31492793560028076, 0.2512742877006531, -0.04061518609523773, 0.40060389041900635, 0.008141015656292439, 0.5142471790313721, 0.4079829454421997, 0.1980390101671219, -0.01800452172756195], "prob": [0.0007447735406458378, 0.01300379540771246, 0.0018953316612169147, 0.002259444212540984, 0.007074733730405569, 0.00027450837660580873, 0.0003465346235316247, 0.6203529238700867, 0.00013769387442152947, 6.32094670436345e-05, 4.8119123675860465e-05, 0.00025451273540966213, 5.7111297792289406e-05, 0.002637614030390978, 2.7672700525727123e-05, 0.0032296290155500174, 0.0005388346035033464, 0.00029133824864402413, 0.0006277607171796262]}, {"target": [2], "doc": ["i utilize this little helper : <url>", "take my test run in ~2min48sec all the way down to 6", "not to say it will work in every situation , but most of those <number> unit test require very little to be convert over ."], "issue_sim": [-0.03247944638133049, 0.21644799411296844, 0.370654821395874], "prob": [0.016560742631554604, 0.04268709570169449, 0.9713313579559326]}, {"target": [0], "doc": ["it seem strange that powershell ignore culture .", "we need more discussion - it be break change"], "issue_sim": [0.48871922492980957, -0.013305507600307465], "prob": [0.30305010080337524, 0.5100623965263367]}, {"target": [1], "doc": ["the problem be the extra roundtrip to disc , since we do n't get enough information from the fileinfo", "and go from a fileinfo to a filehandle , which be need to get the the hardlink count , be expensive on window .", "i argue that this info be so rarely need that pay the price all the time be not motivate", "here be some pointer to the relevant doc for people interested in look deeply :", "| the api to get extend file info", "|enum to select info to retrieve", "| the struct for get the hardlink count", "| source code for", "| structs etc use by the framework to get the datum from the file system"], "issue_sim": [0.2243262529373169, 0.3793872594833374, 0.26025649905204773, 0.14449234306812286, 0.20908601582050323, 0.05553586781024933, 0.14551512897014618, 0.10215247422456741, 0.1505240499973297], "prob": [0.12947598099708557, 0.9146237373352051, 0.004309098236262798, 0.00033440793049521744, 2.588713505247142e-05, 0.0003395764797460288, 0.003639012575149536, 0.0009677449124865234, 0.00849301740527153]}, {"target": [1], "doc": ["* * @tirithen * *", "you should consider that there be some amount of angular runtime environment  that have to be also load , so it have the logical consequence to have such a bundle only one and sharable  for a set of some component  .", "another factor be the ability to lazy - load of those component on demand and not all of they together and eagerly"], "issue_sim": [-0.026162125170230865, 0.5459463596343994, 0.18389829993247986], "prob": [0.0015985211357474327, 0.8682888746261597, 0.35070350766181946]}, {"target": [0], "doc": ["i feel like create a temporary function and then delete it be a bit hacky .", "in my experience , environment variable be use way more heavily in * nix than windows", "with that in mind , i think it probably   make sense to expose a <tag> with the <tag> alia along with a <tag> with the <tag> alia", "<tag> would take a <tag> and <tag> with <tag>   as position <number> and <tag> position <number>", "this would also help with some confusion about env var only accept string as the <tag> parameter would accept a string", "with that in place , the profile can work very similar to the csh : <tag> for <tag> , execute with <tag> , and then evaluate with <tag>", "this , of course , mean expose <number> new cmdlet that will probably not see much heavy usage outside of macos and possibly other * nix", "they be kind of redundant give powershell expose the <tag> variable prefix", "but i still think this be the clean solution", "another possibility be to have <tag> as an alias of <tag> and some kind of logic to set an environment variable when the <tag> alia be call", "i be not real thrill with this solution", "i dislike command behavior change base on <tag>", "this be just as \" hacky \" to i as create a temporary function and remove it"], "issue_sim": [0.25097620487213135, 0.20650511980056763, 0.19407306611537933, 0.38398265838623047, 0.2924094796180725, 0.4043726921081543, 0.2576836347579956, 0.3265554904937744, 0.11740511655807495, 0.34477031230926514, -0.02912084385752678, 0.2917538285255432, 0.19434481859207153], "prob": [0.45006054639816284, 0.004633979871869087, 0.2082202434539795, 0.001679829554632306, 0.004051110707223415, 0.023615945130586624, 0.012416128069162369, 7.064473174978048e-05, 0.0001248222542926669, 0.09812130033969879, 6.726399442413822e-05, 0.00032026131520979106, 0.0006914861151017249]}, {"target": [0], "doc": ["that look awesome , but again , that look like a basic spread and with potential problem like how would you define <tag> ?"], "issue_sim": [0.08912026137113571], "prob": [0.9999697208404541]}, {"target": [10], "doc": ["@wycat here be something that work :", "some comment on what be go on", "first , we have a hard constraint that you can only inherit from a class or interface type , and not from type parameter", "a key reason be that we ca n't properly check whether the base class have property that conflict with the derive class when we do n't yet know the final shape of the base class", "this also highlight the primary difference between <tag> and the <tag> operator : the <tag> operator allow the type operand to be type parameter but do n't cause error when property have the same name", "instead , <tag> recursively apply <tag> to the type of the similarly name property", "so , in the <tag> method , i be \" cast away \" the type parameter  and then \" cast back \" to the intersection type <tag>", "this mean that <tag> end up have the type <tag>", "the fact that you can only inherit from a class or interface type also  imply that you ca n't inherit from an intersection type", "therefore , you ca n't do the last bit of your example where you inherit <tag> from <tag>", "i be definitely open to suggestion on make thing more flexible here , but we be push close to the limit of our type system  ."], "issue_sim": [0.17898525297641754, 0.02492390386760235, 0.4049701690673828, 0.28515633940696716, 0.2512487769126892, 0.2047712802886963, 0.28420907258987427, 0.2739619314670563, 0.4139055609703064, 0.17358729243278503, 0.21255554258823395], "prob": [0.0001828983804443851, 0.0007340930751524866, 0.01440553367137909, 0.13964995741844177, 0.09781128913164139, 0.000743954791687429, 0.03905868157744408, 4.507484118221328e-05, 0.005316170398145914, 0.00018480533617548645, 0.1940792351961136]}, {"target": [0], "doc": ["to give a more concrete example of why fix this be important : set <tag> mean that every new file you add to the <tag> location  be an opportunity to accidentally break thing .", "for example : your code might be do <tag> , successfully import from <tag>", "you later create a file call <tag> at the project root for some testing", "whoops , your exist import of <tag> be now break", "it be ideal if the only thing that can override <tag> be explicit and minimal ; use <tag> without <tag> be the way to do that"], "issue_sim": [0.20700538158416748, 0.3524132966995239, 0.204225555062294, 0.2259840965270996, 0.3882009983062744], "prob": [0.7544874548912048, 0.013126051053404808, 0.007772241719067097, 0.0015528734074905515, 0.7606363892555237]}, {"target": [3], "doc": ["how far will you go with this", "will gridmap then become tilemap3d , and tilemap tilemap2d   for example", "also , node2d and node3d seem a bit generic , why not have spatial2d and spatial3d then", "i think a big ux difference too would be to have control , node2d and spatial , whatever they will be name , directly accessible beneath node in the new node dialog , although node2d and control inherit from canvasitem .", "you ca n't add a canvasitem directly to a tree anyway , so maybe it should not be visible in that dialog", "and as far as method go , i guess there be no need to add a 2d or 3d postfix on those , since you know what you call they on right"], "issue_sim": [-0.03603162616491318, 0.09511129558086395, 0.07295429706573486, 0.37045416235923767, 0.24140512943267822, 0.4124690294265747], "prob": [0.0004626943846233189, 0.060727644711732864, 0.021046077832579613, 0.03104831837117672, 0.0029287829529494047, 0.19964450597763062]}, {"target": [0], "doc": ["if we do this we lose parity with the json object be return from the api .", "that be clearly <number> json array of json object , not a single array of object"], "issue_sim": [0.2795134484767914, 0.3193948268890381], "prob": [0.9413576126098633, 0.03800623491406441]}, {"target": [0], "doc": ["there be another issue <url> where people want to run resolver concurrently so we need to make this configurable"], "issue_sim": [0.3768792152404785], "prob": [0.9995601773262024]}, {"target": [11], "doc": ["that be to avoid a break change now", "ultimately , there will be a break change", "but , we can go this route with a warning temporarily an avoid break it until we have to", "that be exactly it", "basically , <tag> have <number> use now", "the legacy use where it be just <tag> and the new use where it be <tag>", "the legacy use only send the <tag> header when a web server have issue a <tag> and <tag>", "many api and oauth grant flow require <tag> auth without the <tag> or <tag>", "the legacy never error", "the new usage allow for send the <tag> header always and it give a terminate error when you try anything other that http unless you provide the switch", "my goal  be to remove the legacy usage and just standardize on the <tag>   parameter", "that way we can add more authentication method which may or may not use the <tag> parameter  . but that be not a trivial task .", "for one it be a significant breaking change and for another there be a lot of code cleanup associate with it", "so get that do before 6", "0 rtm when it be not really a priority be unlikely", "so that be what the 3rd option be about", "it be more of a \" do nothing until we do it right and when we can doit right , this be how \"", "but i would rather up the security game in the web cmdlets * before * 6", "0 rtm even if some of those measure be temporary", "no , it will stay", "but , to use it , in the future you will need to supply <tag>", "for now , the legacy behavior be leave in"], "issue_sim": [0.018025286495685577, -0.04218010604381561, 0.1518586277961731, 0.034989528357982635, 0.040500346571207047, 0.18384946882724762, 0.46649616956710815, 0.44776564836502075, 0.12188492715358734, 0.47352999448776245, 0.3884984850883484, 0.5757976174354553, 0.16516315937042236, 0.023723706603050232, 0.17916667461395264, -0.0523606538772583, 0.09118044376373291, 0.1743159145116806, 0.10778579115867615, 0.054341740906238556, 0.04681669920682907, 0.09585360437631607], "prob": [0.0002712519490160048, 0.006519437301903963, 0.028390204533934593, 9.154069994110614e-05, 0.000376527284970507, 0.0015560922911390662, 0.0035874764434993267, 0.0006009721546433866, 5.23454127687728e-06, 0.02252998575568199, 0.00024201645283028483, 0.09149784594774246, 0.0004030657873954624, 2.4269256755360402e-05, 9.138992754742503e-05, 3.510690658004023e-05, 0.0017812344012781978, 3.387656033737585e-05, 4.66941564809531e-05, 9.544372733216733e-05, 0.0004536781634669751, 0.0003809358167927712]}, {"target": [0], "doc": ["typescript do not follow semver ."], "issue_sim": [0.3260093927383423], "prob": [0.9997804760932922]}, {"target": [5], "doc": ["i think this be one of the key part", "the video of the demo @stevel - msft   post show difference people want in their experience", "steve have a two line prompt which use <number> colour , but i would _ hate _ the time for the last command show in red", ", or the two colour for the path or ps in a different colour", "i want the prompt as small as possible - in windows terminal and vscode i start powershell with -nobanner and be one of those who complain with the integrate terminal start use in 1970s mainframe style banner", "i prefer original window tab expansion to the ctrl - space / unix style , i prefer the predictive one line to many line ....", "* * what i want as a user * * be", "minimum chaff and distraction on the screen", "i <tag> want time in my prompt , nor git status", "i trim the middle out of the path to keep the prompt short", "- compare steve 's prompt with mine", "by all mean put error in red but most other colour be actively bad", "command should not be \" chatty \"   this sort of output be ok once", "but it just slow i down , i have to read it to discover that i do n't need to read it and for the last <number> year i 've be direct that kind of thing to null", "something which tell i that after a pause of <number> - <number> second the command have n't stop , and be do _ something _    thing which do this in limited space  fill in * between", "thing which print a long list , be bad", "how many line would @powercode 's example leave print", "* * as an author * *", "i keep what i write to the console to a minimum , but i do put <tag> in as it serve as a comment as well as a progress indicator", "if someone use my code want step by step progress they can use <tag>", "when i expect thing to pause i use write - progress - the information in write - progress be n't need afterwards", "as @isazonov   say _ we need to keep current behavior otherwise we break a design of many script", "certainly a lot of my script would no long work as design and i would need to remove most instance of write - progress"], "issue_sim": [-0.06392844766378403, 0.09457777440547943, 0.15292586386203766, 0.06262591481208801, 0.3825083374977112, 0.36385536193847656, 0.024475783109664917, 0.07240849733352661, 0.2661646604537964, 0.18445484340190887, -0.020239409059286118, 0.09165734052658081, 0.21322068572044373, 0.13681234419345856, 0.21404710412025452, 0.022944895550608635, 0.10837677121162415, -0.031426526606082916, 0.30913493037223816, 0.2700474262237549, 0.34741857647895813, 0.21739351749420166, 0.3048052489757538], "prob": [0.003559888806194067, 0.006415982265025377, 0.1633656620979309, 0.0008566194446757436, 0.40885233879089355, 0.34782782196998596, 5.284625513013452e-05, 7.90783524280414e-05, 0.0010191601468250155, 0.00016142675303854048, 3.27376983477734e-05, 5.4550553613808006e-05, 8.656785939820111e-05, 0.06422749161720276, 0.3031569719314575, 6.497543836303521e-06, 5.907716058572987e-06, 1.9597812297433848e-06, 0.04049510881304741, 4.429796899785288e-05, 0.003957195673137903, 4.11770497521502e-06, 0.00536642549559474]}, {"target": [4], "doc": ["thank for the clarification @ryancavanaugh", "i be try to think of scenario where lack of paren would be a problem - instinctively i be assume there must be some", "but it be first thing in the morning and i have n't have coffee yet", "- i be sure you guy cover that off", "i really like the \" local meanings of union types \" possible next step which adjust the type of an identifier in conditional block .", "i think this would be really useful", "that say i think the rule that govern how this work need to be very clear", "i be also curious about the ide experience - would hover over the identifier in a conditional block reveal it as , for example , a dog or a cat|dog", "i be hope for the specific type rather than the union in this scenario"], "issue_sim": [-0.03220772743225098, 0.033641766756772995, -0.07016846537590027, 0.00786832720041275, 0.4342472553253174, 0.07175368070602417, 0.02828836813569069, 0.12800787389278412, 0.20572982728481293], "prob": [0.0008751402492634952, 0.30487436056137085, 0.008620626293122768, 0.005822932347655296, 0.06223643571138382, 0.0006165656959638, 0.043067872524261475, 0.5561037063598633, 0.02007736638188362]}, {"target": [0], "doc": ["it be possible to trigger a css transition on your demand at any time with a smil style vue - component .", "you define a custom transition component ,", "lie it inside the directive you want to perform the transition", "inject the component 's <tag> method into its <tag> component", "then you can call the transition whenever you like", "i 'll finish such a component and publish it in a few day if i 've time"], "issue_sim": [0.5596370100975037, 0.46318644285202026, 0.3565964102745056, 0.3207967281341553, 0.30684205889701843, 0.1044539138674736], "prob": [0.9264256358146667, 0.1697484850883484, 0.002725680125877261, 0.07557214796543121, 7.089953578542918e-05, 0.0012226402759552002]}, {"target": [1], "doc": ["please * * do * * keep open as it be not obvious that one must bind to the option <tag> property when the <tag> and the display text be the same", "the spec be pretty clear that the value should be the text when not specify explicitly .", "btw , this be a pretty tough issue to find if you do n't already know that <tag> be the problem", "see this issue <url>"], "issue_sim": [0.43878668546676636, 0.35958385467529297, 0.19145382940769196, 0.21553686261177063], "prob": [0.24698546528816223, 0.8121206164360046, 0.022822709754109383, 4.458524927031249e-05]}, {"target": [0], "doc": ["this be very useful , but it should allow single line statement for readability .", "<tag> should be allow", "otherwise , this add a ton of newline and would in this case waste the useful of onready", "would be useful to apply the same annotation to several statement", "also , a colon could be use to indicate where the annotation end and where the affected statement begin , to be consistent with the rest of gdscript"], "issue_sim": [0.3034183382987976, 0.06926101446151733, 0.1987536996603012, 0.46588853001594543, 0.3333967924118042], "prob": [0.8709635734558105, 0.001008190680295229, 0.008993810974061489, 0.0012150054099038243, 0.31789156794548035]}, {"target": [1], "doc": ["@vexx32 we should separate what be need by class for dsc vs generically in powershell", "we have an issue that link to all the know limitation of class , but i be not aware of any limitation purely for dsc usage as there be resource write for dsc use class already and the original design be specifically for dsc usage ."], "issue_sim": [0.5085404515266418, 0.4774821996688843], "prob": [0.010165662504732609, 0.9481666088104248]}, {"target": [1], "doc": ["i would expect that. <tag> <tag> <tag>", "print \" hello \" if either a or b evaluate to true", "i think it would make more sense to write"], "issue_sim": [0.2095201313495636, 0.4947398602962494, 0.1671120822429657], "prob": [0.23522213101387024, 0.16079387068748474, 0.07454803586006165]}, {"target": [0], "doc": ["sure it be easy to fetch html but do you get any angular directive and component apply to the dynamically insert html in angular2 ?"], "issue_sim": [0.5999147891998291], "prob": [0.9994408488273621]}, {"target": [2], "doc": ["thank for the fast action", "fyi , a use case for stringsonly be where numeric datum need to be treat as a string", "presumably the information in already store in powershell as a string , so use stringonly would force powershell to quote the string so the program read the datum know it be a string and not numeric .", "an example would be id# which may have lead zero  , especially if the lead zero be significant", "such situation can arise when use variable length code scheme", "another case would be hex datum", "some program will look at <number> and treat be as numeric , even though far down in the same column we might have 09da , which be clearly intend to be hex", "force the datum to be quote would  treat the entire column as string , not just those that have letter in they", "consider the case of encode a binary value into a string", "\" <number> \" might represent two byte code as a string , while \" <number> \"  would represent a single byte"], "issue_sim": [-0.09344834834337234, 0.30403488874435425, 0.4458734691143036, 0.07119476795196533, 0.20246896147727966, 0.07182666659355164, 0.2376648187637329, 0.4906465411186218, 0.20993438363075256, 0.25278908014297485], "prob": [0.0015837019309401512, 0.044133905321359634, 0.2825753688812256, 0.003850124077871442, 0.0030845690052956343, 0.0009630485437810421, 0.22489383816719055, 0.014014221727848053, 0.0018674590392038226, 0.01980540156364441]}, {"target": [3], "doc": ["i would also be interested if there be any update on this ticket", "kotlin be a much well language compare to typescript", "it be my current understanding that the ng compiler be tie to typescript .", "i would love for the angular team to provide the support that the community need to come up with an angular - kotlin integration"], "issue_sim": [0.1023760586977005, 0.49736955761909485, 0.5135606527328491, 0.5493429899215698], "prob": [0.00016692224016878754, 0.006275922060012817, 0.2728691101074219, 0.27265316247940063]}, {"target": [1], "doc": ["@trotyl : because i be not familiar with how the angular compiler work , i do n't fully understand your comment", "it seem to i that if the angular compiler could be use with plain javascript  , than any language compile to javascript could be support :", "- step <number> : compile language x to javascript", "- step <number> : invoke angular compiler", "be this possible today", "if not , would it be a big effort to make this possible", "in the mean time , i guess i need to do some reading about the angular compiler"], "issue_sim": [0.46518880128860474, 0.6316273212432861, 0.3663403391838074, 0.4964311718940735, 0.07780160009860992, 0.057896386831998825, 0.5364120006561279], "prob": [0.14398136734962463, 0.7247307300567627, 0.009883718565106392, 0.015328997746109962, 0.001320046023465693, 0.21359066665172577, 0.045851536095142365]}, {"target": [7], "doc": ["if we decide to change this -- _ there be no more limit to what can be change _", "<tag> be one of the most common command", "and as far as most user be concern , the current behavior _ be correct _ , if only because it be how it have always behave", "the * * reality * * be that <tag> * * be * * how you test if a module be load", "it be a combination function : we use it to test , and we use it to get -- but most people use it to test", "a decade worth of code have be write base on this _ expect _ behavior", "in fact , he _ get _ functionality be n't what people usually care about", "as a result , any attempt to \" correct \" this will be annoying to * * all * * current user , in addition to be a break change for compatibility with windows powershell .", "if we start produce error from core command where there have be none before , the experience for user be go to be a lot like a disaster : break script and module everywhere -- thing that use to work , but do n't work anymore", "write <tag> command do n't solve the problem of break the exist command -- change the command require rewrite hundred of thousand of line of code , and the <tag> command simply wo n't be available on windows powershell"], "issue_sim": [0.15948092937469482, 0.15409569442272186, 0.28603866696357727, 0.3054780960083008, 0.06314793974161148, 0.3481842875480652, 0.11104541271924973, 0.43380436301231384, 0.4298486113548279, 0.48800304532051086], "prob": [0.005315470974892378, 0.0018441755091771483, 0.06829376518726349, 0.002107668900862336, 0.08159802109003067, 0.0002800866204779595, 0.0013370990054681897, 0.6354105472564697, 0.037221759557724, 0.0850897878408432]}, {"target": [1], "doc": ["workaround be to use webpack", "webpackdeveloper need not call compilecomponent because it inline template and css as part of the automate build process that precede run the test ."], "issue_sim": [0.5138125419616699, 0.4754200577735901], "prob": [0.008690616115927696, 0.981549859046936]}, {"target": [1], "doc": ["that be the expect usage , not a workaround", "one can never have eager circular dependency ."], "issue_sim": [0.15191280841827393, 0.2599860429763794], "prob": [0.30091193318367004, 0.6157620549201965]}, {"target": [0], "doc": ["so how would you programmatically create a component which would be equivalent to <tag> , without know which prop a component be accept , so that all which it be not , become attribute ?"], "issue_sim": [0.49644726514816284], "prob": [0.9996141195297241]}, {"target": [1], "doc": ["i would say most of the time module import should be not be rename", "this make it easy to follow the logic , specially with reexport  .", "in that spirit , a rename should be a global operation rather than a local one", "the api have an entry point for local reference , which be occurrence , it be visible in ide today in the form of highlight the text", "i would expect your request for a new gesture to make a local rename , be expose in the ide", "support this new api on the ts side should be trivial", "i just do not think that we should change the behavior for all user of the exist rename api"], "issue_sim": [0.6129880547523499, -0.06139866262674332, 0.335231214761734, 0.3091878592967987, 0.4603523313999176, 0.23804296553134918, 0.37520772218704224], "prob": [0.006424150429666042, 0.9619311094284058, 0.0054053617641329765, 0.029867684468626976, 0.00833125039935112, 0.00011204839393030852, 0.004272913094609976]}, {"target": [1], "doc": ["to get the ball rolling ;", "i need this feature in a recent project , and solve it by write two mixin : <tag> and <tag> .", "you 'd apply <tag> to a parent component , and it would create an <tag> object on the vm with whatever datum you want", "next , call <tag> on a child component would recursively look for a parent component that expose a certain property , and set it on the child component"], "issue_sim": [0.01139834150671959, 0.42264360189437866, 0.5613902807235718, 0.48653483390808105], "prob": [0.012475013732910156, 0.39973610639572144, 0.06448498368263245, 0.26957446336746216]}, {"target": [0], "doc": ["if i have access to the propose function , i would be able to pass it to the server easily via the <tag> variable"], "issue_sim": [0.36859384179115295], "prob": [0.9999446868896484]}, {"target": [1], "doc": ["~~i have create a c # implementation of this", "not only be they more precise for integer , and useful with dictionary and other integer coordinate / grid , but we can also perform more optimization with they , such as bitwise operation for modulus .", "~~however , i believe that <tag> and <tag> be well name", "we be already create a new name , <tag> instead of <tag> , so why include <tag>", "while it could be useful to have other variant , such as <tag> , <tag> , and <tag> , it would make the most since to start with <tag> and make it the default"], "issue_sim": [0.19356819987297058, 0.46146896481513977, 0.26062798500061035, 0.24573339521884918, 0.3440287411212921], "prob": [0.0002156249975087121, 0.7314749956130981, 0.0012408419279381633, 0.009047338739037514, 0.577081561088562]}, {"target": [0], "doc": ["this be go to make functional component so much easy to use !"], "issue_sim": [0.27675867080688477], "prob": [0.9993690848350525]}, {"target": [0], "doc": ["almost everything be reusable through a mixin .", "you can use a function that generate a mixin", "this way you can bind a the", "i can not put that example on a fiddle now", "but i would do it asap", "however , i agree it be a very common use case for input to have", "a proper api or at least an explanation on the", "on tue , <number> sep <number> , 18:48 francisco loureno , notifications@github"], "issue_sim": [0.2147018313407898, 0.35385799407958984, 0.07673217356204987, 0.16946770250797272, -0.009227696806192398, 0.09456180781126022, 0.13127614557743073, -0.09029915928840637], "prob": [0.7999749779701233, 0.005931268446147442, 0.001719623920507729, 0.004258942790329456, 0.003217941615730524, 0.02458580583333969, 0.02411460317671299, 0.0850224643945694]}, {"target": [2], "doc": ["@groud its also the order of execution and the type of connection", "there be way more concept to look out for in the nodegraph than the event sheet", "even if you add icon to node , you still have to explain that the order of event be dictate by the white line , also what the other color mean .", "you still end up with a spaghetti graph that be hard to read - your eye have to travel all over the place to figure out what be go on in someone else 's graph", "you be not the right target audience - you be an experienced c++ programmer", "please test this with people who be non - programmer and you will start to see what i mean"], "issue_sim": [0.023226814344525337, 0.1475970447063446, 0.27076876163482666, 0.17049643397331238, 0.15379586815834045, 0.13323411345481873], "prob": [0.0016170227900147438, 0.13413487374782562, 0.4781620502471924, 0.5341593623161316, 0.0006026793853379786, 0.0050758789293468]}, {"target": [3], "doc": ["this issue be deep that its title , but i be not go to become over - defensive", "yes , maybe the title be misleading", "i do n't mean that game engine will run fine without graphic card at all", "i mean that if game engine architecture give this option to developer , it be more flexible to adapt to any graphic card and platform peculiarity , and not just the rigid opengl 3.0 support .", "i be just think that there be engine like of klei entertainment that give a good performance in 2d where other engine be equally sluggish in 2d and 3d", "just a random link about sdk that promise to get to assembly optimization as need <url>", "back in the day people tune their game to specific graphic card , and there be no internet to sync the effort , and game be fast for that hardware", "internet should have be add something , like distribute competence to implement and test specific feature / optimization on specific graphic card , but i do n't see it happen", "game engine attract a lot of developer , much more than project like <url> that try to close this issue for opengl", "i just wish there could be a great framework / constructor for such effort in 2d space"], "issue_sim": [-0.05695547163486481, -0.019139068201184273, 0.4923352897167206, 0.6095767021179199, 0.6052303910255432, 0.3369256854057312, 0.32140251994132996, 0.3954686224460602, 0.563364565372467, 0.4235200583934784], "prob": [0.01861284114420414, 0.002687945496290922, 0.008943636901676655, 0.6035946607589722, 0.015340864658355713, 0.0008538291440345347, 0.023050477728247643, 0.046237342059612274, 0.009204057976603508, 0.0010059269843623042]}, {"target": [1], "doc": ["tldr : an example where structural component be verbose to proxy", "i agree that a new block inheritance will cause much confusion and that structural component should be the solution for this .", "but i also have sympathy with @simplesmiler for extend component , namely the point <number> in op 's issue", "i have a realistic example at hand", "i do n't know much about functional component with template , so i wo n't include it in this example", "consider a generic map component , say google map clone", "* it accept * * many prop :* * width , height , zoom level , lat / lng ,", "* it emit * * many event * * : onzoomin , onzoomout , onpinclicked , onmapmoved ,", "* it expose * * many slot * * : a header , a zoom control , a view type control  , some pin on map , a popup  , a legend", "the map component be very powerful", "arguably it be so powerful as to be a god component , but these feature be cohesive enough to be organize into one component", "so i choose to implement the map by structural component with default slot , rather than other method in op issue like split into small / representational component", "then user will have to proxy all the prop / event / slot", "for example , this be an imaginary implementation for component <tag>", "now , we want to create another generic map component , but for vip user : the only difference be that pin on vip map will have shiny border and filament", "it be quite verbose to proxy all event / slot", "proxying slot be error - prone , maybe due to the same name of original slot and new proxy slot", "we already have <tag> to reduce the verbosity of proxying prop , but it seem we can not concisely proxy event or slot in template", "indeed , we can sidestep tedious work by use render function and jsx", "but it go to op 's point <number> : mix template and render function be hard for understand"], "issue_sim": [0.3732934594154358, 0.44151532649993896, 0.23585858941078186, -0.0039648814126849174, 0.4370654225349426, 0.2842954993247986, 0.13703152537345886, 0.030505148693919182, 0.20504291355609894, 0.2784568965435028, 0.4158500134944916, 0.4911067485809326, 0.19227585196495056, 0.22562560439109802, 0.2860412299633026, 0.2071046531200409, 0.23970597982406616, 0.49321460723876953, 0.41538006067276, 0.3366398215293884], "prob": [0.030477307736873627, 0.3917654752731323, 7.593761256430298e-05, 2.3425993276759982e-05, 0.002426132559776306, 0.00014665017079096287, 0.0014091662596911192, 5.4159259889274836e-05, 0.013540515676140785, 5.66756125408574e-06, 0.004449119325727224, 0.0022068643011152744, 0.00011162637383677065, 8.4871549915988e-05, 0.015563253313302994, 2.5220870156772435e-05, 0.00016894712462089956, 0.01744253560900688, 0.0007363965851254761, 0.00038365586078725755]}, {"target": [0], "doc": ["yeah , that have weak clickability indicator for sure .", "a recognizable button would provide a well ux"], "issue_sim": [0.24724698066711426, 0.2706248164176941], "prob": [0.7085186839103699, 0.17283034324645996]}, {"target": [1], "doc": ["the problem be not link module dynamically , this be super easy", "the. problem be create module for every single platform godot support .", "on we d , jun <number> , <number> at 2:13 pm , bojidar marinov notifications@github"], "issue_sim": [0.4271273612976074, 0.4478551149368286, 0.03176019340753555], "prob": [0.009795690886676311, 0.9804934859275818, 0.006862005218863487]}, {"target": [4], "doc": ["the languageservice api  , and the matching host , languageservicehost  , be build for ide / editor scenario", "the ls be mainly design to be able to answer question like get completion at position , quick info , format edit , etc", "one thing that the ls have to do well be update the state after an edit", "the compiler api ,  , and the match host implementation , compilerhost , be design for generate output and error give a set of source", "obviously there be an overlap . the ls be a high level abstraction than the compiler api .", "but , assume i understand your need correctly , you do not really need it", "if i understand correctly , what you need be give some source file , generate js / map / declaration , and compute error", "and once you build that state , you want to keep it in memory and reuse it if one or more file change , and quickly regenerate error and output", "if this be not an accurate representation of your scenario please let i know", "generate output and error be do through <tag> and <tag>", "cache state , and reuse it be do through two thing :", "cache sourcefiles  , i", "if a file do not change , do not parse it again", "reuse program structure : i", "do not resolve module on disk if the file have not change and we resolve they before", "for reuse the sourcefiles , the compilerhost api have <tag> method specifically for this", "it allow you to chose either to parse it , i", "call <tag> or get it from a cache , say a previous program object that have parse this file , e", "this be what the <tag> implementation do", "the second be achieve by pass the old program to the <tag> call , see <url>", "the ls can do this for you as well , as part of other thing , but as note before , you do not need the ls to do this", "i think the request here be for an api , that give a program instance , and a set of edit , generate a new program with reuse as much as possible", "if this be accurate , then we can definitely do that"], "issue_sim": [0.23363716900348663, 0.0488717183470726, -0.03622698783874512, 0.24424225091934204, 0.10321605205535889, 0.016581859439611435, 0.35024696588516235, 0.27001243829727173, 0.07590573281049728, 0.22458994388580322, 0.16515929996967316, 0.11655495315790176, 0.18154580891132355, 0.021602127701044083, 0.2666133940219879, 0.24660784006118774, 0.07706038653850555, 0.23847487568855286, 0.09916725754737854, 0.042830754071474075, 0.14963334798812866, 0.15875835716724396, -0.004173273220658302], "prob": [0.01818056032061577, 0.044371362775564194, 0.08508319407701492, 0.09382195770740509, 0.13199685513973236, 0.006383878644555807, 0.05539447069168091, 0.016328684985637665, 0.0014373405138030648, 0.002902805805206299, 0.002617861609905958, 0.0005881552351638675, 0.0014742892235517502, 0.0006608719704672694, 0.006157456897199154, 0.013829478062689304, 0.0008786814869381487, 0.00487352954223752, 0.0004247449105605483, 0.007248005364090204, 0.13807915151119232, 0.12576070427894592, 0.0074757179245352745]}, {"target": [0], "doc": ["i mean not asynchronously load that chunk since it be so small , it be unnecessary .", "it do n't change the rest of the code , specially the async component part"], "issue_sim": [0.2134348303079605, 0.24589163064956665], "prob": [0.9605929851531982, 0.015016097575426102]}, {"target": [0], "doc": ["it should use the   like the other operating system .", "be there any reason to have windows be different"], "issue_sim": [0.10362155735492706, 0.16294819116592407], "prob": [0.5546906590461731, 0.3655754029750824]}, {"target": [0], "doc": ["i think that kind of precision be overkill and may give user a false sense of how faithful the actual sleep duration be to the request one ."], "issue_sim": [0.3011128902435303], "prob": [0.9999681711196899]}, {"target": [0], "doc": ["i honestly think this be simply because v8 produce much well optimize machine code than nashorn ... not much can be do in vue / react to solve that :/"], "issue_sim": [0.3755558729171753], "prob": [0.9999934434890747]}, {"target": [5], "doc": ["not only over winrm but also ssh", "as of now , you ca n't directly execute python  remotely", "this maybe * * by - design * *", "now , what it can be do from powershell remotely , you can execute and collect / save the result from python with powershell", "the follow command line work :", "i see the benefit of use python remotely as well as other tool .", "it would be a good feature to add"], "issue_sim": [0.21294866502285004, 0.4254891276359558, 0.030439123511314392, 0.44161516427993774, 0.14576926827430725, 0.3579346835613251, -0.0359814390540123], "prob": [0.007263414096087217, 0.017413634806871414, 0.011519566178321838, 0.7852763533592224, 0.014464852400124073, 0.6714717149734497, 0.007895526476204395]}, {"target": [3], "doc": ["@stevel - msft the behavior you be show here , to i , be way more consistent than current write - progress ' pop - up ' like behavior", "never understand why it be ' that fancy ' in first place", "* when i expect thing to pause i use write - progress - the information in write - progress be n't need afterwards", "my understanding of the purpose of write - progress be to inform the user / viewer .", "not for pause purpose per se", "with that in mind i do not get why it be perceive as a problem when info remain afterwards on the console output", "we be inform a user on the console , not write a window like interface with pop - up and all"], "issue_sim": [0.4164687991142273, 0.05124712735414505, 0.34741857647895813, 0.2529051899909973, 0.10971833020448685, 0.2360413670539856, 0.1314617097377777], "prob": [0.027930987998843193, 0.04999351128935814, 0.08751887083053589, 0.16232755780220032, 0.00041088717989623547, 0.023301908746361732, 0.055860165506601334]}, {"target": [6], "doc": ["@shamimislam i globally agree with you about : \" if you need to destroy a lazy loaded module to clear your datum / avoid memory leak , your problem be elsewhere \"", "but i still want this feature because i have the follow use case :", "i have a huge \" macro app \" which assemble different tool for all the different job in the same company", "each employee be allow to use some of the tool", "i have a kind of plugin system    where each tool be a plugin / ngmodule and each time a user log in , base on the user permission , i be load only the allow tool", "but when the user logout , i specifically need to unload all the tool because the next user to login might not have the same permission and therefor will not load the same tool", "in my case , it be not about clearing datum ,   it be about \" clear / unload code or destroy instance \" the next user will not be allow to use ."], "issue_sim": [0.5295379161834717, 0.12374302744865417, 0.036676082760095596, -0.015168866142630577, 0.3344798982143402, 0.31922924518585205, 0.4146047830581665], "prob": [0.00018886529142037034, 0.00013658466923516244, 0.015014010481536388, 0.0008821436786092818, 0.6401380896568298, 0.3161495327949524, 0.4187542498111725]}, {"target": [1], "doc": ["not a very good idea", "in my mono - repo setup , the plan would be to have a config - like sub - repo , and it could end up get put at a high level , so you 'd need to do <tag> , essentially guess where <tag> would put thing , which be exactly why i suggest some way to follow the build - in node module resolution algorithm ."], "issue_sim": [-0.0106460340321064, 0.563153862953186], "prob": [0.02770831622183323, 0.9614048004150391]}, {"target": [0], "doc": ["please consider use a more abstract <tag> option or something rather than just the react native particular case .", "in my project i have a \" custom \" <tag> along with <tag> , <tag> and <tag> , and it be all solve gracefully in every tool around from babel to webpack only because there be a way to tweak extension"], "issue_sim": [0.440243661403656, 0.5844902992248535], "prob": [0.7791503667831421, 0.5016582608222961]}, {"target": [0], "doc": ["we be in general try to avoid add more alternative syntax to the template system , and in this case the benefit  really be n't worth the addition imo .", "- the fact that you can not use space in an attribute name make most of the proposal impractical", "- what @linusborg suggest might be the good solution", "however , many of the modifier be actually compile into code during the compilation phase , thus make it costly to add runtime support for they", "i think the good path forward would be a userland library that expose the <tag> method and implement the runtime behavior for each modifier internally"], "issue_sim": [0.20858076214790344, 0.1665683090686798, 0.08865856379270554, 0.21654394268989563, 0.39869266748428345], "prob": [0.35234853625297546, 0.06479252129793167, 0.0007046293467283249, 0.2940281927585602, 0.03237249329686165]}, {"target": [1], "doc": ["ok , that be good to know", "hopefully we can gather enough experience to be able to create some kind of troubleshoot doc for flicker in ssr since it seem to be very commonly encounter and the solution do seem to vary across a number of scenario ."], "issue_sim": [-0.06616885960102081, 0.1896045207977295], "prob": [0.0014888690784573555, 0.9986792206764221]}, {"target": [1], "doc": ["what about provide a service that do that", "if it be not hardcode in the router it be easy to customize / extend/ ...."], "issue_sim": [0.12722653150558472, 0.23087100684642792], "prob": [0.00456429086625576, 0.9984378218650818]}, {"target": [0], "doc": ["this be a geneneral temporal dead zone issue in javascript ."], "issue_sim": [0.25034746527671814], "prob": [0.9999696016311646]}, {"target": [0], "doc": ["correct i if i be wrong , but be n't the problem with plain js that it ca n't be statically analyze ?", "afaik there be now way the aot compiler can do it be work without the metadata provide by typescript"], "issue_sim": [0.3498043417930603, 0.6368486285209656], "prob": [0.756415605545044, 0.39690250158309937]}, {"target": [4], "doc": ["i have miss the python <tag> power operator as well , sometimes", "add a suggestion that this operator could be in the form :", "which be perhaps more clear , more discoverable , and invite less confusion than <tag> or <tag>", "that would be different to the arithmetic syntax  , but consistent with <tag> syntax", "powershell tend to like full word , so <tag> be another option , but <tag> have the advantage of match the name of <tag>"], "issue_sim": [0.3700941205024719, 0.2570436894893646, 0.18955697119235992, 0.3784753978252411, 0.3157802224159241], "prob": [0.2115129828453064, 0.0201504435390234, 0.3220331072807312, 0.009376121684908867, 0.3125114440917969]}, {"target": [2], "doc": ["@lzybkr your previous comment be from almost a year ago", "since then it seem like there be plenty of break change go from windows powershell to   powershell core", "this seem like the right time if there ever be one to fix the parser ."], "issue_sim": [-0.05074277147650719, 0.25151222944259644, 0.10020945966243744], "prob": [0.015166656114161015, 0.6396389603614807, 0.18618810176849365]}, {"target": [0], "doc": ["if your need be to import file form outside the project folder , create a symbolic link should work ."], "issue_sim": [0.3470286428928375], "prob": [0.999995231628418]}, {"target": [0], "doc": ["it be a necessary feature for dry code in my opinion .", "right now i have to create <number> watcher that do the same thing for a form with a lot of input", "a custom modifier would solve everything"], "issue_sim": [0.11892721056938171, 0.23544570803642273, 0.2512589693069458], "prob": [0.6860487461090088, 0.28943273425102234, 0.0023572854697704315]}, {"target": [1], "doc": ["@posva this be actually intend for one off computation you wo n't need anywhere else", "it be simple , quick , and offer more readability .", "for more complex and reusable computation and functionality , i always use the approach you mention"], "issue_sim": [0.1780785471200943, 0.03596215322613716, 0.3852784335613251], "prob": [0.0021917587146162987, 0.9867664575576782, 0.009938164614140987]}]}